Has anyone seen a ‘not enough signers’ error with a tx where the signers are the same for both instructions in the message?
interesting, will try
You can also pass the `bump_seed` into the program so the program can use the quicker `Pubkey::create_program_address` call
awesome thanks. will read up on preimage attacks.
Yep that's the only way.  The program needs to ensure the derivation is correct before trusting it.  cc: preimage attacks
I see. Is that the only way?

It just felt weird that I had to both pass it in and then again derive it inside the program with this:
```
let (pda, bump_seed) = Pubkey::find_program_address(&[b"escrow"], program_id);
```

I've tried to recreate it manually using the below, but I'm getting lifetime errros for all the references inside the `new()`:
```
        let pda_acc = AccountInfo::new(
            &pda,
            false,
            false,
            &mut empty_lamports,
            &mut empty_data,
            &sys_prog_id,
            false,
            0,
        );
```
i'm interested in the case where a shared account is used for storage, or possibly shard storage accounts in the external app, is there any material for reading on this matter?
hi, what is the intended way to track the program execution? i've delved into SPL programs and couldn't find any signs of a program feedback, or how to query something. am i supposed to request the account from a 3rd party app and unpack, and validate it's state? or sub to solana node and catch transactions with the program address involved? anyone?
Hey you need to pass the PDA address into the program instruction just like any other account
Anyone familiar with `solana-program` library who might know?
Ok, I just got this notification inside VSC, so the problem is probably not Solana related
I have a strange problem. All of the sudden the Solana command cant be found anymore. I tried to reinstall Solana but I get this when I try to: `Install is up to date. 84f0234 is the latest commit for stable` 
I use WSL Ubuntu 20.04 and VSC. Any Idea what might be the reason for this problem and/or how I can fix it?
is there a way to turn a `pda` account derived like so:
```
let (pda, bump_seed) = Pubkey::find_program_address(&[b"escrow"], program_id);
```
into an instance of AccountInfo - https://docs.rs/solana-program/1.7.4/solana_program/account_info/struct.AccountInfo.html?

I'm looking for something like this (the below doesn't work):
```
let pda_acc = AccountInfo::unpack(&pda.to_bytes())?;
```
I just used onProgramAccountChange for my purpose
Looks like there is some sort of database I need to specify using —db-path I don’t see this in the documentation is this new?
Am I missing something?
I already tried adding the same signer again as there should only  one but I can't seem to fix it
To answer my own question (in case anyone looks for this in the future): you do it 2 steps, 

1)unpack the byte array into an account info
2)call the .amount property on it

```
let temp_x_info = TokenAccount::unpack(&temp_x_acc.data.borrow())?;
temp_x_info.amount
```
BUt when I call try_sign, I get `NotEnoughSigners` error
Where the payer is the source of the transfer
Hey! So I'm trying to create a tx for the spl-token where I create an associated account and do the transfer in a single message
Yep, definitely: https://docs.solana.com/cli/deploy-a-program#immutable-programs
Are there any way to make programs immutable?
now you're thinking like a trader 😉
Yeah maybe I can just have excel do it or something xD
we don't have an easy interface to do this unfortunately (PRs are welcome!) but the idea is to encode it as a `Numberu64` as the first 8 bytes of the curve parameters in https://github.com/solana-labs/solana-program-library/blob/924092929f1ba7bdd3d7ae31df61fd69aaf33784/token-swap/js/src/index.ts#L77
I'd recommend converting your values away from the decimal representation and into whole tokens in your CSV, that'll be the easiest solution
Oh alright thank you, not entirely sure how to do that but I’ll give it a go
where to insert this offset value btw ? if i need to iinsert other than  zero
okay and the tokenB value can be anything so it will be
0+tokenB 
instead just use tokenB
the idea is that you should just use a normal constant product curve if you're doing offset = 0
why is that 🤔 ,  is there any restriction on  provideing offset
how would I get the balance of a token account from inside a solana program? By token account I mean one created through [spl token](https://github.com/solana-labs/solana-program-library/tree/master/token)
likely you need to set an offset that isn't 0
yes,
You're running into a different error this time! "curve type" != "curve parameters"
or this  got wrong ?
hey <@!539801435571748868> i am running  js, but got this error(provided curve type is invalid ) , should  i change the program id in rust   also
Ah, looks like you'll need to modify the code if you want to use decimals for SPL tokens:
> NOTE: the CSV expects SPL-token amounts in raw format (no decimals)
Using the token distribution CLI
thanks a lot <@!539801435571748868>  will do that
depends on how you're accessing the program -- if it's through Rust, you'll need to change the declared program id in the code at [1], if it's in JS, it's at [2]

[1] https://github.com/solana-labs/solana-program-library/blob/924092929f1ba7bdd3d7ae31df61fd69aaf33784/token-swap/program/src/lib.rs#L18
[2] https://github.com/solana-labs/solana-program-library/blob/924092929f1ba7bdd3d7ae31df61fd69aaf33784/token-swap/js/src/index.ts#L18
🤔  how  to confiigure that
ah, you'll need to use the program that you deployed, and not the one already existing on devnet
I'm confused, which CLI do you mean?
hey <@!539801435571748868>  thanks a lot  for  reply, i changed the constrained to the offset, i build the whole spl  again and deployed to but the  same error came up, 
heres what i did
cargo build  
cd /token-swap
cargo build-bpf
deploy  on devnet 
but encountered the same error am  i missig something please reply
<https://discord.gg/DTVtTepv> bonfida discord
Thank you! Is there a way to do this in the CLI?
Grazie!
Sure, you'll just have to pass the token account keypair as the owner in Node, then you have full ownership over the account as normal (assuming that you have the owner token account keypair)
Seems like you might be right, perhaps ask the bonfida team or put in a PR to them directly?
Hm, theymight still be going through the backlog of grant applications, I'd sit tight for a bit longer, sorry for the wait
Account = the base structure for Solana, containing data + lamports [1]
PDA = Program-derived address, specifically used when a program needs to "sign" something.  These PDAs can be used as accounts on Solana [2]

[1] https://docs.solana.com/terminology#account
[2] https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
Already done a month ago, nobody answered, does it mean 'no thank you' or could it mean that you didn't see that?
Sure! You can fill out the form over at https://solana.com/grants
We don't have an easy command for that just yet, it's been high on our list of things to do, but not high enough unfortunately 😕 you can clone [1], [2], or [3], and there's [4], and probably many others!

[1] https://github.com/solana-labs/dapp-scaffold
[2] https://github.com/mvines/solana-bpf-program-template
[3] https://github.com/mvines/solana-cli-template
[4] https://dappstarter.decentology.com/
Can someone answer this ? Thanks
WSL is supported, looks like you'll need to add `/root/.local/share/solana....` to your PATH instead of your user's `.local`.  I'd recommend installing the tools for your user, and not as root
Hm, that should be working.  Are you using some mismatched versions of web3 and the solana SDK?
Hm, that's tough, you could try doing a `logsSubscribe` that mention your program ID, which then gives you the signatures, which you can poll separately.  What do you think? https://docs.solana.com/developing/clients/jsonrpc-api#logssubscribe for the info
It's probably using the whole token amount, if you need to convert between decimal and whole token amounts, you can use `ui_amount_to_amount`: https://github.com/solana-labs/solana-program-library/blob/924092929f1ba7bdd3d7ae31df61fd69aaf33784/token/program/src/lib.rs#L21
You're using the provided "production" constraints, which don't allow the offset curve.  If you want to use that curve, you'll need to update the constraints, rebuild the program, and deploy it.  Here's the line you'll need to change in the code: https://github.com/solana-labs/solana-program-library/blob/924092929f1ba7bdd3d7ae31df61fd69aaf33784/token-swap/program/src/constraints.rs#L77
Difference between PDA and Account?
Anyone I can talk to for grants?
can I create an empty project ? Let's say as in hardhat npx hardhat

Has any got solana to work with windows10+WSL? Gets installed with: sh -c "$(curl -sSfL https://release.solana.com/v1.7.3/install)" and added to the PATH in /etc/environment.  But get the error: solana is not a recognized command.
Is there a way to do this without the CLI, using NodeJS?
Getting this error while calling getTokenAccountBalance in typescript. Any help please

  let testTokenAccount = new PublicKey("5zYwbHfQ1LJdgNq8JcCHzbd5ZUxv95qLDrBonksVfuo5");
  await connection.getTokenAccountBalance(testTokenAccount);
Is there way to subscribe on transaction to specific program ?
And if so what’s the best way to take my decimal numbers and convert to lamports
https://github.com/solana-labs/solana/tree/master/tokens for this it seems you can’t use decimals. Is the format lamports?
hey <@!466984915376799748>  can  you help?
Ahh, that sounds like it makes sense. I'll give that a go. Thanks again for the help.
The PDA pubkey will go where you have `program_id`, then you'll pass the seeds used to generate the PDA in the last parameter to `invoke_signed`
Your program can't directly own the token account.  It needs to do so via a PDA. https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
```rust
fn process_transfer_money_example(
  program_id: &Pubkey, 
  accounts: &[AccountInfo]
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();
    let from_account_info = next_account_info(account_info_iter)?;
    let to_account_info = next_account_info(account_info_iter)?;
    let mint_info = next_account_info(account_info_iter)?;
    let token_program_id = next_account_info(account_info_iter)?;

    invoke_signed(
        &spl_token::instruction::transfer_checked(
            token_program_id.clone().key,
            from_account_info.clone().key,
            mint_info.clone().key,
            to_account_info.clone().key,
            program_id,
            &[],
            100,
            6
        )?,
        &[from_account_info.clone(), to_account_info.clone(), mint_info.clone(), token_program_id.clone()], // How do I add the program here?
        &[&[]],
    )?;

    Ok(())
}
```

Here is an extremely small function that attempts to transfer funds between two accounts. The from account is owned by the program. The to account is owned by a random keypair. This code fails because the program isn't provided as an account_info in the `invoke_signed` call.  My question is how am I suppose to add the program_id to the account info array so that the transaction can run successfully.
This assumption did not hold true. I realize now that the line I linked isn't the program_id being passed in. It is the id of a different program.

So I still have some misunderstanding with what I am trying to do.
Ahh, I guess the trick is this: https://github.com/solana-labs/solana-program-library/blob/02397e9152a8f9ee4c1596afb7d940f08294e8bd/associated-token-account/program/src/lib.rs#L83

I need to pass the program in as an account. Then it can be used for the transaction
Similar to this system assign call from the ATA program. https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/src/processor.rs#L77-L88
That's just it.  The program code is where the instruction needs to be constructed and `invoke_signed()`  called
Hello I am still waiting for the response of the above message.
It is a rust test. I wanted to get the transfer call working in a rust test to see how it all operates before trying to add it to the program code.
That's the client?
Yup, I am tracking that. I've got something like this 
```rust
let mut transaction = Transaction::new_with_payer(
        &[
            transfer_checked(
                &spl_token::id(),
                &from_account.pubkey,
                &mint.pubkey,
                &to_account.pubkey,
                &program_id,
                &[],
                100,
                6
            ).unwrap(),
        ],
        Some(&payer.pubkey()),
);
let recent_blockhash = banks_client.get_recent_blockhash().await.unwrap();
transaction.sign(
        &[&payer],
        recent_blockhash,
);
```
This fails with NotEnoughSigners because I think it expects the program_id to be a signer. I'm not sure how to give it what it wants when I don't have a keypair to sign with.
https://docs.solana.com/developing/programming-model/calling-between-programs#cross-program-invocations
Your program should call SPL Token's `TransferChecked` instruction via `invoke_signed()`
I've got another question for you fellas. Say I have a spl token account owned by the program. I want to use an spl token transfer instruction to move funds to a different account. The transfer instruction wants the account owner as a signer. Given that my program_id is just a pubkey, how should I go about signing for this transaction with my program_id?
https://giphy.com/gifs/peacocktv-parks-and-recreation-rec-peacock-tv-mWCtOYKrk7rb0Z4EeO
`solana-keygen grind --help`
Is there an easier way than https://github.com/mcf-rocks/solanity to find a solana base58 vanity address? I saw you had one <@!445425471027544095> and thought I might have a crack at creating one for my project.
The connection is actually not maintained, it auto-reconnects
thank you <@!472178514846679041>  I got those as well, and they are fine ... it's just with solflare that it's a bit odd
But ultimately if you're building it for prod you'll have to design around the tabbed wallet experience
You can use a browser extension based wallet like phantom, mathwallet or sollet eg. https://chrome.google.com/webstore/detail/phantom/bfnaelmomeimhlpmgjnjophhpkkoljpa?hl=en
Hello everyone Im pretty new to blockchain and Im building a payment stream web-app, but to stay connected to Solflare wallet from my web-app I need to maintain Solflare open on another tab.. is there another way around this ?? thanks
That cleared it up. 👍 Thanks for the info.
Not a thing.  That's simply the program id of the associated token program.  It's part of the address generation, but may be deployed at another address during development, so is allowed to be a parameter
Similarly, what is the "associatedProgramId" for a Mint?  https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L332
Thanks, that clears things up a lot!
Exactly
Ok, so for a given mint, a user may have an arbitrary number of accounts related to that mint (created using createAccount()), but the user will have a unique "associatedAccount" that is generated deterministically from the user's pk and the pk of the mint?
Owning program has nothing to do with signing.  Only instructions declared by a program are allowed to write to the program's owned accounts
It's a separate program. https://spl.solana.com/associated-token-account
Hey all, say I've got an account that is owned by the program. I need to make changes to that account's data. That sounds like I need to have the program sign for the transaction. But my program_id is just a pubkey. So how do I sign for the transaction?
The token program documentation doesn't seem to mention "associated token accounts" https://spl.solana.com/token
I've also been experimenting with the javascript spl-token library, but I'm still confused about some bits.  For example, what's the difference between createAccount (https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L446) and createAssociatedTokenAccount (https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L494)
The Rust bits for SPL Token are already deployed on chain, you don't need to reproduce or redeploy them.  It should be enough to do what you describe by modifying the JS portion of that example
they use it in this example, where rust is in the program folder, and react is the front end.. im figuring i should be able to make a front end tool in this that lets me mint a simple token - https://github.com/solana-labs/dapp-scaffold
What I referenced is a JS library
You shouldn't be trying to use Rust with React, AFAIK
im only seeing a command line utility for any tutorials related to that though, nothing that seems to use rust with react
You want `@solana/spl-token`
Thank you, will apply
i see web3js packages etc but nothing for minting, just checking acct balances
is there anything online anywhere that shows how to interact with solana using javascript and rust?
hello, im having a hard time finding an example of spl-token integrated into a react site. i'd like to make a simple minting tool on react but i cant find anything to help
For the blockhash that you used, save the associated `lastValidBlockHeight`.  Once the current block height is greater, the transaction is invalid if not yet confirmed
We have a database off chain and we distribute rewards on-chain given the data. Is there a canonical way to handle transaction confirmation failing? I seems kind of tricky, if i store the signature to check again, the node could still be behind or in bad shape for a while, but still get through the same transaction again
I was going to say nine, but the last bit about ETH is confusing
how much decimals are in the SOL if we assume eth have 18 decs
Same problem 😉
First let's solve Solana, then we can solve the world 🙂
See also: Global supply chain instabilities since Jan '20
Jay Forrester, MIT beer game 😉
Google search was inconclusive
OK then so maybe this gives a slight disadvantage to leaders who are less likely to win forks, if there are such things (and I'm thinking that network latencies mean that more distant leaders *are* more likely to lose when there are forks), because they also get locked out on a bad fork for longer ...
Yes and yes.
Also, don't forget Forrester Shock
When the FORWARD_TRANSACTIONS_TO_LEADER_AT_SLOT_OFFSET is used to compute the leader 2 slots ahead to send a vote transaction to, what happens when that leader is the node itself?  Do nodes accept their own votes?  And additionally, do nodes continue to vote while they are leaders?
My next comment is where I'd start looking. Poisoned cache could linger
I always thought it had something to do with network inefficiencies as gossip priorities are re-ordered.  I was under the impression that stake weight mattered when nodes choose who to broadcast messages to, and also that the network kind of adapted over time to finding the shortest path for messages, so that when a disruption to that carefully balanced mesh network happens when the stake weights change, it takes a while to get efficient again.  *But that was totally a guess*
Not doubting, just trying to brainstorm
And schedule calc ought to be something that can be done at low priority in the background since the data won't be needed until end of epoch ...
But rewards distribution is done by the time the first block is complete typically isn't it?  So yeah other validators may choke for a little while validating that but the effect seems to last for dozens of minutes or maybe even hours.
Maybe trashes the accounts cache
Prolly related to rewards distribution or leader schedule calc in some way, no?  Those are the major events at epoch start
_doesn't have any at the moment_
Are there any theories about why so many forks occur early in epochs?
I'm trying to understand better how all this works so that I can see if I can figure out exactly what that advantage is
I notice that GenesysGo generally gets ahead by 400 - 1,000 votes early in the epoch when there is tons of forking, then retains that same distance as the epoch continues, suggesting that it's got something to do with forks and the behavior of voting during forks, since their advantage seems to come during times of high forking
And I swear that my validator does worse the more forking there is, disproportionately so, at least compared to GenesysGo who is kicking butt for the past 3 or 4 epochs
As you might imagine I've watched my credits very closely for many epochs since high credits is one of my marketing ploys
Yes but I swear there is some advantage, I don't quite know what
which is interesting because timeouts are slot based, not block based.  A higher skip rate increases the number of vote timeouts that occur globally, which is why on epochs with a higher skip rate everybody's credits tend to decrease (but proportionally so nobody is really advantaged)
Ah thanks I haven't read the tower code yet to figure out how it tracks that
There's also vote popping due to slot timeouts that occurs as well, so 1 might have timed out and the validator can't vote on it at anymore
like maybe it knows that (1, 2, 3) didn't land so it will be sending (1, 2, 3, 4)
Yes that's correct.  But the validator would probably have included 1 in (2,3,4) if it saw that 1 hadn't yet landed in the fork that it's voting on
I dunno maybe the Tower instance is doing some bookkeping I don't understand
Unless I am misunderstanding
Yes unfortunately though it is a sliding window so presumably it would be a vote for slots (2, 3, 4) and a prior vote for (1, 2, 3) would then fail missing the vote for 1
So if a vote with slots 1,2,3 lands first, the vote for 1 and 1,2 fail
Thanks that confirms my understanding of the code.
Yes.  The validator also wants to maximize its vote credits, so it includes all previous slots in the fork its voting.  The vote program skips over the slots in a vote instruction that have already been registered, so long as there's at least one new slot to vote in in there.
Like rather than the validator watching to see if its votes landed in the slot it sent them for and re-trying as necessary, it just keeps re-voting with a sliding window and lets the leaders ignore votes already counted?
> If so, is a transaction fee still charged for the second?
no charge
Awesome.  Now briefly, are votes done redundantly in groups to cover the case where UDP packets are dropped and votes are lost?  I see that vote transactions include a list of slots.  Presumably this is a sliding window of voted-on slots that should allow any votes that were missed because of dropped packets to be seen in a subsequent vote transaction and still counted?
Yes that's correct.   This replay protection is one reason why it can be necessary to fetch a new blockhash before an existing blockhash expires.  Imagine there's a transfer transaction of 1 SOL from A->B, and then a couple seconds later another a transfer transaction of 1 SOL from A->B.  If the second transfer didn't use a new blockhash, its hash would looks identical to the first transfer and the cluster would reject it as a duplicate
Yep, that should be fine.  So you could delegate the burn amount to the program, and have the program perform some action and then execute the burn
(it doesn't seem like this could be possible otherwise I could copy a transaction off the wire and keep submitting it to cause the account holder to be charged over and over again)
If a transaction is submitted to one leader and it succeeds, and the exact same transaction is submitted to the next leader, it must fail because it is a duplicate transaction correct?  If so, is a transaction fee still charged for the second?
Thanks for the reply. What about delegation? Can delegation and burning be done in the same transaction?
The `solana-tokens` program can be used to airdrop SPL Tokens to a set of users.  Maybe this is closer to what you're looking for: https://github.com/solana-labs/solana/tree/master/tokens#distribute-spl-tokens
I mean, I need to create a wallet that can hold SOL tokens and then airdrop some value into it.... those wallets do not hold SOL tokens, it hold random tokens that are created using spl-token tool
🤔 I'm sorry, I don't really understand what you mean
I think there are wallets that hold newly created tokens
i know the project. It helped me in the past, but I don't remember to have an original SOL wallet
<@!832663576325128282> - https://github.com/hashblock/solana-cli-program-template might help too
You should be able to adapt that JS example with https://crates.io/crates/solana-client and https://crates.io/crates/solana-sdk
asking one more time... does anybody have a code sample for this? in rust...
I don't see a nice way to do this other than the user transferring the tokens to burn over to the program first.
Bumping this if someone could provide some insight
No, sorry
do you happen to have a rust sample as well?
but in rust
this is exactly what I need!
In javascript:
`const solanaWeb3 = require('@solana/web3.js');

const url = "https://api.devnet.solana.com";
const connection = new solanaWeb3.Connection(url);

const account = solanaWeb3.Keypair.generate()
const lamports = 1000
connection.requestAirdrop(account.publicKey, lamports )`
Does anybody have a code sample somewhere?
Hey! Can you create a solana account and airdrop some SOL tokens into it?
Had some thoughts, haven't put it to code yet...
Yeah, I was thinking updating timestamp on warp would work in the TestValidator context.
I was thinking about how we could solve the other issue where time is busted after restarting `solana-test-validator` with a persisted ledger dir
Would it?  Could hold an offset an adjust it with warp, no?
Just file a GitHub issue.  Better: send a PR as well to fix it 🙂
In the ProgramTest unittest environment, you can jump ahead slots already: https://github.com/solana-labs/solana/blob/1b1d34da5901556ed7f31ec33a17208c4bc6ae3b/program-test/tests/warp.rs#L89
Moving time forward in a `TestValidator` integration test context would be much tricker to implement though
Is there documentation on how to make a feature request for solana network? I think it'd be useful if there were a RPC method to modify the clock on the local validator. I've used something similar on ethereum (https://hardhat.org/hardhat-network/#special-testing-debugging-methods) and it helps for writing time-dependent tests locally


///////////////////////////////////////////////////////////////////////////////////////////////

Hi there, any idea when WalletConnect 2.0 willl be ready for solana ? We can see progress in the gitHub repo, but dont know when it will be ready.. thanks
well, what do you know... it was a stupid mistake 😑
I am not. Well, at least not from what I am seeing. But will check again, thanks.
Seems pretty obvious, no?  You're trying to split beyond the length of the slice
One of my instructions is failing here -> https://github.com/solana-labs/rust-bpf-sysroot/blob/5e455bd029812093c5566817fe6adea5ffe8192d/src/core/src/slice/mod.rs#L1246 any idea what it means? Instruction fails with "panicked at 'assertion failed: mid <= self.len()', /Users/runner/work/bpf-tools/bpf-tools/out/rust/library/core/src/slice/mod.rs:1246:9"
Haha, thanks for the reply
But yes that should be fine
I won't tell if you won't
Is the following legal to do? Call a program, create an account owned by the program and change the account's state in the same transaction?
Hi there, any idea when WalletConnect 2.0 willl be ready for solana ? We can see progress in the gitHub repo, but dont know when it will be ready.. thanks
Legend, thank you!
slots were behind
but it was broken before
yeah it says devnet is ok
https://status.solana.com/
is ther any status.solana.com or something that shows status of chain? aka broken, online?
Check the SPL web3 APIs. There is a `getAllAccounts` method or so.
https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.md#finding-all-token-accounts-for-a-specific-mint
hey quick question, i'm working in localhost, and sometimes i have this message
`Exception('Unable to confirm transaction 5S6xnvzGCyj5ftTzCUVKvJqe1hrtUEua75Amw8pZXdbSr4xAJ8AKtVvN8KjpfagmovmH6HyHnvDj2VCGNoLsR7e7')`
I define to wait for `confirm_transaction=True`. Sometimes works and sometimes does not, any idea? I'm just trying to create an spl-token.
I want to take a snapshot of all the users who've minted a specific token... Is there a guide on how to do that? Can anyone point me in the right drection?
for presentation go with localnet 🙂
ok i see devnet is down, from messages above
how is reliability of testnet in comparison to devnet if i want to have dapp for presentation purposes?
`connection.ts:3539 Uncaught (in promise) Error: failed to send transaction: Node is behind by 50509 slots`
what's the problem?
`Uncaught (in promise) Error: Unable to obtain a new blockhash after 12553ms` devnet
Hello everybody, small question, is it possible to add a custom data field to an SPL token or do I have to use another associated account to store this single field ?
I am working on brand new project and cant disclose details yet
i did not forget
i will answer this a little later
Which project are you developing？
thank you very much!
It means it stop create new blocks
just wait until devnet back on
on devnet
what is to do in such error? `Error: RPC response error -32005: Node is behind by 30805 slots`
there's an announcement on <#749059399875690557>
hey
👀
me too
Yes, is there anyone encounter the same problem?
(Not a single transaction is successful)
Help!
Has the Solana Devnet stopped running? We are consistantly getting errors while developing on Devnet.

me too
you can run your own local node if you want to use solana for the time being.
+
how to install libudev-dev on MacOs env?
Hi there, I met with this error : ```
  Error: failed to send transaction: Node is behind by 12593 slots
```  how can I can fix it, I use https://api.devnet.solana.com/
I opened the code because I didn't know torus, I guess I don't want to know more
did you use this method? if yes what precaution you take to prevent xss.
But I'd like an opinion on manipulating data of that size
Actually the whole 3MB of data is divided into chunks of ~200 bytes and at each transaction, no more than one chunk get some bytes mutated
Is borsh efficient if I have to manipulate data on a 3MB program account?
yes same issue here RPC response error -32005: Node is behind by 5169 slots
The api.devnet node seems to have stopped. We have to wait for solana's people to restart it.
How can i fix it? ```Error: failed to send transaction: Node is behind by 1413 slots
    at Connection.sendEncodedTransaction (/Users/yoohyunsun/ledger/kms/node_modules/@solana/web3.js/lib/index.cjs.js:4834:13)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)
    at async Connection.sendRawTransaction (/Users/yoohyunsun/ledger/kms/node_modules/@solana/web3.js/lib/index.cjs.js:4795:20)
    at async sendAndConfirmRawTransaction (/Users/yoohyunsun/ledger/kms/node_modules/@solana/web3.js/lib/index.cjs.js:6620:21)
    at async sendTransation (/Users/yoohyunsun/ledger/kms/test/keystore/solana.js:116:5)
```
Are there any good resources for wrapping your head around accounts and pda's?
Anyone knows is ticks_per_slot a fixed number for all validators? If so, what's its current value?
<@!455114989397868556> Did you check  that?
hey <@!539801435571748868>  invalid Account data, do i need to provide my account address while deploying
You loan your brain replying to all those questions
😕 What loans are you talking about?
Hello everyone, I would like to ask about the loans provided to developers, do they have any interest?
Thanks!
You want this trait, https://docs.rs/solana-sdk/1.7.4/solana_sdk/account_info/trait.IntoAccountInfo.html
`Account::new` doesn't provide an arg to supply a key
In Rust land, how does one create an Account with a specified PDA as its key? I want to create an account within a test and pass it into a function which checks the accounts PDA matches an expected value
hey guys! I'm scoping for a project that requires NFTs as collateral for financing. Are there any lending projects working on NFTs as collateral for financing that I can check out. Thanks in advance 🙂
We don't really have anything official.  If you keep it short and don't repeat too frequently, no one will bother you announcing here
Question outside of this scope - is there a channel where devs can meet others for projects? I am building(trying) something on Solana after migrating the project over from another blockchain and wanted to know if there is some type of community channel for that
Sounds good - I really appreciate your help!!
Reset isn't a command it's a flag
It's long since reset
Is there any ability to execute smart contracts based on blockchain events. For example changes to account funds or data?
Okay that makes sense so ill just keep it running any idea how long this will take to reset??
Looks like you wanted `--log` (you probably didn't really), you can pass both if so
It just resets the ledger before doing a normal validator run
Can I kill this process or will it keep going until everything is 'reset'
https://en.wikipedia.org/wiki/Stack_machine
Hi would someone mind explaining me what do ppl mean by when. they say evm. is a stack. based machine , i understand how a stack works but what is its responsibility within the evm ?
i initially thought it was part of memory but then the MSTORE and MLOAD opcodes kinda confused me
Or just delete the `test-ledger` directory manually
```
$ solana-test-validator  --help | grep reset
    -r, --reset         Reset the ledger to genesis if it exists. By default the validator will resume an existing
```
Maybe update then?
No reset command and help didn't have anything along the lines of resetting ledger
pass `--reset` I think. `--help` if not
<@!585868308419444749> How/what is the command for that? Sorry not super familiar
Try resetting the ledger
Trying to run the command "solana-test-validator --log" on ubuntu WSL as I am walking through the solana guides. I am getting this error and cannot figure out a way to fix it 

 main' panicked at 'Snapshot bank for slot 2502 failed to verify', /var/lib/buildkite-agent/builds/kong-1/solana-labs/solana-secondary/runtime/src/snapshot_utils.rs:630:9
stack backtrace:
   0: rust_begin_unwind
             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0/library/std/src/panicking.rs:493:5
   1: std::panicking::begin_panic_fmt
             at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0/library/std/src/panicking.rs:435:5
   2: solana_runtime::snapshot_utils::bank_from_archive
   3: solana_ledger::bank_forks_utils::load
   4: solana_core::validator::new_banks_from_ledger
   5: solana_core::validator::Validator::new
   6: solana_core::test_validator::TestValidator::start
   7: solana_core::test_validator::TestValidatorGenesis::start_with_mint_address
   8: solana_test_validator::main
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
<@!439210198142550016> yes, let's get that in.
<@!383348505491668993> can we add this to the explorer?
Hi, please how do I register my token name and logo?
Looking to see its creation instructions
Do you just type the name of the token on t he bar?
How do you get the token mint account on solana explorer?
Thank you!
Hey, I was looking for an api and docs for python to withdraw funds from sollet wallet, I came across to this https://github.com/project-serum/spl-token-wallet/blob/master/src/utils/wallet.js and I suspect I can withdraw using transferToken function, is that the case and also is there a python docs
<@!445425471027544095> in reference to this post
Looks like a no
Hi, i was trying to install spl but while it was compiling, it was returning an error saying linker link.exe not found
please, how do I solve this?
Yeah, the program can return successfully but the runtime will slap it down if the program violated policy
I am getting `InvalidAccountData` error, I would assume the struct `AccountIfo` doesn't have any data
When I am sending instructions? Do I use the program_id account to execute the account? Or my own account
https://crates.io/crates/libc
Has anyone had luck with getting `libc` bindings work on the solana rust toolchain?
theres such a lack of tutorials on this simple stuff right now. once i figure it out im gonna make tutorials for everything
can you mint a token using the `@solana/web3.js` ? or does it need to cooperate with `spl-token` as well?
yep
Yeah had seen that, just double checking that it is *only* 1 conf for `confirmed` to work. Thanks!
yes, hopefully https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment answers this for you
is there a concrete # on many confirmations `confirmed` (is it just 1?) means versus `processed` (processed being 0)?
<@!453347985628200960> - this does seems a little weird ^.   This occurs because the read-only account checks occur in the runtime after the instruction processing is complete right?
awesome thanks. Will have to add that tool to my toolbox
```
$ solana confirm -v -ud 5Xq9jYiVpLbhSAk4DrPU7mFQU6WNLJq1S3Kr7fuS3npbnMhaq7JiaDuESHqbMqaAQhDHEzwA75oEAp5R4H8tjP6i  | tail
    Account 5 balance: ◎0.023664
    Account 6 balance: ◎0.00311808
    Account 7 balance: ◎0.00114144
  Log Messages:
    Program 32WeJ46tuY6QEkgydqzHYU5j85UT9m1cPJwFxPjuSVCt invoke [1]
    Program log: Mango: ConsumeEvents limit=1
    Program 32WeJ46tuY6QEkgydqzHYU5j85UT9m1cPJwFxPjuSVCt consumed 7756 of 200000 compute units
    Program 32WeJ46tuY6QEkgydqzHYU5j85UT9m1cPJwFxPjuSVCt success

Transaction failed: Error processing Instruction 0: instruction modified data of a read-only account
```
How can a transaction error if the program log says success: https://explorer.solana.com/tx/5Xq9jYiVpLbhSAk4DrPU7mFQU6WNLJq1S3Kr7fuS3npbnMhaq7JiaDuESHqbMqaAQhDHEzwA75oEAp5R4H8tjP6i?cluster=devnet


///////////////////////////////////////////////////////////////////////////////////////////////

https://codeshare.io/aykvnl
that works
oh I see. push the integration tests into the solana-rpc crate perhaps.  `solana-client` has no server side,  so nothing to "integrate with" in there
What is wrong with the way I write this transfer USDC?Should I transfer SOL to the associated address first
hmm pulling solana-client out of solana-validator would be more challenging, not sure I see that happening
he wants to add integration tests to solana-client but solana-validator and solana-core both depend on solana-client itself
hmm, what circular dep?
cc <@!463471020628770816> ^
great thanks, I think we'll still hit a circular dependency but that's much better than depending on core

Like this: https://github.com/mvines/solana-bpf-program-template/blob/master/tests/integration.rs
with no explicit `solana-core` dependency, instead use `solana-validator`
hmm which version of `solana` are you using?
Open the connection to see the details of my code
https://codeshare.io/aykvnl

devnet
```
➜  realy-solana-wallet git:(add-associated-token-tx-parser) ✗ solana airdrop 1 2v4ugL5yHjNesNSy1DWG6zZnBmCwPYwPe4KpBjxhb1X4 --url https://api.devnet.solana.com

Requesting airdrop of 1 SOL from 109.230.214.107:9900
Error: connection timed out
```
Is the connection correct?
var connection = new web3.Connection(web3.clusterApiUrl("mainnet-beta"));
Could you please check where the parameter of block information is passed in
which rpc url are you using?

both devnet and testnet work fine for me
which cluster?
Keep getting connection timed out
Hey is the airdrop down for anyone?
you can try using this api: https://solana-labs.github.io/solana-web3.js/classes/Keypair.html#fromSeed
oh To understand the
<@!445425471027544095> do you have a preference on how integration tests are structured for rpc client?

I assume that's what you logged above the error?
is `fromWallet` a `PublicKey`?
Either toString or toBuffer always makes mistakes
hmm unfortunately solana-core has a dependency on solana-client but it looks like it wouldn't be too painful to pull out solana-client from there to do what you want.

alternatively, you can use the anchor idl which I believe supports mapping error codes to messages: https://github.com/project-serum/anchor
you could use this pattern: https://github.com/solana-labs/solana-program-library/blob/6f9520c2a96ef148bfd7bf5c9b251df09295de25/token-swap/program/src/entrypoint.rs#L17
I am writing some rust api docs and examples for RpcClient. I see that the existing unit tests are mocking out the server, but that some integration tests for other components (namely the cli), use RpcClient with TestValidator from solana-core. If I want to write more integration tests for just RpcClient, is there an existing test suite they would belong?

I don't understand yet where in the stack solana-core fits, so I'm not sure if I can just add it as a dev-dependency to solana-client, which would let me use TestValidator from RpcClient tests and examples. cc <@!466984915376799748>
Is there a way to get better error messages in the logs? I am returning an error like this
```return Err(ExchangeError::MarketAlreadySettled.into());```
And the logs contain
```Program 96q...Kj failed: custom program error: 0xa```
It'd be nice to print the error string associated with the error
got it, thanks
Always use base64 over RPC please, base58 encoding is super slow!
Don't use JSON, call the API via base64 or 58 encoding.
if people build off of your program, they will need your program id as a pubkey
it's just a static way to create a `Pubkey` instance from a string
nice it worked! thanks! Out of cursiosity, what is `solana_program::declare_id!()` for?
sweet
yup, you can use `solana-keygen grind`
<@!466984915376799748> right, just tried it. It's saying I need a keypair, which makes sense. Hence my 2nd question - is there a way to programmatically search for a keypair with a given pubkey (at least some letters)?
yes, you can pass `--program-id` to `solana program deploy`
is it possible to deploy a solana program to a particular address? I've tried with `declare_id!()` but that didn't work.
<@!161028871095844864> I has the same problem. How did you solve this? Thank you.
in token swap program , it uses Token.createmint
for creating token, how can i implemment thisi in oyster swap
please help
hey <@!539801435571748868>  i want to create custom tokens on oyster-swap, how can i do it
looks like SO might help you more there: https://stackoverflow.com/questions/52445961/how-do-i-fix-the-rust-error-linker-cc-not-found-for-debian-on-windows-10
got it runnign
hey <@!539801435571748868>  got it thanks a lot
You'll need to follow the code, that message comes from this error [1], which is used in a couple of places, starting at [2]

[1]  https://github.com/solana-labs/solana-program-library/blob/0f4f2b8de909f1bf356260bde8b401813c3dfdec/token-swap/program/src/error.rs#L18
[2] https://github.com/solana-labs/solana-program-library/blob/21f8af34e7dac77ba60b1821a7d30ede53387fae/token-swap/program/src/processor.rs#L238
the rust installation was successful without any errors, is that what you mean?
this is might occuring due to rustsetup
i'm running into another error on helloworld example when running with WSL 😕  
```
$ npm run build:program-rust

> helloworld@0.0.1 build:program-rust /mnt/c/Users/markj/workspace/solana-examples/example-helloworld
> cargo build-bpf --manifest-path=./src/program-rust/Cargo.toml --bpf-out-dir=dist/program

BPF SDK: /home/markj/.local/share/solana/install/releases/1.7.3/solana-release/bin/sdk/bpf
Running: rustup toolchain list -v
Running: rustup toolchain link bpf /home/markj/.local/share/solana/install/releases/1.7.3/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust
Running: cargo +bpf build --target bpfel-unknown-unknown --release
    Updating crates.io index
   Compiling proc-macro2 v1.0.27
   Compiling unicode-xid v0.2.2
   Compiling syn v1.0.73
   Compiling serde v1.0.126
   Compiling serde_derive v1.0.126
   Compiling semver-parser v0.7.0
   Compiling version_check v0.9.3
error: linker `cc` not found
  |
  = note: No such file or directory (os error 2)
error: aborting due to previous error
```
runninh on devnet
hey <@!539801435571748868>  could you please look up, thats the error 
The input account owner is not the program address
https://github.com/solana-labs/example-helloworld/pull/256
great idea, much appreciated!
i'm creating a PR for the helloworld example to add a step to run the system tuner
<@513742723111714817> thank you!!
hurray! yep that's good output
<@!539801435571748868> yay! i think it's working. this is the output now, i think this means it's running? 
```
$ solana-test-validator
Ledger location: test-ledger
Log: test-ledger/validator.log
Identity: HTHvu2odfSPU6Ax5d3ZEVP4oeVVfZfmhcPkxGvQWKk1M
Genesis Hash: F7vZd9jEnmiunFTrqrsgXw6Ugt6rhbnfXPpXSgAixcQ8
Version: 1.7.3
Shred Version: 25411
Gossip Address: 127.0.0.1:1024
TPU Address: 127.0.0.1:1027
JSON RPC URL: http://127.0.0.1:8899
⠋ 00:00:22 | Processed Slot: 52 | Confirmed Slot: 52 | Finalized Slot: 20 | Snap
```
ok i'll try restarting my computer
oops, right. you'll have to get the transaction in a different format then
the solana-sys-tuner is run as a daemon on the system if you go that route, as for the other bits, you can read up more on how shells work `2>&1` redirects error output, `&` runs the command as as background process, and `[3] 641` gives info about that background process.  you may need to log in / out after setting the new limits for them to effect
i'm not sure what the `[3] 641` means. also... what is `2>&1 &` doing?
<@!539801435571748868> thank you, but I got an EncodedTransaction::Json(UiTransaction) so the decode result is always None as show in https://github.com/solana-labs/solana/blob/33718e5fb4df19986252dd7043861c4188ddbf78/transaction-status/src/lib.rs#L672 .
when i try to run `solana-sys-tuner` this is the output i  get: 
```
$ sudo $(command -v solana-sys-tuner) --user $(whoami) > sys-tuner.log 2>&1 &
[3] 641
```
and when i try to run `solana-test-validator` i get the same error
Yep, you still need to increase the memory-mapped files limit and the nofile limit
Hi there, you can convert with `decode` it seems: https://github.com/solana-labs/solana/blob/33718e5fb4df19986252dd7043861c4188ddbf78/transaction-status/src/lib.rs#L670
i don't think it's tweaking, i can't even get it to run
okay i have compiled the spl again i will ping you after this process finish  so i can take screenshot of exact error
i'm not trying to run a real validator, just one for local development
That'll just be your solana config -- you also need to tweak your system to support running a validator.  the instructions in that link will provide the info
Hard to tell what's going on without any other info
this is my current config, anything look off? 
```
$ solana config get
Config File: /home/markj/.config/solana/cli/config.yml
RPC URL: http://localhost:8899
WebSocket URL: ws://localhost:8900/ (computed)
Keypair Path: /home/markj/.config/solana/id.json
Commitment: confirmed
```
hey i chnaged it then another error occured - invalid account data
Hi, everyone. A quick question: In UiTransaction (what is Ui mean) and can we convert UiTransaction to Transaction? Thank you.
https://github.com/solana-labs/solana/blob/33718e5fb4df19986252dd7043861c4188ddbf78/transaction-status/src/lib.rs#L522
I answered this the other day. The log message gives the info -- "The curve parameters are invalid".  You can't create an offset curve with an offset of 0
<@!539801435571748868>  can you  help please
you may need to go through these steps: https://docs.solana.com/running-validator/validator-start#system-tuning
native Windows support isn't quite there unfortunately, i've been slowly working on getting my environment setup, now i just need to plow through all the issues that come up
ok running into another issue as i try to get my local env set up: 
```
$ solana-test-validator
Ledger location: test-ledger
Log: test-ledger/validator.log
Error: failed to start validator: Failed to create ledger at test-ledger: blockstore error
```
nvm it's working i just had to switch to WSL
hi, i'm trying to set up the CLI in Windows and i'm getting this error when i try to generate a file system wallet keypair https://docs.solana.com/wallet-guide/file-system-wallet#generate-a-file-system-wallet-keypair 
```
$ solana-keygen new --outfile ~/my-solana-wallet/my-keypair.json
Generating a new keypair

For added security, enter a BIP39 passphrase

NOTE! This passphrase improves security of the recovery seed phrase NOT the
keypair file itself, which is stored as insecure plain text

BIP39 Passphrase (empty for none): thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 6, kind: Other, message: "The handle is invalid." }', keygen\src/keygen.rs:574:92
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```
seems like it should be a drop-in replacement, we just need to add some more fields for `getTransaction`
oops.
but web3.js getTransaction is a lie, it actually calls getConfirmedTransaction 😄
ohhh we need to change web3 to use that instead
Looks like `getConfirmedTransaction` is deprecated, so please use `getTransaction` if you can.  Does it work for your issue?
It's a bit tricky -- the idea is that when you swap token A for token B, you have to transfer:
* your token A (source) to the swap pool's token A (swap_source)
* the swap pool's token B (swap_destination) to your token B (destination)
maybe thats it
hmm
Hm, the term base doesn't seem to be used for PDAs, so do you mean the `program_id`? the `base` is a term used for generating new pubkeys with seeds, and represents the key that must sign
You can also try the `--dry-run` flag to get the error logs
I have no idea, never tried
i tried but this error comes up
hey <@!831450660146642974>  can you  help with this - implementing a offset curve type in token -swap program
which is nothing else the a getConfirmedTransaction rpc call but without the deserialization of transaction causing the bug
I complained before but now I am more convinced it is wrong:
When using web3.js  `connection.getConfirmedTransaction`
in `confirmedTransaction.transaction` to get access to accountKeys you need to compileMessage, which doesn't seem to be bijective with the serialization.
As a result once you unwrap again the transaction `confirmedTransaction.meta.postTokenBalances`... is unusable.

 Seems like `getTransaction` fixed it !!!
so if you attempt to create a program account at a PDA that already exists, you'll get an error message that says the address of the pda, along with the "base", how is this base derived? im attempting to reconstruct the base address but am not having any luck
Otherwise go digging in the stake pool program code for the error enum and see what the second discriminant is
this looks like a not enough SOL
Set `RUST_LOG=solana_client=debug` and try again.  You should see those seven log messages
Apologies as this might not be the right channel for this type of question. If anyone can suggest appropriate channel it would be greatly appreciated. I am currently having a problem with creating validator stake using stake pool
spl-stake-pool create-validator-stake [pool] [vote account]
`RPC response error -32002: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x1 [7 log messages]`
can't pass ASK as well
It's asking for two owner keypairs
How to transfer using `spl-token transfer`?
Hi there, devnet is working  today?
in solana when you derive a PDA, what does the `base` mean
Could anyone explain each parameter's meaning? I'm confused due to  parameters like "swap_destination_pubkey" and "destination_pubkey"
Oops, I realized I make stupid mistake
I use this code 
`let tokenProgramId = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA".parse::<Pubkey>().unwrap_or_else(|err| panic!("{}", err));`
but I got this error
```Pubkey::from_str```
string like this : TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
you mean a string base58 address to pubkey bytes?
how can i convert address to pubkey in rust?
np
ok great. Thanks <@!466984915376799748>
but the sol you just sent does nothing, just sits there until you recover it
yup
ah yes, it goes for the rent
when you close a token account, any sol in the account will be transfered to the account of your choosing
yup, you can recover that sol by closing the account
'cause indeed I tried to send sol directly from wallet to the ata ... and nothing happened except sol vanishing on the wallet
it's easier to handle non-sol tokens
Ok, thanks for the explanation
we will be fixing this pretty soon though: https://github.com/solana-labs/solana-program-library/issues/2077
yeah, same
erf, seems complicated, I was expecting a simpler solution
to do that, you can create a temporary account with your desired amount of sol, initialize it as a token account, transfer its funds to your wrapped sol token account, and then you can finally close the temp account
if you want to increase the balance of your wrapped sol token account, you'll need to transfer wrapped sol to it
nope, just a normal sol transfer
is it a special instruction to transfer from the wallet to the assoc token native mint ?
nope, the funds must be wrapped into the native token account
ok, this time I created an associated token account and initialized it. I checked on solana explorer that I was indeed the owner, mint is native token, balance is 0 ( as said in the doc it's normal)   When I try to transfer it from my assocTokenAcc to my assocTokenAcc, I have insufficient funds.  Is it not supposed to take the funds from the wallet itself ?
ah ok yes it should work using the system program.
yeah that's a bit different, another example for that here: https://github.com/solana-labs/solana/blob/master/web3.js/examples/send_sol.js
yep, thanks, I just thought it would work for native token without using associatedaccountinfo
you're missing this part:
```js
  let fromTokenAccount = await mint.getOrCreateAssociatedAccountInfo(
    fromWallet.publicKey,
  );
```
the example I linked walks through all the steps
yup, so you'll want to create a new token account whose authority is your wallet address
oh okay then, it makes sense 🙂
nope
isn't my wallet address the same as the sol token account ?
fromToken and toToken must be token accounts and fromWallet is the authority of fromToken
you're using the same public key for the fromToken, fromWallet, and toToken
thanks, but I don't really see the difference
the example in this PR might help you: https://github.com/solana-labs/solana-program-library/pull/2093/files
Hey, I am sure this is a stupid mistake but I am trying to send a transfer instruction on my localhost and get : invalid account data for instruction.... I even tried to send sol to myself but get the same error :
`kp = await KeyPairLocal.load();
    let inst =  Token.createTransferInstruction(
        TOKEN_PROGRAM_ID,
        kp.publicKey,
        kp.publicKey,
        kp.publicKey,
        [],
        10
        );
        let tx = new Transaction().add(inst);
        let tx1 = await sendAndConfirmTransaction(conn,tx,[kp],{skipPreflight: false, preflightCommitment: 'singleGossip'});`
any idea ?
Ah, makes sense
You have to sign to reserve an address, otherwise the address space is open to griefing
Any specific reason for this?
Thanks, that fixed it. Needed to change `writable` property of the new account as well.
The creation of the account requires itself as a signer?
I think you need `invoke_signed`
I ran into an issue, and was hoping someone could help me. I'm trying to create an account from a program address but am running into `Cross-program invocation with unauthorized signer or writable account`. While calling `invoke`, I'm passing in the signer's account info, the  system program account info, the new account's info and the account info of the program itself. Not sure where I'm going wrong, or what I'm missing
You can issue a `MintTo` instruction
Can you just call the minting functions from spl-token in JS
I wonder if it is specific to stake accounts, maybe there is something peculiar about those
Thanks
https://github.com/solana-labs/solana/issues/18587 There is this one on the programSubscribe topic
here's an issue <@!831450660146642974> https://github.com/solana-labs/solana/issues/18704
But yeah having two sources might not be ideal
I think that's fine
Not sure if that's bad
So you have to potential open many notifications if the user has plenty of accounts
The current issue is on token accounts
Doesn't feel super scalable
You need to use the individual sub only for closing
That is my current workaround, but then you get two sources
<@!831450660146642974> can you setup individual account subscriptions for the accounts you expect will be closed?
it's trickier to solve for program accounts
ah right, this was fixed for individual account subscriptions but not for program accounts
yes, true!
I still have this other open PR to finish though...
Please point :), I'll assess if I am up for the challenge
I can point you to the relevant code if needed
long standing issue, would love a PR 🙂
There is something annoying with programSubscribe. When an account is closed it doesn't produce a notification when it use to belong to the program. This requires having special logic just for account deletion. Is there any reason for that design? At the end it is still an account change isn't it?
Ok thank you 😊 I see what you mean. When I deployed my program I just did **deploy program.so** and did not specify any. So this would change that
the program_id won't change when changing the upgrade authority
check out this explorer page to get a sense of the program metadata
what you are referring to as "owner" is called the upgrade authority
https://explorer.solana.com/address/SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8
<@466984915376799748> wait when you change the owner will that change the program ID? Or is the program ID a separate keypair. When I deployed my program before I did not specify a owner so is it just my wallet?
there's also this more complex program for governance that you two might be interested in: https://github.com/solana-labs/solana-program-library/tree/master/governance
<@854082797743636491> let me know if you get it lmao
Alright thanks! something ill look into and post back when I get it. Im sure this could be useful to others
I don't think there is such a program for that yet. The spl-token program does support multisig for token authorities though
I think you would just have to tell the program another authority? What version of the lending program were you looking at?
Could someone point me in the direction of an example of this in a program ?
or is there something separate for that
<@!466984915376799748>  could I do something similar to add multiple signatures to a multisig wallet
<@!466984915376799748> thank you for your help 🙂
^ also interested in this
you could upgrade your program to add support for that
that's up to your program to allow
Awesome thanks, I was trying to modify the lending program for sports betting. Would this also work automatically for the “markets” I deployed
you can use the cli too: `solana program set-upgrade-authority -h`
yeah, there's a set authority instruction
Is it possible to change the authority of a program? Like who can deploy on to it?


///////////////////////////////////////////////////////////////////////////////////////////////

As discussed, the program should set the signer status to false when invoking programs it doesn't trust and use approve + revoke instead..
i'll respond in #anchor
aka everytime you invoke any program ALL your accounts/programs are at risk
Is this intended reusing user signature for sub CPI does not seem like a good idea
at least in anchor the signature gets reused, i've done it a lot
yeh, this should work
Should program be able to invoke transfer using signer signature ?
```
Transfer {
                    from: ctx.accounts.from.clone(),
                    to: ctx.accounts.to.clone(),
                    authority: ctx.accounts.authority.clone(),
                }
```
Authority is signer aka user that signer this transaction.
I was in impression that we need to use PDA + approve for that
So I guess in this case, it's not a typical user making this account. It'll be created/init'd once and owned by TokenSwap. The only wallet in this context would be the deployer wallet.
I've used the first 32 characters of the wallet address as the seed before, kinda like this [1], so it's easily derivable.  The chance of collision is pretty small, but still possible I guess.

[1] https://github.com/solana-labs/stake-o-matic/blob/697a505493396b1c5aa711eadd92724c33538c93/bot/src/stake_pool.rs#L66-L70
What do you think is best practice for storing this seed so a client can use it to get the pubkey? In this context, I'm creating a unique account associated with TokenSwap program. Is it better to just export the final address or export the seed and have them derive it?
I can use `createWithSeed` outside and inside the program
Yeah check the deriviation once, during the account initialization instruction, and then mark it "good"
Ah ^
Ok that limitation is no issue. How do you derive this address later and how would confirm it in the program?
If you want to check the derivation within the program, make the user pass in the seed and use `Pubkey::create_with_seed()` on-chain

[1] https://github.com/solana-labs/solana/blob/59cd0556ef4f6907bb8c362fcd132c0049812f53/sdk/program/src/pubkey.rs#L159
Basically, yes.  The seed used with `createAccountWithSeed` is just slightly more restrictive than a PDA seed, it can be a utf-8 string up to 32 characters.
So I would create the account outside the program using `SystemProgram.createAccountWithSeed` from web3? The seed can be any string identifier similarly to a PDA?
I think you could use `SystemInstruction::CreateWithSeed` for this.  From your program you can even check the derivation by requiring the seeds be provided during account initialization, similarly to how a PDA address is checked by the program.  Only difference is that the program can't be a signer like it could with a PDA, but it doesn't sound like you need that
I'm not sure how I could make it unique and only enforce one of these types of accounts to be created though?
I basically wanted a unique account owned by the program. I could go with non-PDA and simply note down the address and make it available in the API's instead of being able to derive it dynamically.
ugh, can you use a non-PDA owned by the program for the larger data?  The PDA can then be an authority over that other account
Damn, well that was some wasted effort to get to the end and find out this limitation 😆
Unfortunately true
oof. So literally no way I can create a PDA greater then 10k bytes??
Is this ID a generation rule for RPC?I'm not familiar with how RPC works
db406fd9-d5ba-42ca-aebe-bd5ff568a282
<@!466984915376799748>     What algorithm is used to generate this ID?

https://github.com/solana-labs/solana-program-library/blob/master/token/js/examples/create_mint_and_transfer_tokens.js
We have a governance program in SPL which you can use to create proposals, vote on them and  execute any arbitrary solana instruction through the vote https://github.com/solana-labs/solana-program-library/blob/master/governance/README.md and UI (devnet) https://solana-labs.github.io/oyster-gov/#/?programId=GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw
written in solidity
https://gist.github.com/smrnjeet222/2bf95e576ae598fb0d10f3c2f7ceb10d#file-contracts-3_ballot-sol
does anyone have any demo
I am looking to write a voting smart contract
Is there a complete tutorial code for SplToken transfer?
This might help with the sending sol part, https://github.com/jsoneaday/solana-send-money/blob/main/src/helpers/wallet.ts
It's just that the documentation is more of a reference and there isn't really a guide
Is there a simple example for Solana web3js to just instantiate an account with a private key and send Sol?
I'm hoping a couple weeks
Hey guys, how far is 1.7 from Mainnet?
Yup, working on it but slow 🙃
Confirmed.  CPI-based CreateAccount ls limited to 10k bytes.  This is an unfortunate limitation that we do want to remove..  cc: <@!453347985628200960>
[2021-07-17T06:31:49.754703700Z WARN  solana_validator::admin_rpc_service] Unable to start admin rpc service: Os { code: 95, kind: Other, message: "Operation not supported" }
[2021-07-17T06:31:49.799084300Z INFO  solana_ledger::blockstore] Maximum open file descriptors: 500000
[2021-07-17T06:31:49.799145400Z INFO  solana_ledger::blockstore] Opening database at "test-ledger/rocksdb"
[2021-07-17T06:31:51.813626000Z INFO  solana_ledger::blockstore] "test-ledger/rocksdb" open took 2.0s
last lines with the --log argument :
using the latest Ubuntu distro if that makes a difference - and solana 1.6.18
searching the forum history - I saw that M1 Macs has similar issues - but didn't see anything for WSL2 on Win10
[1]    1276 illegal hardware instruction  solana-test-validator
however solana-test-validator crashes shortly after startup with
I've been getting a development environment setup. And it's mostly worked fine
hi all - is anyone doing solana development on WSL2 ?
Seems like it's impossible to have an account that is larger then 10,240 bytes for a PDA since the PDA account creation has to be done within the program call. Can anyone confirm?
I'm hitting this error `SystemProgram::CreateAccount data size limited to 10240 in inner instructions`. I'm trying to create an account close to 10MB from within the program but it looks like its limited to 10,240 bytes??
Hi, is there anyway to decode EncodedConfirmedBlock (https://github.com/solana-labs/solana/blob/33718e5fb4df19986252dd7043861c4188ddbf78/transaction-status/src/lib.rs#L422) to ConfirmedBlock (https://github.com/solana-labs/solana/blob/33718e5fb4df19986252dd7043861c4188ddbf78/transaction-status/src/lib.rs#L349). I tried to decode by myself but stuck at converting UiTransactionStatusMeta to TransactionStatusMeta. Thank you!
what is the best way to manage multiple state accounts owned by the program?
<@!585868308419444749> is there a way to setup a "payer" within the unit tests? I'm working within the TokenSwap program which doesn't seem to have the `ProgramTest` infrastructure that some of the newer programs have. Would `create_account_for_test` suffice?
Sorry for spamming the channel with the questions, but what is --max-validators number  for a stake-pool?
Is solstake.io functionable?
Does anyone know what staking platforms has public repo?
Can someone please explain, how to set --new-fee-receiver for the staking pool using spl-stake-pool. 
In the docs it says, that it has to be must be the SPL token mint account. Does the owner of the SPL token mint can transfer rewards to another account if needed?
it creates all needed transactions, and that starts over from the beginning
another team member just tried and the deploy failed
yea something is really wrong
i've tried 3 different nodes, 1 of them my own nodes and i cant get a deploy through
has anyone been having troubles deploying to solana all day?
Cool. Thanks for clearing up my confusion 👍
I think ATA just splits it up because the transfer is optional.  If that's not a requirement in your case, `CreateAccount` should work
Any benefit to the ATA approach with the split function vs. create_account?
in reality in both cases, but the difference is that client side you needs to sign the TX, which you can't do with a PDA since it has no private key.  But in your program you can CPI the instruction via `invoke_signed` using a PDA
Assuming you call it from the client-side, yes
Same with `system_instruction::create_account` in rust?
Create account is a meta instruction.  It does an allocate+assign+transfer behind the scenes
You specify the owner/programId as part of the `createAccount` call though?
You want your program to own it, not the system program.  Then you can create a withdraw instruction
I don't think you really want a system account though.  Any funds in it will be stranded
Yep ok, so account has to be created/initialized within the program
Right, there's no private key, so you can't sign the transaction.  That's what ATA does it the way it does
In JS if I use `SystemProgram.createAccount` and set the `newAccountPubkey` to the PDA I was hitting issues with signers
Ok. So all I want to do is create a system account whos pubkey is the PDA so I can look it up by that derived address
The PDA specific part is that they're call with `invoke_signed`
Nothing about either is particular to PDAs
`Allocate` reserves storage for the accounts `data` field.  `Assign` set the program that owns the account
Or am I misunderstanding something here?
or rather the key associated with the account to the PDA
In the ATA example you give it `associated_token_account_info` which I assume is just a new empty account, the program then uses `allocate` and `assign` to change the owner to the PDA?
You mean the account owner?
> changes the pubkey of the account passed in
Sorry I don't understand this
Looks like that changes the pubkey of the account passed in? This could all be done by not passing in an account and just using `system_instruction::create_account` inside the program right?
I don't recall the pathology that gets you there though
I think not dropping old votes opens up a liveness issue
Awesome thanks!
<@!821639748652761121> if carl confirms I'll write up an issue for this
The ATA program is probably the simplest example of what I _think_ you want to do. https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/src/processor.rs
<@!245452120063475712> I just read the code a bit and it looks like if 40 slots passed before the cluster votes enough to satisfy the threshold check at your current lockout level, we will only backfill up to 32 (31?) votes that are queued up in the tower vote state. By not backfilling, validators are leaving vote credits on the table
If you want an account to hold data, it has to be owned by your program
slots don't have to be directly voted on, any votes on descendants of that slot will get aggregated
nope, because votes for later slots get aggregated to earlier slots, we don't need that granularity for consensus
System account that stores data. I want to create one that is associated with the PDA.
But I will double-check that issue to see if my new realizations clarify anything for me when I re-read the issue thanks!
I got here just by trying to understand my logs independently of that
I am aware of that issue but I hadn't connected it to what I was talking about right now
<@!821639748652761121> you've been following https://github.com/solana-labs/solana/issues/18308 ?  Pretty sure you're seeing the same stuff
(even for the slots that I think got 2/3 I should probably still vote because maybe not enough validators saw enough of those 2/3 to stick with the fork)
I would recommend removing all recollection of the `Account` type in the JS context.  That's a good start.  You have a `Keypair` and an `AccountInfo` instead
Well thanks so much for clearing up my confusion.
Depends on what you mean by _account_ and where you want it _created_.  The ambiguity is totally our fault
It's only the slots that already got to 2/3 that it doesn't help to vote on
Although I guess I could help consensus on any subsequent slot that hasn't reached it yet
So this is not an optimization that Solana as a whole should care about at all right?
I'm not really helping consensus anyway
At this point, since the fork is already confirmed
Although to be honest
32 is the limit on such backfills?
but you should be able to put out a few backfill votes
Good point
if you get in a partition and happily vote away, you would regret it
Of course, unless it's bad for consensus
well you don't want to lock yourself out for a year 😛
So to confirm - the account has to be created in some kind of program init call when using a PDA?
And honestly in a damned-if-you-do, damned-if-you-don't situation, I'd rather just get some votes out
hmm yeah should be able to put quite a few in there
Yeah I think it's missing some then because it often goes beyond 32 votes in this state
Yeah it does, at least to whatever the vote tx limit is
Or something else?
You mean logs?
What do you mean by "share some votes"?
if you can share some votes from your validator that show that behavior we could definitely take a closer look
I think it *should* backfill but probably only back to 32 slots?
might be leaving a little on the table
hmm good question
It sometimes misses *ALOT* of votes to this
Does it eventually "make up" the votes when it finally realizes that the fork is kosher?
yeah, pretty much
so your node could be humming along fine but if the rest of the cluster hasn't voted on your chosen branch, your validator will wait until 2/3 do
So it's my validator being suspicious and believing that because its current fork is not confirmed, it should tread carefully?
it's basically a guard rail that helps nodes from getting super locked out on a fork
you're right about the 2/3 threshold
well, indirectly it does I suppose
this has nothing to do with lock out
All hail!
it is deprecated finally 🙂
You are not the first to run into that wall
Yeah we  screwed up pretty bad by calling a keypair an `Account` in web3.js initially
Like why is my validator trying to switch forks if it was never locked out?
But first, I'd like to understand why this log line is not following "LockedOut" logs
I'd love to understand better how that way is
I read the code and I found it a bit confusing.  I *think* I figured out that it means that a validator will not switch to a fork until it has 2/3 stake weight already voted on it somehow and in some way.
I get a TON of these so would love to understand their meaning.
Hi just trying to understand the "vote threshold" reason for not voting.  It correlates with this in my logs:
```[2021-07-17T00:51:29.997084594Z INFO  solana_core::replay_stage] Couldn't vote on heaviest fork: 87364963, heaviest_fork_failures: [FailedThreshold(87364963)]```
I guess I was confused since I was able to create an account outside the program within the rust unit tests using `Account::new` and `into_account_info`. Figured the same could be done in web3
So the account has to be created within the program only then?
let me see if mergify supports that, I'm imagining a github subteam which gets mentioned whenever a community label is added
Oh lol... it was like 2min after the PR was opened 🙃
I personally just have notifications on for <#517163444747894795> but would be nice to subscribe to community labeled PR's too
I requested a review in response to his discord message 😝
`createAccountWithSeed` is a different derivation method, to derive an address from an existing ed25519 keypair
Not possible since an `Account` in the JS SDK is really just an ed25519 keypair, and a PDA is a 32bit address that's not a valid ed25519 public key
In the JS SDK is it not possible to create an `Account` using a PDA for its pubkey or is that what `createAccountWithSeed` is for?
blowing out my node_modules fixed the above issue
Not sure about that.  Your PR died in CI due to the commit message not conforming to this dumb thing, https://github.com/conventional-changelog/commitlint/#what-is-commitlint
Ah sorry, I didn't mean to come off as trying to rush anything. I was having errors building the types locally so I was really lookin for comments from others. Anyone else get these errors?

```
node_modules/@types/express-serve-static-core/index.d.ts:584:18 - error TS2430: Interface 'Response<ResBody, Locals, StatusCode>' incorrectly extends interface 'ServerResponse'.

node_modules/@types/express/index.d.ts:58:55 - error TS2344: Type 'Response<any, Record<string, any>>' does not satisfy the constraint 'ServerResponse'.
```
I'm not sure if I'm missing something locally
Seems pretty punctual. I'd suggest patience
if someone need help to webbrowser integration of :
Solanaweb3 + SPL + Sol Wallet Adapter
-> I have modified files, they dont use any {"import" or "require" or "npm"}
Would enjoy any help getting this PR into web3 🙂 https://github.com/solana-labs/solana/pull/18736
Yes, it returns all accounts, always, and if a dataSlice limiter is requested, the same offset/length is applied to all accounts' data
Correct about the offset.  It returns all accounts _that match the filter criteria_ always
is that correct?
so it just returns all accounts, always
so it applies the same offset to all of them?
wait, the offset is of data inside the accounts?
No, no guaranteed order. The `dataSlice` option is for returning slices of account data. Pagination is not supported at the moment.
No ordering, no pagination.  What gave you the impression that the call could be paginated?
There seems to be no indication of that, though the slice lets you paginate the results, so I'd assume some order exists
Are the accounts returned in any particular order?
https://docs.solana.com/developing/clients/jsonrpc-api#getprogramaccounts
Probably a very silly math question, looking at PreciseNumber in spl-math, are there ways that `checked_pow` can do power of negative number? I am trying to calculate standard normal distribution, and part of it is e^(-x**2 / 2)
Thank you starry, this will work! I was inspecting spl-token because it prints error strings but didn't think of checking entrypoint! 🙂


///////////////////////////////////////////////////////////////////////////////////////////////

You need to add the desired account address to the list of accounts provided to your instruction
Current slot number, yes.  Using the clock sysvar.
One more question can i get the account info inside a smart contract using the publicKey?
Solved ✅
This might be a good example to follow: https://github.com/near/borsh-js/issues/14
Already checked it, but i am getting this error:    no function or associated item named `unpack` found for struct `spl_token::state::Account` in the current scope
might find it there https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/
Is there an example on how to deserialize a TokenAccount inside a smart contract?
Hi, is there a way to get the current block number from within a solana program ?
it is still 0.1.0
<@!539801435571748868> It seems like https://github.com/solana-labs/solana-program-library/tree/master/token-swap/js never got released since the move to typescript
is it safe to compile solana programs with `lto = fat` and `codegen-units = 1` <a:aPES_Think:493353113332219924>
solved it, btw thanks for the reply
you can't have more than 1000 bytes in a transaction anyway
do you have a calendly account or smth?
fair enough 🙂 it's still 8 PM where I am 😛
I'm literally falling asleep at the keyboard, was about to go to bed.  Some other time maybe 🙂
that may very well be true. would you have 5 minutes for a voice chat? it might save us a lot of back-and-forth with messages 🙂
`std::collections::HashMap` requires a random-number generator, which isn't available in a program.  There are alternatives, but generally from what I've seen wanting to use a map typically indicates a possible design issue.  The Solana accounts address space essentially already is a map
I might try to answer my own question: is that because maps are always on heap?
another stupid question: I read many times that I'm not supposed to use map structures (for example HashMap) in solana. is there any reason why?
okay cool
If it doesn't exist you should get an error, not a 0 balance
okay. so it should throw an error if ATA doesn't exists? or it will give 0 as balance?
this'll work: https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountbalance
how to check the account exists? Is there any direct method?
Or perhaps just use `getAssociatedTokenAddress`  to get the address and see if that token account exists
thanks
cool got it.
yep
yes so you mean fetch all addresses and check if it includes ATA. right?
ah, sorry so from the `getTokenAccountsByOwner` results you'd need to also use `getAssociatedTokenAddress` to determine which one is the ATA
``` let accounts = await connection.getTokenAccountsByOwner(
            new PublicKey(ownerPubkey),
            { mint: new PublicKey(mintAddress) },
        );```
I am passing like this.
you certainly can
so you mean for single token mint I can't have both ATA and old account on-chain?
From a token account address, you really can't.  That's a preimage attack.  You need the `ownerPubkey`, to pass into `Token.getAssociatedTokenAddress` to determine if it's an ATA or not
https://discord.com/channels/428295358100013066/694949720644124762/836364874288070706
it's because of this. some account has old version and not associated acocunt. So, if I use `connection.getTokenAccountsByOwner` it always return an address. So, how to identify if it has been created after standardization or it's an associated account?
yeah ideally you create it (the user pays to fund it), using https://spl.solana.com/associated-token-account#creating-an-associated-token-account
actually I want to take authority address from frontend. So, we need to get associated token account using:
```await Token.getAssociatedTokenAddress(
                ASSOCIATED_TOKEN_PROGRAM_ID,
                TOKEN_PROGRAM_ID,
                mintPubkey,
                ownerPubkey
            ) ```
And, it always return an address. so what I need to do is if associated account doesn't exists, I need to create one. right?
I can already see myself creating a library called "solana_date_utils" 😂
heh, less is more on-chain.  keep the fancy stuff in the client 🙂
humane fashion as in `date.plus_days(5)` as opposed to `date +=(60*60*24*5)` 😛 (or smth)
Do you need to?  Why not just accept any token account the front-end passes into the program
I suspect chrono wouldn't compile in a program, probably OS dependencies.  But human date/time manipulation doesn't seem like something that should be run on-chain.  That's typically a front-end concern
yeah, I saw that for getting the date, however I'd like to store it and use it in a humane fashion. `Clock::get()?.slot` gives you a u64, but it doesn't mean that access to `chrono::DateTime` blocked, right?
how to check if an associated token exists on-chain?
okay
Check out https://spl.solana.com/token#wallet-integration-guide
The front-end should always use the associated token account for the user's wallet address
check out the clock sysvar for this too 🙂
so how to handle this on frotned? for example I want to send the token to a receiver which has two usdc-spl account and when I use `connection.getTokenAccountsByOwner`, it will return two addresses. So, on which spl account I should send the token?
ahh ok thanks let me check that
I'd use the clock sysvar to get the slot or timestamp: https://docs.solana.com/developing/runtime-facilities/sysvars#clock
i think theres no acces to std::time
hey
are there any good practices when it comes to storing dates in Solana?
is it OK to store any of `chrono::{DateTime, Duration, Utc};`?
or should we store it as u64 and do the conversion in each transaction?
in the program what crate should i use?
Only manually by a program, the runtime won't do this for you.
or a way to add a timestamp?
yes, the owner is referenced in each token account
is there any way to know when an account was created?
can i create multiple same token account from one owner?
eg: can I create two usdc-spl address from single owner?
From client side you just pass the pubkey but from unit testing in rust you need the “Account” object not the just the pubkey
I need to pass the account into the instruction as it’s required by create_account as a signer in the invoked_signed call
But this test validator is a trimmed down thing that looks like a real cluster from the outside but is not (i think)
oh i see what you mean by regular, i don't know
well the regular validator settings let you configure various thigns like caching, etc..
what do you mean? Global settings?
for the test validator is it possible to toggle configuration settings used by the regualr validator
if i have a SOL/USDC pool, volume in SOL is ins + outs, isn't it?
DeFi question, when we talk about volume on a AMM, it is the sum of all ins and outs?
yea that seemed to be it, upping the ledger size worked
i think the test validator is keeping only recent stuff, i would say yes
```
Note: Transactions processed before block 360 are not available at this time
```

does this mean my ledger size is too small
ah https everywhere derp
its definitely online
```
curl -X POST http://localhost:8899 -H "Content-Type: application/json"
{"jsonrpc":"2.0","error":{"code":-32700,"message":"Parse error"},"id":null}
```
<a:aPES_Think:493353113332219924>
hmm

```
connection.ts:761 POST http://localhost:8899/ net::ERR_BLOCKED_BY_CLIENT
```
Though on page refresh it's annoying because you have to enter the localhost address every time.
Yes.
do you connect to http://localhost:8899 ?
Usually works for me.
the custo m url doesnt seem to work
how can we hook up a solana test validator to the public block explorer?
true
How do I know this isn't photoshopped?
Proof
just 5 minutes to look like a fool
lol
and it is back up
/!\ https://downforeveryoneorjustme.com/explorer.solana.com?proto=https solana explorer is down!!!
through CPI?
What do you mean by "get the account"? Do you want the sys program logic?
Figured there must be a way to get the account without it
Yeah looks like the way forward and gives you all these things that I need. Just not keen on overhauling the program to use ProgramTest as I'm not familiar enough yet.
It is integration testing without shitty custom stubs
Looking for least path of resistance of this point
But from what I hear ProgramTest is the way
Yes it isn't, it came out after
ProgramTest isn't used/setup in TokenSwap from what I can see?
ProgramTest has it all
I think you should just be able to access it
What about the system program account? I haven't seen any example of this being accessed within the tests, at least not in the older framework used in TokenSwap/Token
For the rent you can do Rent::get() you no longer need to pass the account
How can I access the system program account within rust unit tests? I need to pass it in as an account for one of the instructions to be able to use `create_account`. For the rent sysvar I've seen `create_account_for_test(&Rent::free())` being used.
Is there a roadmap or anything that tracks changes in these various limitations? Would be useful to know how things intend to improve in the near future
That inner instruction 10kb limit really screwed me 😆
Hmm yep that would work. Overly complicated for what seems like a simple thing I'm trying to do lol
You could have a PDA at a well-known address that in turn holds the address of this other account as another way to do it.
That could work I guess. Just need a deterministic/vanity address for the program, since it would be a "chicken and egg" problem as the derived key requires the program key. Still feels a bit "messy" though and not really agnostic if I were to PR this back to the TokenSwap repo. Hmm.
Great, Thanks, Going to try that
I'd write directly into the `image_storage_account.data` without creating the intermediary in-memory vector
Yeah, I know, but Basically, I was trying to do something like this
I'd probably just hard code a `solana_program::declare_id!("xyz")` address in the program binary for the keypair that's used to create the account.  It doesn't even need to be a `CreateWithSeed` account I think, it's now just a plain-old-`CreateAccount` at a well-known address
I see there is an `upgrade authority` which could be used perhaps
Yep, one-time init. Can you get the owner/deployer key from a program on-chain? This was trivial in EVM but looking at explorer I don't see any "owner" field when viewing a program.
The runtime always zero-initializes new accounts, it's basically a `calloc()`
I'm going to store array of this chunk in my account data, and I don't want owner_of_this_chunk to zero initially, while initializing that account data, I want all chunk owner_of_this_chunk to like "11....11", instead of zero, that's why I was trying to use that
This is just a one-time thing for the program?  Then yeah, either payer/deployer or some othe keypair that's published to the users
Ah. So probably the only option is the payer/deployer of the program?
Ah, the base needs to be a public key, since CreateWithSeed requires a signature from the base to create the account
Yep, I just don't know what would be a good secondary pubkey to use for the base. I just want this account easily derivable and owned/controlled  by the program. If I put some other key as the base, then its another dependency the client needs to know about to derive the key
The account data is always zero initialized upon creation, and you can reference it directly.  I don't think you need to allocate a Vector for it
my account data size is around 3MB
Probably not, but you'd already provide the program address as the owner for `create_with_seed`
I'm using it to initialize my whole account data once, but will change my code if it's not possible to do so
<@!445425471027544095> is there any harm in using the program address for the base key in `create_with_seed`?
No need to "read" it, account data is automatically mapped into the program address space when referenced by an instruction
Great, Thanks
You can access the full 10MB of account data
And can we read an account data which is of 3MB? As solana supports upto 10MB
Why do you need a vector that's so large? This might indicate a design problem with what you're trying to accomplish on-chain
No because you'll run out of memory.
Is it possible to use u128 and size 20000 somehow?
and/or use a smaller size than 20000
Try `u8` or another smaller type instead of `u128`
Instead of u128
In my actual code I'm using a struct which is of 140 bytes
Do you really need a vector of `u128`s?
If I want to run this line of code what should I do, or how can I do something similar to

let vec_data: Vec<u128> = Vec::with_capacity(20000);

Without getting Error: memory allocation failed, out of memory
How can I allocate more than that? Any idea
so you just allocated too much memory at once
u128 is probably more than 8 bytes, maybe 10 bytes?
you only get 32kb of memory
using let vec_data: Vec<u128> = Vec::with_capacity(20000);
in my rust program, it is giving me this error

Program log: Error: memory allocation failed, out of memory

    Program 5wtRQ46EuGEUSapgZo7YnTVkeuYrpwchEycUVGqsf2VC consumed 200000 of 200000 compute units
    Program failed to complete: BPF program panicked
    Program 5wtRQ46EuGEUSapgZo7YnTVkeuYrpwchEycUVGqsf2VC failed: Program failed to complete

Please help me to solve this
Any consensus whether using `repr(packed)` should be avoided? I have a struct that is out of alignment by 3 bytes. I could change the boolean to a `u32` but then semantically its not right because it really should be treated as a binary value.


///////////////////////////////////////////////////////////////////////////////////////////////

Hi, completely newbie here, anyone could tell how to generate a paper wallet?
Run `export RUST_BACKTRACE=full && solana-keygen new --no-outfile` but get the error in message.txt, use WSL2 on windows10
the stake program deserializes with bincode, so it's all consistent there
maybe I missed something
I took the example from `spl`, from this line: `Instruction::new_with_bincode(id(), &StakeInstruction::Split(lamports), account_metas)`
ok interesting. it somehow manages to substitue the first 0 for a `4` - because the 4th instructions gets triggered (correctly)
holllly molly
OHHH yeah, i'm actually surprised that it's not 4 zeros upfront... an enum type is encoded as 4 bytes
yeah I thought it would be little endian by default too... that seems reasonable.

after investigating a little further for some reason the array that actually gets sent is: `[0, 0, 0, 5, 0, 0, 0]` instead of `[5, 0, 0, 0]`.

why might `&VestingInstruction::Empty { number: 5 },` be appending three zeros upfront?
Latter from https://github.com/vidorge/solflare-decrypt
You don't need to.  Just `solana-keygen recover -o sollet-wallet.json prompt:?key=0/0`,  then `node index.js raw-to-solflare sollet-wallet.json solflare-keystore.json YOUR_PASSWORD`
oof, i'm really sorry to hear that! we aim to answer every question, but sometimes things get lost unfortunately
1.69 ver is latest BC stable
i am going to use pure bouncycastle to work around this
its cause it uses bitcoinj and that is old too
i'm glad you've answered and made some vital things clear for me, i've been bumping this channel for over 2 weeks, thank very, very much for answering!
it won't compile now with latest ver of everything
i am using solanaj and its ok but it is old and not working to restore key from mnemonic phrase
i see but that is funny to not use the standard
Yes and I'm telling you there are ways to do what you want depsite that
o
it says it on the website they use these diff params
They just don't use bip32.  You'd have to recover the derived wallet, import it into a solflare keystore and use that
oh i'm glad!
o
No
I was looking at it, it's a strange issue, since bincode defaults to little-endian.  Without knowing more, it's tough to see... I know that Borsh should keep things standard on both sides, and uses fewer instructions on-chain, so i'd suggest going with that
but seriously this is the issue with the key params, are diff
Solflare keystores are just raw ED25519 keys
Pretty sure this should be doable
Oh i see that you are right
All DMs are a scam
sollet.io uses something like `44'501'0'0'`
and someone just DM me saying they had their sollet.io wallet hacked and lost their SOL
wow if you create a sollet.io wallet and export the JSON of the secret key, and then import it into solflare.com web wallet if fails. I see why, they use a different curve spec from normal SOL spec here: `M/501H/0H/0/0`
<@!539801435571748868> any chance you might know re the endianness question above?
actually, i've used Record as a base for how to use state, everything i've found in the SPL programs is useful, especially having tests inside every program's crate
any ideas?
hello sers, i'm trying to hit my node's RPC for development purposes and i'm getting this:
```
{"jsonrpc":"2.0","error":{"code":-32011,"message":"Transaction history is not available from this node"},"id":1}
```
and sorry that the tutorial side has been a bit thin, we're working on creating better content to learn, between videos, step-by-step guides, and example repos.  if you want an example from the SPL side, this record program [1] is meant to be a simple CRUD app, but it could use some more love.

[1] https://github.com/solana-labs/solana-program-library/tree/master/record/program
this `yes exactly, on the client side, you can get the account from RPC, deserialize it, and check if it's initialized` is brilliant
> so the external app that communicates with a solana program needs to do this check cleanly somehow
yes exactly, on the client side, you can get the account from RPC, deserialize it, and check if it's initialized
> btw, is it possible to change data size?
not at the moment, reallocation is not possible.  I'd recommend keeping the accounts small and creating them as needed
btw, is it possible to change data size? for example, i'm trying to figure out how to handle larger data size requirements, and possibly implement some sharding mechanism via external app.. i.e. have a number of accounts pre-allocated and used as buckets by external app
the problem is that i was testing my program with unit tests, with SPL's help. things turned a bit less shiny after deployment
i'm trying to wrap my head around this. so the external app that communicates with a solana program needs to do this check cleanly somehow, so that initialize instruction is not sent every time. initialization is basically needed to allocate and prepare some nested data, I've read Paul's document twice, and gone through the code.. it just not everything stuck, i had to scout through SPL programs and i'm understanding things step by step, btw Paul's doc is godsent, other than that I haven't found any usable descriptions with Rust samples. thank you very much, i'm looking into some more SPL programs for examples
I can't solve an endianness problem with the `solana_program_test` crate. I'm creating a tx like so:
```
let vix = VestingInstruction::Empty { number: 5 };
    let mut tx = Transaction::new_with_payer(
        &[Instruction::new_with_bincode(program_id, &vix, vec![])],
        Some(&payer.pubkey()),
    );

    tx.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(tx).await.unwrap();
```

When executed on the receiving end the number appears as  `83886080`  or `101000000000000000000000000` in binary. So it's being read backwards. The receiving end expects little endian, but apparently the test crates codes up as big endian.

Is there a way to specify the endianness when using `Instruction::new_with_bincode()`?
Yep you can do that, or you can do `create_account` in a separate instruction, before `initialize`, which may be clearer for your situation
how do i call system_instruction::create_account() inside `initialize`? inside the processor function, via `invoke`?
if you've airdropped SOL to an account, then it will have some SOL, and that's it.  in order to use it in your program, as you've noted, you need to do `create_account` which `assign`s the account to a program, and then `allocate`s some number of bytes to the account.  Your program can now receive that account, and do *anything* with the data inside that account.  So to answer:
> how do i properly initialize state accounts before passing them to the contract in a call?
you would do that in your `initialize` instruction: take a new account, make sure that the data is all 0s, then write some data to it, so that `increment` can then check this days "looks right", then write data however it wants
You may want to work through paul's intro to development on solana tutorial, which walks you through all of these steps: https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/
It's not published to crates.io yet, you can run it by cloning the spl github project instead
error in cli ? does the cargo install spl-token-lending-cli not work?
gotcha thx, I'll dig in a bit more as well
You'll need to enforce ordering on-chain in a program if you want to accomplish that
But that doesn't guarantee against txs from other nodes being placed in bw my batch
The only way real you can guarantee ordering is to have the client wait for the first transaction to be confirmed before sending the second one (which'll kill your transaction throughput, but maybe that's ok for your use case?)
my test program has 2 instructions: initialize and increment, first one makes sure that the `data` has properly structure serialized, and should be called only once, then i just call `increment` which deserializes state account's data, increments a value, then serializes back
specifically, what i don't understand is why do i have to call system_instruction::create_account (technically, i kinda do, that is to allocate some space), but what exactly does `solana-keygen new` do? i thought that since i've created a keypair and requested an airdrop, technically, solana should already be noted about its existence, the other part which i don't get is how to properly initialize a program's state account. let's say i have deployed an on-chain program and it needs to store some data inside the account(s) which i pass when i send a transaction with an instruction and account keys, how do i properly initialize state accounts before passing them to the contract in a call?
thank you for reply, but i don't understand. so far i have deployed a simple contract to devnet, generated 2 accounts via `solana-keygen new`, airdrop'd some SOLs to first account, transferred some of it to the second.. then created 3rd account with `create-address-with-seed` for a program id (which i've previously deployed and got the address), then transferred 5 sol to the third (state account).. but actually, right now i'm trying to figure out the problem with `Transaction simulation failed: Attempt to load a program that does not exist`.. tl;dr; is there a comprehensive guide which describes a full cycle, from writing a contract, deployment and how to properly communicate with it? thanks again for the reply, usually i'm asking into the void
I've probably not dug in nearly enough at this stage, but suppose a node wanted to send 3 txs and have them ordered in a specific way. My understanding was that current impl requires three separate RPC calls to the leader, which would definitely not guarantee the ordering
> to guarantee ordering of txs
How would that work?
This guy: https://docs.rs/solana-client/1.6.19/solana_client/tpu_client/index.html
basically allow nodes to send txs in batches, to guarantee ordering of txs
batch sending is usually accomplished by targetting TPUs directly over UDP
I see.  What does `sendTransactionBatch` do?
no PR at the moment, just thought I'd ask before implementing
got a PR link?  Typically it's best to ping in the PR
would the core team be open to merging in a PR for a `sendTransactionBatch` rpc method?
Thanks for you help.
Understood...
Hi there, any idea to catch error from program when the request called from backend to solana program failed. I use nestJs in backend and reactjs in frontend. Thank youuu 🙏
cargo install spl-token-lending-cli
error: could not find `spl-token-lending-cli` in registry `https://github.com/rust-lang/crates.io-index` with version `*` 

am I missing something here?  spl-token-cli. worked fine.
It's better to avoid the notion of the OneTrueAccount ™️, to improve contract throughput by not serializing transactions on the account write lock
Right.  This is likely an antipattern though
so in order to transfer lamports to a program i should create an account owned by the program and transfer lamports to that account ?
A program can _control_ lamports via PDAs
No
Okay first of all, a program can hold lamports right ?
Can you elaborate?  It's not clear what, where or when you're trying to check the amount
Any example on how to check the value of lamports sent through a transaction in a smart contract, for example in solidity we type: msg.value
I need Solana Dev's for my project interested person can dm me
Hi
After your `solana-keygen new`, you'll need to do a `system_instruction::create_account`, with the keypair and the required info: owner, size, lamports
Hm, that's a tough one, and depends on your definition of "wallet".  You could do a `getProgramAccounts` for the token program (`Tokenkeg...`) with a `dataSize` filter set to the size of a token holding account, but you'd also need to run your own validator to do that, since the RPC endpoint will timeout on that call.  Additionally, you would probably need to query all system accounts (`1111111...`) that have lamports but no data.  Either way, you'd need to run your own infra to properly get all of that info
Not yet unfortunately.  You could refactor the stake-pool-cli in order to expose easy-to-use functions though! PRs are very welcome
Hello, I am trying to set up my own testnet validator following this tutorial "https://docs.solana.com/cluster/bench-tps". However, the command "NDEBUG=1 ./multinode-demo/bootstrap-validator.sh" is taking ages and still did not catchup to the cluster yet.
Does anyone know this problem?
on it!
that is, create an account whose owner will be the program id
hey guys, what is the correct way to create/manage multiple accounts, i.e.  storage account from the CLI? i've created initial with `solana-keygen new`, and need another one as storage, to test a sample program in devnet.
I got just the following request:
curl "https://api.mainnet-beta.solana.com/" -X POST -H "Content-Type: application/json" -d '
  {"jsonrpc":"2.0", "id":1, "method":"getProgramAccounts", "params":["11111111111111111111111111111111"]}'
but as a responce I get list of 'all' wallets and their info.
How could the list be parsed into wallet numbers - I don't know. I'm just starting to learn the stuff. SOS
aggreed bro really helpful to understand the solna programming model
Dude I'm not gonna lie his blog was better structured and more informative than the docs. For newbies, the standard way should be read <@!347689664855015424> 's blog and then find whatever else you want in the rust documentation. Wouldn't hurt for solana docs to have a link to his blog
i doubt that one exist without a scrapper!
who knows a RPC request for getting the total number of wallets on SOLANA blockchain?
is there rpc equivalent endpoints/sdk for the spl-stake-pool cli?
Okay, Thank You So Much for answer🙂
No, only if you need it
score!  thanks so much!
This is quite nice: https://github.com/hashblock/solana-cli-program-template
It includes a sample Rust program as well as a sample Rust front-end

For a bare-bones Rust program template, check out https://github.com/mvines/solana-bpf-program-template
Do I always need to pass program_id in my program functions, even if I'm not using it ? my vs code is showing me unused variable: `program_id` warning
<@!445425471027544095>  what is the best non anchor based solana-rust program tutorial from start (build->test) to finish (deploy)?  🙂
The front-end sets `isSigner: true` as a hint that `administratorAccount` must sign.  But if `administratorAccount` doesn't sign then the transaction will be malformed and rejected
Nope, `is_signer` is only set by the runtime after the signature from `administratorAccount` is verified for the transaction
If someone passing keys as 
keys: [
            { pubkey: administratorAccount.publicKey, isSigner: true, isWritable: false }]

from fontend, and he set isSigner to true, then he must need private key of that account, right?
And just to confirm one more thing, if I'm checking administrator_account.is_signer before doing any operation in my program, is there any way to fake it from frontend without private key/signature of administrator_account holder

let administrator_account = next_account_info(account_info_iter)?;

        if !administrator_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature);
        }
Thanks a lot!!
Here's an example for transferring SOL (from a normal system account): https://github.com/solana-labs/solana-program-library/blob/f9c7932f03d051ad4739bc2370b5f2de30e61583/associated-token-account/program/src/processor.rs#L64-L68
<@!445425471027544095> I was going to update ... the problem is that I was trying to execute another transfer from the dest_account after the code of closing the account ... I changed the code of closing the account to the end of the ix right before return and it worked
no, that's only for SPL Tokens
<@!445425471027544095> Can I use spl_token::instruction::transfer for transferring some amount of native sol from my account to another account?
That looks fine to me, weird.  This is how an account is closed, no changes here
hey <@!347689664855015424>  gone through your blog about escrow program, 
help  me a lot to understand solana better,
currently i am working on  code for creating fungiible tokens but not able to get all concept clearly, could you please help me
Guys ... I am trying to close an account and I am getting the error: **sum of account balances before and after instruction do not match** .. the weird thing is that I have used the same code in the past and it worked ... is there any recent change on the way of closing an account that I haven't noticed ? ... this is the code I am using:

```
let dest_lamports = dest_account_info.lamports();
let source_lamports = source_account_info.lamports();

**source_account_info.lamports.borrow_mut() = 0;
**dest_account_info.lamports.borrow_mut() = dest_lamports
    .checked_add(source_lamports)
    .ok_or(Error::Overflow)?;
```
thanks ill try there
thanks <@!445425471027544095>
4k! - https://github.com/solana-labs/solana-program-library/pull/2041
Apologies if this is not the right channel for this question. Looking at the stake pool program https://spl.solana.com/stake-pool 
What is the max number of validators per pool?
This is a little confusing, does it support all LLVM or just Rust and C/C++?
I see that this zeroize package was updated to 1.4.0 (from 1.3.0) 10 hours ago, it may come from this
When the Solana team will implement Uniswap V3  token program in SPL? Any plan?
I have the for a project from scratch. was all working fine till saturday (using cargo build-bpf)
Try the #anchor channel in the Serium discord perhaps, I think there's more anchor folks there than here: https://discord.gg/4HwcKJd7
I have the same issue ...
I can use cli but cant find the same function in spl-token :
```
spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \
--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \
--multisig-signer signer-1.json \
--multisig-signer signer-2.json
```
While using `Token.createMint`, can i use Signature. As we are using in cli as `spl-token create-multisig 2 <PUB_KEY>`.
-thanks!
basic-0 ran, (the minimal example)
is there an anchor related or place anyone could help with this?  does not seem to run out of the box,   the first example, ran.
cmd: anchor build
Running: cargo +bpf build --target bpfel-unknown-unknown --release
error: failed to download `zeroize v1.4.0`

Caused by:
  unable to get packages from source

Caused by:
  feature `resolver` is required
had some issues running build commands in anchor examples, https://project-serum.github.io/anchor/tutorials/tutorial-1.html
Yeah definitely.  You could use `getMultipleAccounts` [1] to check for multiple entries for a wallet at a time (up to 100)

[1] https://docs.solana.com/developing/clients/jsonrpc-api#getmultipleaccounts
Ah, I figured. It'd be hard to do better without some kind of indexing. So I guess it's more performant to do reverse-registry lookups. I.e. "Do they have a twitter? Do they have a sol tld?" etc. Makes it hard to have more than one handle, though.
O(n) 🤕
What's the speed/efficiency of https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getProgramAccounts with a memcmp filter? Is it O(n), where n is the number of records owned by that program, or better? The specific use case here is to get all name-service names owned by a wallet.
Perfect thank you
> Is it safe to delegate stake at the last slot of epoch? 
Yes it's safe.  Rewards are generated at the end of the first block of the new epoch
Hi. How stake-program works when sending rewards to stake accounts (in what block)? Is it safe to delegate stake at the last slot of epoch? Will it be warming up like usual in the next epoch?


///////////////////////////////////////////////////////////////////////////////////////////////

ftrent
its not cooperating 🙂
now i got to get solanaj to walk this way
OK thanks Trent I saw this but it flew right over my head

WFM
OK that works fine!!!!!!!!!!!
ok i try and thanks
Yes
would i use `solana-keygen recover prompt:?key=0/0`
o i see so how do i recover a bip44 key in solana-genkey?
so if i want to recover a bip44 in solana-genkey or create a bip44 then that is not possible in solana-genkey?
oooooooooooooooo
As I said, `solana-keygen recover` with no parameter creates a raw ed25519 keypair from the seed phrase entropy, not a bip44 derivation at all.
i know and i am not using my software to test the sollet.io or solana-keygen problem. i just went into both programs and tried to create one key in sollet.io and recover it in solana-genkey and it fails
Then you're doing it wrong.  I gave you exact instructions to do this yesterday
try it
i see yes it says that too but when i try to recover a sollet created key in solana-keygen it fails
I have the same wallet everywhere that isn't doing something stupid
Sollet 100% uses `m/44'/501'/0'/0'` for the initial wallet
thats wierd, sollet.io says they use these params of `m/44'/501'/0'/0'` but i try to recover from passphrase in `solana-keygen recover` a wallet i created in sollet.io and I do not get the same key recovered. when solana-keygen creates a key and there is no `propt:?key=1/2` param, are you sure its using this `m/44'/501'/0'/0'` or is it using `m/44'/501'` or something else? we should try to have all the wallets recover the same as solana-keygen if same recoveryphrase is used
OK thanks so much I will study this now as this is the last bit i need to sort and I am ready to rock!
Hi all ... what is a good approach for updating the accounts data layout across the different versions of the program in order to have the previously created accounts with the same data layout as the new ones?
`solana-keygen recover prompt:?key=1/2` will derive the keypair at `m/44'/501'/1'/2'`
`solana-keygen recover ASK` or `solana-keygen recover` with no input will derive a raw ed25519 keypair, as per this code here: https://github.com/solana-labs/solana/blob/207c90bd8b222bf5fe91dea27b4c32ad35d896a2/sdk/src/signer/keypair.rs#L154
so i can try 44/501 too
I am building a desktop java app for all platforms that stakes to all mainnet nodes and i need to be able to recover wallet keys with pass phrase so it must recover same key as `solana-keygen recover`
What exactly are you trying to do? Our bip44 derivation path is `m/44'/501'` with optional `<account>` and `<change>` levels
oh super thanks, i can try this now as I am running a crack on it as we speak but it slow 🙂
Yes, that's me. I think solana-keygen is bip44, and uses `m/55H/501H/0H`. I could be wrong, but that's what we used/tested in solanaj
hi you are the man i am looking for. you worked on solanaj right? what are the magic params to get the same result as solana-keygen?
what's the differnece between `solana-program` and `solana-sdk` libraries? which should i be using when?
is `logsSubscribe` not reliable? It seems to only work maybe half of the time
i have the nmemonic recovery from phrase working now, but just need right magic
Trent what are the magic params for the solana-keygen as i looked in the rust for keygen and cannot find anything. it should be something like `m201'/401'/0'/0'`
Bump your solana crates.  Especially `solana-program`
hi all, I'm getting this error when I try to compile a solana program:
```
error[E0277]: the trait bound `Pubkey: BorshDeserialize` is not satisfied
  --> friends/program/src/instruction.rs:12:26
   |
12 | #[derive(BorshSerialize, BorshDeserialize, PartialEq, Debug, Clone)]
   |                          ^^^^^^^^^^^^^^^^ the trait `BorshDeserialize` is not implemented for `Pubkey`
```

I'm using solana-program 1.6.5 and borsh 0.8.2
the satisfaction you get when the token balance matches after a 500 line integration test haha
nice! coz I just tried with `solana-client` and was getting this error: `can call blocking only when running on the multi-threaded runtime`. I guess it's not happy with test's single threaded runtime. But `banks_client.get_account` works!
for the test environment, you'll do `banks_client.get_account`
I see!
Ah, in that case, you need to query the account from RPC, using `getAccountInfo`: https://docs.solana.com/developing/clients/jsonrpc-api#getaccountinfo --there are bindings in Rust / JS to do this easily
According to the error, it looks like you have a character that isn't base58 in your input
I basically did a bunch of operations on a token account and now want to check its balance - for which I need to unpack its data - for which I need `AccountInfo`
right right, what if I need it outside the program, inside a test environment?
You have to pass the account to the program to get the full `AccountInfo`.  There's no way currently to dynamically load an account onchain from its pubkey, so you have to pass it in from the outside, by declaring it as one of the `AccountMeta`s in your Instruction.  For example, this `propose` instruction declares a lot of accounts for the program, some are readonly, some are mutable, and some are signers: https://github.com/solana-labs/solana-program-library/blob/8871e172d1a2b0f3eee33e78ce120264a3c78915/feature-proposal/program/src/instruction.rs#L105
You can see the highlighted changes in each release at https://github.com/solana-labs/solana/releases -- keep in mind that those are usually limited to just the big changes in each release
You may want to ask around about how to use the token metadata standard with metaplex.  we still haven't integrated the token metadata standard into the solana program library, but it's high on the list.  You can get some more info at their repo [1] and this doc [2]

[1] https://github.com/metaplex-foundation/metaplex
[2] https://www.notion.so/Metaplex-Developer-Guide-afefbc19841744c28587ab948a08cfac
should be the same for the same *.so.  if you use a different version of the bpf toolchain / rust / sdk, however, you may see some differences
`HashMap` doesn't work on-chain at the moment, so you'll have to use `BTreeMap`.  As for actually saving it, you can iterate through the key-value pairs and serializing each of those.  In general though, we suggest using mutiple accounts, and program-derived addresses for each account: https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
Is there any reason to believe the compute usage in cargo test-bpf is different from real life?
the ProgramTest native runner has lots of limitations unfortunately, but thankfully, `cargo test-bpf` is best since it actually gives you the real BPF environment
Very cool, thanks for this! I think in our initial testing we were seeing an even bigger difference between borsh and bincode.  it's great to have new data points
how can I get `.data` from a `Pubkey` in rust? I think I have to go via `AccountInfo` but I'm not sure how to convert a `Pubkey` instance into an `AccountInfo` instance.. there doesn't seem to be an obvious method here - https://docs.rs/solana-sdk/1.7.6/solana_sdk/account_info/struct.AccountInfo.html
Does anyone know where I can find a changelog for Solana releases?
hi guys, im new to solana / nft, can anyone point me on resources how to create solana NFT associated to digital assets like images? i know nft is a single token with decimal 0, but how can i associate a digital asset to it? thank you.  i want to create our own, for a test app im working on..
LF technical cofounder, Rust and blockchain needed. Feel free to msg for details
lol
So nobody ever closed an account from the program using ProgramTest with bpf?
Oh lame, it fails with `ProgramTest` + `cargo test` but works with `cargo test-bpf`
Hi guys, I am trying to port Ethereum DeFi contracts into Solana... 
I have learned about saving a struct or an array in a program's account data, but still do not know how to save a HashMap<userAddress in string, amount in u64> into a program's account data... and how to read its values like checking each user address' staked amount. Please help. Thank you! https://stackoverflow.com/questions/68454062/solana-rust-program-hashmapstring-u64
Am i missing something?
In paulx tutorial, the account data is set to an empty array at the end with `*escrow_account.data.borrow_mut() = &mut [];`
But this causes `Err(TransactionError(InstructionError(1, AccountDataSizeChanged)))` in my program
Ok, thanks for your answer
you will need to review your logic I guess to stay within the limits. Its a bit back to algorithm 101 but I doubt there are other options
Thanks bro. We understand it's due to computation limits. Do you know how to solve it by any chance?
Hi, did someone here have this problem and could tell me what is its cause?:
there is a part on the doc about computation limits
Hi, do you guys know a project that allows to exchange SOL (airdropped) for another devnet token on devnet? Thanks
Hi guys, we got an error in our devnet program running :" Program failed to complete: exceeded maximum number of instructions allowed(200,000) at instructions #16893" Is this a limit on Devnet? How can this be solved? anyone knows?
i want to know if there are resources about creating Solana NFT with images assets, etc, anything that you guys can share? thank you
hi, im new to solana, apologies if this is not the right channel for my question.
cool so the solution was also to run the test as `cargo test-bpf` instead of native code
getting this error while running the test: `Account data resizing not supported yet: 0 -> 81. Consider making this test conditional on #[cfg(feature = "test-bpf")]`. Any advice?
btw returning to this point.. I've ran some benchmarking of `bincode`, `borsh` and manual de/serialization of instruction data for anyone interested.

results / code here -> https://github.com/ilmoi/rebuild-token-vesting
interesting! didn't realize there was that command.

so my integration tests work when run as native, but I get this error when running with `crago-test-bpf`:
```
thread 'main' panicked at 'Program file data not available for token_vesting (SoLi39YzAM2zEXcecy77VGbxLB5yHryNckY9Jx7yBKM)', /Users/ilmoi/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-test-1.7.4/src/lib.rs:695:17
FAILED
```

how do I make it see the program? I have a local node running and the program is deployed
is it some type of OS/kernel-level optimization with multiple sockets and multiple threads on the TPU side?
what's the benefit to the multi_bind_in_range on those tpu + tvu sockets in Node::new_with_external_ip
Hi guys, we got an error in our devnet program running :" Program failed to complete: exceeded maximum number of instructions allowed(200,000) at instructions #16893" How can this be solved? anyone knows?
It doesn’t work when you run the tests as native code, but if you run them in the BPF VM (cargo-test-bpf) then it will
I'm getting `[2021-07-20T04:21:25.695211000Z DEBUG solana_runtime::message_processor] Program log: SyscallStubs: sol_log_compute_units() not available`
am I right that `sol_log_compute_units();` doesn't work in tests?
Like this? https://godbolt.org/z/o3W3cqorT
General question about Rust: I started learning Rust today, had a question for those of you who know C++ and Rust. How would I write the following simple C++ code in Rust?

C++: https://godbolt.org/z/13EnMdjfr
My best attempt in Rust: https://godbolt.org/z/ce7Ejoszh

The C++ code is all done at compile-time, but the Rust implementation appears to evaluate the branch at runtime. Is there a better way to write that C++ in Rust?
What format of public and private key should be passed for <KEYPAIR>?
`solana stake-authorize <STAKE_ACCOUNT_ADDRESS> \
    --stake-authority <KEYPAIR> --new-stake-authority <PUBKEY> \
    --fee-payer <KEYPAIR>`
Also, is there any library for creating and managing stake accounts?
yeah package management 101 - always use a lock file to (mostly) prevent upstream from randomly breaking you!
So for an existing project Cargo.lock would save the day
Don't think zeroize is checking all its downstreams 😛 In the case of the SPL repo, we commit our Cargo.lock file, so it was unaffected.
Interesting, how did this pass CI?
Thanks, I’ll check this out, all the solana apps are PATH’d so not sure what I might have missed
usually subcommand not found related issues have been ENV/$PATH related issues cargo path may need to be included or udpated?
Yeah, that's correct. I think locking `zeroize` to the earlier version is the quickest fix atm. We do have a fix for this issue coming in v1.7.7: https://github.com/solana-labs/solana/pull/18766
update, broken builds. it appears zerorize latest update, has broken the builds of many solana-labs apps and examples, including solana-cli-program-template, because this zeroize library is referenced often by dependencies in the chain. it was recently upgrade to 1.4.0 a day ago, and linked dependencies will not build & compile as is now.  im not sure what a fix would be at this time. simply doing the recommendations inside the cargo.toml solana apps portion does not appear to work - and im not sure how it affects linked dependency chains. should this be officially logged somewhere?  

the only workaround I know of is to use a hard coded referenced version and checksum in the cargo lock of the builds in question. im sure there is a better temp work around or answer to just build. 

[[package]]
name = "zeroize"
version = "1.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4756f7db3f7b5574938c3eb1c117038b8e07f95ee6718c0efad4ac21508f1efd"
if anyone has any ideas on a fix
I see some other messages about this, but using `1.7.6` now `cargo build-bpf` is broken. This is me trying to compile the hello-world in rust
```
 program-rust git:(master) ✗ cargo-build-bpf 
BPF SDK: /Users/owner/.local/share/solana/install/releases/1.7.6/solana-release/bin/sdk/bpf
Running: rustup toolchain list -v
Running: cargo +bpf build --target bpfel-unknown-unknown --release
error: no such subcommand: `+bpf`

        Did you mean `b`?
```
is there a grammar or whatever for the spl_token account and mint binary layouts? trying to make anchor play nice with this
Like what variables will you use to create an estimate?
Hey please does anyone know how to estimate validator profits per epoch?
Hi, anyone can point me to some docs on how delegating sol works? Is it an on-chain program, if so, where can we find the source?
Please stop cross posting
How to verify a keypair?
I use `solana-keygen new` to create paper wallet with no passphrase but verification always gives fail.
solana-keygen verify [pubkey] prompt://
[pubkey recovery] seed phrase: [a b c...]
[pubkey recovery] If this seed phrase has an associated passphrase, enter it now. Otherwise, press ENTER to continue: 
Verification for public key: [pubkey]: Failed
Anyone could help? What could go wrong?
The SPL Token `CloseAccount` instruction does this: https://github.com/solana-labs/solana-program-library/blob/b06d1be6cb9a2caa379e9fc17c9c3eccbd770e97/token/program/src/processor.rs#L589-L595
Any example on how to transfer lamports from account owned by a program to a certain address?
pretty sure?
`DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION="Ubuntu 18.04.4 LTS"`
Can't imagine a VM causing any problems there
Works fine on real linux here
Are you sure this is WSL, not windows native?
thanks for the help!
that... makes a ton of sense. I'm deserializing manually - https://github.com/ilmoi/rebuild-token-vesting/blob/master/src/instruction.rs#L134


///////////////////////////////////////////////////////////////////////////////////////////////

Websockets are a nontrivial protocol to implement.  Feel free to lookup the spec
thanks <@!585868308419444749>
and work from that to make it work using sockets
will try opt. 2
ohhhh ok, yeah that was option two, was hoping to not having to install another package
Either way, you're lower level than this channel is willing to support.  Use a vetted websockets library
Pretty sure that means your system has no free ephemeral ports.
Hey, anyone knowing how to use websockets in local?, trying to implement it in python, however i'm trying to reach `127.0.0.1:8900` localhost test, and I'm getting `OSError: [Errno 48] Address already in use`
I'm sorry for my bad english. Thank you for information
I would recommend you check out this repository https://github.com/project-serum/spl-token-wallet
I am creating a mobile wallet for spl token. I ask the user sol before sending spl tokens?
It must be payed in SOL
It is not possible to pay the network transaction fee in an SPL token. You can read about transaction fees here https://docs.solana.com/transaction_fees
Yes, transaction fee
Maybe I am not understanding your question correctly. When you say "Commission" are you referring to the transaction fee? Or do you have some sort of program/dapp that you want to collect fees in
pay commission in spl tokens
I'm not really sure what your asking
Is it possible to make that the commission is debited by my tokens?
You have to pay the transaction fee in SOL. This works almost the same as ETH how when you send any ERC-20 Token you pay with ETH.
https://docs.solana.com/cluster/rpc-endpoints If you checkout this page Solana has a few public endpoints. https://api.mainnet-beta.solana.com  Solana-hosted api node cluster, backed by a load balancer; rate-limited. https://solana-api.projectserum.com - Project Serum-hosted api node. The Public RPC nodes have rate limits that may not suite your needs. If this is the case their are premium rpc pools like https://rpcpool.com/ . RPC pool also offers a free RPC with Up to 10 RPS. Anther good paid solana RPC is https://datahub.figment.io/
Is it possible to pay once so that funds are not withdrawn for sending a token?
Hi guys. Is it possible to send spl token without commission fee in Sol?
runs on win, mac and linux too
security is extra tite, we use no MS nowhere, even in DEV shop no MS nada, and we use PGP wrapper of your password SHA512 hash inside a final wrapper layer of AES-256 TLS with PINNED SSL server Certs. O and that 3way rapped PW is only server login PW and your SOL wallet key is separate and u only one in Universe that has it 🙂
I have a wallet that will let you do all this, keeps your key in thin air even if you want to use paper phrase only to store key on paper, or u can keep on disk. and we never keep any keys on server ever, period. o and we use 24 word mnemonics. o and we let you stake to any node you want to. and yes, trany's are signed securely on your PC with your key in memory and we don't even write key to disk if u use paper wallet.
I see that there is a small fee to create a stake pool, however, 1000 is the max number of validators and there’s a fee of 1 SOL/added Validator. Can we create a stake pool with only, say, 20 Validators and add more over time? Or are the Stake pool manager (sets up the pool) and Stake pool staker (adds validators) completely separate entities
Pubkey::from_str
is there function in the rust lib to go from `base58_string -> Pubkey`
how exactly does account closure via draining lamports work? For example lets say i have an account A with 120 bytes of space. Sometime in the future I want to reuse the same address of account A, but add more space, say make it 240 bytes in total.

Would the following work:

* copy contents of account a
* transfer lamports from account a to temp address
* create account b with 240 bytes of space
* copy values back into account b


in theory this should work, however my uncertaintiy lies with how solana considers an account "deleted". Do the lamports need to be drained AND the instruction finishes, or the transaction ends, or do the lamports just need to be drained
yeah, its more more like plain shamir storage in this case, no closure
Yeah I see it's throwing a custom error from my program, but I'm confused as to why it doesn't even log "Reached entrypoint" as I have a msg! macro in my entrypoint.rs file, which suggests it's not even getting there?
My entrypoint.rs file:
```
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey, msg
};

use crate::processor::Processor;

entrypoint!(process_instruction);
fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!("Reached entrypoint");
    Processor::process(program_id, accounts, instruction_data)
}```
Usually you type your password in the wallet itself, the key is never exposed ot the Dapp. This one kinds of defeat the purpose of the wallet.
It's saying your program is throwing an error ... index of 0 in your custom errors. Try debugging with ProgramTest which enables walking through the BPF
it depeds how each software piece manages it
anywhere you type your encryption key, you are giving up access to your key.
but Metaplex gets the key, not a signed transaction
since Torus encryption not playing here, they only act as decentralized storage for key
So Metaplex needs to be secure as well
but here you are getting the key from Torus and  metaplex uses it
typically wallets keep a secure closure so you only get signed transactions out
its not unusual, as long a you provide you encryption key any software can decrypt your key and use to sign transactions for you
but how is the dapp even allowed to get the private key?
So this code has full access to your key, no Torus protection here
yes, thats vulnerable right there.  Torus breaks your key in shamir sharding but this TS code from metaplex is loading the key here using your encryption password https://github.com/metaplex-foundation/metaplex/blob/master/js/packages/common/src/wallet-adapters/torus/index.tsx#L8
I don't fully understand but it looks like it surrenders a private key to the dapp
https://github.com/metaplex-foundation/metaplex/tree/master/js/packages/common/src/wallet-adapters/torus
Correct me if i am wrong, but that looks like the worst possible thing to do
I don't think that is entirely true, metaplex has a torus wallet support of some kind
Maybe you could use it as key vault, but it wont sign transactions
Torus wallet doesn't support Solana yet  https://docs.tor.us/wallet/developing-with-wallet/networklist
Torus is great as decentralized secure store for key IMHO
https://docs.phantom.app/integrating/sending-a-transaction
But website storage is too unsecure, you dont want to use that, you want to integrate a secure wallet for signing transactions
Are you talking about reg website localstore?  extension storage is way safer.
Don't store key in local storage
Hello anyone using a recoverable wallet like Torus?
What pattern do you use to protect the private key in the clients local storage?
I'll try to connect api.mainnet-beta.solana.com websocket for now
Cant wait to get started, actually this is kinda getting in the middle, no public list of endpoints....
Dont wanna be that guy. Legitimaly excited about building on Solana, just finding some interesting things
Bro this is odd, no public endpoints on Solana?  Everyone runs it own node or connects to Solana.com ?
Only this one
I went to explorer.solana.com and couldn't find any node info :/
Dont you?  or is it me?  dunno, perhaps something that would be nice have here, not trying drama, simply commenting
For an open blockchain you sorta expect to able to connect to public endpoints
Looking for an open socket, dm me if you could kindly proivde,  if not available then I guess I'll expedite our node setup .
Sorry I'm a lazy dev, if community knows why should I waste my time
No list of public endpoints? :/  

Does anybody knows if api.mainnet-beta.solana.com support sockets ?
Hey guys, I get error:
```Transaction simulation failed: Error processing Instruction 1: custom program error: 0x0 
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program DkhCGxQnQRh7e68ZQjjYABktGi1rG4HEMjdFL45TNQY6 invoke [1]
    Program DkhCGxQnQRh7e68ZQjjYABktGi1rG4HEMjdFL45TNQY6 consumed 1731 of 200000 compute units
    Program DkhCGxQnQRh7e68ZQjjYABktGi1rG4HEMjdFL45TNQY6 failed: custom program error: 0x0
console.<computed> @ index.js:1
sendEncodedTransaction @ connection.ts:3572
async function (async)
sendEncodedTransaction @ connection.ts:3563
sendRawTransaction @ connection.ts:3535```
The transaction doesn't seem to reach my program entrypoint. The transaction code is here: https://github.com/willp11/solana-token-distributor/blob/master/js-ui/src/util/createLockupSchedule.js
Is there something like trigger when receive a transfer?
Is there a way to do so?
Really depends of your end goal, i learned both. But js first as it is the way to make dapps
Hi I want to build a mechanism that automatically return any unauthorized transfer to my program owned account.
So what would be your advise be, just complete the figment learn with .js or the rust crate you mentioned thanks
hadn't had the time to setup an api node but want to get going with my project asap
Is there a list of public web socket pubsub endpoint ?
I haven't used for anything complicated yet but it looks even more complete over the json rpc feature set
for rust there is a crate called solana-client:
https://github.com/solana-labs/solana/tree/master/client
Im now on the figment learn series but only know rust , is the only wait to connect to solana dev net through JavaScript?  Or can you access that solanaweb3 package with rust?

with the banks client for solana program testing, how can i see the amount of compute units consumed by a transaction? it does get logged from runnign `banks_client.process_transaction` but i want to be able to use the compute units value programmatically via some tests.

i believe i could use `banks_client.get_transactioN-status` but im unsure how to get the transaction signature from sending a test tx. `banks_client.send_transaction` doesnt appear to give one
is there a swap program written in anchor without using the serum library ?
are you seeing send transactions timeout on devnet as well?
Came here for this
Hi
Is devnet down?
Is anyone else experiencing issues with devnet? All my tx's keep timing out
Or are the Stake pool manager (sets up the pool) and Stake pool staker (adds validators) completely separate entities
I see that there is a small fee to create a stake pool, however, 1000 is the max number of validators and there’s a fee of 1 SOL/added Validator. Can we create a stake pool with only, say, 20 Validators and add more over time?


///////////////////////////////////////////////////////////////////////////////////////////////

anyone know why I cannot get the SOL in devnet?
is there a repository with a working sample program that can be compiled and deployed, the one that you know for a fact must work after deployment? so i could test and experiment?
initialize works. it creates an account via system_instruction::create_account(), then increment works as well
`cargo test-bpf` passes
```#[derive(Clone, Debug, BorshSerialize, BorshDeserialize, PartialEq)]
pub enum CounterInstruction {
    Initialize(u8),
    Increment,
}

pub fn initialize(
    funding_address: &Pubkey,
    storage_address: &Pubkey,
    bump_seed: u8,
) -> Instruction {
    Instruction::new_with_borsh(
        program_id(),
        &CounterInstruction::Initialize(bump_seed),
        vec![
            AccountMeta::new(*funding_address, true),
            AccountMeta::new(*storage_address, false),
            AccountMeta::new_readonly(system_program::id(), false),
        ],
    )
}

pub fn increment(storage_address: &Pubkey) -> Instruction {
    Instruction::new_with_borsh(
        program_id(),
        &CounterInstruction::Increment,
        vec![AccountMeta::new(*storage_address, false)],
    )
}
``` a very simple instruction
funder is loaded with `read_keypair_file`
```    let (storage_address, bump_seed) =
        Pubkey::find_program_address(&[br"Let me count you in"], &program_id);

    let client = RpcClient::new("https://api.devnet.solana.com".to_string());

    let mut tx = Transaction::new_with_payer(
        &[
            instruction::initialize(&funder.pubkey(), &storage_address, bump_seed),
            instruction::increment(&storage_address),
            instruction::increment(&storage_address),
            instruction::increment(&storage_address),
        ],
        Some(&funder.pubkey()),
    );

    let (recent_blockhash, _) = client.get_recent_blockhash().unwrap();

    tx.sign(&[&funder], recent_blockhash);
    let sig = client.send_and_confirm_transaction(&tx).unwrap();
```
Ok.  Then the instruction is being constructed wrong
it's the address returned by `solana program deploy`
it shows that this is an executable address
What about it?
https://explorer.solana.com/address/3qHxEb34JYiE6DaQ8YYvBZgnmrGsVERq8vwmgK28dCbB?cluster=devnet
It means there is an instruction in the transaction that specifies a program id that is not a program
No.
`Transaction simulation failed: This program may not be used for executing instructions` what exactly does this error mean?
the devnet is dead now?
I'm getting this issue for a devnet RPC method, only happening on devnet though

```
curl https://api.devnet.solana.com -X POST -H "Content-Type: application/json" -d '
  {
  "jsonrpc": "2.0",
  "id":1,"method":"getProgramAccounts",
  "params":[
    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    {
      "filters":[{"memcmp":{"offset":32,"bytes":"6PDPBGqzVH3oodaDYeLGkJqh2WHnWAqwGkAfL27s1EFa"}},{"dataSize":165}],
      "commitment": "recent",
      "encoding":"base58"
    }
  ]
}
'
```

```
{"jsonrpc":"2.0","error":{"code":-32600,"message":"Encoded binary (base 58) data should be less than 128 bytes, please use Base64 encoding."},"id":1}
```
Mint test token doesn't work for me using Sollet on devnet, gives error 'cannot read property '_bn' of undefined'
thanks...
hi all, is there any guidance on how long rpc calls should subscribe for? for example i subscribe to a log that has "new_orders". How bad is it to assume that rpc call will continue notifying?
Hi is there any way to forbid unauthorized transfer to my program owned account? Or is there a way to return any unauthorized transfer to my program owned account?
thank you, at least now i'm somewhat back on track, so much .. so much time wasted
the command is still there
I think it is old way of doing this
damn it, i was looking at `solana deploy`
solana program deploy --help
better precreate or you can copy it and use
`help` doesn't mention `--program-id` argument
--program-id <PROGRAM_ID>
i see, but i still don't understand. so i have to pre-create the program id address prior to deployment?
for first run keypair file path needed, for next runs pubkey or keypair
```                                           testnet, devnet, localhost]
    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair
        --output <FORMAT>                  Return information in specified output format [possible values: json, json-
                                           compact]```
`or input parameter`, parameter to keypair file or the program address?
solana deploy may use <program_name>_keypair.json near your .so file or input parameter. But if there are no key it generates random one and saves it to .json
that's what i don't understand now, what is the relation between that what `solana deploy` returns and the arbitrary id i declare in the program
maybe something like solana_program::declare_id!("3qHxEb34JYiE6DaQ8YYvBZgnmrGsVERq8vwmgK28dCbB"); and use crate::ID
at first i thought i needed it only for tests
yes, i've started wondering
but you are trying to call 3qHxEb34JYiE6DaQ8YYvBZgnmrGsVERq8vwmgK28dCbB
just a function i've introduced before i discovered `declare_id!` macro
lib.rs: ```pub fn program_id() -> Pubkey {
    Pubkey::from_str("AcmeCounter11111111111111111111111111111111").unwrap()
}

solana_program::declare_id!("AcmeCounter11111111111111111111111111111111")```
what is program_id()
<@!365207867365654539> sorry to bother you again, but did you see any wrongness in what i've pasted as a response?
Hi everyone!
I have a problem with Neon-evm performance test.
Solana runs on a virtual machine with 36 cores and 68 Gb of RAM.
Solana version 1.6.9.
The performance test runs on another virtual machine.
The test sends 1000 transactions with delay of 1 millisecond. TCP client is used.
Transaction execution spends about 14000 compute units.

In the first case, transactions are signed by different solana accounts.
The performance is about 150-200 transactions per block.  
Transactions are executed in parallel.

In the second case, transaction are signed by a single sender.
The performance is about 60 transactions per block.
Transactions are executed sequentially.

Why is number of the transactions in block so small in the first case?
where instructions are: ```#[derive(Clone, Debug, BorshSerialize, BorshDeserialize, PartialEq)]
pub enum CounterInstruction {
    Initialize(u8),
    Increment,
}

pub fn initialize(
    funding_address: &Pubkey,
    storage_address: &Pubkey,
    bump_seed: u8,
) -> Instruction {
    Instruction::new_with_borsh(
        program_id(),
        &CounterInstruction::Initialize(bump_seed),
        vec![
            AccountMeta::new(*funding_address, true),
            AccountMeta::new(*storage_address, false),
            AccountMeta::new_readonly(system_program::id(), false),
        ],
    )
}

pub fn increment(storage_address: &Pubkey) -> Instruction {
    Instruction::new_with_borsh(
        program_id(),
        &CounterInstruction::Increment,
        vec![AccountMeta::new(*storage_address, false)],
    )
}
```
```    let (storage_address, bump_seed) =
        Pubkey::find_program_address(&[br"Let me count you in"], &program_id);

    eprintln!("funder = {:#?}", funder.pubkey());

    let client = RpcClient::new("https://api.devnet.solana.com".to_string());
    println!("{:#?}", client.get_account(&program_id).unwrap());

    let mut tx = Transaction::new_with_payer(
        &[
            instruction::initialize(&funder.pubkey(), &storage_address, bump_seed),
            instruction::increment(&storage_address),
            instruction::increment(&storage_address),
            instruction::increment(&storage_address),
        ],
        Some(&funder.pubkey()),
    );

    let (recent_blockhash, _) = client.get_recent_blockhash().unwrap();

    tx.sign(&[&funder], recent_blockhash);
    let sig = client.send_and_confirm_transaction(&tx).unwrap();
```
how do you make Instruction {  program_id: ..,   accounts,   data }?
```    let client = RpcClient::new("https://api.devnet.solana.com".to_string());
```
`solana deploy ...` = ```Program Id: 3qHxEb34JYiE6DaQ8YYvBZgnmrGsVERq8vwmgK28dCbB```
I think it is not about versions
solana-{program,program-test,sdk,client} is 1.7.8, but i've juggled from 1.7.6 to 1.7.8
solana deploy output?
```[dependencies]
borsh = "0.9.0"
borsh-derive = "0.9.0"
num-traits = "0.2.14"
num-derive = "0.3.3"
solana-program = "1.7.8"
thiserror = "1.0.26"

[dev-dependencies]
solana-program-test = "1.7.8"
solana-sdk = "1.7.8"
solana-client = "1.7.8"

[features]
test-bpf = []```
`solana cluster-version` = 1.7.7
```
...
RPC URL: https://api.devnet.solana.com
WebSocket URL: wss://api.devnet.solana.com/ (computed)
...```
`Error: 9Xy8H3jAxwYDmwjBDN14e8m8mmNK8DraafA36E8XkxEA is not a BPF program`
i get
`solana program show 9Xy8H3jAxwYDmwjBDN14e8m8mmNK8DraafA36E8XkxEA` this is a test address in devnet
solana config get
if all is OK maybe need to wait. Or check is it the same cluster
if you try to use some address for program id not from deploy command for example
i am completely, and utterly, just LOST, i am out of options of how to understand it
<@!365207867365654539> could you define correct address? what is the address that is returned by `solana deploy` command? i get feedback from `solana program show`, it correctly displays authority, program id, program data address, length etc., also rpc client obtains this `Account { lamports: 1141440 data.len: 36 owner: BPFLoaderUpgradeab1e11111111111111111111111 executable: true rent_epoch: 163 data: 0200000093250785736707e63882ee4cc82a368ace8f8a7c96159ccdebe604cab9249afb }` when i `get_account`
deploy your program to correct address and wait some time (around 30 sec)
how to solve `Transaction simulation failed: Attempt to load a program that does not exist`?
Can anybody help me to sort out the error.......npm run start

> helloworld@0.0.1 start /home/ubuntu/Desktop/example-helloworld
> ts-node src/client/main.ts

Let's say hello to a Solana account...
(node:4653) Warning: N-API is an experimental feature and could change at any time.
ReferenceError: URL is not defined
    at new Connection (/home/ubuntu/Desktop/example-helloworld/node_modules/@solana/web3.js/src/connection.ts:2027:15)
    at Object.<anonymous> (/home/ubuntu/Desktop/example-helloworld/src/client/hello_world.ts:96:16)
    at Generator.next (<anonymous>)
    at fulfilled (/home/ubuntu/Desktop/example-helloworld/src/client/hello_world.ts:26:58)
    at <anonymous>
npm ERR! code ELIFECYCLE
npm ERR! errno 255
npm ERR! helloworld@0.0.1 start: `ts-node src/client/main.ts`
npm ERR! Exit status 255
npm ERR! 
npm ERR! Failed at the helloworld@0.0.1 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/ubuntu/.npm/_logs/2021-07-26T10_00_41_924Z-debug.log
but yeah you can get examples in JS. For rust version need more thinking
some times work , ı cant understand
any idea ?
hi  , ı have problem.   

``` name = "get"
    let newAbi = JSON.parse(abi).find((e) => e.name == name);

    const accountInfo = await connection.getAccountInfo(contractStorageAccount);

    let length = Number(accountInfo.data.readUInt32LE(4));
    let offset = Number(accountInfo.data.readUInt32LE(8));

    let encoded = accountInfo.data.slice(offset, length + offset);
    let returns = web3.eth.abi.decodeParameters(newAbi.outputs, encoded.toString('hex'));
    console.log(returns)```

its my error
```Unhandled Rejection (Error): Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.```
I understood how to deploy helloworld program and got its program id after deploying it on devnet but how to interact with it?
JS is popular for FE. But it is not required to make FE. You can use CLI
is javascript also requied/
ok sir
rust is enough
Sir to start as blockchain developer on Solana platform which all languages we must know?
I did the tutorials not too long ago, they should be working. Try to figure out where you got it wrong
So far i am successful till deploying helloworld program and got its program id...but when i use npm run start i get error
sdk for rust client
Oh i see, i missed it. Thanks a lot brother
Have you tried to do this tutorials ? https://project-serum.github.io/anchor/getting-started/introduction.html
wrong crate. https://docs.rs/solana-program/1.7.8/solana_program/system_instruction/fn.create_account.html this
Ok....for example i have deployed helloworld program in Solana blockchian and got its program id....now i want to interact with it...can you please tell me how should i use invoke command?
Ok thanks, i thought this should not be done this way because given the documentation : https://docs.rs/solana-sdk/1.7.8/solana_sdk/account/index.html
The create accounts method are deprecated and only testing methods are left available
invoke command
Like in Ethereum we can call any function of on-chain smart contract using geth commands...so do we have such facility in Solana?
This is pretty vague, do you have a more specific question ?
can anyone help to understand how to interact with a on-chain program in solana.
Is it possible for contract to know what cluster is running it? Has solana some config sysvar with cluster information?
Creating account requires signature but only program can sing PDA. You must call create account from your contract code not from JS
Hi everyone, i'm having some trouble using PDA to create a deterministic way to access an account. What i want is for my user to easily find an account that hold some data. For that i will need to "allocate" the memory from the client side using a standard account as to transfert lamport for rent but i also want this account to be have a PDA address so as a user i cant "sign" on the behalf of a program.

This is the code i have for now but ofc it fails :
```
        const program = anchor.workspace.Basic1;
        const tx = new anchor.web3.Transaction();

        let programAddr = await anchor.web3.PublicKey.createProgramAddress([Buffer.from("bonjour")], program.programId)
        tx.add(
            anchor.web3.SystemProgram.createAccount({
                fromPubkey: provider.wallet.publicKey,
                newAccountPubkey: programAddr,
                space: 8 + 8,
                lamports: await provider.connection.getMinimumBalanceForRentExemption(
                    8 + 8
                ),
                programId: program.programId,
            })
        )
        await provider.send(tx); // invalid signature
```

What am i missing here ? Is it even possible ?
what node version are you running? first link on google - https://github.com/GoogleChrome/lighthouse/issues/8909
I am having problem in interacting with helloworld program in solana. When i use command npm run start i get error as referenceError: URL is not defined...can any one help me?
Which field match with `authorizedPubkey` here(https://solana-labs.github.io/solana-web3.js/modules.html#DelegateStakeParams) among here(https://solana-labs.github.io/solana-web3.js/modules.html#CreateStakeAccountWithSeedParams) ?  Does `authorizedPubkey` using in delegate match with `basePubkey, fromPubkey, authorized.staker, authorized.withdrawer` or  another new pubkey?
Has anyone run into an issue where the rate of signatureSubscribes > the rate of unsubscribing here? https://github.com/solana-labs/solana-web3.js/blob/b5e4a4dcb29e785fc1c3a4132b364fca3d859902/src/connection.ts#L2620

We have this problem and past a certain point, we breach some rpc limit from our provider.
And then how to check how much  liquidity when new market is added ?
<@831450660146642974>
I need some hints on how to get all token mint address that belongs to a mint authority
Nice one thanks
Thank u: )
https://solana-labs.github.io/solana-web3.js/classes/StakeProgram.html#deactivate
How to undelegate using solana web3? https://solana-labs.github.io/solana-web3.js/index.html
for testing - not sure if there is a tutorial but I learned by rebuilding the tests in this repo -> https://github.com/Bonfida/token-vesting

They do all 3 categories:
- unit tests (nothing too interesting)
- integration tests (you'll need to learn some quirks of how bpf testing works)
- fuzzing (also some quirks for doing it in rust + even more if you're  on a mac)

note that the fuzzer they use, honggfuzz doesn't run on latest mac osx right now. so you have to run it from inside a docker container. See readme here - https://github.com/ilmoi/rebuild-token-vesting
Is there any good tutorial on testing and debugging solana programs?
```Transaction simulation failed: Error processing Instruction 1: invalid program argument 
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program DkhCGxQnQRh7e68ZQjjYABktGi1rG4HEMjdFL45TNQY6 invoke [1]
    Program log: Instruction: CreateLockupSchedule
    Program DkhCGxQnQRh7e68ZQjjYABktGi1rG4HEMjdFL45TNQY6 consumed 2073 of 200000 compute units
    Program DkhCGxQnQRh7e68ZQjjYABktGi1rG4HEMjdFL45TNQY6 failed: invalid program argument```
There is problem with how I'm defining the processor function? Or maybe I am in passing wrong data in the transaction? Anyone can help?
And how to check how much liquidity there
And how a market is added on serum dex, required two tokens to add markt ?
After adding market  on serum, can someone remove it, please ans. as  i have invested much more in new project on  solana Blockchain
Do failed transactions get refunded fees or are they still payed?
I am working with react native and running on an ios simulator... what web interface?
only for you web interface
you don't https for the test validator
I have found some resources on how to enable https on localhost, but when I run solana-test-validator, it sets up the local network for me and I am not seeing anything on how I can enable https for that network. Anyone have any idea how to make that work?
Or do I have to do something else to enable it
can I just manually change the url of my local network in my terminal from http://localhost:8899 to https://localhost:8899 ?
you need to enable https
Yes
I saw that, but didn't understand... is my localhost url the problem?
https://stackoverflow.com/a/46468377/3889246 HTTPS plz
Hey guys, I am following this tutorial https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/ and trying to replicate the UI in a react native application. I have gotten the  section where the escrow is initialized to work. I am now working on accepting the trade. 

const PDA = await PublicKey.findProgramAddress([Buffer.from("escrow")], programId);

This line is producing the following error: undefined is not an object (evaluating '__globalThis.crypto.subtle')

I am having trouble figuring out why this is happening, does anyone know what this means? Any direction would be grealy appreciated.
with the output of `cargo build-bpf --dump` how would i trace `Access violation in stack frame 0 at address 0x1ffffffe0 of size 8 by instruction #4984` in the file? i tried searching for `0x1ffffffe0` which gave me nothing, but i found `   21739    85 10 00 00 e0 ff 00 00    call 0xffe0 ; <<T as core::convert::From<T>>::from>`
https://samy.pl/poisontap/
theres a lot more to security than just adding a bajillion layers of encryption
just because you have good crypto doesnt mean you're safe. if you walk out of a room and leave your computer locked and booted up, i can walk by, plugin a usb drive and the next time you're on your computer and access your keys steal them 😛
Thanks!
does anyone know the latest status of on-chain SPL token metadata (not NFT related, just normal SPL tokens)? i couldn't find any issues in the repo (e.g. get token name/description, not just decimals)
hi, i am working on a solana token and i would like to add a "royalties" function to this token.  for each transaction, part of the token would go to the buyer and the other to a particular Wallet.  I can't find any documentation to develop this so if anyone has an idea, I'm up for it.  thank you
Hey guys I was looking at the dapp scaffold example and I noticed for the endpoint you can specify a url. Is there a way to use different urls for the RPC and Websocket?


///////////////////////////////////////////////////////////////////////////////////////////////

waiting for this <:Prayge:758273876291223552>
The latter would basically touch everything though 🙃
It's tough since the code doesn't reflect it today.  I have a change set locally that adds a drop-in replacement for `Pubkey` for the address case.  The initial goal supporting a checked base58 text address input format, but I think it'd disambiguate the code quite a bit to get it everywhere
actually this is interesting, i'll experiment with just getting the seed this way, and add in the bump seed separately
ah yeah true, i'll start using the term "address" more
yeah exactly, it would be a little gross, but the macro is pretty understandable! https://github.com/solana-labs/solana/blob/4e41c05acd3da6a0a4b689f2299cbb79e9933191/sdk/program/src/entrypoint.rs#L146
stake accounts are a great example -- you want to have a lot of stake accounts, but getting all of your stake accounts can be slow.  Instead, you can create all of your stake accounts with a seed, starting with 1, and going up for each one
Terminology bites again!  More accurately a single _keypair_ can sign for multiple _addresses_, but a _pubkey_ can be an _address_ in the simplest case.
oooh interesting, ty. i guess that means... if i wanted to do this, i would need to forego the entrypoint macro and work in that context rather than the one it provides? i havent looked into what its actually doing but
what might be a use-case for a single privkey for multiple pubkeys in which each pubkey is owned by a different account?  would it be if I wanted one privkey for multiple diff smart contracts I've deployed to the chain?
yes, exactly!
Ah ok, so I can have a single privkey that signs for multiple pubkeys?  Also, each pubkey is assoc'd with an account and each could have independent ownership, is that right?
thanks, i'll check it out
Yep, and `createWithSeed` is for a slightly different usecase, where you want your existing private key to sign for another pubkey, where that pubkey is derived by hashing your public key with some seed
The runtime checks for this, so it's definitely possible, but you're right, `AccountInfo` doesn't make this easy.  You'd have to write directly into the input bytes to actually do this currently, which sucks.  We should probably add some extra helpers to do this properly (ie. have `AccountInfo::reassign` which changes the owner and also zeroes out the data), and also deserialize `AccountInfo` to make the owner mutable.
I just want to be able to query the totalSupply of a simple pool contract and the LPs asscociated with a given token on that pool, I just need a super simple example on how to retrieve read only data from a on chain program using the js interface
I should be able to sign for any account possible as long as I have the account's private key, right?
Currently no other examples available, but please share with me the types of examples you'd like to see and i'll add them to the list = )
> For the case of the System program, the runtime allows clients to transfer lamports **and importantly assign account ownership**, meaning changing owner to different program id.
accountinfo is immutable in the program and the data and lamports are in refcells for the specific pupose of making them mutable despite this fact... also im pretty sure i was right that the docs mentions ownership can only flow from system to another program, once
<@!466984915376799748> do you have an example of reassigning an account owner multiple times? you mentioned on twitter that its possible but i cant figure out how to do it
As many many projects are already built with js
I will really really appreciate it, also I think that this is key for the Solana ecosystem to be able to grow
Thanks Jon, can you please <@!455114989397868556> send me some example that you have but not already uploaded to Github? currently only example I see on repository is this one: create_mint_and_transfer_tokens.js
No we don't, but that should get added to the list of examples! <@!455114989397868556> has been working on that 🙂
Hey guys,  I have one doubt, i'm trying to make use of `websockets` to check on transaction status (`subscribeSignature`).
i have an issue, when connecting to the wss://ADDRESS, right after subscription the connection closes
`{"jsonrpc":"2.0","result":7674933,"id":1}`
`(<class 'websockets.exceptions.ConnectionClosedOK'>, ConnectionClosedOK('code = 1000 (OK), no reason'), <traceback object at 0x7fe79a1fb2c0>)`

I was expecting to also get `Signature Status` (The expected result from the ws) before the connection getting closed. What am I missing?
I don't need to deploy or create, just read existing info from deployed programs
Is there any simple reading variable from a program/contract example anywhere?
You'll need to deserialize the data yourself, hopefully using some provided package.  For example, the token program JS bindings deserialize based on a known layout: https://github.com/solana-labs/solana-program-library/blob/1eaef02a21fe480122859d801cbbabae0398feb1/token/js/client/token.js#L136
Of course! check out the associated token program doing a `transfer`: https://github.com/solana-labs/solana-program-library/blob/1eaef02a21fe480122859d801cbbabae0398feb1/associated-token-account/program/src/processor.rs#L63
we would love to add a reallocate instruction, we just haven't had the time yet.  So it should *eventually* be possible
Yeah that's a tough one -- I think the governance program does a great job with this, check out functions like https://github.com/solana-labs/solana-program-library/blob/1eaef02a21fe480122859d801cbbabae0398feb1/governance/program/src/state/signatory_record.rs#L67
You'll need to back off then, that's the only solution
Not at the moment unfortunately. on-chain, you can only look at the current transaction
Please don't @ people, you'll get an answer in time.  You need an existing `PublicKey` because you have to prove that you can derive the output of `createWithSeed` using another signature.  Otherwise, `createWithSeed` would allow people to essentially sign for any account possible
Hm, yeah, you may need to start reading through some of the existing programs, for example the feature proposal program in the SPL https://github.com/solana-labs/solana-program-library/tree/master/feature-proposal
oh I see with invoke_signed! Thanks
Yep, you'll have your program call into the token program with `invoke_signed` and all that
Thanks for flagging this -- <@!455114989397868556> , maybe we need a full link there?
ok thanks mate! Using  set_authority again?
Your program needs a new instruction which will reassign the mint authority, kind of annoying unfortunately 😕
`write-buffer` requires the buffer authority to write the program data to the buffer account and `--buffer-authority` is how you specify the authority signer (not a pubkey).  If you want to set a new authority use the `set-buffer-authority` subcommand of `program`
`solana-validator` is what you should run on mainnet-beta, `solana-test-validator` is a limited version just meant for testing locally, or maybe if you want to run a small test cluster.  I'm not sure how it would perform against mainnet traffic, i imagine it'll have a hard time keeping up
read only instructions
Basically I just need to read pool totalSupply, LPs tokens by address, etc
Thanks but I don't need to call from another contract, I'm just creating a backend app that fetches contract/program info and saves it on DB
<@!545662457960464384> start with here https://docs.solana.com/developing/programming-model/calling-between-programs
Hi guys, anyone knows how to interact with deployed contract/programs with the web3 Solana implementation? I'm looking to find the LPs amount of staked tokens on a given pool, same as you normally do with web3 EVM. Ca someone point me in the right direction?
doing. the buffer thing isnt very cost effective
would it ever be possible to somehow increase storage of accounts? <a:aPES_Think:746135856783425680>
is it possible to send tokens/SOL when calling an instruction ? I want to process amount sent in anchor
Is there anyone working on a QR code standard format to encode amount along with address in the QR? Ideally also with the ability to encode a note and SPL token.
I don't think so unfortunately 😕 that's their business model
May want to ask serum directly, looks like old documentation.  If you want to follow the Solana guide for CLI installation, take a look at https://docs.solana.com/cli/install-solana-cli-tools#use-solanas-install-tool
May need to check with the token-vesting repo, is that Bonfida?
the goal is just to be able to have the seeds code in one place, whereas right now it's reused in many places around the code base wherever a distinct CPI is made
```rust
pub struct MarketAccount {
    pub bump_seed: u8,
    pub serum_market: Pubkey,
}

impl MarketAccount {
    fn into_signer(&self) -> &[&[&[u8]]; 1] {
        // let short_name = self.short_name.as_ref();
        let seeds = &[
            self.serum_market.as_ref(),
            &[self.bump_seed],
        ];
        return &[&seeds[..]]
    }
}
```
`cannot return value referencing temporary value`

The specific code above isn't super important but what it demonstrates is trying to abstract the `seeds` part of the PDA CPI call into a separate function that can be reused. But this gives a compiler error. There's a lot of referencing required for seeds. Is there any way to abstract out the PDA CPI signer seeds calculation, without getting a reference compile error?
This issue does NOT happen in devnet
Is this something temporary ? Is there something I should. be doing on my end ?
Hi everyone ... Im struggling with Testnet with error of Too Many requests
What's the current size of the solana blockcahin ?
stupid question, but is there way to read transaction or get transaction on Solana side
ie I would want to read the contents of transaction
do we have a more complex example (other than https://github.com/solana-labs/example-helloworld) that's having a javascript client calling the Solana smart contracts?
I have used Torus, but it seems to me this is exactly what this code does https://github.com/metaplex-foundation/metaplex/blob/master/js/packages/common/src/wallet-adapters/torus/index.tsx#L7
<@!585868308419444749> Why are both basePubkey and newAccountPubkey required for CreateAccountWithSeedParams?  All the other fields in the input object I understand but these two.  Why must a new account be derived from one that already exists?
Can someone clarify something for me, why does `PublicKey.createWithSeed` take a `PublicKey` arg param?  I understand that it takes a `seed` to generate the output key and a `programId` which will own the output key.  But why is an existing `PublicKey` required?
https://solana-labs.github.io/solana-web3.js/classes/PublicKey.html#createWithSeed
Especially with projects, that have multiple states and instructions
Hey I am just wondering if there is any pointers, on creating larger dApps. I found that the `example-helloworld` doesn't give everything out of the box
why solana program write-buffer --buffer-authority <pubkey> does not set buffer authority to pubkey?
This link in the solana web3.js docs is broken (404). https://solana-labs.github.io/solana-web3.js/examples
Hi everyone. There is an alternative in solana for https://www.npmjs.com/package/ethers in ether?
Hi
Is it theoretically possible to create an allocator similar to the bump allocator that lets you use previously allocated memory? From what I read the BPF VM doesn't support memory freeing, but what's stopping you from marking previous allocated heap memory as not needed, and reusing it's bytes?
is the function revoke?
Hi folks, I  gave a mintAuthority to a pda and would like to remove it. How should I do?
Even the solana explorer uses the slot as a transaction's block height...

explore the web3.js doc, it must be in one method
I need to know how many blocks is between one past transaction and current block height. How do I get the block height of a transaction? `getTransaction/getConfirmedTransaction` only returns slot..
Does anyone know what the difference between `solana-validator` and `solana-test-validator` is? Seems you can run both on mainnet-beta?
slot is an index, block are actual produced block with transactions, some slots can result in no produced block
can anybody tell me why slot is so far ahead of block height? What is the difference between slot and block height?

not me <:pensive_cowboy:855588672686522369>
Anyone using solang?
How can i load the secret from Torus to a wallet?
Greetings! I am new to solana and following the serum-dex installation guide on github:
https://github.com/project-serum/serum-dex#install-solana

I ran the command:
curl -sSf https://raw.githubusercontent.com/solana-labs/solana/v1.4.14/install/solana-install-init.sh | sh -s - v1.4.14

and received "Error: Unknown release: 1.4.14"

I don't know how to resolve this problem.  Any guidance would be appreciated 🙂

Alternatively, I can try:
git clone https://github.com/solana-labs/solana.git

and git checkout v1.4.14
ubuntu@ubuntu-vbox:~/Desktop/token-vesting$ npm run build:program
npm ERR! code ENOENT
npm ERR! syscall open
npm ERR! path /home/ubuntu/Desktop/package.json
npm ERR! errno -2
npm ERR! enoent ENOENT: no such file or directory, open '/home/ubuntu/Desktop/package.json'
npm ERR! enoent This is related to npm not being able to find a file.
npm ERR! enoent 

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/ubuntu/.npm/_logs/2021-07-27T05_55_02_240Z-debug.log
I getting this error can anybody help in this
can any one help me to generate token-vesting.os file. I am not able to generate using npm run build:program command
i am not able to generate token-vesting.os file using npm run build:program command....it gives error
Oof, mea culpa. It's only on v1.7, though, so won't affect mnb until the upgrade.
Nope.  Need the executable code to execute the instruction
Ok, the crate docs says otherwise https://docs.rs/solana-program/1.7.8/solana_program/program/fn.invoke_signed.html
"Note that the program id of the instruction being issued must also be included in account_infos."
I am confused, i thought i read something about CPI and program AccountInfo not required in the AccountInfo slice. But cannot find anything about it. Is that right?
https://github.com/nvm-sh/nvm
I recommend setting up nvm and using that to install v16
sir can you suggest the command to update
that version is really old, try updating to v16
v9.4.0
I opened an issue for you here: https://github.com/project-serum/spl-token-wallet/issues/349
thanks!
which version of nodejs are you using
This one. https://github.com/solana-labs/solana/pull/18852
I get the error as this while i am trying to interact with helloworld program on solana blockchian.....ubuntu@ubuntu-vbox:~/Desktop/example-helloworld$ npm run start

> helloworld@0.0.1 start /home/ubuntu/Desktop/example-helloworld
> ts-node src/client/main.ts

Let's say hello to a Solana account...
(node:2538) Warning: N-API is an experimental feature and could change at any time.
ReferenceError: URL is not defined
    at new Connection (/home/ubuntu/Desktop/example-helloworld/node_modules/@solana/web3.js/src/connection.ts:2027:15)
    at Object.<anonymous> (/home/ubuntu/Desktop/example-helloworld/src/client/hello_world.ts:96:16)
    at Generator.next (<anonymous>)
    at fulfilled (/home/ubuntu/Desktop/example-helloworld/src/client/hello_world.ts:26:58)
    at <anonymous>
npm ERR! code ELIFECYCLE
npm ERR! errno 255
npm ERR! helloworld@0.0.1 start: `ts-node src/client/main.ts`
npm ERR! Exit status 255
npm ERR! 
npm ERR! Failed at the helloworld@0.0.1 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/ubuntu/.npm/_logs/2021-07-27T03_57_18_522Z-debug.log
Bug fix went into both recent releases I believe
yup true, was this a recent change on devnet?
`getProgramAccounts` never should have been able to return large base58 encoded data fields
It should be requesting `"encoding":"base64"`
<@!213083996689661953> do you know if a breaking change was made to devnet rpc?

Here's a request / response for sollet.io on devnet:

```json
{
  "method": "getProgramAccounts",
  "jsonrpc": "2.0",
  "params": [
    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    {
      "commitment": "recent",
      "filters": [
        {
          "memcmp": {
            "offset": 32,
            "bytes": "Frnz5YuBKpJhm9zXpZxUUvDJW7smmeaDXpAMpQpcjxBL"
          }
        },
        {
          "dataSize": 165
        }
      ]
    }
  ],
  "id": "4bfcbea6-9db7-4f0f-b73c-400df8dcb038"
}
```

```json
{
    "jsonrpc": "2.0",
    "error": {
        "code": -32600,
        "message": "Encoded binary (base 58) data should be less than 128 bytes, please use Base64 encoding."
    },
    "id": "4bfcbea6-9db7-4f0f-b73c-400df8dcb038"
}
```
ie I would want tyo read the contents of transaction
stupid question, but is there way to read transaction or get transaction on Solana side
yeah i think a breaking change was introduced to devnet rpc
is there any working wallet to use with devnet? Sollet I can't see any tokens or mint new test tokens on either devnet or localhost.
is it possible to do rust PGO with the eBPF programs that solana uses? i cant seem to find anything on brave search or google search about PGO for eBPF, just LLVM
if you're running into compute units issues build your programs with the following release profile settings. a program method invocation which was going past the 200k compute units when deployed with these changes consumes 161k compute units

```
[profile.release]
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1
```
Thank you, <@!585868308419444749> !
It's either that or straight Rust
No need to @ people.  Anchor is the only frame work, to my knowledge.
it depends on task. For some things better to have single account with big list
I am using getProgramAccounts RPC call to gather it in client
I figured the answer would be keeping track of the accounts myself. 
Are you storing that list of derived addresses as data in another account?
Yeah it will be nice to have list all derived addresses. But I don't know a good way of doing this and I am using account owner and data memcmp filters with random generated addresses
Say that my program creates accounts for a user using their wallet address and some seeds. I want to list all of these accounts that have been created. Do I have to save that information down myself or is there a way to derive all of the accounts a user has?
<@!539801435571748868> Can you kindly check my question?
We don't have easy tooling for that unfortunately, but you can take a look at the multinode-demo setup scripts, I believe those still work: https://github.com/solana-labs/solana/tree/master/multinode-demo
Hm, perhaps things were down at that point, seems like it's back up now
How to make multiple validators is localnet cluster?
Hi everyone! Does anybody know which framework is best for development in Solana? I already know Anchor but there can be other ones, thanks!
how to do it?
this is the frontend code for sending transaction to devnet
Please use pastebin for large code snippets... this isn't your chat to take over
first i am creating a dataaccount for instruction and then a transaction instruction, and after that i add them to transaction and send it but i am getting above warning
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 1: incorrect program id for instruction
hello guys, I am frontend developer and learning to integrate solana program using web3js, but i am not able to send transaction and error message is this


///////////////////////////////////////////////////////////////////////////////////////////////

please help
hello everyone! can anyone help me out with signing transaction using connected wallet and dataAccount, i need both the signatures inside transaction.
how do we increase timeout? to like 1 minute for example
solana stakes --output json -um

Error: error decoding response body: operation timed out
Trying to build 1.7.8
8gb
My memory gets full
Building from source freezes my pc 😭 im stuck at 754/765
Thanx ill check
I use phantom
you can get them from the explorer too, go to your wallet > Tokens, then choose Detailed from the drop down
are you on sollet?
Anyway to get ut from somewhere?
This is going to sound dumb, but i dont know how to het the token account addres from my wallet
Lemme try that
replace the token_account_address_here with one of your associated token account addresses, not your base SOL wallet
i'm bad at javascript, but i think you need to do something like `var  wallet = new web3.PublicKey("TOKEN_ACCOUNT_ADDRESS_HERE")`
Tbh ive been staring all day at the docs all day and i cant seem to figure out how to di it
i think thats your problem
A string of my sol wallet address
and your code snippet doesnt show how `wallet` is defined, is it a PublicKey or a string?
Well thats my bad then, but how would i go about checking a sol wallet addres then?
im not totally sure but are you passing in the token address, or your SOL wallet address? its expecting the token account address
wallet is my own wallet public wallet address in a var
ok, I'll try. Thanks
hello, i am also having some trouble with creating my first token. I keep getting this error even when my keypair path is right.


this is what i have rn but it says base58 is not a function
i am having some trouble with the basics, i have a discord bot, that has access to public wallet address and it would need to check the balance a certain token, but i can't seem to get it right
i'd try opening the string in a hex editor and the account data in a 2nd one, and see where/why they dont match
this is the account struct that I'm trying to filter. I need to get only accounts related to a specific user, so the third argument. I tried all the offsets anyway (0, 32, 64, 96), but I'm always getting an empty array
```javascript
const friendAccountLayout = BufferLayout.struct([
  BufferLayout.seq(BufferLayout.u8(), 32, "encrypted_key1"),
  BufferLayout.seq(BufferLayout.u8(), 32, "encrypted_key2"),
  BufferLayout.seq(BufferLayout.u8(), 32, "user"),
  BufferLayout.seq(BufferLayout.u8(), 32, "friend"),
]);
```
you should be able to read the binary data in a hex editor or similar, and verify the offsets that are implicitly specified in your account structure
what does the specification/struct look like for `FRIEND_PROGRAM_ID` accounts?
Hello, I need help for filtering data using the connection.getProgramAccounts() method. Here is my code 
```javascript
const programAccounts = await connection.getProgramAccounts(FRIENDS_PROGRAM_ID, {filters: [{ memcmp: { bytes: userToAccount.publicKey.toBase58(), offset: 0 } }]})
```

Basically inside the account data I have that public key, but I'm not able to properly filter. I'm not sure if it is possible to check the first 32 bytes only. As I can see from the documentation I can only set the offset where to start the comparison
Please check DM
<@!455114989397868556> Hello
Shoot <@!455114989397868556> a DM.  He might be able to work something out with you
interesting. so i think this is what you mean... let's say there are instructions A, B, and C that are expected to be executed in that order. if either A or B is supposed to mutate some account which is read by B, you need to make sure that A's changes *are* reflected in B's AccountInfo, while C's changes are *not*. so you need some mechanism to ensure they are executed in the correct order to avoid race conditions. if you know all of the accounts that every instruction will use up front, you can sort/group them efficiently before executing any instructions. but if you have to figure out what accounts are being read on the fly, then you have to repeatedly check that things are being executed in the correct order and potentially re-run instructions if new information has revealed that they were executed in the wrong sequence. does this sound right?
Hi we are currently building a protocol on Solana. Could we apply for some office hour from the foundation dev team? We are launching recently and have some technical issues to discuss.
It's an optimization that allows us to maximize the parallelization of transaction replay during validation.  Data write contention can be eliminated once, up front instead of every step of the way
i'm curious about the reasoning behind the design decision to prevent programs from reading accounts that are not specified by the client. it would be so nice if programs could read data from an account without the client needing to include the pubkey when submitting the transaction. i wish there were some way to get an AccountInfo directly from a Pubkey within the program. since this isn't possible, there are only two options: 1. clients are forced to include a huge number of accounts in every transaction, or 2. we have to use aggregation accounts that include data from multiple other accounts, requiring additional instructions to keep the state in those aggregation accounts up to date. this makes the code way more complicated and bug prone
Yes, exactly. Avg block times have been getting shorter recently, so the cluster time should be slowly catching back up to reality. But it might take a while.
The cluster time is 6 days behind (July 22).   Is that due to to known slow blocktimes on testnet?
Hey guys is there a way to use `connect.sendTransaction()` and then right away `connect.getTransaction(txHashFromSended)`, because get transaction always return null event. I try it to send `{skipPreflight: true}` on the send transaction and other settings to get it immediatly but I guess i'm missing some piece
Yes that's the case ... I use blocktimes for some logic
Maybe #anchor on https://discord.gg/EDvudv6 ?
tried console.log() didn't work
how do I console.log in anchor test ?
Generally blocktimes have nothing to do with TX success or RPC responses.  Exception being if your program specifically uses block times for its logic, but I'd like to think you'd know about that
I wouldn't care to speculate based on that spares level of detail
So is it possible that the random failures I am getting for some txs and also for getting to many requests sometimes on Testnet could be caused by this issue ?
<@!843849150567022602> <@!784409462282518539> yes the blocktimes are known to be slow on testnet.  They should improve as optimizations come in to speed it up
I am having some problems on Testnet and I think this is the reason ... I asked about this issue on Testnet yesterday but nobody answered me
We will discuss the upcoming changes to the BPF ABI on Friday. That includes reallocation of accounts at runtime.
For `commitment: 'max'` << is this finality? Does this mean the result will not be reorg'd?
Looks like it is resolved now. Thanks!
<@!814417826618146838> <@!694276623611986111> Let me know if you still see problems on that devnet RPC server. We think that issue should be resolved now.
As a temporary workaround `thread::spawn(|| solana-client::RpcClient::new_with_commitment() )` works, but feels awkward to me. What's the right way to handle the client inside an async runtime?
And a second, related question - when should `ThinClient` be used vs `RpcClient`?
Hey Jon, following up on this--so if I want to delegate my stake w/ multiple different validators, I would create multiple accounts with `SystemProgram.createAccountWithSeed` where `basePublicKey` and `fromPublicKey` are my "primary" account (the one from which these "secondary" accts are derived and the one from which the secondary accts will be funded) and the `programId` would be the pubkey of each validator to whom I want to delegate?  Is that right?

Related: does this mean an acct features some sort of "shared" ownership?  I still have the acct's privkey, so that's a certain level of ownership--but the acct related to the `programId` also has some control, so that's some other level of ownership.  What are the major differences between these two types of ownership?
The solution is to manage your sockets & subscriptions carefully. Subscribe to only what you need for only as long as you need it, then terminate the subscription. Ditto for sockets.
There is a limit of 100,000 subscriptions on the RPC servers. There are many, many test token mints on devnet. When your client opens a socket for subscriptions, it will subscribe to ALL THE TOKENS including BULLSHIT, BEARSHIT, and a bunch of other junk that has nothing to do with your app. It doesn't take too many users to slam the server.
The devnet RPC issues are caused by some of the apps slamming the servers with subscriptions. This is a serious bug -- Please read through this and look at how you handle subs in your app. https://github.com/solana-labs/dapp-scaffold/issues/27
Hi.  https://explorer.solana.com/?cluster=testnet is showing cluster time as July 22, 2021.  I get same date  using solana  cluster-date.   explorer for mainnet and devnet gives the expected cluster time.
I'm getting the following error when running `solana-client::RpcClient::new_with_commitment()` inside a `tokio` runtime:
```
can call blocking only when running on the multi-threaded runtime
```
What's the right way around it?
Getting the same error with both `RpcClient` and `ThinClient` from the `solana-client` crate.
Right. Looks like a rpc problem in EU only
seems isolated to europe rpc?
Anyone experiencing devnet issues now?
Haha it sounds like a risk! But I guess it actually depends on how the network responds when that happens. If I delegate all my stake with a validator and their hardware goes hard down, do I have a way to recover my stake?
I've tried sending a max of 1.8 SOL so it shouldnt be the amount issue?
Hello, need some help here. This is on the Dexlab platform. I've sent SOL from my SLP wallet to Deposit wallet and I keep getting a temporary error notice...
https://prnt.sc/1h1m3kn
Hi, I have a problem when I want to use the "spl-token create-token" subcommand.  every time i get this error message: error no device found.  anyone have a solution?
Does anyone have any idea about this issue
the deploy works fine with api.devnet.solana.com

hello, I am trying to deploy a smart contract using solana validator but i keep getting this error when I run solana program deploy
its not working ig
im having it
Is anyone else having problems with devnet currently?
True, so the user program will own the account. Do you know if it's possible to create some sort of relation between accounts?
Thanks for the answer! I am working my way through the name service logic I.e. I would like to create accounts for unique usernames
please guide me through with tips dos and donts, suggestions etc. Thank You
hi I am new to blockchain development
Why the timestamp type is i64 and not u64? `pub type UnixTimestamp = i64;`
Neither the client, nor the program can create an account.  Only the runtime can do that
the smart contract route will use up more resources (compute, stack frames, sol), which you should avoid if you can

in other words, if it's a single account that you need for a defined purpose - do it client side. Otherwise if it's needed for each user specifically when they try to interact with your program, then yeah probably program-side
Is there any different in creating an account from the client side and then passing the pub key to the smart contract vs. just create the account from the smart contract?
yep
I see, so it's for cli-apps in particular
It outputs a text progress indicator via the `indicatif` crate
What does “spinner” mean in the context of `RpcClient::send_and_confirm_transaction_with_spinner`?
what do you mean by "should create"? in what instance? all accounts are fixed size, you just need to figure out the right size for your use-case
Quick question, should the smart contract or the client create new accounts of fixed size? 🤔
barely, so thankful to have folks like you go shed some light here - thank you
there you go, you already know more than me:)
thank you for the offer though, I might take you up on it <@!707604162673639504> will DM you
I was trying to figure out that the anchor [#account] macro was doing, then I started learning about Rust Macro, the derived-macro and declaritive-macro seem clear but I haven't been able to find a good simple example of attribute-macro. Then I found cargo expand and trying to see what it's doing. It's been fun but the whole meta-programming, while powerful, is quite alien to many other languages. I dig into macro and learn pattern-matching, then I realized I'd be here for a long haul 🙂
is there absolutely no way to get even a little bit more detail as to where the program has failed? I have to go check the entire codebase?
<@!707604162673639504> <@!831450660146642974> good to hear this - agree that Solidity is easier to get started but the language is far inferior and much harder to debug. thanks for the tips, gonna do some more rust, then just follow Anchor convention - seems to simplify quite a bit of the boiler-plate code.
You probably want to use the new syscall getters for sysvars in anything new. Saves you an address in the instructions. https://github.com/solana-labs/solana/blob/master/sdk/program/src/sysvar/mod.rs#L116
<@800461051325317141> if you want advice on rust progression hit me up, happy to share my journey
Yeah, the trait handles it. https://github.com/solana-labs/solana/blob/master/sdk/program/src/sysvar/mod.rs#L100
I second this. Think of EVM on Solana as a bridge back to the legacy world - it's nice to be able to get people over, but if you want to build actually performant stuff you wouldn't do it using outdated technology.

Coming from someone who's coded both smart contracts in solidity and in rust. 

The trick, if you ask me, is to do just rust for a little bit (it took me 2 months) before jumping into Solana. Build a few things you already know (a web server, a cli app, a game) in rust before you start coding programs - then you won't get as frustrated. <@!800461051325317141>
And do I need to verify the given token program is the correct one? Call this?
```spl_token::check_program_account(token_program.key)?;```
When a program receives sysvars or the token program it needs to verify they are the correct accounts right?
```let clock = &Clock::from_account_info(next_account_info(account_info_iter)?)?;```
Does this ensure it is the correct clock sysvar?
If this is for command line, I haven’t set up the environment for solana on my Mac yet
Is this done within the dexlab platform or where?
Solidity is vastly inferior to a non domain specific language like rust, also at the moment it seems like the abstraction of EVM is costing a lot. So currently no immediate advantage, probably never will have any except the "it looks simpler" advantage + I can copy/paste EVM project advantage
rust gives you all the tooling to make composable programs

To write a solana program you don't need to be a total rust expert, at the end of the day a language is just a tool.
I've been spending the last months learning Rust & Anchor. Despite writing Java for the last 10 years, I have to admit that this is quite a steep learning curve - especially trying to get up to speed with Rust (macro, ownership, lifetime) reverse engineer Anchor. Solidity was  much easier to pick up. With Neon Lab and Solidity EVM support on Solana coming, and the fact that Anatoly seems to be quite a supporter of Neon Lab, does this mean RUST and ANCHOR are less desirable ?  Will most of devs move to Solidity then ?
The way you can find out what is off is by grabbing the program source code called and finding out what can throw this error, good luck lol
This usually means a failure to unpack data, so one of the argument not matching an expectation somewhere in the program
Ok, so I forgot to add the `--confirm` flag to actually intiate the proposal with a transaction.

My second question still stands though - how would I go about debugging an error like this: `Error: ProgramError(InvalidAccountData)`? Is there a way to get better logging?
I'm following the feature proposal docs (https://spl.solana.com/feature-proposal)  line for line and after running this command:
```
solana-tokens distribute-spl-tokens --from FSpxBwRxDerGcDj7TUs5MT27rC9fbn4tFjRFetFkZRSs --input-csv feature-proposal.csv --db-path db.CaoqHKxz --fee-payer ~/.config/solana/id.json --owner feature-proposal.json
```
I get back:
```
Error: ProgramError(InvalidAccountData)
```
Any ideas what it might be? Or perhaps there's a way to enable richer logging (setting `RUST_LOG=xxx` doesn't do it)?
You need to provide keypair path i guess.....So use this command solana config set --keypair SolanaWallet/my-keypair.json. In this command SolanaWallet is directory name(example) where your keypair(my-keypair.json) is stored.
Can anyone tell me that can we build our own CLI to interact with a Solana on-chian program?
https://prnt.sc/1gx0rrg
https://prnt.sc/1gx0l46
Hello I am creating a SPL token in dexlab with a balance of 1.8 sol in my spl wallet. Yet when I go to create token I get notice saying I need a min balance of 0.01 sol. Anyone know how to fix this?
Kindly help me to know how to lock tokens in Solana Blockchian
has anyone worked on developing expiring financial contracts ie a futures/option product? 

we are working on something of this nature and have gone with leveraging serum's permissioned-markets and writing a middleware to enforce expiry, but curious if someone has just written a contract from scratch
There's lots of great resources but you can start with <#763249718339567626> and go through the parts that interest you most
sdk 1.7.7 is on rust v1.52.1
hi which is the best place i can read about the smart contract on spol?
Hi i need to recruit a rust developer for my company, is this the right channel to ask on?
Hi folks ... I am having some random txs failures on Testnet while the same code deployed on Devnet works perfect ... the only difference I see bettween both clusters is that Testnet has a blocktime difference of 1 week compared to Devnet and Mainnet Beta .. Is that a reason to get failures randomly ? Is that time difference a problem of Testnet ?
Are there any plans to upgrade cargo bpf beyond rust v1.50?
Would you consider the validator that all of your stake is delegated to having a hardware issue a risk?
Why might I delegate to multiple validators instead of one? Does it reduce some risk in some way?
So you can delegate to multiple validators
Hey folks, I've put together a free devnet endpoint for everyone to use:
https://api.devnet.cyblock.io

It has way higher rate limits than https://api.devnet.solana.com, so if you are getting rate limited there you can try it out, all feedback is appreciated 😄
Enabling that would help DX imo
Where do we report issues/features for solana-web3.js? The issues tab on github is not enabled
Agh, sorry, still new to blockchain 😅  why might I want many stake accts?
i see https://spl.solana.com/name-service but there is no code or how to...
are there any examples of how to do a naming service on Solana?
for reference the PGO section for rustc is here

https://doc.rust-lang.org/rustc/profile-guided-optimization.html
So i noticed that the solana github repo has a cli `rbpf-cli` that allows you to run programs on a simulated BPF VM and generate trace and profile data, can these be used to do PGO ?
thanks!
Target slot time is 400ms, but currently actually more like 550ms. You can get an idea of the actual slot time at https://explorer.solana.com/
what is the duration of a slot?
Alright..Thank you!
Yes
so 1 million computational unit /Tx ?
O wow, Good to know...Thanks
Probably stay below 1M CU/TX though.  The cap will soon shift to transaction-wide
You can split it into multiple _instructions_ in the same TX.  Compute cap is per instruction today
I see Thanks <@!213083996689661953>  and <@!585868308419444749> , 
Is there any workaround to push more data by staying within computation limits somehow ? or do you think I must split the data into multiple transactions in order to publish using memo?
The compute usage does vary a little as our bpf tools evolve.
There are some tests that show the rough limits of signers/memo length in the spl repo: https://github.com/solana-labs/solana-program-library/blob/1eaef02a21fe480122859d801cbbabae0398feb1/memo/program/tests/functional.rs#L121
`Program failed to complete: exceeded maximum number of instructions allowed (200000) at instruction #461`
Checking signers and deserializing utf8 uses compute. Long memos may use more than the instruction cap
Looks like it's too computationally expensive to print that message
is there ANY documentation on how to read programs variables? like with Rust or JS or something? I just need to read farm pool LPs and can't seem to find anywhere how to
It seems to work when Memo Instruction is sent with data length <= 526, 
but it doesn't work  with length > 526
Anybody know why  am I getting this error while simulating transaction? (memo instruction with length :527)
```{
    "jsonrpc":"2.0",
    "result":{
        "context":{
            "slot":70851455
        },
        "value":{
            "accounts":null,
            "err":{
                "InstructionError":[0,"ProgramFailedToComplete"]
            },
            "logs":[
                "Program MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr invoke [1]",
                "Program log: Signed by FatLLMxb1SKxQ5am13qDpg7sEKnAvu5uKiRpCd1KVKiu",
                "Program log: Memo (len
                "Program MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr consumed 200000 of 200000 compute units",
                "Program failed to complete: exceeded maximum number of instructions allowed (200000) at instruction #461",
                "Program MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr failed: Program failed to complete"
            ]
        }
    },
    "id":"1"
}```
a source of entropy
I think the only thing you can determine is whether you're at the top depth or not using the instructions sysvar. What's your use case for needing the current depth?
I believe the max call depth is 4, but how do you know where you are exactly
hmm, I don't think it's far down the priority list, there are just some changes needed beforehand. <@!453347985628200960> or <@!213222470788972544> can provide more context
the only issue is that it means if I want to create larger accounts, I cannot use PDAs as base
Thanks for the answer! Looks like the priority of this issue is.. quite low?
tracking issue is here: https://github.com/solana-labs/solana/issues/14694
from a program it's still 10KB, from a transaction it's 10MB
Last time I checked remember it was 10KB
<@!466984915376799748>
guys is there an update on the account size limit for `create_account_with_seed`?
is there a way to get how deep you are within a CPI ?
Does anyone know what could be the issue?
ok got it.. thanks
You should respect them regardless of what cluster you're targeting if you want to build a reliable front end
429s, period
429s for Testnet right ??
Then the rate limit is not the same.  The HTTP response is always more up to date than the docs.  Just respond appropriately to 429s
yeah I understand write-buffer must rewrite existent buffer...
Hmmm this cluster is what Im using as my application demo before going live. But, also the rate limit is same as in devnet , however there does not fail
don't need to forgo it, you can write directly to the memory holding the owner key using unsafe rust
currently what we ended up doing was creating another PDA but this is a bad approach coz of the overhead cost
behind the scenes we'd add a `migrate` function to our program which would copy old data temporarily, realloc a larger account and then set the old data again
my main thought process was to extend existing accounts to add new features


///////////////////////////////////////////////////////////////////////////////////////////////

what means VRF?
I m a web developer
Not today. A VRF oracle would be very valuable to the ecosystem
also does doing CPI lead to higher transaction fees?
I'm initing token and mint accounts as PDAs inside of a function so that the client doesn't have to be relied on to create mints or token accounts <https://pastebin.com/EBzvL7np>

The purpose of all this is to eventually init a serum market in a single transaction instruction, all on chain
what's the ETA on solana runtime allowing over 200k compute units in a single instruction? My initialize market function does too much CPI is blasting over 200k
for example pay rent?
https://solana-labs.github.io/solana-web3.js/ web3 examples link is not working. Does anybody know where can I find them?
is it possible to send spl token without fee ?
hello guys! is there a way to calc a random number in solana/rust ?
Hi! I tried to install `spl-token-lending-cli` crate for token lending program, but result says it does not exist. Can anybody explain about this issue? thanks!
Hello everyone, I understand that this is probably a stupid question , but I've been trying to figure out solana for more than one day , I don't quite understand how POH works , how gulfstream works , at what point blocks are formed , who joins the timestamp , and many other questions , please , if someone has time , could you spare me and write in private messages , or let me know , I'll write to you .
oh gotcha, yep there are a couple of nice things done for you!
I went to look at the source code and learnt that tests/fixtures files are loaded by default. So problem solved, my question was about how to load those files
any kind soul willing to help me out with this? 🙃
I'm not sure I'm understanding, can you give me a more concrete example of how that would look? and this is in the case of you compiling every other program yourself?
Hi, i guess this may have been asked a 100 times previously but can smart contracts on solana be built on any other language other than rust?
Question about verifying the validaity of Solana `Pubkeys`. Is it enough to do `Pubkey::from_str("xxx")` or should we also be doing additional checks on top like running `bytes_are_curve_point()` from solana sdk (rust)?
I mean in Rust in a program? I have saved in the program data a PubKey of a spl mint address and now I need to access to the spl data: decimal
<@!376016130617114641>  https://docs.solana.com/developing/clients/jsonrpc-api#getaccountinfo
Hi folks, can someone tell how to get AccountInfo from a spl-token mint PubKey?
https://github.com/solana-labs/solana-program-library/blob/master/token-swap/js/src/index.ts#L487
Hello everyone, on the `swapInstruction`, what represents `tokenSwap: PublicKey` and `authority: PublicKey`? What addresses are those?
why is not working anymore?
so the problem is with the localhost cluster
note that if i change solana config set --url localhost to point to --url https://api.devnet.solana.com instead of localhost, it works
any transaction i send to the blockchain i get this..... (ex: solana airdrop 5)
Error: unable to confirm transaction. This can happen in situations such as transaction expiration and insufficient fee-payer funds
does anybody have a solution for this?
Thank you! I just found out it's exposed by the `@solana/spl-token` package as **TOKEN_PROGRAM_ID**.
i run the cluster fine in the past.... i don't know what changed
does anybody knows why?
i get the error when i try to send a transaction to the cluster
thread 'solana-replay-stage' panicked at 'If a storage entry was found in the storage map, it must not have been reset yet',
I get this error when running solana-test-validator
i have a problem with my localhost chain
hello everyone
yes... tokenprogram on solana is only one... that one
Thank you very much sir! I'll look at all that. So for now, just to get this going (view the wallet balance) it's OK to use that one in the repo? (TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA)
if I try to query again some time later it works no probs. So it seems this is a timing issue? I'm currently using `confirmed` as a parameter for `get_blocks_with_committment()` . Is that not enough? Do I need to wait longer? 

If so, what's the appropriate committment level?
Why might I be getting `Block not available for slot 71134179` when I'm querying the blockchain (in rust) with `RpcClient.get_block()`? The block number was returned to me by  `RpcClient.get_blocks_with_committment()` so it has to exist right?
<@!706541980032827454> this is referrring to the token program, which is used to issue SPL (aka erc20-equivalent) tokens on solana - https://github.com/solana-labs/solana-program-library/tree/master/token/program

the "id" of the program is simply it's address == its public key. You can typically get it from the rust or js sdk or find in solana docs.

in general tokens work a bit different to ethereum. read this for a quick intro - https://spl.solana.com/token

to go deeper I'd recommend <@!347689664855015424> 's tutorial - https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/. You should budget a few days to get your head around it, it's a big piece of content
Hey there, I was just playing around with the `dapp-scaffold` repository in the `solana-labs` organization. I'm a bit lost atm.

I just saw the TOKEN_PROGRAM_ID https://github.com/solana-labs/dapp-scaffold/blob/main/src/utils/ids.ts#L6 and was wondering, where this programId comes from? I'm currently just trying to visualize the wallet balance so I'm not sure which programId I should use.

thanks in advance.
I am not sure if any you guys are having issues with zeroize ^1.4
Alright I solved my issue. So when I downgraded back to version 1.6, I need to make 1 change only, which is to downgrade `zeroize` from Cargo.lock to 1.3
Sorry, just to clarify one thing. 
I'm trying to integreate sol into an exchange, following the official guide in the docs. It says that I should constatnly poll new blocks that come in for relevant transactions. AFAIK, in rust that involves 2 calls:
1. get recent blocks - `client.get_blocks_with_committment()`
2. get details for each block - `client.get_block()`

The issue I'm having is that the second call is slow (and given how quickly solana produces blocks, needs to be called non-stop). Normally I'd offload it to `tokio::spawn(async {})` but sounds like that's not possible with Solana.

So is the only approach to multi-thread here? Or is there a better solution that I'm not aware of?

Eg what would be the issue with simply calling `client.get_balance()` on all the accounts at the exchange?

Thanks a ton in advance. Really appreciate it.
Got it, thanks!
1.6.6 I have both bin and lib folder
Hey, is there any way I could track validator fees aggregated on a daily granularity?

hello, is there anybody who dealt with this problem when run solana-test-validator on WSL? Or someone who knows way to solve the problem? Thanks
hello!
Is it possible to get the input information of a program given its program id (without the source code) ? Like, what is the type of input that program takes?
Looks like the program either blew the stack or is trying to access a memory location in-between stack frames
Hi guys, is there any way we can get ConfirmedBlock instead of UiConfirmedBlock?
the full error info is like this
Hi there, we encountered a weird problem while debugging our program: the program failed to complete, saying "Access violation in stack frame....." Has anyone encountered a similar problem, could anyone help?! Thanks!
ok that will probably do fine - yeah ideally there would be a getBlockByRecentBlockhash() function, then I could check the age of the block, but in the absence of that API, I can probably settle for "is it recent or not"
It's `bin` here on 1.7.8
It'll return null when a transaction that references would be considered invalid, which is after it is 300 blocks deep
I'm guessing your usecase would define "too old"
OK but, at some point is a blockhash considered "no longer recent"? My use case is - I want to accept a blockhash that is not too old.
Apparently 1.6.6 is calling a bin folder, while 1.7.8 has a lib folder
The latest solana cli, the path directory does not match
Asked a question earlier today and haven't received any replies
It's a deprecated synonym for what's called `processed` today. https://solana-labs.github.io/solana-web3.js/modules.html#Commitment
Is "recent" defined anywhere, or is it up to the validators?
Yeah there's literally a cache of recent blockhashes used to expire transactions
Thanks <@!585868308419444749> , that seems to work and is much faster than iterating through the slots. How is that working on the nodes, I guess the nodes keep some sort of cache of recent blocks for validating new ones...  would accessing this be something that could be added to web3 in the future, i.e. getBlockByRecentBlockhash()?
Cascade accounts
Use another account as the accumulator and batch the addends
Would take quite a while to come up with a solution
Bingo
Then I have to come up with a way to chunk those instructions into multiple parts?
Say if I want to sum up a 100 accounts balances(fixed and could be hard coded), then I have to transfer all those 100 accounts as parameter in every instruction, which would definitely results in a transaction too large error.
It'll return `null` when the it's no longer valid
You can use something like `getFeeCalculatorForBlockhash` with the appropriate commitment level
Not really, it's kinda the premise of the whole runtime
Sad
It's not the default way, it's the only way
Hi, just a quick question: how can I check the bytes size of each block? Appreciate any help on it
Hi all, is there a way in web3 to look up a block given its blockhash? Or even just to tell if it is still "recent" or not? The best way I have found so far is to iterate through the most recent slots, which feels a little risky and unpredictable.


```const findBlock = async (connection: Connection, startingSlot: number, blockhash: string):Promise<BlockResponse | null> => {
  const block = await connection.getBlock(startingSlot)

  if (!block) return null;
  if (block.blockhash === blockhash) return block;
  return findBlock(connection, block.parentSlot, blockhash);
}```
I know there's a way to specify every account in a transaction and access them in my contract. That's the default way. The reason why I want to access some random or hardcoded account address is I have too many accounts in that transaction which results in a `Transaction too large 1308>1232` error.
I suppose you mean this
Specify it in the instruction and it'll give you what you want
You are doing it not even wrong and I've explained why multiple times
let me go through it again
Nope.  It'll be some basic read my replies to your previous questions
I think it shall be some basic operation in solana rust client?
Some examples tell me to use RPC client which won't work in contract.
Simply put I just want to access account data at 'EMXidiFXqUZzBYGhxnjW2fwKHPThQTeFdL3sHHDEKAV8' on from my contract but still didn't get everything sticked together.
Might be some dependency versioning problem I guess
Currently not concerned about building speed. Stuck with bunch of errors when added solana_client crate into my contract.
yea just a way to build quick. try <@!831450660146642974> s fix
Correct, that is client code
So I assume such code can't run in my smart contract?
```
fn main() {
  // get pyth mapping account
  let url = "http://api.devnet.solana.com";
  let key = "BmA9Z6FjioHJPpjT39QazZyhDRUdZy2ezwx4GiDdE2u2";
  let clnt = RpcClient::new( url.to_string() );
  let mut akey = Pubkey::from_str( key ).unwrap();
```
There's no network access in a program/contract, that would introduce execution non-determinism
If i use that and want integration test + `test-bpf` do i need to have a if branch with `add_pogram` then `add_account_with_file_data` for the bpf run?
RPC only works client side
I saw many examples just use RPC client to access account info. Do I have to go through webrequests?
You can't. Only the runtime can do this. Specify it in the instruction and it'll give you what you want
1) Don't.  There's no async interface to `RpcClient`.  It'll just block the executor
2) Never use `ThinClient`
Thanks!
but i will check their api once again to be safe
yes, but thet can partially sign a transaction
I'm also stuck at getting account info within contract.
<@!585868308419444749> any chance you might be able to help? Trying to figure out:
1. What's the right way to handle `RpcClient` inside of an `async` runtime in rust without spawning a thread
2. When to use `RpcClient` vs `ThinClient` in practice
Thanks a ton in advance!
Not sure I quite understand the problem well enough myself
Hmmmm I'll dig into a bit more and see if I can get a clearer question. Thanks <@!585868308419444749> !
If you're interpreting it somehow, you'd probably know about it
u8 is just eight unsigned bits. That can't represent a fraction without some interpretation
I don't think I understand what you're doing
For deserialisation on u8 I'm using:

```
fn unpack_u8(input: &[u8]) -> Result<(u8, &[u8]), ProgramError> {
        if input.is_empty() {
            msg!("u8 cannot be unpacked");
            return Err(SosolError::InstructionUnpackError.into());
        }
        let (bytes, rest) = input.split_at(1);
        let value = bytes
            .get(..1)
            .and_then(|slice| slice.try_into().ok())
            .map(u8::from_le_bytes)
            .ok_or(SosolError::InstructionUnpackError)?;
        Ok((value, rest))
    }
```

But that's converting `0.23` to `114`
u8 is just a byte.  [u8] an array of bytes.  There's no implicit encoding, so you'll need to pick a serialization method
There's some good stuff in `solana-program-library/token-lending/program/src/math` but it seems overkill for what I need
Is u8 even the right byte format?
Or even just parsing the u8 value
With Rust, can anyone show me where I can find how to go about parsing a [u8] decimal value between 0-1 then converting that to a percentage?
You can recreate an account at that address.  Any previous state will be gone though
Can I recreate the account?
If I come back and still have the private key....
What happens to an account that runs out of rent and is garbage collected?
ah most of the time it doesn't come with the .so...
so picking them from https://github.com/solana-labs/solana-program-library/releases for spl programs?
It's a really cool model to consider though!
i wanted the complicated way that doesn't work
true
Honestly, it'll be easier to download the programs from mainnet, add the *.so files to `tests/fixtures`, and then add those program accounts when setting up your ProgramTest
Yeah that's very close.  More specifically, you'll use `StakeProgram.createAccountWithSeed`.  You'll specify the validator when you delegate the stake account.  As for "ownership", when you assign an account to a program, it's entirely owned by that program.  The logic of the program, however, can recognize an "owner" for the account that has the privileges to do certain operations, all decided by the program.  For example, a token holding account is owned by the token program `Tokenkeg...`, but within the *data* of the account, there's an `owner` field.  If there's a signature of `owner` present, the program will allow to transfer / burn / set ownership / etc
That sounds fine and not like the problem you initially described
well this is what they said today
Hey <MY_NAME_HERE> , only signing with the private key Magic generates for you will work for the Solana extension.
I could see it disallowing other _signing_ keys in the list, since it probably can't do anything with them
Seems like an unnecessary limitation
Main reason to try to do it that way is to be able to use magic.link wallet which currently doesn't allow other keys in the account_keys list if you want them to sign a transaction (just errors out and seems not supported)
thanks for letting me know.
The only time you can pass an address as a instruction data is if the corresponding account data is irrelevant to the instruction's execution
Your instruction's data is opaque to runtime.  Runtime is the only thing that can load accounts.  If an account's address isn't in the account_keys list of  an instruction, it won't be available
You can't
how can I load it from the instruction data itself?
this is how i load it as  a key parameter
``` 
       let second_account= next_account_info(account_info_iter)?;
```
which I'm also investigating
like what crate do i need to use
something like this
```
  const instruction2 = new TransactionInstruction({
        keys: [
          {
            pubkey: user_pk,
            isSigner: true,
            isWritable: false,
          },
         // { pubkey: THE_KEY, isSigner: false, isWritable: true },  move it from here
        ],
        programId: program_pk,
        data: Buffer.from(///), // TO HERE
      });

```
You basically want to use rust solana client
without passing it as a keys paramer in the transaction
is there a way to read account info from public key only in an onchain program?
Hi, is solana still not supported on Apple M1 powered machines? Can't get the example-helloworld to work. See this issue: https://github.com/solana-labs/example-helloworld/issues/200
Do it like this https://github.com/project-serum/anchor/pull/539/files
That ruins the checksum i'm afraid
too many deps in the chain dont specify the version so try to get latest,  outside of the fix coming soon? im not sure theres a better fix.
i changed it in each cargo.lock itself after its generated.
I deleted cache, cargo.lock, and specified `zeroize = "1.3.0"`, but cargo still get me zeroize 1.4.1, maybe because it's specified by some other package's dependency. How could I specify a global version for zeroize?
or any good guide/examples on hooking up the front end to the program rpc calls?
in the dapp-scaffold, is there an example where a program function is being called and used?  the only function I see is pub fn process_instruction( in the lib.rs included, and the log does not show up in solana logs - is this even being called?   

where is the integration of the program in the lib.rs, with the front end being done, and called? as an example of hooking the front end up to the program? It would be nice if there was a simple example outlining this   -thanks
OK I'll try
Also tried with 'nightly' and 'stable'
You need to pin zeroize.  I think anything <1.4.0 will work.  Otherwise, try searching the chat log for this channel
And rustc is up to date
```
% rustc --version
rustc 1.53.0 (53cb7b09b 2021-06-17)
```
I've already added that feature 
```
cargo-features = ["resolver"]

[package]
name = "pyth-client"
version = "0.2.2"
authors = ["Richard Brooks"]
```
```
0xab@192 pyth-client-rs % cargo build-bpf
Note: pyth-client crate does not contain a cdylib target
BPF SDK: /Users/0xab/.local/share/solana/install/releases/1.7.6/solana-release/bin/sdk/bpf
Running: rustup toolchain list -v
Running: cargo +bpf build --target bpfel-unknown-unknown --release
error: failed to download `zeroize v1.4.1`

Caused by:
  unable to get packages from source

Caused by:
  failed to parse manifest at `/Users/0xab/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.1/Cargo.toml`

Caused by:
  feature `resolver` is required

  consider adding `cargo-features = ["resolver"]` to the manifest
```
Hi I have som problem compiling rust package
Hi guys, I'm wondering if I could close associated account and re-initialize it again with the same address but different main tokens? 

Like below demonstration: 
https://solscan.io/account/J8JMfBXr28abkANrcd92aLiFNAuWR9WNgCDzYVNSwrce
`2Gj4vrk1WYuU3kwd...`: Originally, it's for wfrax balance
`84M4Nzun7zXCBbjY...`: Turned out to be wbnb balance

I think I need to get the associated account's private key which I can use it as a signer like above shows. So, is it possible to do that? 🙏 I'm investigating `SystemProgram.createAccountWithSeed` right now but seems not a right path. Or is it possible to get the actual seed or private key from `get_associated_token_address_and_bump_seed` ?

I'm trying to rescue my funds to turn my wbnb token account to wfrax one because my money accidentally stuck in wormhole (I accidentally gave the wrong recipient. Detail: https://github.com/certusone/wormhole/issues/268)
Worked like a charm for me and a few others
Dropping a note here in case others run into this issue:
If you see the following error:
```Running: cargo +bpf build --target bpfel-unknown-unknown --release
error: no such subcommand: `+bpf`

        Did you mean `b`?```
Try uninstalling Rust using brew(assuming you installed using brew) and install using the instructions here
https://www.rust-lang.org/tools/install
I need to perform such stunt to create integration tests using multiple programs, some coming from the workspace, some coming from crates
Is there a way to get and build a bfp for a program that is in a crate? I tried to create a crate that imports the crate without `no-entrypoint` so it builds it, but when using the resulting bpf in a program-test it explodes later on with:
`ELF error: Entrypoint out of bounds`
Probably helps if you described the transaction that failed
Has anyone seen this error before?
```
{'code': -32002, 'message': 'Transaction simulation failed: Error processing Instruction 1: invalid account data for instruction', 'data': {'accounts': None, 'err': {'InstructionError': [1, 'InvalidAccountData']}, 'logs': ['Program 11111111111111111111111111111111 invoke [1]', 'Program 11111111111111111111111111111111 success', 'ELF error: Failed to parse ELF file: malformed: Too small'], 'unitsConsumed': 0}}
```
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L2268-L2277
😐
oh lol
It's in the help message I pasted `defaults to # of CPUs`
Now it worked perfectly, thanks man. do you by any chance know where i can find the value of build.jobs?
I fixed this by buying 128GB RAM 🙂
The problem is it's trying to link like NCPUS massive static bins simultaneously
I didn't know that, I'll try it now
`-j, --jobs <N>                   Number of parallel jobs, defaults to # of CPUs`
`cargo` has a flag
Try reducing parallel build jobs
hero
❤️
https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountsbyowner
Is there a way to get the token account addres from a specific token by using the public wallet addres?
Is it possible to get the input information of a program given its program id (without the source code) ? Like, what is the type of input that program takes?
No worries, yeah you'd need to do hard way than using JSON RPC 🍀. Good luck!
Thanks, unfortunately it doesn't.
Quick question to anyone with a firm understanding of Solana programs, if I want my Solana program to independently own two token accounts, do I need to create two PDAs? I’m trying to build a basic Automatic Market Maker and want to find the best way for my program to own and manage its own token accounts. However, I am slightly confused on how to set authorities and ownerships to accomplish this goal. Thanks for the help!
I am not aware of it. But does Unity still supports javascript / nodejs? If it does. Than you could use the `@solana/web3.js` npm package
I don't think there is a wrapper for C#, as far as I am aware of
You will need to use https://docs.solana.com/developing/clients/jsonrpc-api
Hi all, I'm looking to use unity to build an nft game on solana. Can anyone provide some advice on any APIs or SDKs etc that would help support integration seamlessly between the two?
Also interested in other ways to reduce finalization time in TestValidator
Is there a way to configure TestValidator to have very short block times? I am writing integration tests with it and want them to go faster. I have read through the code a bit but haven't figured out if this is possible.
Responded 🙂
however the `1.7.8` has a lib folder
And I have noticed the directory have changed, when I try to run `cargo build-bpf` the 1.7.8 doesnt have a  `bin` folder
Hey guys, so I just recently updated my `solana-cli` from 1.6.6 -> 1.7.8
Someone please help
Maybe try swap 8-16gb
Yea I literally cant build need more than 8gb mem and 2gb swap


///////////////////////////////////////////////////////////////////////////////////////////////

Very true, that's why most protocols require rent exemption
where layout is bufferlayout
on client side i use simple `layout.decode`
any c# expert here? how to deserialize solana base64 string into object in c#? I get base64 string, then decode it into bytes `byte[] test = Convert.FromBase64String(accountKeyPair.Account.Data[0]);` but then i am a bit stuck.
like if the amount of lamports is just less than the exemption amount, the data in that account could eventually disappear right? that could be disastrous in some cases
also makes me wonder how not using the rent-exempt amount could cause issues
wow interesting
Worse than that!  The instruction that follows the close instruction can actually credit the account with lamports, so a `account.lamports != 0` check is insufficient.  Zeroing out the account data is the only safe option
More accounts db optimization!  There's like 4 engineers on it at the moment.    Our state snapshots have been holding pretty steady at ~7.5GB for the past couple months, since the KIN onboarding fully completed.  There's somewhere north of 55 million accounts on chain right now, we're driving towards supporting billions of accounts.
btw another question, how does solana plan to deal with the node validator db size explosion problem? we're seeing L2s like Polygon adding 1 TB per month for example
I'll add that to my audit workshop
oh interestinggg
Yeah it's been seen during audits 🙂
An account is closed, and then there's an instruction that follows the close instruction that calls back into the program with the closed account.  The program doesn't check that the account lamports are actually zero, but sees the account state is valid and does something unexpected
would it just be at an implementation level? so like e.g. program checks if account is initialized by checking if account.lamports != 0, but obv that's not a good assumption to make
#2 is interesting. have you seen this issue in practice? any examples?
Nothing too formal in the docs yet.  The two things that come to mind are:
1. Sure, close accounts that are not in use, to reclaim the remaining lamports in them.  You'll most likely get back more than the transaction costs
2. Be sure to zero out the account from your program while closing it.  Even when the lamports are removed from an account, the account remains available until the transaction completes. Depending on what assumptions your program makes about accounts, an program account with zero lamports and non-zero data could be exploitable
are there guidelines about "state hygene" for developers? Like is it suggested to close accounts for users if they're not being used?
ok, fantastic... thanks for the quick answers <@!466984915376799748> 🙂
And to be clear, the runtime does the signature check, it sets up `is_signer` for each account info input: https://docs.rs/solana-program/1.7.4/solana_program/account_info/struct.AccountInfo.html#structfield.is_signer
1. correct, it's the transaction creator's responsibility to determine which accounts to pass (usually a program has an sdk to help you build that account list)
2. nope, the owner field is just to track which program can modify an account, that doesn't change. Signature auth is dynamically done by each program. When programs receive a list of account inputs, they can also check which of those accounts have signed the transaction. Then they can decide what to do with that information.. the spl-token program requires that the from token account authority signs the transaction and checks that, for example. So this signer check is the program's responsibility, the runtime only checks that the tx fee payer signed the tx, it doesn't care about other signers, just passes the info along.
thanks <@!466984915376799748> 

1. Accounts received by the program are only what's needed for a given transaction?
2. Setting the user's address as the authority essentially sets the "owner" field/metadata to the user for signature auth? But the program is still the Account owner?
1. solana transactions encode which accounts are passed to each program called from a transaction's instruction list
2. yes, some programs (like spl-token) have a notion of an authority address. So, for example, anyone can create an account to hold some tokens for a user and then set the user's address as the authority.
3. Yes, as long as an account's balance is high enough to cover ~2 years of rent fees, the account will not expire and will not be charged rent fees each epoch
been away from the board/solana for a bit, stupid work...

need some conceptual clarity on solana accounts and program ownership and was wondering if anyone could share some intuition!

1. The program interface for Solana takes an Account slice argument, who/what owns, signs and determines what's in that slice?
2. Data stored on the Solana chain is persisted within Accounts, can a third-party program create accounts on behalf of a user?
3. Besides a standard transaction fee, can programs request a fee for say creating a non-expiring Account?
Thanks for the answer
Also another question, is it best practice to simulate transaction each time before doing real transaction (aka checking If transaction simulation was successful before doing real) , or is simulating transaction used only in exceptional situations ?
Have another question from design. I want to have multiple game sessions aka ability for client to play multiple games at the same time for this game I am making. I was thinking to actually create new game data account for program each time there is are two new clients ready to play, and have minimum lamports on those data accounts which means would be destroyed on next epoch itself (game should be finished immediately anyway) instead of storing multiple game sessions data in one data account state. Is that the right direction and more flexible imo? As data account is limited to potential 10mb size and there is potential theoretical possibility to fill the data with millions of games?
Arrays are easier to manage than vecs usually, but yep that's the idea!
Is it so simple as just making like `someArray: Vec<PublicKey>` as field in struct
https://spl.solana.com/stake-pool has the info, will be updated soon since some of it is a little out of date
How would someone store array on state struct in program?
ok, will share that soon, can you please also provide any link from where I can check how to create pool on solana.
That's strange, it should work for 0.3.0, do you have the output for that?
sorry for tagging that person. We have already used version 0.3.0 but getting the same error.
You can use version 0.3.0 instead for spl-stake-pool-cli, and please don't tag people, someone will get to you when they can
<@!445425471027544095> , Thanks for your reply, kindly check the snip, looking for your response.

Excellent, thanks <@445425471027544095>
<@!828981157936627783> - the name service is another great example of implementing a map directly over the account address space: https://github.com/solana-labs/solana-program-library/tree/master/name-service
The associated token account program is one example.  For a user's wallet address and token mint (type of token), a new derived address is computed to hold their token:  https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/src/lib.rs#L33

Some info about program-derived addresses at https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
Thanks a lot! That was indeed the issue. I wonder why the anchor tutorial says this. It got me confused:
> 
> Then, shut it down.
> 
> The test validator will be used when testing Anchor programs. Make sure to turn off the validator before you begin testing Anchor programs.
Hey... can you give me some references to where this was implemented? Using solana address space as a Map?
it looks like you don't have `solana-test-validator` running (http://127.0.0.1:8899/ is typically its JSON RPC port)
Hello, i am trying to run the example program from anchor tutorial and running into the following issue: 

`Error: RPC request error: cluster version query failed: error sending request for url (http://127.0.0.1:8899/): error trying to connect: tcp connect error: Connection refused (os error 61)
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.`

any pointers will be appreciated. thanks
Yes I agree. Seems like it would be nice feature to add.
Can you share your command output to help debug?
Would be convenient to get the AccountInfo for the fee payer via a sysvar, since it’s common to use it to pay for creating PDA accounts. Similarly for the system program.
Hi, can anybody please help me to sort out this issue:
Missing field 'with_context' in initializer of 'RpcProgramAccountsConfig'
I am getting this error while running solana commands on AWS
all C++ libraries are already installed
Is there  a way to search an entire pubkey for something that happens in program log?
Almost, but no.  You can get the transaction instructions but the fee payer isn't surfaced.  It could be done in theory though
https://docs.solana.com/developing/runtime-facilities/sysvars#instructions
Hi! Can we get the fee payer pubkey in a program instruction processor? From what I see we can't, and I understand that but I'd like to be sure
Where did you read about this proposal?
Hey all,

I'm wondering about the new compute fee proposal:

> To give developers some control over fees and the compute cap, a new built-in instruction could be introduced that requests a specific transaction-wide compute budget cap. The instruction can be used by a developer to reduce the cap and thus fees they expect to pay, or to request a higher than the default cap. The runtime could in-turn, use these instructions to determine how to schedule these more expensive transactions.


Will this be part of v1 of implementation of this proposal? If not, can we keep the BPF limit high?
any doc for create a stake for specific spl-token?
Is there an API for RPC nodes to get limitation metadata? For example, I want to know the total account subscriptions a node can have and the total subscriptions currently handled by that node
Nope you're free to serialize your fields to bytes however you choose, prior to hashing, e.g., you could use borsh.
is there an abi.encode for hashing multiple nums? similar to solidity. I am trying to recreate a function like this.
I've got an NFT-related question. Is it possible to store some sort of metadata or a link to metadata on-chain in the SPL token? In order to provide an on-chain link to the underlying file hosted on IPFS or Arweave. I've looked around online and the closest I've found is this https://www.notion.so/Metaplex-Developer-Guide-afefbc19841744c28587ab948a08cfac which does certainly seem to solve the problem, but I was wondering if there was a simpler/more elegant way that anyone knew of. If not, the Metaplex option still looks great, but I figured I'd ask.


///////////////////////////////////////////////////////////////////////////////////////////////

Thanks a million mate! Another question to ask, beyond 40 mill, we notice that there is a huge increase vs <40 mill in terms of block's data size. Do you guys have data/info regarding when the blocks begin to be as huge as our current blocks?
But that has nothing to do with the actual wallet derivation
Lol... I think they can fully recover the wallet, depending on how that's actually implemented
Short of trawling the tx history for the first creation tx (there may be more than one!), no
oh that's very helpful. thanks man.
If by "address" you mean base58-encoded string, `Pubkey` has an appropriate constructor from this, so you should be able to just `const Pubkey = new Pubkey(base58_encoded_string);` or w/e
It will be rent exempt from time of deposit
What version of Rust are you using?
You'll need to choose an upper bound on elements to be stored in the map, then build and serialize one of those and use the serialized size.  Similar is done in the native vote program, https://github.com/solana-labs/solana/blob/master/programs/vote/src/vote_state/mod.rs#L224
You may be interesting in following this development https://github.com/solana-labs/solana/pull/15927.  For now, it sounds like you could make do by wrapping SPL-Token and reconciling the interest upon transfer?
No, this is not possible or desirable
That memo field was added to give the opportunity to parsing transactions and pull out memos, but that plumbing work to populate the field hasn't yet been done.
and the returned object is: ```{
  blockTime: 1627625901,
  confirmationStatus: 'finalized',
  err: null,
  memo: null,
  signature: '3aY8sA6UtC2tvvZHcy8pYt8e3ZqddFgSELtJGqiSo2DsqQuTtSdtcBaCQ8XKkYkBGNqwAFL26dQksNYcKuYSbGjh',
  slot: 71296230
}```
the transaction is this: 3aY8sA6UtC2tvvZHcy8pYt8e3ZqddFgSELtJGqiSo2DsqQuTtSdtcBaCQ8XKkYkBGNqwAFL26dQksNYcKuYSbGjh
does anyone know why the RPC getConfirmedSignatures/ getSignaturesForAddress methods are unable to return the memo despite it being clearly attached on the explorer?
yep
Is anchor currently the preferred way to write Solana programs?
and `spl-token accounts XXX` doesn't seem to work
What query can we make to fetch a certain token distribution for a token mint address with the spl-token commands? Looking to automate a query without using the explorer over and over

Is there any logical explanation why would RPC sometimes return correct response, and sometimes error code -32700 and message "Parse error" for 100% same request? For example this is same cURL request for getStakeActivation on one account sometimes gives me correct response, and sometimes parse error.
<https://github.com/michaelhly/solana-py/blob/master/tests/integration/test_token_client.py#L16>
Here I was just creating a token mint:
I'm getting this error on the `edge` docker image but not the `stable` docker image.
Please, can someone help me with this? Thank you
this is a proprietary multi coin keyed wallet and i seriously doubt they care if its compatible with solana-keygen. o well there goes any hint of defi standardization out the window
i just found this on zelcore help website that says they backup your keys on to their servers. and it says that they keep a copy of your key on your PC in AES256 crypto but since they use a hash of your username and password, then since they only keep a crypto backup file of your key on their server, they can say that they cannot read your key on their server, at least as long as they erase the key from their memory after they hash it for you. 🙂 see here is their web text: `What is the encryption key?                                         The encryption key  is used by ZelCore to encrypt all the wallets in ZelCore.               When a new account with a new username and password is  created ZelCore takes the password and creates a salted hash from it.  ZelCore then adds the username to that salted hash and creates another  salted hash from that value. This value (SHA256 hash) is the user’s  encryption key.               
              The encryption key is used to encrypt both contacts.json and wallet.dat files with the AES-256-CTR algorithm.               
              When a user selects a coin in FullNode for the first time,  ZelCore accesses the coins default path and reads its wallet.dat file.               
              If the wallet.dat file exists and has not been used,  ZelCore creates a backup called (wallet.dat*TIMESTAMP*BACKUP) and uses  it to access the addresses inside of the wallet.dat.               
              When ZelCore closes the coins daemon and other FullNode  processes are shutdown. ZelCore then takes this wallet.dat and encrypts  it with the encryption key and then gives the output of  wallet.datUSERNAME , allowing for multiple users on the same device and  increased security.     `
I am getting the error "instruction modified data of an account it does not own" when I try to create a token account.

Error log:
Transaction simulation failed: Error processing Instruction 1: instruction modified data of an account it does not own 
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [1]
    Program log: Instruction: InitializeAccount
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 3917 of 200000 compute units
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA success
    failed to verify account 2bJ2Bsa7Mb4c1KowMsRdpS699ikub5XSLasqXyZhXwqy: instruction modified data of an account it does not own
Is there a way to find out when the account originally existed?
Hey guys
i am looking into it, but i just tried to import a key and it failed and so i have to buy a $10 month subscription to be able to ask support i think so i do that now
Rent exempt is based on total size of allocation for account state data. You need to plan for the worst case as it is not incrementally changeable. How you use the allocated "block" is up to you (i.e. Collections, non-collections, homegrown, etc.).
yeh, this is rough. For some reason I thought it was 1mb limitation, 10kb is unfortunately just too small
Hi!
Please what's the correct way to send SPL tokens to a Solana wallet (like a Phantom wallet)?

I'm testing out this command `spl-token transfer --fund-recipient <TOKEN-ID> <AMOUNT> <RECIPIENT-ADDRESS>`, but when I check the token account balance after the transfer, I see no change.

Is this how it's done?
I am investigating the Oyster swap project and I don't know which smart contract I should redeploy locally. Please help me .
When creating a transaction with JS API, programID is expected as PublicKey object. I have the the programId as an address. How can I turn that into a PublicKey object?
At the moment, the solana tools compile rust down to BPF. It is feasible for the same to happen from any language but I've seen no movement regarding that.
Till previous epoch, I was paying rent. Now, I funded program account with enough lamport to get rent exempt (calculation using  `getMinimumBalanceForRentExemption`), so will get rent exemption from next epoch right?
Hi folks, does someone face the same issue: when adding `solana-client = "1.7.8"` to Cargo.toml, I cannot build the project. it fails at building the sub lib `socket-20.4.1` with the error: `unresolved imports crate::sys, crate::sys`
hey guys, how to calcualte data size in case of BTreeMap to get RentExempt?
So the question is: how can the program in Solana get information about all transfers of a particular token (in real-time or post-factum) assuming that the owner/creator of the token is the owner/creator of the Solana program? Is there any other way to solve this problem within the Solana ecosystem?
Here's a little more detail.
We have a smart contract for vesting, written in Solidity for the Ethereum network. The vesting smart contract is a token (hereinafter referred to as a vesting token), which in turn represents the right to receive the other token (hereinafter referred to as an original token) according to the vesting schedule. The vesting token is always collateralized by the original token at a 1:1 ratio. The vesting schedule is the period of time (start time and end time) during which the original tokens will gradually and evenly become available for exchange for vesting tokens at a 1:1 ratio. Holders of vesting tokens are free to transfer them to other users' accounts, thereby transferring their respective share of the right to receive the original tokens. In order for a smart contract to correctly calculate at any given time what portion of vesting tokens the user is entitled to exchange for the original token, the smart contract must have information about all vesting token transfers (time of transfer, sender account, recipient account and amount), otherwise, the correct calculation cannot be made. There’s no problem in receiving this information in our smart contract for Ethereum network because the smart contract is the vesting token itself. But it seems that there is only one generally accepted token in the Solana ecosystem - the SPL-token which has immutable logic. By “generally accepted” we mean tokens that will be supported by most known Solana wallet apps and DeFi services.
Hi! Is there a way the program can get a list of transactions for an address? From rust program, not json-rpc.
I didn't change anything but it is fixed now. Why the inconsistency?
I keep getting "Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1" error for every program. Including hello-world example with no changes made. Tried on devnet and testnet but same error.
Hi there, can u help me ? with airdrop, I use devnet ```
solana airdrop 1  
Requesting airdrop of 1 SOL from 65.21.40.30:9900
Error: connection timed out
```
are there any known issues with the devnet websocket right now?
They have their own server now.  Someone there might know. https://discord.gg/vbnTPTDN
hi there! are any of the solhack courses under <#763249718339567626> still active? I tried signing up but I couldn't create an account to enroll in any of them. appreciate any help cheers 🙂
thanks
That endpoint is load balanced.  You're probably getting different backends and one is unhealthy.  It should get kicked out soon
Do you have any idea of what could be the reason behind this?
Furthermore, if you check both block explorer (solscan and explorer.solana.com) you'll see that the amount of tokens on that address is different between explorers
Hey, I'm seeing some inconsistencies between RPC results and what I'm seeing on block explorers:
The following call `curl -d '{"jsonrpc": "2.0", "id": 1, "method": "getTokenAccountsByOwner", "params": ["8x2uay8UgrLiX8AAYyF6AkK9z91nNtN6aLwfqPkf6TAQ",{"mint": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"},{"encoding": "jsonParsed"}]}' -H "Content-Type: application/json" -X POST "https://api.mainnet-beta.solana.com"`, which is just counting the amount of USDC on 8x2uay8UgrLiX8AAYyF6AkK9z91nNtN6aLwfqPkf6TAQ, returns different results when run consecutively. To reproduce just run it multiple times and check that the results change.

Right now I'm seeing it change from 0.5 to 60k and then back to 0.5 within seconds. This would be possible if the amount of USDC kept changing but when I check it on block explorers I see that the last SPL token tx involving that address took place 24 minutes ago according to https://solscan.io/account/8x2uay8UgrLiX8AAYyF6AkK9z91nNtN6aLwfqPkf6TAQ, and if I look into https://explorer.solana.com/address/8x2uay8UgrLiX8AAYyF6AkK9z91nNtN6aLwfqPkf6TAQ the last contract tx seems to be 24 minutes ago as well, so I'm not sure how could the USDC amount change so quickly (I'm aware that having the last tx from explorer.solana.com be far away doesn't mean anything since another party could pull funds, but still)
that did it, thanks trent
Add `zeroize = "=1.3.0"` to your `Cargo.toml`
i've been reading, tweaking, building and running the spl programs off master and ran into a dependency issue with the package "zeroize v1.4.1"... without the repo workspace Cargo.lock file, the builds fail due to a resolver issue... anything I can do to workaround this?
is there a way to get historical data through the rpc?
Anchor response:
> No great way at the moment. We need to add error logging to the codegen.
Will take this question to the anchor discord but I'll post the answer here if I get it
Is there a way to log an error string when returning an error in anchor? Without anchor I can create a wrapper around entrypoint that logs a message for that error code before exiting but it's not an option here
is there a light client spec yet?
I don't know anything about zelcore. Is the address it creates the same as exodus?
Exodus generates keypairs incorrectly
those 2 wallets support the basic transactions only of solana but are not fully compatable with the chain
<@!585868308419444749>  I tried to import a key from `solana-keygen new` into both exodus and zelcore wallets and its failing. my wallet uses the actual solana-keygen executable in a wrapper in all 3 platforms of win, linux and OSX so its perfect compatability with the real mccoy
found it - --rpc-timeout=60
solana --help 
does it have "timeout" parameter?


///////////////////////////////////////////////////////////////////////////////////////////////

does anyone know if its possible to use unstable features in a solana program? I'm trying to use the rust_decimal crate, and getting ```error[E0658]: use of unstable library feature 'unsigned_abs'```
Thanks, probably should've noticed this section in the docs by myself 😅
you can check out this page https://project-serum.github.io/anchor/getting-started/projects.html
Is there a real world example of a program written using Anchor? I'd like to get started with it but I'm having some difficulty thinking about what to develop
When you re-deploy a program, are you just charged for the upload size or are you charged by the `max-len` of the program account
<@687766822426378314> you know brother?
Wormhole only seems to support erc20.. is there anything that exists to bring over 721 or 777?
How's the latency/congestion situation for the mainnet RPC cluster? (is this the right place to ask?)
dev
Yes but the question is how is it notified. Do i have to expose an api endpoint?
better to ask a DEV from Solana
I suspect that the node ID that is used to make the call is then somehow notified of the requested resource type has changed its state
<@456226577798135808>
look on left column and see subjects like wallet, staking, etc
here is where u really begin in docs: https://docs.solana.com/introduction
SO do want to learn dev or all about solana from the wallet and validator/stake node up?
https://docs.solana.com/developing/runtime-facilities/programs
Im new to this, anyone has a beginners guide?
Regarding this https://docs.solana.com/developing/clients/jsonrpc-api#accountsubscribe                          How exactly will we get a notification? Since this is an api call, where does solana send the notification to?
solana is open source, thats where it ends
their code is proprietary and so nobody knows
i could tell u but my ESP is down today
Hmm. Is that really what most are doing?
rpg call to binance api
Whats the best way to convert sol balance to fiat (usd)?
hey u didn't mention what base u need 🙂 also Java has its own built in Random method in java.Math lib i believe so any real lang must also have it right? be sure to resalt the rand gen first before calling however
run this in linux or windoze if you have openssl installed first: `johnycash@ws2:~$ openssl rand -hex 16`
you get back 16 hex values each in a range of 0 to FF so this is output: `950abf3187a6487caf40c8b842a811d8` or u could say a param of 16 returns 32 hex values in range of 0 to F 🙂
Figured it out. My wallet was never initialized and had 0 lamports. For some reason that means a node won't even give me the time of day
Having a weird issue. I am using web3's sendRawTransaction to devnet and recieve it's txid. But it times out when trying to confirm it and it doesn't show up on solana explorer. Has anyone ran into this before?
<@!712412210814779454>
what's the rules of  pending transaction ordering  to be include in a block ???
Regarding this https://docs.solana.com/developing/clients/jsonrpc-api#accountsubscribe                          How exactly will we get a notification? Since this is an api call, where does solana send the notification to?
How to generate random number in solana program?
if you have installed solana command line tool, you can try `solana-keygen grind --help`
Would be nice to accept string here as well https://solana-labs.github.io/solana-web3.js/classes/Keypair.html#fromSecretKey
yoo everyone is there any documentation to create custom address on Solana?
Like maybe something on YouTube 😋
Heyyy does anyone know any good tutorials on deserializing data off chain? Like I wanted to pull information off chain from the JSON RPC  and I knew the layout.
did you figure that out?
Impossible.  They only activate on epoch boundaries
did any new network features get activated on mainnet over the last 12 hours
https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment
processed?
I set it to `confirmed` for now
What is the comparable Commitment level to `singleGossip`? Noticed that is deprecated and want to update my code
Right.  I would remain vigilant over there
I asked in serum, no response
Important detail
In anchor
There's a key on the program data `AccountInfo`, no?
in the program
Is there a way to get the program address that we are invoking ?
Thanks for the answer
At least that's my basic understanding, correct me if I am wrong
So you just need to provide the program_id and the program_id will give an "interface"
Yeah that took me a while to wrap around. Where all tokens lives in the SPL
That's possible because on Solana token is one contract, as opposed as ETH where each token is a distinct contract meeting the same interface
Yes, full raw data is provided
Any events emitted over the socket?
If you receive a token it immediately shows up in your wallet
Yes, moreover wallet get new token accounts over websocket
Are you referring to this one https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountbalance
Not sure if this is very useful actually
But on Solana a RPC call provides all the token accounts in the wallet already
Great idea, however solana-labs is not implementing any wallet.
@here I am suggesting if is possible to add https://eips.ethereum.org/EIPS/eip-747 Ethereum equivalent to `wallet_watchAsset` to a wallet provider? Where we could add assets to a given wallet provider.

Request:
```sh
curl http://api.mainnet-beta.solana.com/ -X Post -H "Content-Type: application/json" -d '
  {
    "jsonrpc": "2.0",
    "id": 1,
    "method": "token_watchAsset",
    "params": ["BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4"]
  }
'
```

Result:
```sh
{
  "jsonrpc": "2.0",
  "result": {
    "price": 1.01,
    "rank": 3,
    "24h_volume": "47.8B",
    "market_cap": "62.4B",
    "overview": {
      "token" "Wrapped USDT (Sollet)",
      "address": "BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4",
      "current_supply": 356033570.000000,
      "decimals": 6,
      "bridge_contract": "0xeae57ce9cc1984f202e15e038b964bb8bdf7229a",
      "logo_uri": "https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4/logo.png"
    }
  }
}
```

And potentially call via @solana/web3.js `TokenInfo<T>: { method: string; address: PublicKey }`

```ts
/*
 * @dev Adds the token asset to the wallet provider
 */
let usdt: TokenInfo = await solanaWeb3.TokenInfo("token_watchAsset", "BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4");
```

Anyways the example is coming from the blockchain explorer
https://explorer.solana.com/address/BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4

I have added as a new issue at
https://github.com/solana-labs/solana/issues/19001
@here
Please what's the correct way to send SPL tokens to a Solana wallet (like a Phantom wallet)?

I'm testing out this command `spl-token transfer --fund-recipient <TOKEN-ID> <AMOUNT> <RECIPIENT-ADDRESS>`, but when I check the token account balance after the transfer, I see no change.

Is this how it's done?
Use this variant instead if you don't want to parse the accounts client-side. https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getParsedTokenAccountsByOwner
<@585868308419444749>
Hey I’m using the solana/web3.js library.
In it I’m particularly interested in a method called getTokenAccountsByOwner()
It responds with an array of accountInfo objects. How do i decode the this particular value inside the “data” key?
yea was just looking at that, thanks
Atm, best way to get those memos are to call `getTransaction` (`getConfirmedTransaction` in v1.6) on each signature from `getSignaturesForAddress`. `jsonParsed` encoding will print the memo UTF-8 prettily
any alternative solutions to finding all transactions + memos including a specific address
Is there an arweave / some other defi place with all the svgs for usdc/srm/eth etc.
You can ask.  People will reply if they know.  If it's general rust questions there's likely a better place in the rust community
Am I allowed to ask rust-related qns here? (Since rust-support is gone)
Alright sorry for all these qns without context. Just asking for indexing purposes.
Not off hand no.  We're aware and are putting features in place to get better control of block size consistency though


///////////////////////////////////////////////////////////////////////////////////////////////

aw, missed the "redeploy" part... thanks!
https://docs.solana.com/cli/deploy-a-program
also I'm getting `solana-test-validator` is not recognized... but other cli commands are working. Any ideas?
following
can anyone point me in the direction of updating/upgrading programs?
Nice thanks, but I wonder if blockhashes on Solana can be easily changed?
Does anyone know how to access the last blockhash from inside program execution. I'm planning on using it as a source of randomness
I imagine it's 10MB because that's the size limit of an on-chain Account
is there a size limit on program code?
this will help
https://medium.com/gitcoin/commit-reveal-scheme-on-ethereum-25d1d1a25428
https://docs.solana.com/cluster/synchronization
this page mention about to use VDF
Hey guys, how would you do randomness on Solana?
I would really appreciate the help <:lovecat:858079421416079360>
Hi guys, how do I set an accounts freeze authority to none?
please help me ^_^. how can i decode data from info = await connection.getAccountInfo(token_pubkey); (solana/web3 API). i need  get "token address" from "Associated Token Metadata"
Hi. Web3's onAccountChange method is not async and doesn't provide a way to see if the call was successful for catching errors like ] Internal Error: Subscription refused. Node subscription limit reached
web_1  | accountSubscribe error for argument [.
How can I catch such errors?
Sir how can i take snapshot who mint a token?
Does anyone have an example with solang?
core/src/broadcast_stage.rs is a good place to start.  Note that the name Turbine is marketing hype, it's not actually called that in the code base 🙂
When an account is marked writable, the runtime takes a write-lock on the account on behalf of the transaction.  So multiple transactions that reference the same account are serialized.  If you mark the account as read-only, the runtime won't take that write lock and multiple transactions can run in parallel.  So taking a write lock unnecessarily harms the potential throughput of your program
It's immediately after the transaction completes successfully.  An `is_closed` flag seems like good a belts and suspenders policy, essentially a terminal state for the program account data that is different from the uninitialized and all other valid states.
Just saw this, sorry for late reply, so do you mean watch this notification https://github.com/solana-labs/solana/blob/b08f8bd1b042c0a9c49f34694885365f4372c345/client/src/rpc_response.rs#L128 ? It seems this API won't be able to provide historical view of skipped block, but only those from now on? Just wondering any place to find those blocks that has been discarded by the majority.
Any could point me to where Turbine is implemented in codebase? Try to investigate the 'random' path shred is broadcasted and how much described here https://docs.solana.com/cluster/turbine-block-propagation#neighborhood-assignment---weighted-selection is actually deployed to production?
never mind found the <#763249718339567626> channel
hi there! new to the ecosystem. Coming from a python background and looking to create a simple app with a staking contract. Any help would be appreciated thanks 🙂
i think data accounts owned by program are writable by default, but you can set isWritable = false when sending accounts to program when sending transaction, but not sure why would you do that
Is there a guide of solana for ethereum developers? For example, I’m looking to understand what a log is called on Solana and other terminologies.
What is the Solana equivalent of eth_getFilterLogs?
i.e. is there some extra param to pass when doing `spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM
`
adding one more question, how do you make an account writable or not? ```    /// 0. `[signer]` The account of the person initializing the escrow
    /// 1. `[writable]` Temporary token account that should be created prior to this instruction and owned by the initializer
    /// 2. `[]` The initializer's token account for the token they will receive should the trade go through
    /// 3. `[writable]` The escrow account, it will hold all necessary info about the trade.
    /// 4. `[]` The rent sysvar
    /// 5. `[]` The token program```
hey everybody - has anyone used chainlink on solana - do you know when full feature parity (versus solidity) will be available? - i know the code is being is in Que to be audited just trying to understand how comprehensive the chainlink functions will be on SOL versus other chains
When does garbage collection of accounts with zero lamports occur? If it's not immediately after the transaction (or even if it is), then I worry zeroing isn't sufficient.

Instead, I've been prefixing  instruction data with a special "is_closed" flag, which prevents the program from ever using the account.

My worry is that 

* PDA account exists--associated with some user by virtue of the fact that it is both initialized and has a deterministic address.
* The account is closed, setting lamports and data to zero.
* Subsequent instruction (or transaction) gives lamports to the account, keeping it initialized and owned by the program (though with zero data).
* Subsequent instruction  re-initializes the account data, which is a PDA but with a different authority.

Now someone might check the account, see that it exists, and statelessly think it is one's own account since it's a PDA. However, the account has been re-initialized with different data and a different authority.

Instead, the `is_closed` flag ensures the account gets garabage collected, resetting the PDA's owner back to the system program.
this has been puzzling me for the whole morning now
sorry for list of questions lol
and does solana automatically know that variables in state.rs need to get saved to account storage instead of discarded from memory?
also, what is serialization/deserialization? is that for packing and unpacking data to and from storage?
is there a place I can ask rust based solana questions? for example why would you need an empty implementation here if there's no added function? 

```// inside state.rs
use solana_program::{
    program_pack::{IsInitialized, Pack, Sealed},
    pubkey::Pubkey,
};
...
impl Sealed for Escrow {}

impl IsInitialized for Escrow {
    fn is_initialized(&self) -> bool {
        self.is_initialized
    }
}```


///////////////////////////////////////////////////////////////////////////////////////////////

<@!466984915376799748> mainnet works instantly
ill try mainnet
yeah unfortunatelly stopped working for me
yes
sounds like a feature that could be added to anchor, you may want to ask over in the serum discord about that: https://discord.gg/PPDYFFE6FE
is this what you mean by pause? https://fravoll.github.io/solidity-patterns/emergency_stop.html
not possible in the way you want, but you could have an accompanying account for each token account which can be used to pay
yup
message
?
you get mg from webocoket
<@!397190811239841802> I'm not having any issues with devnet (https://api.devnet.solana.com) with web3 either
_drawing diagrams over here_
is it possible, or not super difficult, to pay for the accounts using the minted token?
yeah I think the pieces are mostly there
from what i gather, combinations of the spl programs can be used in a program without needed to rewrite base use-cases
<@!386946780836921344> you might find some inspiration here: https://github.com/metaplex-foundation/metaplex/tree/master/rust/token-metadata/program
the children accounts would be an entities storing only respective data
i was hoping to store an index referencing other accounts, perhaps nfts, that could have rent paid for using the token
can't store anything in that account. what kind of data would you like to store in there?
thanks starry, i did come across the registry, i guess where I'm confused is, the tokens can be minted using the spl-program then exist in a token account. how can you store token specific data with that account?
I tried with cli, trying with web3 now
solana has re-entrancy disabled by default. The only exception is if the program calls itself
so is dev cluster side
it just stopped working without changing anything
u tried web3js?
not to the account, but there is a registry here: https://github.com/solana-labs/token-list
hmm I just tried and devnet is working <@!397190811239841802>
thank you come again
`×
Unhandled Rejection (Error): Transaction was not confirmed in 30.00 seconds. It is unknown if it succeeded or failed. Check signature FsCxpdQsaXVJxxRXwBuMsdz7Fo2vo5gx5h4YDjAwY2VsmEMxfh46Zr6uiNoBA1wjSk3zZeVN2tfPD7TtvVWnek1 using the Solana Explorer or CLI tools.`
yeah dev is brok
using web3js
what gives?
but it's successful on explorer
`Unhandled Rejection (Error): Transaction was not confirmed in 30.00 seconds. It is unknown if it succeeded or failed. Check signature `
getting this on devnet
Is there an equivalent of re-entrancy guard and pause written for solana programs yet?
can the tokens created with the spl-token program attach data to the token account?
Hello where can I find Solana developers for our project ?
<@!466984915376799748> at another time I'd like to talk to you about our designs for a leader rotation schedule for Keepers on mango. Right now it's just going to be open and everyone can call it, but might end up being suboptimal
Yeah but if we figure out these patterns it should be helpful for others on Solana
maybe pseudo random buys you enough time until we have a trusted source of randomness
this is much more nuanced than simple yield farming
hmm I see why random snapshot is your current approach
yeah that's similar to bias-ing the randomness, you could influence validators to not fill your order before you collect your rewards 😛
Yes, but you probably don't want to give any rewards to people too far from top of the book as well. And there can be some perverse behavior where you quote large size below top of book, but you redeem away and cancel order when market moves closer. Maybe that's not that perverse
you could also have a redeem instruction that allows users to collect rewards on demand and bump the timestamp?
yeah that works well because you trust the CEX to do randomness fairly
will be
The get_random function is called multiple times per transaction
If multiple clients call this program, you wont be able to predict the next result as solana allows a certain amount of rpc calls per 10sec
Random snapshots is how CEXs do their designated market maker programs and it seems to work well
It's slightly suboptimal because it only rewards you when you're matched. So if you have liquidity slightly below top of book, it would take you longer to get matched, but the MAX_TIME param would limit your rewards
yup that's a step towards what I meant. You would know how long the order was open when it's filled or canceled and could accumulate mango points based on that stored timestamp
IS that on chain? Looks like I would know the next result before I call it
<@!748249199606497502> what do you think of it ?
Random *random is just an uint16_t counter variable
im doing like this
mango discord
I don't have access
which discord is that?
I'm not sure exactly what you mean but my other design was like this: https://discord.com/channels/791995070613159966/820390560085835786/860164773374197790
I think the compute cost could be optimized pretty low
I still think that updating mango points on each order operation is the way to go
Maybe we're not safe 🙁
heh, great. I like 🥭 's
But only <@!466984915376799748> and Anatoly know how to do that so we're safe 🙂
yeah they could analyze the bpf byte code
But I worry people may be able to reverse engineer the deployed program code.
If you could somehow spread the relevant knowledge to several parties, would be even more robust.
how easy would this be to implement?
So long as you trust the deployer not to exploit their knowledge, it should be fine
A contract that you can call to get a new random number
My suggestion was to have a closed source pseudo random number generator
you could have some decentralized incentivized oracle protocol with multiple participants to reduce the chance that the randomness could be biased
Looks like exporting global variable isn't supported, any idea how to use them still ?
Would you just have to trust the oracle provider to not abuse it?
I get a "Error: ELF error: ELF error: .bss section not supported" when deploying my C program, any idea why ? 😮
yeah we need a source of randomness, unfortunately I don't think there's any work ongoing for a randomness oracle yet
But I do think it's worthwhile to figure out a randomness pattern in Solana
Yeah we have some other designs that are less 'perfect' but will get the job done
if you could accrue points on each order operation you could have slot level granularity and limit abuse
Right
oh ok and you accrue the points at random blockhashes
about 20% right now
Actually my current implementation is to just store MNGO accrued on the order. The total disbursed will be capped. But the way someone can abuse this is to put a gigantic order on the book, manipulate the blockhash to trigger reward, then cancel order. And  they can manipulate blockhash to trigger the rewards much more often than you'd expect randomly
https://solanabeach.io/validators
how often does this happen?
oh ok, makes sense, how can that be abused then?
Yeah it's the whenever they want part that is a bit difficult. But yes I'm just storing "mango_points" on the order itself which can later be redeemed at some exchange rate for MNGO
did you explore that?
you might be able to track accumulated rewards on-chain and allow users to redeem for a capped amount of mango whenever they want
<@!248066053161222144> is attempting the same thing for his project
haha checks out 😛
The amount of mango tokens per disbursement will be capped. But if it's possible to manipulate the blockhashes, perhaps better to cap disbursements per unit of time (e.g. 1m MNGO per week)
To bootstrap liquidity on the mango perps orderbooks, mango tokens will be given to makers who place orders on the book. It would be too expensive to pay out the rewards every slot, so instead we randomly pay out the rewards by iterating through the orderbook when the blockhash looks a certain way
why is there randomness involved <@!748249199606497502> ?
is the most perverse silly way of thinking about it
yield farming rewards but for an orderbook based dex
if the payoff is capped then this could be fine, I don't understand what you're doing enough yet though to be confident
it's the whole ledger but yeh, i guess there must be some optimisations here
yup that's blockhash and it's trivial to iterate through transactions to get an advantageous blockhash
`A preimage resistant hash of the ledger at a given block height. Taken from the last entry id in the slot`
yeah we have two different hashes, bank hash and blockhash
I don't think blockhashes are hashing the entire state. Pretty sure it's just transactions
it must take a non-zero amount of time to take a hash of the entire state of the chain though
the extra data could just be a transaction
yeah, exactly
and they would keep doing this until they get an acceptable hash
is the weakness that leaders could add extra data to the blockchain such that the hash is altered
And the payoff from abusing this would be capped.
If there are sufficiently many leaders, I'm not that worried. To give better insight, we're using this as a way to pay out liquidity incentives to market makers on mango perps.
not much difference in `current_slot - 2` or `current_slot - 1`, leaders get 4 slots in a row and it's always possible to pay off multiple leaders in a row if needed
I'm not sure it's possible to use recent blockhashes as a source of randomness for non-trivial amounts of capital
so `current_slot - 2` in my previous mental model. But I realize that mental model is wrong for other reasons
Right or being the leader himself. Can that still happen if I take completed blocks only?
hmm but what if that user can influence the last blockhash by paying the leader for that slot?
So I just need to store something on the user's account that would let me later infer he didn't know about the last blockhash when he interacted
Ah ok. Yeah I don't understand how solana works well enough lol
Got it thanks. I'm using the blockhash as a source of randomness and making sure the user didn't know about the blockhash by making sure the user interacted with the protocol in `current_slot - 1` or less
could be a the blockhash from a few blocks ago if there were skipped blocks or a small fork in the past few slots
well, not necessarily `- 1` if that's what you're asking
yeah, because the current blockhash isn't computed yet
Thanks, but would that correspond to `current_slot - 1`?
I think you want the first one
this may help: https://github.com/solana-labs/solana/commit/94ab0eb49f1bce18d0a157dfe7a2bb1fb39dbe2c
Suppose I have this code:
```rust
        let recent_blockhashes = RecentBlockhashes::get()?;
        let last = recent_blockhashes.last().unwrap().blockhash;
        
        let clock = Clock::get()?;
        let slot = clock.slot;
```
Is `last` blockhash here the blockhash from the slot number `slot - 1`?
hmm this was a bit of an old discussion regarding performance of the software stack itself (not direct cost to the end user), I've since updated my views that its much simpler to improve the way accounts are loaded (probably by batching/shifting away from mmap)
<@!601033173840953364> Nice post here: https://github.com/solana-labs/solana/pull/16984#discussion_r646207993

I also wonder about page faults and cache misses. Usually, when I build optimized software, I worry about those, but in Solana I'm charged per "instruction" however that is defined, and so I don't worry about cache misses
Hi every one, I try to run solana validator on hello-world example but it occur error.
I am on Mac M1 Big Sur11.4, brew 3.2, openssl 1.1
Can some one help me ?
Yeah the a full tree will be on of the test cases
probably just need to be careful to test the worst case scenario to ensure your program can't get stuck in some state that requires too much recursion
Thanks. I'll try it out anyway. I could do in order traversal of binary tree by iterating, but that would require a Vec and I know heap space is also limited
I think it has a max call depth of 64 (single program)
Are recursive functions discouraged on chain?
jest is whats throwing this error
whenever i do react-scripts test
what do you want to do
<@!501570363566587905> youre the man to ask i guess
would anyone know why?
this error from inside the module
/root/frontend/node_modules/@project-serum/sol-wallet-adapter/dist/cjs/index.js:79
    import EventEmitter from 'eventemitter3';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module
i keep getting
but whenever i call new Wallet inside my file
hey im importing https://github.com/project-serum/sol-wallet-adapter this into my typescript project
Yes, that's correct. Program derived addresses are only different from normal addresses in how "is_signer" is set to true. Otherwise they are treated exactly the same. You can "create" an account (transfer sol, assign program, and allocate data) as long as that account has "signed"
could someone pls help?
Ok, so my understanding right now is that the cli needs to derive the program address on the user's behalf, and include it in the transaction header
Asked differently, is there any good way to figure out the full effects of a transaction outside of what is returned by the RPC api?
Hi. I've been doing some on-chain reconciliation work via the solana RPC API. It seems like transactions back in March sometimes didn't record inner instructions correctly, making it hard to get the whole picture of what a transaction actually did in terms of SPL effects. On 16th of March it seems to have been an upgrade that started filling in the pre- and postTokenBalances and in general I don't see issues, but before that I can find multiple cases of missing inner instructions. Is this is a known issue?
the recipient may need to manually add the token
do i just look at blockhash?
hi guys, how do i do a crypto snapshot for an airdrop?
Hold on, this is a completely false statement. As a matter of fact, as seen here, https://github.com/solana-labs/solana/blob/ad53d2ef77543314558d02056cd7daa47fd816df/programs/bpf_loader/src/lib.rs#L378, program_addresses also go through the same create_account pathway by the runtime. 

But how is this even possible...?
I think I have my answer.

`create_account` and `create_program_address` are two very separate things.

In the former case, if the account doesn't exist yet, `AccountSharedData::default()` is passed by `AccountsDb::load_transaction`

For derived accounts, a separate pathway must take place...
thanks, i'll take a look <:prayge:778782272446791714>
hello guys, I want to transfer usdt from my wallet to another one. I use @project-serum/sol-wallet-adapter and <@832686202074300446>/web3.js ... is there any sample code?
I think this is the intended behaviour. The recepient needs to create a token account for themselves before being able to receive tokens.
For sollet have a look at sol wallet adapter by serum
are there any guides on how to connect to Sollet or Phantom with <@832686202074300446>/web3.js?
or some sort of API
Are you able to do a token transfer with the Solana JSON RPC?
Hey everyone, I noticed there is currently a bug in sollet that doesn't allow sending tokens to a Solana address without a token account (https://github.com/project-serum/spl-token-wallet/issues/307).
Is the behaviour of always being able send to a solana account expected and wanted?
If so, is this sollet feature outage temporary?
However, how does the runtime manage this? 

Since if the account is passed to lower invocations which are not owners, the only way to ensure that the account is not modified unduly is by checking it against a preaccount, but this preaccount doesn't exist for that account

unless, this "message passing account" is completely ephemeral? But this doesn't solve the issue...
Hold on, now I'm reading, in , https://docs.solana.com/validator/runtime#systemprogram-interface " Client's need to use CreateAccount instructions to create memory before passing it to another program.  This instruction can be composed into a single transaction with the call to the program itself."
Hello, the accounts created by system_program::create_account cannot be immediately used within the same instruction, or even transaction, correct?

This also applies to accounts created with program derived addresses, right?
I tried spl-token freeze (address) but doesn't seem to be working
Hi guys,  how do I freeze an account of a suspected scammer?
Is it caused by the node being behind and not being able to release a correct signature for the transaction? While it can propagate it to the cluster just fine
Like transaction will proceed fine, but the signature does not match actual
Why is sometimes a RPC returning incorrect signature for a Transaction?
Is there a way to serialise transaction information and send it over https? For example if I have an instruction that needs to be partially signed by a user in an app and a server with its private key?
good question, would love to know that as well
should we always simulate tx before doing real tx? is that the best practice?
Just wanted to come in and let everyone know to keep building. Don’t stop. We are still extremely early and in years to come will be the ones people look at to get explanations for how we did it. Nothing is remotely saturated yet, even DeFi is still very early across all protocols…much less strictly on Solana. Keep building
I am trying to create a temp token account in a transaction, i wonder what is the best way to do that in a way that saves tx space but is also safe.
Should I make the token account keypair owner of its account so that I can create_account, init token account, provide transfer authority then close in a minimal set?
You can `--clone` an account at a time, nothing more fancy than that atm
Is there an analog to solana-test-validator's `--bpf-program` flag but for accounts and their data?


///////////////////////////////////////////////////////////////////////////////////////////////

What are you referencing?
sure, documenting would help. It looked like the values might be there already since you can see the reduction in the max compute units from the original 200,000.

I don't really have any particular expectations with regards to compute costs. It's purely based on observed costs. So 8k on average for an SPL token CPI call. Not sure yet what the average is for a new order CPI to serum, it might be quite large since their accounts can be pretty large, particularly the event queue.
Looks like there was a change from CLI tools 1.7.0 to 1.7.3 that added a `spl-token transfer ` flag pertinent to multisig operation:

Was: `--owner <KEYPAIR>`
Now: `--owner <OWNER_KEYPAIR> <SENDER_TOKEN_OWNER_KEYPAIR>`

What is this new flag, exactly?
hey everyone
Not sure we want to log the compute costs for every syscall, would documenting the syscall cost structure help?  Are you seeing the cpi compute costs match what you would expect given the size of the accounts passed?
Thanks a lot!!
As was recently discussed in <#837340113067049050>, looks like somebody's buggy client was consuming all the websocket connections on the public devnet RPC endpoint 😕
Trying to do a solana program deploy to devnet and getting:

```
Error: Data writes to account failed: Pubsub error: ConnectionError(Http(503))
```

Is devnet down/intermittently failing? `solana -u devnet account` works and shows that I'm losing SOL from my deploy attempts, but the deploy can never complete.
ok thanks
erm that's true.
sorry wrong channel, meant to post in history server
That would be up to the program.  If resolving a "correct account" is part of its protocol, it should be storing information to do that
based on time
Also seems irrelevant
so if i have multiple accounts on one program, how do i decide which one to use?
That information isn't stored anywhere
in case you need to know to prioritise the account to be used if multiple accounts on program
Depends on the dapp, you'd have to ask their support
so client can sort it
there should at least be timestamp when account is created for program
Hi guys, quick dev question, how do I chec the LP tookens of some pool like raydium? I was able to get tokens using the RPC SPL token endpoints, but can't see how to get those
Why should the server waste resources sorting what the client may not need sorted?
that's shocking tbh lol
why not? wow...
I'm not sure I can describe it any better than the error message 🤷‍♂️
No
`getProgramAccounts` is this returning in same order each time?
```signatureSubscribe error for argument [
  '*****************************************************************',
  { commitment: 'confirmed' }
] Internal Error: Subscription refused. Node subscription limit reached
```
what does it mean ?
when you query for program accounts are they always returned in same order?
To avoid these issues in the future, get in the habit of using the `cargo` wrapper script in the root of the monorepo to ensure you're building with the correct target toolchain
These methods became available in Rust 1.53.0.  Upgrade your toolchain
Only insofar as the transaction having triggered rent collection on the account.  This happens the first time in an epoch that an account subject to rent is loaded as writeable
what's your rust version
For those interested, we opened a graphql endpoint for account token balances, account history (solana txs), account spl balance history, and current tokens available on solana.
It's located at https://solqltest.aleph.cloud/ and has CORS activated so you can use it in your dApps/wallets.
Feel free to play with it and report any issues you might find 🙂 We can provide example queries to understand how to use it. The docs panel on the right shows the available queries and data types.

If you are developping a dApp we can also work with you on a specialized endpoint like the one done for raydium, available here: https://rayqltest.aleph.cloud (and used on https://raydium.info)
ı have one question again .  ı tried cargo build  in local solana file.  but ı have error .
ok ,  ı think ı must work on localnet 😅
The above issue, will happen in all networks [mainnet, testnet, devnet]. I myself faced this multiple times, and while checking manually on explorer, I see the transaction was actually succeed, atleast 95% of the time.
does any difference between devnet and testnet
This type of error occasionally happens in Solana. You must manually check it on explorer, if the transaction succeeded or not. Most of the time it succeeds.
hi  ı'm working with devnet .  Normaly it works but now ı have this error ```Error: Transaction was not confirmed in 30.01 seconds. It is unknown if it succeeded or failed.```
And I also see lots of Rent reward here https://explorer.solana.com/block/85824159/rewards
Are all these rent reward related to the transaction in this same block # 85824159 ?
TX fees always go to the validator who included the TX in a block.  They're collected by the runtime, so there's no TX
It is possible - I am not sure of the complete set of steps required to do so these days, but I have `solana-test-validator` running on my M1.

Had to build tooling directly from solana repo. This is at least a good start:
https://medium.com/coinmonks/solana-from-source-527cec3730b1

Support at a more official level *seems to be in progress
do you hit:
`UnhandledPromiseRejectionWarning: Error: Transaction was not confirmed in 30.01 seconds.`
In this transaction, https://explorer.solana.com/tx/3wx1miD8RU4MRV1KFDvqo3rTEeQmW3LeczQZ3fQfDTVLBKtav3jfkAc6ETDBas65fHeiqPNT7WSr8PzCKj8Ut41K

I see a fee of 0.000005 is deducted from account GDzfc9TQs2yHYXkeaP6WoNdXzp52cxzyEuupZwhN48KZ. But How do I determine who get this fee? There must be some sol address receiving this fee.
yep, solana program library has been helpful but i'm still figuring out patterns for sensibly creating accounts for user data while meeting rent exemption. for the rust book or even "rust by example", i think you'll get a lot of value switching from python... i've also found or been pointed to examples poking around the solana and serum github org
Hm, this isn't well documented, but it's 32 confirmations before it becomes practically impossible to roll back the state: https://docs.solana.com/implemented-proposals/tower-bft#algorithm
unfortunately, we don't have a neat way of exposing things like that -- you have to go to the source code / crates for the different programs to get info about the structs and instructions.  are there any in particular that you're interested in?  i should be able to point you to some of them.  for example, the solana-program-library (which includes the token program) can be found at https://github.com/solana-labs/solana-program-library, and serum can be found at https://github.com/project-serum/serum-dex/tree/master/dex
It'll all depend on the compute limit: https://docs.solana.com/developing/programming-model/runtime#compute-budget
Should be fine, just be sure to use the newest solana build tools and enable the feature
<@!639493393512398869> will be your point of contact there, i'm not too familair with it
nope you understood it, it's pretty unsafe  😆
ok I will look.
What's the max confirmation time for a block? Does the confirmation time guarantees, that block cannot be reversed or re-orged?
Hi everyone, we're trying to integrate Solana to our existing project. I would love to learn how can I analyse existing smart contracts on the blockchain by their addresses. Like getting function signatures, ABIs, etc.
<@!856184913313398814> Yes, Program are stateless, then account are use to store data. In solana repository you'll find example-helloworld and looking at the rust code you'll find an example of how to set and get data stored into an account
Or am I missing some magic?
https://github.com/metaplex-foundation/metaplex/blob/master/js/packages/common/src/wallet-adapters/torus/index.tsx#L63-L79 O_o so torus wallet delivers the private key to the dapp you connect to, what a convenient unsafe design
is free rpc pool connected to the devnet or mainnet and is there a way to connect it to the devnet
I replaced the `https://api.devnet.solana.com` with `https://free.rpcpool.com` and my balance become 0
Anyone using solang? Is it paid to call the "get" function from the program?  ı'm trying write a contrat(simple get set and has struct).  how can ı set struct data and get struct data. Do I need to open a warehouse account to store it?
After calling a function of my program once from frontend using web3js, I'm calling  spl_token::instruction::transfer & invoke_signed 50 times, will it work fine or give some error? Is there any limit on number of continuous call by passing same debit account and different account to which I want to credit
Can I use unstable library feature like last_key_value of BTreeMap in my rust program? Or will it create some problem
Is RPC pool (https://rpcpool.com/instructions/) good replacement for the provided rpc dev net
Hmm. I am basically looking to store  Solana blockchain data in nearby Real Time into OpenSearch. Do you have any suggested way to get the slots data in real time as well as to handle chain reorg ?
Thanks I can update the script to use env, one can only hope it's always in /usr/bin ...
And, is there any pattern that can be used to fix up the invalid labels?  Just escaping double quotes, or is there more?  I guess I can research this myself if you don't have an answer at the ready.  Thanks.
Thanks for the clarification, so there's only one PoH hash chain in the whole system and should be same for each validator? Is the main reason we have a PoH is to prevent someone computing several blocks secretly and push to the chain to be the heaviest? For understanding why ledger entry could have either 0 or more PoH hashes, any recommended material to read?
There's some info in the README.md about using M1, you need to enable Rosetta or something
Or how to setup devnet RPC validator
I'm using m1 is it possible to develop locally
probably same issues as earlier today, people are using up all the websocket connections on the public devnet RPC servers.  Workarounds:
1. Use `solana-test-validator` and develop locally
2. Use your own devnet RPC validator so you don't need to share resources with others
`Internal Error: Subscription refused. Node subscription limit reached`
Hello guys I'm hitting this error:
PoH is not a side-chain, it's a part of the main ledger.  Each ledger entry includes 0 or more PoH hashes, which uniquely defines the ordering of the ledger contents
Hi, intro-level question on PoH: can we consider PoH as a side-chain of main ledger? If different validators run it locally without synchronize, does it mean we can have situation where different validators 'thought' they are in different slot at same physical time? And would that time difference become larger and larger when time passes?
It works pretty good!  And highlights a bug in `solana validators` where the rows aren't aligned when validators include emoji ( 🚀) in their names, I guess I need to fix that soon.

Some minor issues:
1. `#!/bin/bash`  picks up a retarded version of bash when run on MacOS.   Instead, `#!/usr/bin/env bash` works on Linux too and on a MacOS homebrew system will pick up `/usr/local/bin/bash` instead
2. Three validators produced invalid YML output that I had to manually prune before `solana config import-address-labels ...` worked.   On example: `Cs23cJMRuahuKh5oNhVmLhM2UrtaZLULLF3HqrxfTnHc: """"`

Thanks for the script!
<@!445425471027544095> Hey just wondering did you ever end up using the script I wrote that downloads the validator info name list in yaml format?
<https://github.com/bji/solana_tools/blob/master/solana-address-list.sh>
Let me know if you need any changes to it ...
Ooh, I see, will check out 👍
Second is under the <#749525654621650945> integration channel
The first is Solang, and the second would follow a similar pathway to that proposed a long time back for embedding a Move VM  (https://github.com/solana-labs/solana/blob/master/docs/src/proposals/embedding-move.md) - which is to say, develop an EVM loader, correct?

Supporting the full feature set of EVM is probably quite hard - I'm assuming one would limit the total set of syscalls. I'm guessing this direction will take a much longer time to actually get to production than a cross-compiler like solang.

Quite curious if the current progress is observable? Is one using an existing VM implementation like (https://github.com/ethereum/evmone )?

I guess the dev for this is being spearheaded by velas (https://solana.com/ecosystem/velas )?
Thanks Greg. I didn’t say explicitly, but I was looking for more like “small completed projects”, which looks like what the Solana Program Library is. Thanks for the rec on the RustLang book - have you read it? I know it has a great reputation.
In the ETH domain the signature would look something like:

```javascript
handleSignMessage = ({ publicAddress, nonce }) => {
    return new Promise((resolve, reject) =>
      web3.personal.sign(
        web3.fromUtf8(`I am signing my one-time nonce: ${nonce}`),
        publicAddress,
        (err, signature) => {
          if (err) return reject(err);
          return resolve({ publicAddress, signature });
        }
      )
    );
  };
```

and the API decode:

```javascript
User.findOne({ where: { publicAddress } })
  // --snip--
  .then(user => {
    const msg = `I am signing my one-time nonce: ${user.nonce}`;

    // We now are in possession of msg, publicAddress and signature. We
    // can perform an elliptic curve signature verification with ecrecover
    const msgBuffer = ethUtil.toBuffer(msg);
    const msgHash = ethUtil.hashPersonalMessage(msgBuffer);
    const signatureBuffer = ethUtil.toBuffer(signature);
    const signatureParams = ethUtil.fromRpcSig(signatureBuffer);
    const publicKey = ethUtil.ecrecover(
      msgHash,
      signatureParams.v,
      signatureParams.r,
      signatureParams.s
    );
    const addressBuffer = ethUtil.publicToAddress(publicKey);
    const address = ethUtil.bufferToHex(addressBuffer);

    // The signature verification is successful if the address found with
    // ecrecover matches the initial publicAddress
    if (address.toLowerCase() === publicAddress.toLowerCase()) {
      return user;
    } else {
      return res
        .status(401)
        .send({ error: 'Signature verification failed' });
    }
  })
```
Using any of the solana wallets
Can anyone point me in the direction of a dev pattern for signing a nonce in the front-end and then verifying the signature in the backend?
if you haven't already, read the rust book... into double digit languages and found it to be one of the most organized language walkthroughs to-date: https://www.rust-lang.org/learn
Some people have like 3 different accounts for the same token on there account and some have the old Aux and some the new ATA. Are there any examples for front end to have a user able to select what they want to use?
I guess it would be here? https://github.com/solana-labs/solana-program-library/tree/master/examples/rust Thanks!
Wonder if anyone in this channel has any recommendations on good "next steps" after going through (https://discord.com/channels/428295358100013066/462813738245029888/861788060143058964) the hello world tutorial (I'm a Python dev FWIW). Thanks!
Hey, I wanted to check USDC balance in Solana using JS library. Could you help with that?
The current maximum account size is 10MB.
is there a resource on how different types of data is stored in solana (like the accounts/transactions/logs tries of EVM)? I know solidity contracts have to be 24kb, but rust builds are huge - how can that fit on chain?
There's no limit in the transaction wire format (beyond the general address limit).  This particular issue appears to be just a missing declaration in https://github.com/solana-labs/solana/blob/e7b36c84841e7a3e8d635bec2e7c0ee18150f212/sdk/src/signer/signers.rs#L90-L108 to include support for 5, probably because at the time we figured that 4 signers ought to be plenty!
Is there a limit to how many signers are allowed on a given transaction? 
When I go over 4 signers I get an error saying `the trait Signers is not implemented for [&Keypair; 5]`. But all of my signers are just generic `Keypair::new()`'s. So they should all have that trait implemented.
so it depends 🙂
As a general rule I would, as it saves you from spending a transaction fee unnecessarily for a failed transaction.  High performance use cases can't be bothered as one counter example. Or if you're just turning a crank (an unprivileged instruction that causes more work to be performed in a program) then probably skip too.
mvines what is the best practice of simulating transaction? is it advisable to always simulate sending tx before doing real one etc?
will continue working on mainnet thanks
yeah
If you're using websocket subscriptions on devnet, the public devnet servers are currently running out of capacity as people are opening websockets and not closing them when done
frustrating
my app just stopped working for no reason
devnet is buggy
We recommend Rust, yes. You can use C/C++ too. There are some ongoing efforts to port both Solidity to Solana and add the full EVM, but these are both not ready for general use
do we write sc in rust only?
<@!445425471027544095> i am sorry for so many questions 😃
No, we aren't a Eth-based chain so those Eth tools don't work.  Check <#763249718339567626> for some dev resources to help you get started
also use web3js to interact with frontend
test them with waffle or mocha
we write sc in solidity then deploy them with hardhat or truffle
the dev procedure is same right?
thnx
i checked this web3js , is there any difference from the normal one
https://solana-labs.github.io/solana-web3.js/
is there any difference here
i have previosly worked on ethereum based networks
also a small question
yep, https://docs.solana.com/clusters
is there any testnet
hi i am new to solana network
`slotSubscribe` doesn't convey commitment levels, so you can't.
`rootSubscribe` might be an alternative, a rooted slot will not be dropped
If I use slotsubscribe websocket API. How will I know if there is some chain reorganisation due to fork?
<@466984915376799748> - as an example, if create an online arcade that uses tokens for game credits where each game's stats/score are persisted in an account per turn/play, a player would be required to pay using lamports each time tokens are spent on a game? additionally, for the game stats to be rent exempt, the player would have to supply the sol to cover the token transfer + two years of account rent? (unless the program operator covers the rent costs or even both rent and transaction fees)
I like it. 

I think the "big transaction" / address map proposal would be needed to do this in a non intrusive way. Otherwise, one has to add the pause field to an account, or pass in an additional account, neither of which is ideal.


///////////////////////////////////////////////////////////////////////////////////////////////

Hi Guys, 
I wanted to build a dashboard with metrics related to solana transcations.
Can someone guide me a starting point or reference., How i could get live transactions data
Anyone here know how to placing orders with PySerum
What's the top-level file for running a voting node? How is pipelining implemented? Specifically, how the switch between leader and validator mode implemented and how the transition between each stage happen (Is there a subscribe/interrupt conditioning mechanism between each running stage or is just when previous stage finish, the downstream stage start without a stop), e.g. a validator could receive shreds from multiple slots but do they need to wait till all shreds of a slot got collected to move to next stage, for example move to replay stage and start voting since voting is on a certain slot not shred? Looking into tvu.rs but don't understand how this work
   `pub fn join(self) -> thread::Result<()> {
        self.retransmit_stage.join()?;
        self.fetch_stage.join()?;
        self.sigverify_stage.join()?;
        if self.ledger_cleanup_service.is_some() {
            self.ledger_cleanup_service.unwrap().join()?;
        }
        self.accounts_background_service.join()?;
        self.replay_stage.join()?;
        self.accounts_hash_verifier.join()?;
        Ok(())
    }`
You also need to instantiate a `Token` instance from my knowledge
`Token` is in `@solana/spl-token` not `@solana/web3.js`, for starters
Hi
https://codepen.io/seigneur-machiavel/pen/ZEKYqqo?editors=1011
i tried all i can try but i don't understand my mistake 😢
"Cannot read property 'createTransferInstruction' of undefined"
Right.  So those are going to be specific to the dapp implementation.  That's why I was trying to get you to go to the source.  Odd that they would send you back here 🤔
cc <@!287924636493152257> , unfortunately there isn't anything like this built into our pubsub websocket crates. The easiest solution would probably be to implement a ping/pong notification in our service; it's been suggested before, but no one's taken it up yet.
Dont worry Im moving back to DevNet
where can I get some SOL in Testnet? Airdrop 1 SOL is not enough as each of my program deployment cost about 0.7 SOL
https://solana-labs.github.io/solana-web3.js/classes/connection.html

See "commitment"
Is it possible to get transaction confirmations when we have transaction hash. I cant see confirmations as prop of the transaction
https://github.com/solana-labs/solana/issues/18481
how can ı parse instruction_data . ı will send function name and parametr from client than ı want to parse in program.
Hey everyone. Is there a good recommendation to find developers here? We are trying to expand our team. Thanks
it should probably give you an error if you just give a pubkey as the `--upgrade-authority` on first run -- is there a gh issue for this?
Hm, it seems to silently fail if you just provide a pubkey, but it succeeds if you provide a keypair file
and outputs
```
PublicKey {
    _bn: <BN: b6887242fe72ae8b16a4e77ba19894636789e2edbbb9eaa7637928472aec2f4c>
},
```
your issue is somewhere else, this code runs fine
This code was working fine 10 days ago for me, but today it is giving this error
Any suggestions how can I solve this error

import {PublicKey} from "@solana/web3.js";
let escrow_program_id_string="6z8rYe9tVxkqdoHidWNVLW5YhmSX5ZK3GLZwTgKpacB9";
const escrowProgramId = new PublicKey(escrow_program_id_string.toString());
let PDA1 = await PublicKey.findProgramAddress([Buffer.from("practice")], escrowProgramId);
console.log(PDA1[0]);

Program is deployed on devnet
I tried only running this code, still giving same error
seems like `solana program deploy --upgrade-authority` still does not set correct authority on deployment but default one
Hm, seems to be working for me, i was worried that it would not be possible to generate a program address! must be something else going on in a different part
6z8rYe9tVxkqdoHidWNVLW5YhmSX5ZK3GLZwTgKpacB9
huh, interesting, what's your program id?
And in frontend like this
In program code, I'm doing like this
can anyone help me with this error
error: no such subcommand: build-bpf
Hello, i ve been getting this error while running the command cargo build-bpf:
seems like your program address + seeds don't produce a valid program address, check how you're generating your program address
Instead of doing a `SystemInstruction.transfer`, you'll need to do a `Token.createTransferInstruction`: https://github.com/solana-labs/solana-program-library/blob/299b39e0e33f3e997a9dd88850078e6ff08883b3/token/js/client/token.js#L1495
Any Idea why I'm getting this?
Thanks a lot!! I was redeploying without rebuilding 😅
https://codepen.io/seigneur-machiavel/pen/ZEKYqqo?editors=1011
Hi, someone can take a look on my little code please ? (Work for sending SOL with Phantom, but i want to send SPL (USDC) now)
Error 0x0 on programID (he try to send with initial Solana program , not USDC ProgramID)
> can the size of account data change dynamically over time or is it the max that you assin
when you create an account, you allocate the amount at that point *only*, reallocation is not supported yet
> for instance if i have an array property in struct is that possible? meaning that i can store more items of that property type in array?
Yep, the idea is to overallocate your struct to start, and fill it up over time
> i  am asking because i am wondering if I can use one account data to store data, or should i just create new data account each time and assign to program
It's up to you, you can check how much rent-exemption would cost using the `solana rent <BYTES>` command, ie
```
$ solana rent 300
Rent per byte-year: 0.00000348 SOL
Rent per epoch: 0.000008155 SOL
Rent-exempt minimum: 0.00297888 SOL

$ solana rent 100
Rent per byte-year: 0.00000348 SOL
Rent per epoch: 0.000004344 SOL
Rent-exempt minimum: 0.00158688 SOL
```
So as you see, since there's some header information required to maintain an account above just its data, you'd be paying ~0.0016 SOL for 100 bytes, and ~0.0030 for 300 bytes.
That's a great question, I'm not sure how exactly the pubsub mechanism works for keep-alive bits.  Maybe <@!213083996689661953> can answer you when she's around
Yep, you can check out transaction fees at https://docs.solana.com/implemented-proposals/transaction-fees -- for now, you're only charged per signature that needs to be verified, but this will likely change in not too long
Did you redeploy the program after rebuilding? You're likely hitting the wrong program
Hey there, yep you'll need some SOL.  the SPL token program requires that the accounts have SOL in order to be rent-exempt. so there's no way for an SPL token account to get purged.  More info at https://docs.solana.com/developing/programming-model/accounts#rent
Yep, it'll get purged.  You can create an account with 0 SOL, but it will get cleaned up pretty much immediately
Hey guys is it necessary to have some sol in the account to exist? If I have some spl token & no sol then, will my account get purged?
So in spl tokens what do you guys use as an alternative router and can you provide its documentation please?
<@831450660146642974> thank you ❤️
place orders, settle...
This has it all
https://github.com/project-serum/serum-ts/tree/master/packages/serum
Any idea how I can do it? Like how do I parse the data?
I have also put a message log in entrypoint.rs, but even this message is not printing, seems like I'm even not reaching in entrypoint
This is frontend code
While calling my deployed program from frontend I am getting this error, any help please
if an account have no SOL for then is it purged? Is it possible to create an account without sol in the first place?
https://docs.solana.com/developing/programming-model/accounts#rent
oh no... thank you for your help though. appreciate it, mate!
solana programs dont really store a state 
state is stored in accounts and you dont need to pay a fee to read that data
solana spl tokens work differently from erc20 tokens
its not possible to do it in solana with the default tokenprogram
correct
by transaction u mean transfer?
hi , Do all solana functions charge a fee? If I write a get function, do I still pay a fee?
Sounds reasonable to me 🙂
The person who is doing transaction of our token worth 1 trillion or more
Router APIs are the function exposed by dex to add liquidity remove liquidity swap token etc
as account data limit is 10MB so i was thinking is it cheaper to create 1 data account for program and store everything in it, or just go flexible way and create new data account for new item each time?
aka imagein data account with 100bytes of required data to store:
- having 3 data accounts of these is 100 bytes x 3 = rent exemption x 3 = 300 units of rent exemption to pay

but if i have one data account with 300 bytes, then i would have 1 data account but then would i pay rent exemption 300 units as well as if i hade 3 accounts with 100 bytes = 300 units of rent exemption?
or does all have to be fixed? i am asking because i am wondering if I can use one account data to store data, or should i just create new data account each time and assign to program. with this option i would have to pay rent exemption each time, but if i only use one data account i would only pay rent exemption one time, or it would not be the case as if i reserved more data on that on data account i would pay more rent exemption anyway?
assign on creation? for instance if i have an array property in struct is that possible? meaning that i can store more items of that property type in array?
quick question. can the size of account data change dynamically over time or is it the max that you assin
Hey, I wonder for the Solana JS API: `onProgramAccountChange`, is there any way to detect if the connection is alive or not? For example a mechanism similar to heartbeat?
so the answer is yes
if a program is on solana you can read everything through JSON RPC, nothing is private
for swapping on serum take a look at: https://github.com/project-serum/swap
who triggers the buyback and burn?
<@!818203379469778988> Thank you!
I'm still trying to sign a message in the client using sol-wallet-adapter `sign()` and then decode it on an API server. Any help or direction appreciated.
You will need to learn rust for the on chain program and typescript for your web application. I would recommend starting with the solan a example projects
Say for example I wanted to read the information off a serum market account… is this possible to do from the JSON RPC? Would I just need to know how to parse the info?
Hi guys, I have a question. I want to make token swap program, and I found typescript code and rust code in github. which language is useful to develop this kind of program?
...
but it is even more verbose
ah there is `solana-stake-accounts new` for "Create derived stake accounts"
Hello, if we consider that BpfLoader.load() executes multiple transactions to deploy a contract, is it OK to get the latest transaction and return it as response after deploy. Is the following flow working fine?

1. Deploy program and wait until is deployed
2. Get transaction history for the contract address and this will return all of the transactions used to deploy a contract
3. Get the latest transaction considering this is the final and return it as response to the client
Thanks!
Yes, some of the early blocks are missing metadata
Here's an example from the token-swap program: https://github.com/solana-labs/solana-program-library/blob/21f8af34e7dac77ba60b1821a7d30ede53387fae/token-swap/program/src/processor.rs#L101
How do I call SPL token mint function in a custom Program?
Are there slots in the post-50mil range that have such behaviour (i.e missing metadata)?

I looked into SPL but cannot find any example except token-swap wrapping SwapStateV1 in an enum and doing nothing else.
What is a good pattern to update a state?
I am thinking an upgrade program function could close the account and reallocate to the new size then dump the upgraded format into it.
Allocate "Allocate space in a (possibly new) account without funding"
i guess for the sake of cli code simplicity no shortcut possible
it doesn't have to be i agree
Tried my luck with Raydium too
Can you clarify what you mean by "router api" ?
Went there already! But the guys at Serum said to contact you guys
Or whatever dapp provides this "Router API" you speak of
I think you want the Serum Discord server
<@585868308419444749> can you provide us with some info on this please?
It doesn't have to be though
Hi Guys, i am getting started on working on writing applications on solana and currently going through the documentation . However have doubts understanding how the trades are happening on the explorer . For example i am looking serum markets on https://solanabeach.io/  . Can someone explain what is the bid contract and then the ask contract in this case also also who are the different authorities under those contract . Any good documentation would be super helpful too
what do you mean? It's the same keypair as --keypair that is signing
Encoding algorithm for signatures is SHA256 right?
I see the documentation for swap but can't find the public api. Any help appreciated
Hey guys! We're building a token on Solana with buyback and burn function which requires APIs from exchanges for swapping. Is there a way to get some details on the router API?
No the base keypair still has to sign to reserve the address
it is actually "<OFTEN_STAKE_ACCOUNT_KEYPAIR>"
`solana create-stake-account solstake-test-keypair.json --seed 11 --url https://api.testnet.solana.com 0.1 --keypair solstake-test-keypair.json`
I wonder if this command can be made less painful, should the seed argument "Seed for address generation; if specified, the resulting account will be at
                                            a derived address of the STAKE_ACCOUNT_KEYPAIR pubkey"
allow for omission of the "<STAKE_ACCOUNT_KEYPAIR>"?
Thank you very much!
If you update that request like so:
```
{
  "jsonrpc": "2.0",
  "id":1,"method":"getProgramAccounts",
  "params":[
    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    {
      "filters":[{"memcmp":{"offset":0,"bytes":"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt"}},{"dataSize":165}],
      "encoding":"jsonParsed"
    }
  ]
}
```
inside the `info` struct for each account is an `owner` field. This should be the main wallet address. Note that the account may be the ATA for that owner, or it could be an auxiliary account.
(Fyi, you will likely get better performance if you request `"encoding":"base64"` and deserialize+parse the account `data` client-side.)
Perhaps if it's a decimal of 0 then this would work
This NFT spl-token instructions don't look right -> https://spl.solana.com/token#example-create-a-non-fungible-token

It's just creating a token with a supply of 1, which I don't think represents NFT here
Awesome Ill give it go! So the Account it returns is the ATA right?  is there anyway to also include the main wallet address? or would I have to do a get owner request
That makes sense.  Thanks for the clarification!
(Other `Tokenkeg`-owned accounts that might happen to match the `memcmp` filter are not indexed)
Yeah, it is atm, since that's how rpc can be sure that the user is looking for the the type of accounts that will be present in the index.
I thought maybe we just had the "not in index" check in front of that logic
Oh, `dataSize` filter is also required?
We do... ^
This works. Just need to add a `dataSize` filter so that it's also limiting to holding accounts (as opposed to the token mints themselves):
```
curl -X POST -H "Content-Type: application/json" -d '{"jsonrpc": "2.0","id":1,"method":"getProgramAccounts", "params":["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",{"filters":[{"memcmp":{"offset":0,"bytes":"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt"}},{"dataSize":165}]}]}' api.mainnet-beta.solana.com
```
Ah. I thought we resolved `getProgramAccounts` calls to their index-optimized versions and rerouted
Thank you so much 🙂 I appreciate it.
However, they are indexing by mint. J/s, and I can get back to you with an RPC call that should work.
No, it's not a bug. Our mainnet public RPC nodes are not indexing `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA` for arbitrary `getProgramAccount` calls, which is what the error code is saying.
So I guess mainnet us just bugged :((
I just changed it to So11111111111111111111111111111111111111112 and looks like devnet works fine
Ah, yeah, doesn't look like `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` is initialized as an SPL token on devnet
I haven't found evidence that there are any Serum accounts on devnet...
That command should be allowed to proceed if the mint secondary index is enabled
I think it's just a bug
or atleast using JSON RPC
aww man, was this really the only way to get the distribution?
bumping on this one, also is there a plugin that shows the gas of each function by chance? not sure if gas limit is ever really a problem on solana
Unlikely the SPL Token program ID is filtered out on devnet since there aren't an insane number of token accounts there
Might be a bug
```  {
    "jsonrpc": "2.0",
    "id": 1,
    "method": "getProgramAccounts",
    "params": [
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
      {
        "filters": [
          {
            "memcmp": {
              "offset": 0,
              "bytes": "SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt"
            }
          }
        ]
      }
    ]
  }
```  when I do this using https://api.devnet.solana.com/ it returns  ```{
    "jsonrpc": "2.0",
    "result": [],
    "id": 1
}``` So looks like im still doing something wrong but I dont get the other error
https://api.mainnet-beta.solana.com
Which RPC endpoint is that?
Do normal users not have access? or am I just doing it wrong lol
using the code ```  {
    "jsonrpc": "2.0",
    "id": 1,
    "method": "getProgramAccounts",
    "params": [
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
      {
        "filters": [
          {
            "memcmp": {
              "offset": 0,
              "bytes": "9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E"
            }
          }
        ]
      }
    ]
  }
```
```{
    "jsonrpc": "2.0",
    "error": {
        "code": -32010,
        "message": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA excluded from account secondary indexes; this RPC method unavailable for key"
    },
    "id": 1
}``` I get this error when I try do access the Token program
oh ok cool
Yeah.  You'd swap out the stake program's program  ID for the SPL Token program's as well
I see, so to find the information for a specific spl token I need to use the token program?
Like I said, that example is for querying stake accounts.  That variable is just a stand in for any base58-encoded byte string to match.  So you'd use the mint address there
I think you’re probably more network bound from the RPC machine to BigTable.  There’s probably not too much that can be done about that if so
Hey, im a little confused about the "AUTHORITY". So for example if I wanted to find the distribution of "Wrapped BTC" I would need the Address as the first param and for the authority  since I wanted to find the complete distribution how does that work?
https://en.wikipedia.org/wiki/Collision_attack#Chosen-prefix_collision_attack
but if the seed is on-chain then people can still try and use it to game the system?
I'm guessing the security vulnerability is someone trying to generate an overlapping array element
or better worded, I don't know what a prefix seed or domaining hashes means
... I don't quite follow, how does a prefix seed help me here 🤣
And before you footgun yourself a security vulnerability, also choose a constant _prefix_ seed to domain your hashes 😅
haha yeah good point. Thanks!
Something like that. I'd use way more than four bytes for the seed though.  That's trivial to grind collisions on
this is golden thank you!
oh I see. so this works because its a deterministic mapping, so if I want to create some sort of data mapping I need to implement something deterministic as well? i.e. the array element is always the the u32 of the pubkey or something like that
So you'd just need to adjust the offset to be that of the mint address in an SPL Token account, which is just 0 IIRC
I use this one to get all of my stake accounts, where `AUTHORITY` is my stake authority pubkey, base58-encoded
```
curl -s "$RPC_URL" -X POST -H "Content-Type: application/json" -d "
  {
    \"jsonrpc\": \"2.0\",
    \"id\": 1,
    \"method\": \"getProgramAccounts\",
    \"params\": [
      \"Stake11111111111111111111111111111111111111\",
      {
        \"filters\": [
          {
            \"memcmp\": {
              \"offset\": 12,
              \"bytes\": \"${AUTHORITY}\"
            }
          }
        ]
      }
    ]
  }
"
```
is there a compute budget table that tells us how much certain operations cost?
The Associated Token Account program is a pretty simple example of this https://github.com/solana-labs/solana-program-library/tree/master/associated-token-account/program/src
Thank you! tbh I'm really not familiar with memcmp. are there any examples you have in mind that might help?
Mapping across the address space is pretty popular
wait so how do devs handle mapping needs - this source-of-truth must be done off chain? for example in the escrow, I would need to know the party I'm exchanging with and have their account/token account since this can't be saved on the state
Luckily there _is_ a secondary index, so it should be fast
You'll have to `getProgramAccounts` it with an appropriate `memcmp` filter to pluck up the mint
It can be done, but there's no nice RPC method tying it up in a bow for you
SPL Tokens are embedded Solana programs right?
holders using getLargestAccounts
I know this is possible for getting the top 20
Like using JSON RPC. A way to input mint and dump all the token holders.
Depends what you mean by "grab"
is there a way to grab a tokens entire  distribution?
Not true. We have linus and his team 😉 haha, we faced that during the hackathon because of the 10 calls/s. But with the paid plan, much of the limits are gone

Right now the problem I have is I can't get my program to utilise the instance's machine's compute completely (maxes out at 35%), so that most ideal way is to make indexing accounts, transactions and instructions concurrent and parallel..
getConfirmedBlock and get_multiple_accounts
Fixed it for when someone drags that up with search in three months
Yeah, _can't_.  Dunno why 95% of my typoes are the exact  opposite of what I meant to type
and that's interesting, I didn't know hashmaps used random state lol. So there's no other way to replicate a dictionary/mapping?
did you mean to say you can't* use rand
I’m home let me check
Dw I was about to drive when I messaged u haha
In reality you can't use _rand_ in a Solana Program and `HashMap` uses a random state to prevent attacks on the hash function's range
I read somewhere that you can't use hashmaps on solana_program, is this still true? are there any other data types or functionalities from rust that can't be used?
Dumb question but why does the GreetingAccount need to be serialized in the hello world example? https://github.com/figment-networks/learn-solana-dapp/blob/fef725d0d4f5a3bf6178a0a251f65ab0360189ab/program/src/lib.rs#L44
Also texting and driving, dude!
You're probably gonna get rate limited by the RPC server before concurrent RpcClients even factor in.  Plus on a call into  `getConfirmedBlock`, the RPC server needs to fetch the block from BigTable if the block is not from the last day or two, so that's another hop.  Basically it's gonna be slow to backfill regardless.
Hmmm…. Answer u in 20mins (driving atm my bad), but I’m ready every bit of data like blocks, transactions and instructions.
You're just trying to issue `getConfirmedBlock` calls as fast as possible?
Any advice on concurrency and parallelisation? It seems like there are edge cases I may have not covered.

Transactions can exist without metadata, etc..

Trying to read every single bit of data on the chain

Looks like I can only manage 2-3k TPS on M1
true, there is nothing to be gained anyway
I think you're trying to defend against somebody just trying to grief the relayer and drain it of funds right?  Just assume this'll happen some % of the time, and include that cost in the business model, and make it hard enough that they'll go away eventually
Found it https://github.com/project-serum/sol-wallet-adapter#sign-a-message
Make the client submit a PoW to cause them to slow down.  Like, a PoH stream 🙂
3. bundle multiple users in one tx, relay for them, in program exclude the bugger (no token, skip cpi)
but if someone knows how to break it, the project is done...
global rate limiting seems reasonable, to avoid a big drain
1. potentially useless, moving around tokens is easy.
2. could be effective, but if the rugpuller has effective front running technique not so much
Yes between the time that the relayer checks the user's token account and the transaction executes, the user could yank the tokens and cause the relayed transaction to fail.  Eventually that would drain the relayer of SOL, one failed transaction at a time (so slowly!).  Some ideas to mitigate this:
1. Rate limit the client.  Ban them if they do this
2. Make the user sign first, relayer signs second and sends the transaction to the network itself (perhaps with a variable delay of hundreds of milliseconds, so make it harder for the user to time their rugpull)
I'd use a different RpcClient per thread
Hey there guys! Is the rust-based solana-client to be used on a disposable/single instance basis or concurrently?

1. Spawn a solana client per-request
2. Share
Oh, I understand.
thanks
The warning is what's deprecated and will become an error soon
No.  That just means you signed the TX with an unnecessary keypair
Is the distinction between transaction signers and fee payers deprecated?

see warning below
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
How might I go about signing a message and then verifying the publicAddress from the signature?
I have a question, let's say I would like to make a relayer, which pays fee for a user in exchange for something (let's say tokens). Relayer make tx sign and send it to user, user sign (2 signatures required since user will pay the relayer with tokens).
I think this is never going to work, since the relayer cannot guarantee the transaction will be issued with a sufficient token balance. So it can be frontrun/delayed to withdraw tokens and have the relayer pay the signature. To drain SOL.

Am i correct?
I am considering getting a linux VM just to run solana and install all the dependencies from scratch just so i never have to do this again
and reinstall
just had to rm -rf all my solana cache files and stuff
the good news is that it works now
:.:
lol I see.  I read "every single day i try to change my solana versions ..." as it's taking you 6 hours *every day* to update
You're probably even updating from a version that doesn't have `solana-test-validator` yet then
Too late! You can review though
part of the problem is that i only update solana like once every 3 months
no its on localnet
ah dang, thanks for looking into this <@!585868308419444749> I can pick that up
Are your tests hitting devnet perhaps?  Somebody is still hammering devnet really hard, we're working on blocking them
with mocha
i dont know my tests are silently failing right now
That seems a little crazy, what's taking 6 hours?
i feel like a masochist
really fun
every single day i try to change my solana versions i t takes me like 6 hours to run code again ;.;
Yeah, confirmed this is just a display bug.  For whatever reason `Arg::value_name()` accumulates despite the availability of `Arg::value_names()`
Change is here, https://github.com/solana-labs/solana-program-library/commit/3cf9f0d0f9eb966e3b2b118f8d99d0d10ac09daf#diff-d587635f3541d3409d5226615ee6e533c17209eb5192e6271b4a6e651e74f0c3R1632
I think it's just a display bug
s'ok. It can wait till tomorrow.
Humm... I only have 11
v 2.0.12:

v 2.0.10:
Question about rent on Solana (https://docs.solana.com/implemented-proposals/rent): If I were developing an application that auto-generated Solana accounts for new users, would those accounts need an initial balance in order to be accessible/usable after 1 epoch? ie. would the user be able to add funds to the auto-generated wallet with 0 balance several epochs later?
sorry, I meant the CLI tools in general, I believe the change was between 2.0.10 and 2.0.12
There is no 1.7.0 of `spl-token`
and it doesn't look like the 1.7.0 client command works anymore, so I assume the on-chain program was updated as well.
```
 --owner <OWNER_KEYPAIR> <SENDER_TOKEN_OWNER_KEYPAIR>
            Specify the owner of the sending token account. This may be a keypair file, the ASK keyword. Defaults to the
            client keypair.
```
it used to just be --owner <MULTISIG ADDRESS>. I don't understand what <SENDER_TOKEN_OWNER_KEYPAIR> is supposed to be referencing


///////////////////////////////////////////////////////////////////////////////////////////////

Is there a way to get past epoch info instead of current epoch like this one https://docs.solana.com/developing/clients/jsonrpc-api#getepochinfo ?
So I can confirm that restarting the test validator with a new ledger has caused all features to be active. Thanks!
Probably need some logic to force those account writes at startup for test-validator
I think those are written into genesis, so persisting won't behave quite as expected.  Just a hunch
Ahh that's a good point! I haven't reset it in a while.
Yeah, it's the `solana-client` create mostly, starting at the `RpcClient` struct.  This'll help get you bootstrapped: https://github.com/hashblock/solana-cli-program-template
Are you persisting a test ledger across versions?
```
Config File: /home/myuser/.config/solana/cli/config.yml
RPC URL: http://localhost:8899
WebSocket URL: ws://localhost:8900/ (computed)
Keypair Path: /home/myuser/.config/solana/id.json
Commitment: confirmed
```
oh nvm, it works for me
ohhh maybe the flags aren't working
`solana config get`?
Still, `solana feature status -ul` gives me `ENQi37wsVhTvFz2gUiZAAbqFEWGN2jwFsqdEDTE8A4MU | inactive                    | add syscalls for memory operations`
if it's in the code, it'll be enabled in test validator with that "active since slot 0" message.  If it isn't present in the code during that release, then it won't be there.  for 1.7.0, looks like you have that feature
Like ENQi37wsVhTvFz2gUiZAAbqFEWGN2jwFsqdEDTE8A4MU for example. That's why I was wondering if it requires an update / whether they are enabled with new releases. (I'm running 1.7.0 atm.)
Hm, like which ones? You may need to update your installation
Mine doesn't. The ones that are active say "active since slot 0", but there are definitely some inactive features also.
`solana-test-validator` just has everything enabled by default
Awesome, thanks! As a related question: how do features get activated in the solana-test-validator? Is there a command so we can do it ourselves, or does it happen with new releases?
I keep having this issue: InvalidInstructionData
let instruction = BInstruction::try_from_slice(instruction_data)?;
....
    InitPool {
        pool_length: u32,
        redeem_fee: u64,
        trade_fee: u64,
        pool_commission_fee: u32,
        commission_ratio: u32
    }
...
My inputs which I believe are right:
1e 00 00 00
00 88 52 6a 74 00 00 00
00 88 52 6a 74 00 00 00
10 27 00 00
90 d0 03 00

Can anyone assist please, thanks
awesome, thanks <@!585868308419444749>
`solana-client` and `solana-sdk` crates will get you most of the way there
```{
    "code": -32002,
    "message": "Transaction simulation failed: Error processing Instruction 0: Program failed to complete",
    "data": {
        "accounts": null,
        "err": {
            "InstructionError": [
                0,
                "ProgramFailedToComplete"
            ]
        },
        "logs": [
            "Program 32WeJ46tuY6QEkgydqzHYU5j85UT9m1cPJwFxPjuSVCt invoke [1]",
            "Program log: Mango: PlacePerpOrder client_order_id=2054102822915109188",
            "Program log: new_ask p=328900000 bbp=391500000",
            "Program 32WeJ46tuY6QEkgydqzHYU5j85UT9m1cPJwFxPjuSVCt consumed 10005 of 200000 compute units",
            "Program failed to complete: Access violation in unknown section at address 0x18 of size 8 by instruction #53432",
            "Program 32WeJ46tuY6QEkgydqzHYU5j85UT9m1cPJwFxPjuSVCt failed: Program failed to complete"
        ]
    }
}
```

Is this a stack size violation?
is there a rust version of the web3 library (https://github.com/solana-labs/solana-web3.js/) to interact with solana?
I've slated it for activation on devnet, will be activated at the next epoch roll-over, thanks for the reminder.
anyone ever decompiled a Solana program? My understanding of Rust decompilation is that what you get is pretty hard to understand, but still I'd love to hear if anyone's done this in Solana land
that will be interesting
in the future perhaps there will be room for transactions using more than ~30 accounts
nature of the beast
Yeah you're right and I've done that before on an earlier iteration - in fact that can all be done in Javascript without a custom on-chain program.  It's just not as tidy because I'll often get more back from the DEX than the minimum and then I end up with unused small balances.
and you account for slippage
assuming another transaction doesn't come in before you
I'm not a math wiz, but if you do your math right you can caluclate exactly the minimum you will get from the dex
and i think the limit is ~30
Thanks for that.  Yes you're probably right.  It's a shame because the reason I'm doing it on-chain is so that I can see the actual balance changes in order to know the quantities to pass in to the subsequent instructions.  If I split up the transaction then I have to guess at how much I actually get from the DEX.
i think the most accounts i have fit in a transaction was 28
i suspect even with clock and rent you will still need to break your transaction up
https://github.com/solana-labs/solana/search?q=impl_sysvar_get
finally
yes those are there
I think the ones relevant to me are  SYSVAR_CLOCK_PUBKEY and  SYSVAR_RENT_PUBKEY,
but nothing is coming up
uggh i'm trying to find the list through discord search
Alright, thanks!
That works until your TX gets too big 😉
Yeah, i'm pretty sure you need to do that
Including the address of the called programs themselves?  for example, the serum program id?
if you don't pass along the accounts, your cpi will fail
yes
Thanks. I ended up bundling the Tx as suggested by Jon. Had just not thought about this 🙂
Does the client have to pass in the program address keys for each program called via CPI as well?
i forget,i think trent may have linked a list of the system accounts before
Thanks, that certainly does help trim a few off the list!
If you are using certain system accounts you don't need to pass them to the program on chain
The transaction that needs to prove it succeeds should leave an account in a state that future transactions can verify
you will have to break your transactions up
you have hit a dead end
Rent exemption is never "over".
Hi guys.  I've written an on-chain program that uses 4 cross-program invocations.  One of those is an instruction to swap coin on the Serum DEX.  In total, my program has to pass 36 different accounts to the 4 invocations.  This means my web3 client has to pass in 36 keys to my on-chain program, which puts my transaction over the 1232 byte limit.  Is there an obvious way around this that I'm missing?

If it was the data size that was over the limit then I could split it over several transactions but as the limit has been exceeded through shear amount of account keys I think I might have hit a dead end.
ah got it! Thanks!
This is perfect thanks
guys how we can get the transaction confirmations having tx hash
Why didn't I think about this. Cheers Jon.
the `tokens` program was made for this, enjoy! https://github.com/solana-labs/solana/tree/master/tokens
thanks
ok alright
I'm not 100% sure, but I would assume that, yes.  either way, they wouldn't get removed from the current bank unless the stakes are fully deactivated and removed from the system
You use the `BPFLoader` from web3.js or `solana program deploy` from the CLI to add your program to the chain
What if the validator is 100% offline with stakes for a long while? is it just in the delinquent array?
a bad guess
You've got it right, why do you think some would be left out?
there's no way to get past transactions on chain at the moment, only other instructions within your current transaction.  So if you want to verify that something else happened, you'll have to do it within the same transaction
I believe so, you can check for more details in <#742230900380795020>
The whole point of rent exemption is that rent will *never* be charged if you put two years of rent
Hm, should work if you just do the same as the example at https://docs.solana.com/developing/clients/jsonrpc-api#example-50
i already subscribed today, good informational video. Thanks for making it.
<@816711477742272513> try my YouTube video https://youtu.be/Jz5v_u75xk8
Hello everyone, 
I am developing a huge community project. 
I am looking for rust developers, a frontender, a designer ux/ui and a tokenomic expert, which will be the first members to join the team of founders.
This team will share assets of the initial product launch

Dm me if interested (experience is required to be team-leaders)
Does anyone have a good script to transfer tokens to a bunch of accounts? I wanted to do some test but need a fast way to send tokens to a bunch of accounts
😊
Thank you <@!818203379469778988>  Appreciate.
<#763249718339567626>
@here can anyone please put me in the right direction for Solana smart contract writing from scratch, Deploy and interact.
hey evereyone, what's the SOL equivalent of initializing a contract with the address and abi?
you can do this with ethers `return new ethers.Contract(address, abi, signer)` but not sure if the same paradigm applies here <:HmmNote:832017768512618577>
to get total activated stake do I need to sum all activatedStake from json RPC `getVoteAccounts`? I am wondering if this leaves some aside as it is "all the voting accounts in the current bank."
Hello Everyone,
Hope you are doing well and good to be here with this active community.
Seeking help to start development on Solana. Would love to hear from the community about how we can create our own token programmatically (Do have idea about to create Token using command line, but more interested to get insight about creating token from scratch, just like we do using Solidity)
I mean like if an account stores data on it like market information. Best way to convert it to something readable
I would guess the explorer source code
Any good examples of parsing information from the solana RPC node?
hey again!! Our team is working on a project which requires us to extract information from the smart contract. Like the ABI in the Solidity which will give us function signatures, types, etc. Currently I only require offline extraction (smart contracts which I have the source code).

Is there a recommended way to parse/extract information? I would be grateful if anyone can lead me to a point 🙂
Hi <@!453347985628200960> , I'm still seeing feature ENQi37wsVhTvFz2gUiZAAbqFEWGN2jwFsqdEDTE8A4MU (aka memcpy) as inactive on devnet. When can we expect it to be activated?
Hi <@!585868308419444749>, what is the easiest strategy to verify on-chain that a SPL transfer or Tx was executed ? Can something be done using the Tx id and the token mint ? (ctx: Verifying that a usdt deposit was done to a program owned token account)
will wormhole expand to any other networks apart from ETH? Is here a timeline?
what happens once the 2 year time for rent exempt is over? Will the spl account's lamports be used for rent?
is there no decode function in <@832686202074300446>/spl-token
returns the same junk
that still doesnt work
in the object i put encoding
so in the req alongside programId
Oh sorry, I meant you "probably" want jsonParsed and that "base64" was the default 🙃
all i want is json data from that rpc endpoint
when i try decoding it i get garbage
which gives me a base64 string
const b64  = Buffer.from(account.data).toString("base64")
and then im doing
uint8array*
so account.data is a U8IntArray
struggling here
yea no luck
ah ok will try that
base64
Probably
so base58 is the default
i guess i want json parsed
oh right i see
In the link from your first message
sorry wheres that?
Did you read the description of the  `encoding` parameter in the linked docs?
but no luck
Decoder
in javascript
i tried TextDecorer().decode on the byte array
is it ascii?
whats the encoding
its a byte array
however how do i make sense of the return data
hello, using the json rpc i just called  https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountsbyowner
No.  The authority doesn't need to exist on chain at all.  Zeroing the SOL balance on the SPL Token Account (close instruction) is what's required to get it reclaimed by runtime
if you don't have SOL in authority but have a spl token account (created from the same authority) with spl tokens then will the authority and token account both be purged?
Im using <@832686202074300446>/web3.js version 1.17 and it looks correct to me
I just wonder how people hit it, given that you do `new Connection(clusterApiUrl('devnet'))`
is https://github.com/solana-labs/dapp-scaffold reflecting api.devnet.solana.com? web3js is 1.7.1
Tx
https://api.devnet.solana.com
got `Error: HTTP status server error (503 Service Unavailable) for url (https://devnet.solana.com/)` while send tx
Hi, devnet is not access now?
Can you share the code you used to create the transaction?
How can I fix it? ```Error: failed to send transaction: io error: failed to fill whole buffer
    at Connection.sendEncodedTransaction (/Users/ledger/kms/node_modules/@solana/web3.js/lib/index.cjs.js:4834:13)
    at processTicksAndRejections (internal/process/task_queues.js:95:5)
    at async Connection.sendRawTransaction (/Users/ledger/kms/node_modules/@solana/web3.js/lib/index.cjs.js:4795:20)
    at async sendAndConfirmRawTransaction (/Users/ledger/kms/node_modules/@solana/web3.js/lib/index.cjs.js:6620:21)
response -  null```
will do, thanks
try <#859540542608900127>
Any help will be appreciated
Also it doesn't allow to create validators stake for some reason:
spl-stake-pool create-validator-stake J76M5p1jEgw1ZmippDKRrnJthHpQx4dCjsTkp4PD9z6A 3NZ1Wa2spvK6dpbVBhgTh2qfjzNA6wxEAdXMsJJQCDQG
Creating stake account on 3NZ1Wa2spvK6dpbVBhgTh2qfjzNA6wxEAdXMsJJQCDQG
RPC response error -32002: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x1 [7 log messages]
I am reading spl Stake Pool Program docs. I am trying to set new fee receiver. 
Can someone please explain what type of account fee receiver should be? 

`At the same time, they may also change the SPL token account that receives fees every epoch. The mint for the provided token account must be the SPL token mint, D5yiK1tE1yAXBnrV9ZrSUJCw8WiQctZ8ekbv1U6ATVZ in our example.`
thanks!
i needed an upgrade
fixed it
nm
Could just go for the whole shebang (from the README at https://github.com/solana-labs/solana):
```
$ sudo apt-get update
$ sudo apt-get install libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang make
```
You shouldn't have to on Ubuntu 20.04
maybe i should add a repo?
so now trying to fix that
doing that , and found unmet dependancies
Yep, try `sudo apt install libudev-dev`
Hey im getting this error while trying to install spl-token-cli..

Should i install libudev

Is this whats causing the error??
Sorry for that! Actually, I'm not a dev myself. I'm just transferring the messages from my head dev to you all and vice versa.
Can you be more specific?  I don't think I have enough context to make sense of your questions
looks good, just made a few tweaks, thanks!
https://github.com/solana-labs/solana/pull/18507
Hope this is fine :) I tried to send through DMs but they were turned off so I'll just link it here
From what I got to know here, that functions are not supported by Solana default tokenprogram. So I guess they were not sure about it either and directed me here. BTW,  what alternative do you all use for an API?
oh i see, the docs are autogenerated based on the different `/**` comments
thanks <@!183353114341015552> !
it's in the main repo, above the code
https://github.com/solana-labs/solana/blob/1e0942e900a4ed4b27876321db29058006bef32c/web3.js/src/system-program.ts#L743
the web3 docs i mean
Yes! I would really love to help add to the docs as I learn these things. What is the github link for the docs?
ohhhh okayyy that makes sense, thanks :)
yeah good call, do you have time to add that <@!183353114341015552>?
the `owner` is a program, so the `programId` param would become the account's owner
Gotcha 👌 thank you for the consideration though! Would also be nice if the documenation made clearer some of these things as well :) just a suggestion
I dont see a param for `owner` in either of these 2 methods we've spoken about..
oh right, creating the address with a seed is an async function, would require a breaking change to the api. I'll have to push it off for now <@!183353114341015552>, will keep that in mind for later
That's the `owner` field in the Account
oh okay, gotcha... 👌 Does that also give the program the permission to write to that account? Or does something else give that permission
So the same pubkey and seed can be used with multiple programs without the addresses colliding
why does it need a programid
i dont understand, why can it not derive the new address from just the inputted pubkey and seed?
It puts the address in a domain
Because that's a parameter of the derivation algorithm
on the `Pubkey.createWithSeed()` method, why is it asking for a programId? what is the purpose of providing that? Is that to give the program permission to write data to the new account?
Allows you to use it with the rest of the `*WithSeed` instructions
ohhhhhh okay okay
awesome :D
That diverges from the Rust SDK
I'll make that change quick
yeah you can create the address yourself, but it would be nicer if it was created for you internally
You pre-calculate the address with `Pubkey.createWithSeed()`
is this assessment correct? <@!466984915376799748> ?
seems like im supposed to deterministically figure out myself seperately what the result of the instruction is (the newly created account) with the `basePubkey` and `seed`, and then pass the result into this instructions param object as `newAccountPubKey`. I could be wrong. idk. im just wondering because it seems weird
oh, yeah it would be nice if `newAccountPubkey` was calculated for you
but isn't that what the `basePubkey` param is for?
You need to pass a pubkey because the `*WithSeed` address needs to be _based_ off of a real public key so that the derived address can be signed for
I've answered that question dozens of times
i was searching in the discord history, seems other people have asked too but no answer :/
no im not looking for that other one
Yeah i know what they are basically, im wondering why that particular param is needed.
those params are passed to this method to create a "create account with seed" system instruction. You are probably looking for this method: https://solana-labs.github.io/solana-web3.js/classes/publickey.html#createwithseed
<@!472178514846679041> web3.js has a verify method here: https://solana-labs.github.io/solana-web3.js/classes/transaction.html#verifysignatures
https://solana-labs.github.io/solana-web3.js/modules.html#createaccountwithseedparams
I'm having trouble with this...
`newAccountPubkey`
Why is it asking for a public key? Isn't this supposed to return a public key to me (as in, the address of the new account)? Very confusing
"Verify" refers to the nodejs implementation of the crypto method that I'm attempting to use to decode what I assume is an ed25519 algorithm https://nodejs.org/api/crypto.html#crypto_class_verify
The use case is for logging into an API server. The wallet is the account and on "connect" a nonce (message) from the API server is signed by the wallet in the client. Then the signature is sent back for account verification using the publicKey held in the API server.
message: String -> signed with privateKey -> sent somewhere -> verifyed with publicKey
what is a crypto verify solution?
I'm trying to sign and decode a message and it seems like something that should be a basic function of Solana but I'm on day 3 and still trying to roll my own crypto verify solution. I'm aware that the tooling is at an early stage but it's bloody frustrating.
```
arowana:~$ solana feature status --url https://api.mainnet-beta.solana.com | grep keccak
7Ua8mFtahVfA3WCY9LoXDAJJdvJRJHckvSSr1dD8FTWc | inactive                    | keccak256 syscall
```
Not available on mainnet, yet
Is the message processor (https://github.com/solana-labs/solana/blob/ccdf93e2b889a8c82d8a8ca419e1fa6b90b021d3/runtime/src/message_processor.rs) available in the web3 lib interface?
cool, changing the commitment will help the client see results quicker overall but it'll still never be immediate so waiting for the signature to confirm is definitely needed regardless to avoid a race
for posterity: poll worked, changing the commitment did not!
ahh perfect, thanks for that link
If you're just doing a `RpcClient::new()`, you'll default to the finalized commitment level.  
Instead try `RpcClient::new_with_commitment()` with `CommitmentConfig::confirmed()` as the 2nd parameter (example here: https://github.com/solana-labs/stake-o-matic/blob/6b657231966f9c6bdd2562f91b321d05767d1b94/cli/src/main.rs#L665)

Some info about the commitment levels at https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment
thank you 🙂
let me try that out
ah ha! that sounds like a good solution
`request_airdrop()` returns a signature that you can pass into `poll_for_signature()`
nah, even if I do 
```
let wait = time::Duration::from_secs(20);
thread::sleep(wait);
```

still a no go
The airdrop transaction probably just hadn't been processed by the time you issued the get_balance()
(hopefully) qq from a new dev messing around in the ecosystem -- in the rust sdk, does `get_balance` do some sort of caching on the RpcClient? I'm noticing with this pretty simple code that the balance never increases, although if I run `solana balance <whatever>` after, it _does_ indeed receive the airdrop.

```
    let mnemonic = Mnemonic::new(mnemonic_type, Language::English);
    let seed = Seed::new(&mnemonic, "");
    let account_a = keypair_from_seed(seed.as_bytes())?;

    let mnemonic = Mnemonic::new(mnemonic_type, Language::English);
    let seed = Seed::new(&mnemonic, "");
    let account_b = keypair_from_seed(seed.as_bytes())?;

    // Should be a future.
    let wait = time::Duration::from_secs(1);
    thread::sleep(wait);

    client.request_airdrop(&account_a.pubkey(), 500_000_000)?;

    let balance_a = client.get_balance(&account_a.pubkey())?;
    let balance_b = client.get_balance(&account_b.pubkey())?;

    println!("{}: {}", account_a.pubkey().to_string(), balance_a);
    println!("{}: {}", account_b.pubkey().to_string(), balance_b);
```
Should be that.  I was slashing and burning systemd services last night
Devnet working fine for me, but testnet airdrops indeed not working. I think we were moving the testnet node the faucet runs on today, so I expect the disruption is related to that. I'll check
Are testnet/devnet airdrops broken for anyone else right now?  Curious if there was a breaking change and we need to update anything.
How is 'neighborhood' determined and agreed among validators, and how is which downstream validator to send shred to determined? it's not that those with same shred_version are in same neighborhood, right?
When broadcast shred, should it be sent to tvu_forward instead of tvu? Which files should we investigate for validator's shred forwarding, does it use same method as leader?
Also, what's the intuition behind multiply the "inverse weight" with a random number from uniform distribution in line56 in gossip/src/weighted_shuffle.rs? Does that mean not only each shred would follow a different path(due to different seed used), but how each shred is broadcasted is also random (due to the random sampled multiplication)? Then where's the idea of 'neighborhood'?
`pub fn weighted_best(weights_and_indexes: &[(u64, usize)], seed: [u8; 32]) -> usize {
    if weights_and_indexes.is_empty() {
        return 0;
    }
    let mut rng = ChaChaRng::from_seed(seed);
    let total_weight: u64 = weights_and_indexes.iter().map(|x| x.0).sum();
    let mut lowest_weight = std::u128::MAX;
    let mut best_index = 0;
    for v in weights_and_indexes {
        // This generates an "inverse" weight but it avoids floating point math
        let x = (total_weight / v.0)
            .to_u64()
            .expect("values > u64::max are not supported");
        // capture the u64 into u128s to prevent overflow
        let computed_weight = rng.gen_range(1, u128::from(std::u16::MAX)) * u128::from(x);
        // The highest input weight maps to the lowest computed weight
        if computed_weight < lowest_weight {
            lowest_weight = computed_weight;
            best_index = v.1;
        }
    }

    best_index
}`


///////////////////////////////////////////////////////////////////////////////////////////////

Yep. Sometimes it's best to leave the past in the past
awesome
thats fair, but it is a good article, so it is kinda a shame to remove it entirely :/
will reach out to the team to see if they'd like to update bu otherwise it will remain removed
noted, removed the stale bread from the pantry and thrown in trash
It's unreasonable to try to keep tabs on every third party article indefinitely
I'd just abandon anything deemed stale
maybe the <#763249718339567626> can make of a note of that and any others as well
can you take a quick look through that solong article? are there any more stale claims other than the program upgrades?
that is still correct unfortunately 🙂
What about where the solong article where it says that account allocations are fixed? is that also stale, I presume?
<@!453347985628200960> - care to update our deployment docs here to reflect upgradable loaders for the next person who reads it? ^
hahaha okay okay good thing im in this discord channel, thanks for clarifying
yep, that's also stale 🙂
might just need an update there too
https://docs.solana.com/developing/on-chain-programs/deploying
link.
cX
Ah okay, gotcha... But, the solana official docs also says this?
```
Upon a successful deployment the account that holds the program is marked executable and its account data become permanently immutable. If any changes are required to the program (features, patches, etc...) the new program must be deployed to a new program ID.
```
yeah, "Jan 7" as the date on it
That tutorial seems stale, it was probably written before upgradable program support was added
https://solongwallet.medium.com/solana-development-tutorial-things-you-should-know-before-structuring-your-code-807f0e2ee43
```
Finally we get our program deployed, then we want to change some features can we update our program without changing the account/address:
The answer is NO for now, but the official team is working on this.
```
Why then does the solana CLI allow for an Upgrade Authority??
also check out the <#763249718339567626> channel which i recently updated with more content for learning
NP. The JSON RPC API is a great place to start getting familiar with all the possible methods to communicate with Solana
I am not very clear about the use case or the kindof metrics. I will get there eventually
Thanks for the help 😀
what kind of metrics are you looking to get <@!844270581134524447>
although it depends on the metrics you're looking for. for general blockchain metrics yes. but if you're looking to get metrics based on serialized data from the accounts its a little more complex than that
correct
So, I can make use of SDK and a method related to get Transactions and get the necessary metrics.
Is this a probable approach?
We also have a Rust SDK and there many 3rd party sdks written in most languages. So it's really up to you
this is the main communication layer to the blockchain, but there are SDKs built on top of it, such as the solana-web3.js sdk
https://docs.solana.com/developing/clients/jsonrpc-api
Anything is fine., I am little bit familiar with both
are you trying to do this from a dApp or smart contract?
Hi Guys, 
I wanted to build a dashboard with metrics related to solana transcations.
Can someone guide me a starting point or reference., How i could get live transactions data
Thanks
no flutter specific sdk or library that i know of currently
https://github.com/cryptoplease/dart-solana-lib/
here is a dart sdk that can be used in flutter, or without if this is helpful
yep, also there's a bug bounty for these kinds of things too!  https://github.com/solana-labs/solana/blob/master/SECURITY.md#bounty
Yup, you can submit such things to `security@solana.com`
So wait the ADDRESS is just the ATA account of account you are sending the tokens from?
if i maybe found a clever way for a program to drain a user account is there anywhere i should like, submit that
so uh
oooh
programs can spend lamports from any account they own (owner == program_id)
programs arent supposed to be able to spend users lamps right?
Is there a way to get a list of timeouts for each validator?
How to create a wallet from mnemonic
Where is the class SolanaWallet in flutter library solana?
I will check
Ok
How many units
If you look on solana explorer you can see in program log
Yeah it’s like 200,000 “compute units”
ok thanks a lot 👍
Yeah if you go over the limit it should say. It’s like 20000 units or something
thanks ... then I would need to calculate the size of all instructions before send the tx or something like that, right ?
I don’t think it’s a limit on instructions rather just a limit on the size https://spl.solana.com/stake-pool#transaction-sizes
Hi folks ... does anyone know what is the amount of instructions allowed inside one transaction?
I assume the address would just need to be the ATA of the account that holds the tokens right?
Have you checked the project serum discord? There is a lot of focus on wallets in there, so it's probably a good place to ask since Solana doesn't have their own wallet
I was trying to use a CSV file
https://spl.solana.com/token#example-transferring-tokens-to-another-user
likely indicates there was just a network issue at the time
https://github.com/solana-labs/solana/tree/master/tokens can someone help me understand this a little better? So if I wanted to transfer an SPL token I would use ** solana-tokens distribute-spl-tokens --from <ADDRESS> --owner <KEYPAIR> \
    --input-csv <RECIPIENTS_CSV> --fee-payer <KEYPAIR>**  so is the “from” the mint of the SPL token?
that's not multiplying by 100 signatures. that's multiplying the total number of lamports by 100
Have you checked this?

https://github.com/project-serum/spl-token-wallet
in the `hello-world` program example, why does this line multiply by 100? Where do we get 100 signatures from?
```
// Calculate the cost of sending transactions
    fees += feeCalculator.lamportsPerSignature * 100; // wag
```
Hi there, i use https://api.mainnet-beta.solana.com rpc, sometimes i get an error while creating associated-account, although account was created I got this error: ``` Unhandled Promise Rejection: Error: Transaction was not confirmed in 60.12 seconds. It is unknown if it succeeded or failed. Check signature 525BWXDS2kC8putvMytgxYsGVE3RKMEzoQrWhBTZQy5szbKT7BHM2L5nsxfCEfTj56ntxcBM5dGTj4kaF136hemJ using the Solana Explorer or CLI tools.
```
Currently, fees come in two forms: transaction fees (just for signature verifications) [1] and rent [2].  For now, as long as the transaction fits within the compute / size limits, 1 instruction vs 20 instructions will cost the same, if they have the same number of signatures

[1] https://docs.solana.com/implemented-proposals/transaction-fees
[2] https://docs.solana.com/implemented-proposals/rent
typescript makes development x15 faster at a minimum!
well done, lol. Recommendation: Use typescript, this become obvious
ohhh arguments not an object
[SOLVED]
error-------------------
let transaction = new Transaction().add(
  Token.createTransferInstruction({
    programId: USDCProgID,
    source: USDCAccount,
    destination: PubKey,
    owner: PubKey,
    amount: 1,
    })
);
solution-----------------
let transaction = new Transaction().add(
  Token.createTransferInstruction(
    USDCProgID,
    USDCAccount,
    myPubKey,
    myPubKey,
    [],
    1,
    )
);
Hm, strange, never seen that to be honest.  Are you maybe running an old version of cargo?  What does `rustup toolchain list -v` give you?
Problem solved by my staff, thank you for you help again
I wrote the erreur for next users :
Hello! To answer your questsions:
1) That example is just for the normal curve unfortunately, so you'd have to encode the offset as a `u64` in the first 8 bytes of the `blob` that comes after the curve type at [1], as the Offset curve is defined at [2]
2) For the moment this is immutable, because swap pools do not have an "admin" that can change curve parameters.  PRs are very welcome if you'd like to add this behavior though!

[1] https://github.com/solana-labs/solana-program-library/blob/5c95669d2d389ca609bf4c312bf3ebb4991c78fd/token-swap/js/src/index.ts#L77
[2] https://github.com/solana-labs/solana-program-library/blob/5c95669d2d389ca609bf4c312bf3ebb4991c78fd/token-swap/program/src/curve/offset.rs#L28
like window.solana does not exist
this doesn't work at all for me, i cannot connect phantom
[I change PubKey to myPubKey for more clarity]
Sorry for ugly code, i doing test to have a simple token transaction, and get it signed by wallet(Phantom)
oh i see
"PubKey" is my var,  return the phantom associated publicKey
you did the same mistake other places, replace those Pubkey with the right public key instance
Bonus: you can import TOKEN_PROGRAM_ID from splToken so you don't have to hardcode it as well
that is what is causing the exception
put the values here not those types
```
    destination: PubKey,
    owner: PubKey,
```
if you want to see code
https://codepen.io/seigneur-machiavel/pen/ZEKYqqo?editors=1011
Same, (i have try that :/ )
I say put an empty array
Uncaught (in promise) TypeError: Cannot read property 'length' of undefined
no extra signer
`multiSigners: []`
(if i don't write the "multiSigners:" line , i have this error : 
TypeError: Cannot read property 'length' of undefined)
Noob question again , how to  ignore multisig here ?
  
Token.createTransferInstruction({
    programId: USDCProgID,
    source: USDCAccount,
    destination: PubKey,
    owner: PubKey,
    multiSigners: no?,
    amount: 1,
    })
json RPC `subscribeProgram` seems to drop some notifications, i am very clearly creating a new account that matches the filter but it is not notified 1 out of 10 times in the websocket (I am using web3.js). That is testnet
Do solana have flash loans like ethereum?
ooooohh 
const {Token,} = splToken 

With a "T" not a "t"
Interesting, web3.js does not notify when an account is closed through `onProgramAccountChange`, i guess that is caused by the underlying `programSubscribe`. It kind of make sense as it no longer owns it but I then need to track those account closing myself...
https://unpkg.com/@solana/spl-token@0.1.6/lib/index.iife.js maybe, your like gives the commonjs bundle
ah sorry i misread
yes yes, for the SolanaWeb3 i have no problem
I can Sol transaction

-> But i want to do a Token transaction
npm link is dead
https://solana-labs.github.io/solana-web3.js/index.html
`<script src="https://unpkg.com/@solana/web3.js@latest/lib/index.iife.js"></script>`
The link from the doc is different than yours
Can i find a Browser bundle of "SPL-TOKEN" like : @solana/web3.js ?
Because i have "export" bug in my project with :
<script src="https://unpkg.com/@solana/spl-token"></script>
What do the users pay fees for? Say I have a tx with 1 tx instruction and another tx with 20 tx instructions, will the fees be the same?
Hi guys, I tried to install build-bpf, but I got the error like this. is there anyone who know how to solve this?
My answer is https://github.com/project-serum/spl-token-wallet/issues/152 here
It isn't like decimals are going to change anyway
spl_token TransferChecked, I don't fully get the usefulness of the check. How does it help with offline?
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs#L245-L252
_Accounts_ are reclaimed by the runtime when their SOL balance reaches zero.  The _address_ can be reused so long as the keypair required to reserve it is still under control
if I close an account can I initialize it again with another program? or do I have create an account again?
im an idiot... thanks 👌
<:hi:616281298121654280>
```
$ xxd -r -p <<<"7455a49ecb78e0bde0f12db87706a29703631ed7b8f8ecd764d71f6e4833daa1" | bs58
8q836PqXCi2dfPXHVaiJysNKnj3cQmhuUvZNQL3PbGdn
```
Because you're letting JS print the value however it likes (looks like hex), instead of printing it in base58 like you're expecting
I'm experimenting with the `example-helloworld` project, and I printed out the `AccountInfo` of the greeted public key:
```
Let's say hello to a Solana account...
Connection to cluster established: http://localhost:8899 { 'feature-set': 743297851, 'solana-core': '1.7.3' }
Using account qkhWV3nXSFPDjtk6DgW39oLvExfkLbiMYXY9jTyt3Yi containing 499999999.1355165 SOL to pay for fees
Using program 8q836PqXCi2dfPXHVaiJysNKnj3cQmhuUvZNQL3PbGdn
Saying hello to 3vPTXXPGSvZPPF9EbSyYVPuvBsB6fWxGt3CaoPQMZ5LB
3vPTXXPGSvZPPF9EbSyYVPuvBsB6fWxGt3CaoPQMZ5LB has been greeted 2 time(s)
Greeted account info:
{
  data: <Buffer 02 00 00 00>,
  executable: false,
  lamports: 918720,
  owner: PublicKey {
    _bn: <BN: 7455a49ecb78e0bde0f12db87706a29703631ed7b8f8ecd764d71f6e4833daa1>
  },
  rentEpoch: 0
}
```
If the program used to create the greeting account is `8q836PqXCi2dfPXHVaiJysNKnj3cQmhuUvZNQL3PbGdn` and is subsequently the owner, then why does it say that the owner is `7455a49ecb78e0bde0f12db87706a29703631ed7b8f8ecd764d71f6e4833daa1` ??
The dump is performed here for both: https://github.com/solana-labs/solana/blob/6188283ba61015eb1af33fe2e1d5b714f97d6926/cli/src/program.rs#L1235
Yes. that's a parameter you would set
Sorry I wasn't clear above. This is user error.
What were the diffs between the two and why can't you verify
there is no timer duration seconds in the library thats linked
Start instruction stores `end_time = Clock::unix_timestamp + timer_duration_secs` in an account.  Then an Expire instruction only succeeds if `Clock::unix_timestamp >= end_time`
Uhm... there isn't any utility like that, but it's trivial to implement
I take it theres no timer function that i can use for a countdown
Hi there! I'm looking to create a swap pool with an offset curve. Two questions:
1) When creating a pool with an offset curve, how can I set the offset amount? I'm looking at the example provided here: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/js/src/index.ts and I see where the curve type is set but don't see a way to provide the offset amount.
2) Once a swap pool with an offset curve is created, can the offset amount be adjusted over time? Or is the offset immutable?
The `Clock` is constant for the duration of a slot
All those do is (de)serialize a `Clock` into or out of an `AccountInfo`'s  `data` field
theres a to and a from function for deriving clocks and im not exactly sure what they mean by giving a clock to account info
Yes there's an npm package. `@solana/web3.js`
Craziness verified. I'll show myself out. 🙂
am i reading this right when you say that theres a web3 import for solana?
Part of this is the doubling in size. But I think there's something else, if I'm not going crazy.
You need to pass in the account from the client. In web3.js it's `web3.SYSVAR_CLOCK_PUBKEY`.
how is a clock derived from account info?
yeah i didnt understand that when I read it
Something like. `solana_program::sysvar::clock::Clock::from_account_info(account_info).unix_timestamp`. See the docs https://docs.rs/solana-program/1.7.4/solana_program/clock/struct.Clock.html.
so does no one have a link to a solana project using the clock function or timestamps?
Kind of spooky since I can't verify the deployed binary. 🤔
Why is it that the dumped account data for a write buffer is different from the dumped account data for a program that has been upgraded from that same write buffer?
Oh I see, using the paper wallet and then getting the keys.  Thank you, I will try that.
The first command doesn't touch your ledger
Something wrong with the CLI method I mentioned?
I mean a tool which is not interacting with my ledger to reproduce the address by just using the mnemonic and derivation path.
<@!585868308419444749>  My intention was to verify the derivation path and write down how to reproduce the addresses with a 3rd party tool, in case solflare and/or ledger is not available in the future. Do you know a webtool like the mentioned one for bip-32, where I can check whether the mnemonic + derivation paths leads to the same addresses?
Yeah we use the modified version that gets most of the way there with ed25519
<@!585868308419444749> I think that's the issue, thanks.  Bip32 uses secp256k1
You can use our CLI tools instead.  `solana-keygen pubkey prompt:`, which should be the same as `solana address -k usb://ledger`
'cause you need the former
Does that website support ed25519 or just secp256k1?
make sense, nice, thank you!
ah okay
I think compiler may be doing something we're not aware of
No CPI. I mean the initializer function `FillEvent::new()` works in other places.
Hi! I try to figure out how the solflare ledger addresses are derived. I tested the derivation paths m/44'/501' and m/44'/501'/0'/0' with iancoleman.io bip39 tool. But I can't find the addresses. Could someone please hint me to a doc or website with more information about how the addresses are derived?
this is a serum dex cpi?
Just a guess
i don't really know your code well enough, but maybe the eventtype or padding is neccessary
yeah after spending a lot of time, I still can't figure it out. This works:
```rust
            let fill = FillEvent {
                event_type: EventType::Fill as u8,
                side: Side::Ask,
                maker_slot: best_bid.owner_slot,
                maker_out,
                padding: [0u8; 4],
                maker: best_bid.owner,
                maker_order_id: best_bid.key,
                maker_client_order_id: best_bid.client_order_id,
                best_initial: best_bid.best_initial,
                timestamp: best_bid.timestamp,
                taker: *mango_account_pk,
                taker_order_id: order_id,
                taker_client_order_id: client_order_id,
                price: best_bid_price,
                quantity: match_quantity,
            };```

But this does NOT work:

```rust
            let fill = FillEvent::new(
                Side::Ask,
                best_bid.owner_slot,
                maker_out,
                best_bid.owner,
                best_bid.key,
                best_bid.client_order_id,
                best_bid.best_initial,
                best_bid.timestamp,
                *mango_account_pk,
                order_id,
                client_order_id,
                best_bid_price,
                match_quantity,
            );

```

More confusingly, using the initializer function works in other places, just not in that one place.
What's the max range of https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedblocks now? try different range < 500,000 on mainnet but get
 `{"jsonrpc":"2.0","error":{"code":-32602,"message":"BigTable query failed (maybe timeout due to too large range?)"},"id":1}`
It seems you are missing a byte variable from your program
```Program failed to complete: Access violation in unknown section at address 0x18 of size 8 by instruction #53813
```
Anybody know what this could be:
The runtime actually allows account reassignment between programs but only if the account data is zeroed (so functionally equivalent to creating a new account and assigning it to the destination program)
The "owner" has to sign off on the assignment. In practice this probably means that you can't re-assign an account once an executable owns it. Though the big guns like mvines can shed more light on that.
Note that there's a subtlety in language. A program cannot directly modify the contents of an account "owned" by another program. But it can use CPI to invoke instructions that then modify the data within the owning program.
https://github.com/solana-labs/solana/blob/ccc013e134e5f1112e4af279de58e7fc65f8c96d/sdk/program/src/clock.rs#L43

The ideal number is 1. Empirically arrived at 4 during early TPS testing well before mainnet launch, 1 works but the TPS dropped significantly at the time due to latency between nodes causing leaders to get timed out before producing a block in their one slot. With further optimizations hopefully we can get that 4 closer to 1 over time
Is there a trait that makes sure it isn't transferable, to protect the data?
You can create an account from one program, and assign it to another, though. Assigning accounts will zero the data.
Nope.
I'm thinking of it like proxies (sub accounts) and implementations (program account)
I'm guessing no but want to double check
If I initialize an account with one program and store some data, can another program store data in the same account?
just wanted to know if there is like some sort of private key manager for local dev that someone has or some quick hack so that I can be lazy
like I would like to be able to toggle between 5-6 different wallets that each have different permissions to a program that I deployed locally
interesting, what's considered best practice for production-grade programs? upgradable or not?
does anyone have a great way of loading multiple wallets into a localnet
Why do we always have 4 contiguous slots assigned for same leader? What's the intuition behind that, is there a difference between transition L1-L1 and L1-L2? Where is these constant 4 defined/coming from, couldn't find it in leader_schedule.rs and leader_schedule_cache.rs
anyone got an example of a program using the time variable
In general there are two loaders, upgradeable and non-upgradeable.  One deployed to the latter the program is immutable.  For the former the program has an associated upgrade authority that will allow the authority to upgrade the program
Yes, programs have a pub/private keypair.  You can find out more about deploying programs here: https://docs.solana.com/cli/deploy-a-program
question about "keys" behind programs. In the hello world tutorial we create (during compilation) and later use a keypair for a program. Does that mean that programs in solana have private keys behind them? Eg in ethereum smart contracts don't - nobody owns them. If they do in solana, does that mean the dev who deployed it has special priviliges? 

Where can I read more about this?
After the `firstNormalSlot`, yes
thank you, so number of slots in epoch is always the same?
You'll likely need to implement some methods around the returned data for it to be useful.  Rust implementation is here, https://github.com/solana-labs/solana/blob/master/sdk/program/src/epoch_schedule.rs
You probably want `getEpochSchedule` though
Right, but most of that doesn't make any sense in a historical context
Something like getepochinfo returns:
{
  "jsonrpc": "2.0",
  "result": {
    "absoluteSlot": 166598,
    "blockHeight": 166500,
    "epoch": 27,
    "slotIndex": 2790,
    "slotsInEpoch": 8192
  },
  "id": 1
}
Which info?


///////////////////////////////////////////////////////////////////////////////////////////////

