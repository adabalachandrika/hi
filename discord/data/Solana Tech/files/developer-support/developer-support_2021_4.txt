All tokens minted with spl-token are grouped under the same program id?
Looks great, thank you!
You can find all the token accounts for a main account with https://spl.solana.com/token#finding-all-token-accounts-for-a-wallet, then query each of them individually
(with the JSON API)
How can I query all SPL token balances of a main SOL account?
Hey! I'm trying to build some products on solana and would like to speak to a team member to find out if my ideas are feasible. Anyone I can DM? It's only a few short questions
Ah ok, Thank you!
yeah testnet seems to be dead.  we'll probably aim to restart it later today or tomorrow, depending on how the debugging goes.
devnet (the main cluster that should be used for general app dev) is running fine
Hi everyone,
Is there anything wrong with `testnet` today? Seems like slot is not advancing...
Quick question... I can't find this method https://docs.solana.com/developing/clients/jsonrpc-api#accountsubscribe in the Rust `solana-client`. Is this the right struct https://docs.rs/solana-client/1.6.1/solana_client/pubsub_client/struct.PubsubClient.html ?
Thanks!
dev-questions channel
https://discord.gg/qXNJVDaK
It says I don't have access to it :\
<@!522383046620610560>  https://discord.com/channels/739225212658122886/752530209848295555
Is there a way to send a Vec/Array of Accounts to the program?
Where should I ask stuff about Anchor?
<@!152089247254315008> Check within this thread.
I need to store a list of pubkey that are others executable
Of course, this list can grow in size. I don't get how I can store dynamic sized array. Do you have any resource I could check ?
but it does seem that airdrop is a little slow
confirmation looks fine on here: https://break.solana.com/results?cluster=devnet
airdrop, and confirming txn. although txn confirm might be similar speed in mainnet? not sure right now.
<a:pepeFedoraTip:738455065555238923>
ok will look into borsh
Yeah, exactly. I think we're encouraging the use of borsh now though since it's easier to manage
So for the following struct, the `Pack` trait would need `LEN` set to 40?

```Rust
pub struct Swap {
    pub depositor: Pubkey,
    pub amount: u64,
}
```
Yeah, it's for manual account state deserialization. The `Pack` trait requires deserialized byte vectors to be exactly `LEN` bytes
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/state.rs#L124

what is this size for? is it the size of the `Account` struct?
what kind of slowness are you seeing?
It seems like dev is fairly slow. Are there throttles and rate limits in place on devnet that might not be on testnet?
dev is sort of a playground for fucking around with stuff
pretty sure testnet is basically staging for mainnet
What's the difference between Dev and Testnet?
thanks
https://github.com/solana-labs/solana/blob/master/program-test/src/lib.rs#L455 -> https://github.com/solana-labs/solana/blob/master/program-test/src/lib.rs#L533
line 17
pretty sure that imports https://crates.io/crates/solana-program-test
~~line 2~~ nope, misread.  bedtime 💤
looking at https://github.com/solana-labs/example-helloworld/blob/master/src/program-rust/tests/lib.rs, where does this import the hello world program defined in `src`?
Bumping this to see if anyone can help?
You can also do dumb stuff like `E2` here, https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7d896df28068a7a88716d25aa675de2f
Those conversions usually end up inlined anyway
On the other hand it's a template now which means that Rust will generate a unique implementation for every T?   Correct?  Code bloat???
Not sure it will ever be used except here and with Option<&String> type but hey generality for the win 🙂
So it buys the ability to use Option<String> and Option<&str> or whatnot with WithMemo
I implemented trent's suggestion, it works now
This is 1:1 I think. https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7d896df28068a7a88716d25aa675de2f
Right
Yeah the type isn't necessary on that
Ah, it does work with an analog of `let test: &str = test.as_ref();` added.
Hmm, this doesn't not work.  But it's not quite 1:1
```
trait Trait {
    fn test<T: AsRef<str>>(&self, test: Option<T>) {
        if let Some(test) = test {
            let test: &str = test.as_ref();
            println!("test({:X?})", test.as_bytes());
        } else {
            println!("none");
        }
    }
}

struct Test;

impl Trait for Test {}

fn main() {
    let s = "test".to_string();
    let t = Test;
    t.test(Some(s));
```
It seems like it should, but:
```
 no method named `as_bytes` found for type parameter `T` in the current scope
```
For instance I made that claim before I checked the docs 🙃
At some point it becomes intuitive and you can guess right more often than not
Sorry now I'm just getting salty, it's been a long day fighting this compiler.
Perhaps but does that mean I have to rtfm for every single token that I read in source?  Feels like it.
RTFM 🙂 https://doc.rust-lang.org/std/convert/trait.AsRef.html#impl-AsRef%3C%5Bu8%5D%3E
Just curious.  It feels to me like there is an incredible degree of minutia to know.
How does one know a priori that str would implement AsRef<[u8]>?
Don't we get that for free since `str` implements `AsRef<[u8]>` ?
I mean I am bringing this pain on myself by doing it this way so ... no one else to blame ...
It's hard to learn rust at the same time as making these changes, that's the biggest problem for me
No problem
To make the generic work, I think you'd need to keep the Option: `fn memo<T: AsRef<str>>(memo: Option<T>)` But then you'll need another bound that ensures T implements `as_bytes`.
Yeah, for this use case, clone is not a big deal. But I think we can stick with the &String. Thanks for your patience with me!
(and 2 or 3 frees)
there will be like exactly 2 or 3 total string copies ...
runtime inefficient, but for one pass through does it matter?
clone() seems to solve all problems
I'm drowning in syntax already tho
no
Is there a suggestion on that error to `use std::convert::AsRef` ?
never change its ownership
we just pass it around and use it
The String is owned by clap which parsed it and holds it
it's like one of the few things I even understand here
tbh I'm not understanding the hate for Option<&String>
```   --> cli/src/nonce.rs:354:16
    |
354 |     .with_memo(memo);
    |                ^^^^ the trait `AsRef<str>` is not implemented for `std::option::Option<std::string::String>`

error[E0277]: the trait bound `std::option::Option<std::string::String>: AsRef<str>` is not satisfied```
ok
Oh... I think it needs to be `fn memo<T: AsRef<str>>(memo: T)`
```error[E0277]: the size for values of type `(dyn AsRef<str> + 'static)` cannot be known at compilation time
   --> cli/src/memo.rs:6:30
    |
6   |     fn with_memo(self, memo: Option<AsRef<str>>) -> Self;
    |                              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn AsRef<str> + 'static)```
`doesn't have a size known at compile-time`
What was the error?
It didn't work on just the trait and impl, although maybe I did it wrong
We'll never put something other than a string through CLI
Oh I just wanted it on the trait and impl, not plumbed
If you let me clone everything every time then you will get the Option<String> you desire
I think I'm resigning myself to `&String` 🙂
<@!585868308419444749> the AsRef trait object actually seems gnarly, but maybe I'm missing something
Solves all problems?
Just clone the thing every time it is touched
should I just do that?
One thing that seems to "work" is to clone sh** all over the place
Thank you sir.
For production? No, but that wouldn't work anyway.
makes sense, thanks.
Our logs are just strings, whereas Ethereum events have a JSON structure if I'm not mistaken
But this wouldn't allow me to run a node with laptop mac resources, would it?
like 90%, what do you mean by ` we don't have the same structured event abstraction over it`
Or only some?
Change every Option<&String> in my implementation to Option<AsRef<str>>?
I don't know what that was referring to
Events on Ethereum are a layer above contract logs. On Solana we also have logs and they can be subscribed to but we don't have the same structured event abstraction over it. Does that help?
https://discord.com/channels/428295358100013066/517163444747894795/827040324508581898
Which is .... ?
Yep, I see it now too, that's annoying. Let's try Trent's suggestion
```--> cli/src/cli.rs:1435:13
     |
1435 |             *memo,
     |             ^^^^^
     |             |
     |             move occurs because `*memo` has type `std::option::Option<std::string::String>`, which does not implement the `Copy` trait
     |             help: consider borrowing the `Option`'s content: `*memo.as_ref()`

error[E0507]: cannot move out of `*memo` which is behind a shared reference```
And now I am back to the error I described
And then to fix the ```let build_message = ``` errors I used memo.clone()
I made the changes you just described
Ok Tyera
You can run a regular validator with voting disabled.  That's what's behind `api.mainnet-beta.solana.com`
Solana doesn't really have a notion of lightweight nodes
Is there a way I can run a "lightweight" Solana node locally just for the sake of running production dapps locally against this node?
I am pretty sure that's what I saw
I could be wrong here, but I think that if you resolved the let build_message error, then you'd see the errors I am talkinga bout
I find that sometimes, you do not see errors because certain other errors block them
Hmm, I pulled your branch and replaced all `Option<&String>` with `Option<String>` and `memo.as_ref()` with `*memo` ; not seeing that build error. I am seeing a build error around `let build_message = |lamports| `
The problem there is the that CommandInfo is referenced in the match statement
```error[E0507]: cannot move out of `*memo` which is behind a shared reference
    --> cli/src/cli.rs:1435:13
     |
1435 |             *memo,
     |             ^^^^^
     |             |
     |             move occurs because `*memo` has type `std::option::Option<std::string::String>`, which does not implement the `Copy` trait
     |             help: consider borrowing the `Option`'s content: `*memo.as_ref()`
```
It can't seem to do that
No, you don' t have to add lifetimes. The methods take ownership.
I have to add lifetime decorations to a bunch of functions ... ?
I can't figure out how to do that because the struct owns the memory doesn't it?
it's the request to change memo.as_ref() to *memo
I'm not as worried about the trait
All JustWork(TM)
But also `String`, `&String`, `&str`, etc
Anything that implements that trait can go in
does it save 1 string clone at runtime or something?
It's more to type
```Option<AsRef<str>>``` would be better because ...?
And then I can't easily get it out of there and into the process_() function without cloning it or turning it into a ref
I was about to comment to use `Option<AsRef<str>>`
That gets put into the struct that represents the command line args for the particular subcommand
I turn that into Option<String>
The ArgsMatcher returns type Option<&str> I believe
Every change I make just brings a new slew of errors
I'm having a hell of a time wrangling the types to be the way you want
OK thanks
That's me!
Looks like, 101:MB, 102:testnet, 103:devnet, from a random sampling
Is someone here CriesOfCarrots?
trying to understand the chain id https://github.com/solana-labs/token-list/blob/main/src/tokens/solana.tokenlist.json
does Solana have any concept of "events". In solidity I can use events to notify off-chain programs about handling certain things. Does this exist in Solana?
what's the chain id for testnet?
pretty neat. i think the future for being able to write on-chain programs using regular programming languages is really bright. Learning solidity to write smart contracts and not being able to reuse solidity anywhere else almost feels like a waste of brain space.
checked, overflowing, saturating, wrapping,
https://doc.rust-lang.org/std/primitive.u64.html
thanks
ok
Depending on the type Rust already has them
how does solana handle overflows? im guessing it doesnt do any sort of "safe math" by default and i would need to implement this?
thanks
In Solana you'd normally use the account address space as the key for the mapping, with the value being a unique account.   This way the same program can execute concurrently with different values and not need to take a lock on the map
didnt anyone end up getting an answer to this? im wondering the same thing. Solidity for example has mappings i can store data into and im wondering how you would achieve that in Solana. From what I can tell looking at existing code its not quite clear
oh so verify means *checking* if the tx id getConfirmedTransaction is called on matches the signature response
You can _verify_ that the signature indeed matches the transaction message and corresponding public key
But it doesn't sound like you were looking to ensure the reply matched your request
what does verify mean in this contextr
Well the reply for getConfirmedTransaction appears to have all of the information required to cryptographically verify the signature
<@!585868308419444749>
what exactly do you mean verify?
thanks <@!585868308419444749>!
will store it separately when inserting into the DB itself then
gotcha
It is.  In Solana the TXID _is_ the first (fee-payer) signature
so it's not synonymous with the TX ID
ah right
signature here means "cryptographic signature"
You should store it then
no, i would want to know the TX ID
interesting
Would it be sufficient to _verify_ the signature?
Well you won't be able to _derive_ that signature from the response unless you have the private key
Eg - 
  {
    signature: Binary {
      _bsontype: 'Binary',
      sub_type: 0,
      position: 64,
      buffer: <Buffer 21 a4 74 ..................>
    },
    publicKey: { _bn: [Object] }
  }
just to give more context, I store the response in a DB and then, in another program, fetch this data and want to derive the tx signature from it
sure!
Oh wait... Sorry I was thinking JSONRPC.  Let me check docs real quick
how can I get it convert it to format that allows me to view it on the explorer?
but it's in buffer and some other type
i can see the response has a transaction.signature field
yes got that
i want to derive it from the response
It's the first signature in the list, either way
i'm not storing the txids
oh yes my bad
I don't understand. `getConfirmedTransaction` takes the transaction ID as a parameter
how do I convert the response of getConfirmedTransaction (from the web3js library) to get the string transaction id?
hey
Oh nice! Thanks for the help <@!585868308419444749> !
Not only which, but what their role is in the instruction. https://github.com/solana-labs/solana/blob/c72325157553e7cf32efcb3b9aacaf2948f956cb/sdk/program/src/system_instruction.rs#L83-L87
I see, I'll take a look at the `jsonParsed` encoding. But what you are saying, is that with that mapping I can get which addresses were the ones passed that particular instruction  `i`?
Alternatively, I believe the `jsonParsed` encoding replaces those indices with the corresponding public key at the cost of extra data on the wire
You should map from the indices in `transaction.instructions[i].accounts` to `transaction.message.accountKeys` instead
No.  A third party fee-payer could be included, who would be listed first
I guess I have a last one haha, is there a guarantee that for system transfers the `from` and `to` will be the first 2 addresses in the array?
Cool, that makes sense. Thanks! 🙂
Yep, 2 sysvars and 1 native program
Ohhh I see!
Oh no I was just looking at the example for https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedblock
Builtins have a one lamport balance by convention
Yeah they're sysvar and native programs
Sounds like those are probably sysvar accounts. Do you have an explorer link for the transaction you are referring to?
A small follow up question to that... In the example provided, why do the 3 last accounts have prev & posts balances of 1?
Yep, exactly
So I guess the i_th entry in `preBalances` corresponds to the previous balance of the i_th address in `transaction.message.accountKeys`
Cool, thanks!
Search for "transaction status metadata object" in https://docs.solana.com/developing/clients/jsonrpc-api#json-rpc-api-reference
Sorry I can't direct link, there's no anchor
I'm specifically wondering about the balances vectors, is there a mapping from the index to the corresponding addresses involved in the tx?
Does anyone have a more detailed description for the fields of this struct? https://docs.rs/solana-transaction-status/1.6.2/solana_transaction_status/struct.TransactionStatusMeta.html
(by the way I can add nonce support to the vote transactions too as a separate change, would be happy to do it)
but I think I got my answer so thank you 🙂
And I think that nonce correlation is a good one, I just noticed the vote stuff was missing nonces and wasn't sure if this indicated somethign special that would also preclude memo
That's fine, not trying to nitpick here.  Just trying to figure out how to translate the requirement of 'support memo for all transactions' into which actual subcommands need memo support.
I vaguely remember succumbing to plumbers fatigue before getting to the vote program 😅
I should say, every command line function that submits transactions has nonce support except for the vote ones
the vote stuff being the exception
which makes it easy to figure out where to include memo support -- just support it wherever nonces were supported
As far as I can tell, every transaction has nonce support except for those that I mentioned
I'd consider memo and nonce independent
Sgtm! I don't think there needs to be any correlation between nonce and memo support
actually I think I will, it will just make me feel better 🙂
So I wouldn't bother adding memo support for those?
We'll get them for free when I get around to refactoring CLI
ok I see
Only as intentional as there's been no demand
same for vote-authorize, vote-update-validator, and vote-update-commission
is that intentional?
withdraw-from-vote-account does not support nonces
Cool, thank you, I’m taking a look at it.
Our solana-program-library has a memo program that you can use to include arbitrary UTF-8 in a transaction. This might do what you need?
Example transaction: https://explorer.solana.com/tx/2AFpLAbbWQDuJFp3UN5AcfHKqdPrjAPNroCKaQXpmgVoVh3kPXTLjJXCYMiYhhjPRCobshEbSSRovAsniDWSXd5w?cluster=devnet
Docs: https://spl.solana.com/memo
Source: https://github.com/solana-labs/solana-program-library/tree/master/memo
Hello everyone , I’m new to Solana , I’m thinking to build some applications on Solana network. I have a question about Solana transactions, does Solana transaction support meta data? In others can I attack arbitrary name/value pairs to the transaction?
Thanks, that worked
Not broken, just limited due to abuse.  Try requesting 1 SOL
Anyone know if airdrop broke on testnet/devnet? Seems to keep failing for me
Take a look at this https://discord.com/channels/428295358100013066/517163444747894795/823439223624302602. Check if your Go library uses the ed25519 curve
I'm not familiar with the go ecosystem, but you're looking for BIP39 and BIP32 libraries that support Ed25519
Hello, 
can you suggest a golang library to derivate Solana keys? I'm trying with this derivation path ''m/44'/501'"

I copied sollet.io mnemonic and I want to generate the same address with golang.


///////////////////////////////////////////////////////////////////////////////////////////////

getting this when doing ```new PublicKey(address.toString())```
``Error: Non-base58 character``
solana swap program is an AMM dex, in the uniswap sense, Serum is an orderbook based dex
Is there any way to add a memo to a tx via CLI? I have tried a lot of things, but no guides or tutorials or anything makes it difficult and so far no one i asked knows
which is the difference between solana swap program and serum?
Yes my program had a different name (the name of the compiled file is different)

I don't really know how rust works underneath the hood to really understand it deeply. Solana is my first experience with rust
This is very weird though.
you meant you didn't called your program "paulx_solana_escrow" before which caused the problem?
I'm just trying to use the memo program template to put a memo in a tx
can't find no memo in any of the transactions either, should i modify something in the code?
https://github.com/solana-labs/solana-program-library/tree/master/memo/program

everytime i build-bpf and run the .so through solana CLI it creates like 40 transactions on my account, using devnet atm
I have been counting the position of th errors in this array https://docs.rs/spl-token/3.1.0/spl_token/error/enum.TokenError.html to try and guess which one it is... not very scientific
Is there any way of errors from the SPL Token to show up with the names. instead of this more generic way.
Instead of: `TransactionError(InstructionError(0, Custom(12)))`
Something like: `TransactionError(InstructionError(0, InvalidInstruction(12)))`
I got what I might be doing wrong for the BPF test not to work properly 
```
    let mut program_test = ProgramTest::new(
        "paulx_solana_escrow",
        program_id,
        processor!(p::Processor::process),
    );
```
I was not making the string in the `ProgramTest::new()` the same as the name of my crate (program, sorry my Rust is not so good yet to be clear on the differences)

~~(my tests are still having errors, but at least they are different errors)~~ it works now 😄
any specific docs?
how do it do that locally to test?
for instance what happened to stellar few days ago, we want to avoid being dependant on some public validators, by having own dedicated validator + setup for backup public validators in case our own validator dies.
the purpose to setup my own validator locally is to learn to config it if our company wants to start own validator and validate transactions with own validator without depending on some public validators if you know what i mean?
as i believe solana-test-validator is like something like ganache on ethereum
like running your own node on ethereum for instance for local testing?
is there a different way to start local node validator?
quick question. i am running solana-test-validator and am running hello world example with success.
The reason for the slow down might be the error as <@!453347985628200960> explained 
https://discord.com/channels/428295358100013066/517163444747894795/830137454316355594

I just don't get it, why is it that there is a resize (I don't know much about Solana, but assumed that the accounts could not change size)

Apparently a possible approach is to use `cargo test-bpf`. I have tried with BPF, but still no success I keep getting the same error
will do
<@!364408554406281218> I am experience similar issue that the tests hang and report `Account Resizing not supported`.
Hi guys, what would be the best way to add multiples data to an account ?
Im guessing using state storage for the main account of my clients can be tricky because if my website change the account state and another site do the same, my state data would be erased (this is how i understand it)
So should i create a specific spl token, create a specific token account and link it to the main account, theb write sole data in it that only my program can modify ?
Thanks in advance
thanks anyway
scratch that, I will switch to devnet
1 sol would be enough
I can send you like 1 SOL.  Otherwise maybe go beg a validator 🙂
Faucet's empty and Michael is 🏖️
Are airdrops not working on testnet?
lesson learned
sorry 😀
Those are handled in batches every few days.  Patience please
haha
good point
ah yes
Did you tick a box in your PR that says you wouldn't do what you're doing right now?
whose got access to approve PRs?
hey guys
Check out the helloworld example, it run its test via program test both as native and bpf binaries.  (`cargo test` and `cargo test-bpf` respectively)  https://github.com/solana-labs/example-helloworld
(and, if you know me, I ask a *lot* of silly questions)
and honestly managed to get this far without asking a single question to anyone
but the search is quite nice
ha, yes 😄 I mean, as with everything it takes some time to know where things are
I'm screenshotting that for the next person that says the docs are a confusing mess 📸
sounds awesome, yeah, for sure 🙂
Glad to hear! Do let us know if you run into any gaps or points of confusion. We're always looking to make the docs better.
they are super well written
PS wanted to give a huge thank you for the docs
np!
thanks !
yeah just wanted to be sure it fully matched the spec 🙂
neat !
ok, so it can be any arbitrary, client-side generated integer
No, it's a JSON-RPC request id that will match the response id: https://www.jsonrpc.org/specification#request_object
or is it independent of that
(I mean, assuming, e.g., that I was running a node)
is it supposed to be the pubkey ?
ok, on that note: what exactly is the ID here ?
ok, great, wow that makes life a lot easier: I'm just an idiot 😄
it was doing something even sillier imo, which is: building an array of dicts
Yeah, it turns out I needed to explicitly declare it a dict
It looks like it might be building an array where it should be a map:
```
{
    "jsonrpc" => "2.0",
    "method"=>"getGenesisHash",
    "id"=>1
}
```
I am absolutely silly
oh wait
Here I'll send a string-ified version
sure !
I don't think it's an issue with the port. I think something is wrong with the message data being sent. <@!374397256469839882> are you able to print out the data? I'm not familiar with Julia, but I suspect something in the `JSON.json`
That's not a url problem
yup, same result 😦
<@374397256469839882> can you try without the port?
<@804350183105363980> does that make sense? ^
`[{"jsonrpc":"2.0","error":{"code":-32600,"message":"Invalid request"},"id":null},{"jsonrpc":"2.0","error":{"code":-32600,"message":"Invalid request"},"id":1}]`
the problem is that this piece of code returns
This is Julia code, but it should be pretty easily legible
```
r = HTTP.request("POST", 
    "http://devnet.solana.com:8899",
    ["Content-Type" => "application/json"],
    JSON.json(
        [
            "jsonrpc" => "2.0",
            "method"=>"getGenesisHash",
            "id"=>1
        ]
    )
)
```
still, though, here's a basic example
ok, sounds good
haproxy will redirect
<@!374397256469839882> you shouldn't need to specify a port for devnet
I want to set up a websocket filter for certain hex patterns and I dont want the hex code broken up by new lines
Also, not in the manner sol_log_slice logs
What's the cheapest way to log byte code to the solana log? Hex encoding is expensive
awww, it's nice.
https://twitter.com/Narfz0g/status/1378847394587152396
i did not know it, link pls ser
I think the guy that bought a horse with Solana has that one pretty much in the bag 😂
any number of ppl can sign transaction, just require that person to be a signer on that transaction
let's say someone wants to change their personal info, only let them do that if they sign the action
is there a way to sign an action rather a transaction ?
many hundreds of sol lost at sea with each new version of serum program launched
unless you decided to spend 8 sol to spin up a serum market 😿 that is non-recoverable
rent on accounts can be recovered though
an account with half a mb on it
what is that?
hope this fool don't end up being the bitcoin-pizza guy for solana https://explorer.solana.com/address/tzz2AdP4kkdyebywvJfe6LCqSPwwYKBMYww3znSN8Bg
wow.
We have to accumulate information to finalize our programs verification
do you mind if i ask what the use case is?
I'm good, wish there was another option
it wasn't meant as a criticism, just making sure you were aware! $200 dollar overheard per account is a lot
We have to collect data from the client in chunks due to the 1232 byte limit on the wire... if you have a better way I'm all ears
bear in mind that 1mb of data is expensive to store, at current prices around $200
what is it needed for the bpf tests to be able to run?
are you just supposed to run the normal tests but with the `cargo test-bpf` or something more?
Also appreciate the link!
Ahh, thanks! Both of those work
Fyi, you can see your devnet tokens on our explorer: https://explorer.solana.com/address/DiDmB2iNBeXMCYU4xQzMRGetCL7zaxk2SS7ZuXmRz7NY/tokens?cluster=devnet
Try `spl-token balance $T` or `spl-token balance --address $A`.
You can also run `spl-token accounts` to see all the token accounts associated with the wallet


///////////////////////////////////////////////////////////////////////////////////////////////

https://github.com/solana-labs/oyster-lending anyone know where the prices come from? I am assuming from the DEX but when I changed the program ID to something random it still finds prices. Any ideas?
hi guys, I am comparing serum and raydium swapping function and on serum there is a pool address: EdFKkcb4G49SorBzGydGika49w3coNK5nZ134FvtxvVg and on raydium there is market address: 2xiv8A5xrJ7RnGdxXB42uFEkYHJjszEhaJyKKt4WaLep
Can somebody explain what is the difference please?
I cant seem to find it
probably in an earlier commit
https://github.com/project-serum/serum-dex this is serum v3 is v2 in the same repo
Does anyone know where the code to https://explorer.solana.com/address/EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o is? (Serum Program v2) I wanted to deploy this on my local server. Is this just the Serum Dex?
I will generate my token as ERC20. Can I just send ERC20 to SPL to make my tokens circulate within the Solara network? Or should I create a separate token based on Solana that corresponds to my ERC20 token?
Also, when issuing my tokens based on Solana, do I need $SOL coins like Ethereum? If so, how do I calculate and know the amount of $SOL Coins I need to issue my coins on Solana?
is there a infura equivalent on solana?
though imagine trying to take the executable data from this account <https://explorer.solana.com/address/9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin> and trying to reconstruct all this stuff <https://github.com/project-serum/serum-dex/tree/master/dex>
would be interested about this as well. The code is all compiled but it is public. Just no one seems to have made a decompiler yet
I mean, in eth, any user can go to etherscan and take a look the contract itself, and be sure the program makes what they say it does, but in solana I cant find a way to do that
is there a way to read the program source code form solana explorer?
thank you I will try this
Namely, the compute unit cost of printing comments in the program log e.g.
eventually i will run some manual tests but it would be easier if someone had already done the analysis on how many units it takes per logging command or similar command during a transaction
Is there any existing analysis on the compute cost of logging?
if you're using chrome, you can disable ssl checks for localhost at chrome://flags/#allow-insecure-localhost
yeah you need a vector already, the way you're doing it looks good
thank you <@!466984915376799748> 
last question before I go back to try out things mode:
```
let random_account = solana_sdk::account::Account {
            lamports: Rent::default().minimum_balance(spl_token::state::Account::LEN),
            owner: spl_token::id(),
            data: packed_token_account,
            ..solana_sdk::account::Account::default()
        };
```
What is the simplest way to get the `packed_token_account`? Do ou always have to declare a vector like I do for this one https://github.com/daragao/solana-escrow/blob/master/src/processor.rs#L369-L378 ?

What is the simplest way to do this. Will study the links you gave me

Thank you!
https://solanabeach.io/blocks
haha ok great, <@!204332593766858752> https://solanabeach.io/ has more interesting stats
haha, thanks. For some reason I only expected that search bar to work with addresses. Is there a way or another site to view most-used programs?
ideally we have more of a program registry, since programs are manually mapped to addresses currently
but I suppose that's not sufficient 😉
Or a way to find the addresses of SPL programs to see use on the explorer: https://explorer.solana.com/
generally, you can use the explorer search feature
but for this test you wrote, you could directly create account structs, again using the `Pack` trait to pack token state into account data
?
Is there a place where you can view what programs currently exist on a given Solana network
I agree 🙂 wanted to avoid that
just that you are basically putting the full "exchange" instruction under test, which is more of an end to end test
you say that, because I should mock the token state?
still this is agood tip, because I have been doing it in a very not nice way hahah
Well, it seems like your unit test is basically an integration test
like, having a process function which uses spl tokens 🙂
oh unit test
yes but that would be also used for a Unit tests?
and all spl token accounts (mints and tokens) implement the `Pack` interface
basically the idea is that you call `program_test.add_account(..)` before calling `program_test.start()`
https://github.com/solana-labs/solana-program-library/blob/2b3f71ead5b81f4ea4a2fd3e4fe9583a6e39b6a4/token-lending/program/tests/helpers/mod.rs#L1103
https://github.com/solana-labs/solana-program-library/blob/2b3f71ead5b81f4ea4a2fd3e4fe9583a6e39b6a4/token-lending/program/tests/helpers/mod.rs#L113
<@!364408554406281218> you can check out the above snippets
Haha yeah there's a simpler way
What would be the way to make the setup of a token less verbose in a unit test?

I am doing this https://github.com/daragao/solana-escrow/blob/master/src/processor.rs#L387-L453 but it seems too much verbose. Any tips on how to make this better are welcome 🙂 (I am a total noob at Rust)
When unit testing, and a test requires a token. What is the best way to go about?

Been looking through the examples, but couldn't really find many unit tests
You're mostly right, your program is actually always statically linked but optionally dynamically loads into the BPF VM instead if a shared object file is found
Yeah agreed
Just projects like mango and serum. When a trade is executed or an account liquidated, it should print a log with some information about the trade or the current state of a liquidated account
Yeah I think the expectation is that third party services similar to the graph would be built to index events that certain apps care about
Sure, what kind of information are you lacking
to make it easier to scrape data and events
Maybe going forward i can advocate people developing on top of solana to have more verbose logging
Ah cool, that's what I thought. I've noticed it's possible to get transactions going quite far back but wanted to check about the account data
<@248066053161222144>  it's not possible to get historical account data from the mainnet bigtable db. The amount of storage needed for block granular account state would be huge. The mainnet RPC API uses big table automatically behind the scenes for old blocks and transactions
Is there some other to connect with it and do RPC requests?
The RPC API doesn't appear to expose any way of interacting with big table
I've heard rumours that it's possible to get account data from previous slots by accessing a google bigtable stored by the solana mainnet node
Can you explain me the difference between "linking natively" and using the `.so`

I assumed that dynamic Vs static linking could only be defined through arguments to the compiler. Not in the code itself
oh okay i think that might be it
The deployment process itself can cause hundreds of transactions as the ELF is carved up and written one MTU at a time into the on-chain account.  Maybe that’s what you’re seeing?
<:PES_Think:639363477458255874>
isnt that not supposed to happen? didnt you say it would be deployed to a different address if i wasnt the owner of the one deployed to mainnet
<:BulbaConfused:824054206859706419>
the deployed program id already has transctions to it
<:confuse:585605260563972109>
<a:based_cigar:813272563593117726>
thank you very much
it worked
thanks
I think there’s a 32byte prefix, for the upgrade authority address.  If you open the file in a hex editor you’ll hopefully see a ELF header in there around byte 32
so i try that:

```
    let (program_data_address, _) = Pubkey::find_program_address(
        &[Pubkey::from_str("...").unwrap().as_ref()],
        &anchor_client::solana_sdk::bpf_loader_upgradeable::id(),
    );
```

and it gives me an address and running `solana deploy` against the dumped contents still gives me that bad elf magic error

```
Error: ELF error: ELF error: Failed to parse ELF file: bad magic: 0x3f45f5000000003
```
The mint authority is a keypair that you hold and use when creating the token to begin with
When I create a token how exactly does the mint authority work? Like how do I find/set it
https://github.com/solana-labs/solana/blob/99b3aab703d22a355f9b3459c141331b7d7a07df/sdk/program/src/loader_upgradeable_instruction.rs#L41
hmm interesting, will keep looking. thanks
Most likely yes.  The program account then holds a link to another account with the elf in it.  Forget the exact format right now though and I’m 🤳
does this indicate its deployed using hte upgradable loader?
```
> solana account --url https://api.mainnet-beta.solana.com/ --output-file kek ...
> solana deploy ./kek
Error: ELF error: ELF error: Failed to parse ELF file: bad magic: 0xea4c3a4c00000002
```
thanks
The “solana account” command has an option that will save the account data (the ELF) to a file that you can then “solana deploy” again onto devnet.   If the program was initially deployed using the upgradable loader it’s little more involved since there’s a couple program accounts involved
I thought if you write it like this, it is linking natively instead of using the generated `.so` file?
any links to docs explaining how to download the ELF and redeploy or even just download the ELF
sweet
Under the same address only if you have the private key, but you can download the ELF and re-deploy it under any other address you have the private key for
is it somehow possible to take a program deployed onto mainnet and redeploy it as is onto devnet? im guessing theres no way to do this
any idea how to add a ticker and imagine to my minted spl-token?
If you're using the generated instruction structs, you can just use this trait https://docs.rs/anchor-lang/0.4.2/anchor_lang/trait.InstructionData.html.
ah okay thanks
This means you're not constructing your instruction data correctly. Specifically the first 8 bytes. Anchor uses a sighash variant for method dispatch. So your instruction data should be `sha256(<namespace>::<rust-ident>)[..8] || borsh(my_instruction_struct)`, where `rust-ident` is the name of your instruction, e.g., `MyMethod`.
if im attempting to use `inveok_signed` against a program and get `Fallback functions are not supported. If you have a use case, please file an issue.` does that mean im incorrectly callign a program function?
That just gives you account details from the chain itself.
Connection.getAccountInfo
Is getAccountInfo how I connect my wallet to web3 ?  Trying to automate a transaction thru serum AMM swap
web3.js connects to the websocket automatically for you, you can use the Connection::on* notification methods to receive data: https://solana-labs.github.io/solana-web3.js/classes/connection.html
Yes. That is good to know. I'm planning to build a python tool that can get the reward info and correlate it to historical prices for tax purposes. No way I'm doing that manually!
bump
You're probably interested in this JSON RPC method, `getInflationReward`, that will become available upon the next patch release: https://beta.docs.solana.com/developing/clients/jsonrpc-api#getinflationreward
Did you mean 'stake-account'?
https://github.com/solana-labs/solana/blob/91d5f6ab30c95ddf8003cf608caf2c4a50989bca/cli/src/stake.rs#L1788
Can anyone point me to the source code for solana cli that calculates staking rewards when solana staking-account command is executed?
here is an example in a program of deriving an account address https://github.com/solana-labs/solana-program-library/blob/2b3f71ead5b81f4ea4a2fd3e4fe9583a6e39b6a4/feature-proposal/program/src/processor.rs#L45
Okay thanks for your help
maybe you even can do it from cli https://docs.solana.com/cli/usage
This sounds like it will work for me, is there any documentation on it?
err, don't think so
can i do that within the CLI?
obvs you can store anything you like at withseed(mintaddress, 'mymetadata') address.
potentially but just UTF-8 is fine then i can link it to indisputable hashes elsewhere, I just want to link the NFT somehow to it where its easily visible in a way. I've tested sending a transaction with a memo but hoped there would be something a bit better.
it's been talked about before.
i think i understand -- it's like there should be a standard way of getting an NFT's (or any token's meta data) from an on-chain account dervied from the mint-address....
ah, yea. lol. like a token's symbol and name...
My goal is to create an NFT with the related metadata(nft information like name of it) stored on the same account as the NFT's authority. That would allow a reverse-lookup to see details on the NFT by looking at the mint authority address
not sure what you are trying to do... maybe a "green name" can help you when they come online. technically a (smart contract) program can own accounts and change the data in them. but it sounds like you are trying to integrate your product into something that already exists and idk really.
So I would need to create an account owned by something else?
that account is owned by the system program
To this account https://explorer.solana.com/address/CqV1hTZFhvCAP2awD8ttRXe7tGFi4rDLfJSxyJtGGcY1?cluster=devnet, I'm not sure how to write data to it
to which account? all solana has is accounts -- a program can control any number of accounts and you can write anything to them.
I'm looking to write metadata to the account, IPFS isn't really important, for example if i wanted to assign a string "AK47 Wallet" within the account details page on explorer would it be possible?
to authenticate to a solana program, you just need to sign a solana account, proving you have the private key... if you can arrange it like that it will work i think... but i don't know IPFS and what security that implements (if any?) ... maybe someone else will chip in.
I'm trying to mint a token and on the mint authority system program account have a IPFS hash in the metadata on the account overview so the token is linkable to an image stored off the Solana chain

Is that possible?
what do you mean "metadata linked to a program account" ?
if not, use the public rpc node ```solana slot --url https://api.mainnet-beta.solana.com```
are you running a node, and is it listening for rpc on 8899 ?
Is there any documentation on adding or modifying metadata linked to a program account?
im trying to connect to a WebSocketProvider; any idea how I do this?  trying to figure out using the web3.js library but can't find anything within it that would allow me to do this?  Appreciate any help 🙏
I tried to put localhost but had no luck. also tried 127.0.0.1:8899
How do I view local cluster on solana explore
Can someone add my sdk to the dev-resources list? I'd love to get some more eyes on it and possibly drum up some dev help https://github.com/crewshin/solana-swift
any ideas?
Hello so im trying to use https://www.spl-token-ui.com/#/ but it doesnt seem to want to connect to my localhost/local cluster. Ive used other applications and they work just fine. for example solong wallet has no problem connecting
Are you using the solana-cli or something else?
The spl-memo program is already deployed to all the public clusters, and ships with solana-test-validator, so you don't need to build-bpf or deploy the program to use it.
If you're talking about solana-cli, memo support will be coming in the next beta branch patch (v1.6): https://github.com/solana-labs/solana/pull/16387 You can use it now by installing the beta software: `solana-install init beta` . Just add `--with-memo "<string>"` to any transaction-generating command.
If you are wanting to use spl-memo with some other kind of transaction, check out the `build_memo()` helper: https://github.com/solana-labs/solana-program-library/blob/2b3f71ead5b81f4ea4a2fd3e4fe9583a6e39b6a4/memo/program/src/lib.rs#L30
ty sir ❤️
niceeee
@solana/web3.js
buying/selling/approving tx's
is there a library out there that interacts with the solana blockchain?


///////////////////////////////////////////////////////////////////////////////////////////////

The testnet faucet address is `4ETf86tK7b4W72f27kNLJLgRWi9UfJjgH4koHGUXMFtn` if anybody has testnet SOL to donate.
testnet airdrops seem to be depleted, and devnet having connection issues. Is it possible to refund the testnet airdrop account?
https://solana.com/ecosystem/lunadex

where do i find the smart contract code for this dex? how does it work without a swap contract's help? looking into the code will be helpful
Yes, solana-tokens assumes you've already sanitized your recipient list. It should probably return an error, though, rather than panicking. I'll file an issue.
i have to sort that out manually?
wow
so someone submitted a wrong pubkey
That means you have an invalid recipient in your csv: a string that can't be parsed as a pubkey
it didnt complete all of them
wait nvm got this `thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Invalid', tokens/src/commands.rs:278:63
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
(base) titan:~ raphael$ `
thanks!!!!

woah it worked
I think `--from` needs to be `FTmLX9f8B3o1aWoRBxuUzoTLfEB7ZqA4rxYVPVeUKo58`, based on the `spl-token accounts -v` command you ran yesterday
brb
`(base) titan:~ raphael$ solana-tokens distribute-spl-tokens --from ARkjiXHjtKUGCreW7BEHxLFMZ8JnoB17urqrXRDTT7VH --owner /Users/raphael/new-keypair.json --input-csv spl-token-airdrop.csv --fee-payer /Users/raphael/new-keypair.json --db-path airdrop.db
Error: ProgramError(InvalidAccountData)
(base) titan:~ raphael$ `
No, `--from` is the address of the token account you are sending from
brb
just to be clear the --owner, --fee, and --from use the filepath?
☝️
Yes
yes so the owner and fee payer is a filepath?
Isn't it `/Users/raphael/new-keypair.json`?
what command can i put that can retrieve that path
oh
As I said, it needs to be a filepath to the keypair, not a pubkey
and i put the pubkey thats paying the tx fees
but i keep getting missing signature
ive sent sol to it
yes
That's up to you. Does the mint authority address have the SOL to cover the transaction fees?
would that be the mint authority address the one paying the tx fee?
ok
fee payer and owner both need to sign, so need to be something with access to a private key
this is what i currently have
`solana-tokens distribute-spl-tokens --from FTmLX9f8B3o1aWoRBxuUzoTLfEB7ZqA4rxYVPVeUKo58 --owner /Users/raphael/new-keypair.json --input-csv spl-token-airdrop.csv --fee-payer FV1jhEkxCq9HhcXhXoUuMz4p2P9LcA1qu5rtpCxE4XAe --db-path airdrop.db
`
so the fee payer has to be a filepath?
As I said, that needs to be the path to the keypair
<@!585868308419444749> what problem do you see?

i put that address as the --fee-payer
Whichever account you are going pay transactions fees with; ie. an account with SOL. Might be your main wallet address (the same as the mint authority)
`--from` is a pubkey -> `<TOKEN_ACCOUNT_ADDRESS>`
none of them are pub keys?
We need to fix that
Where did you get the impression any of those args should be pubkeys?
mint athority?
ARkjiXHjtKUGCreW7BEHxLFMZ8JnoB17urqrXRDTT7VH?
so which address do i put in the --fee-payer
`--fee-payer` also needs to be the path to the keypair, since it is a transaction signer. That's why it says `<KEYPAIR>` in the help message

i added one then got the signature error for supplied pub key
it wants a --db-path
not working
Remove the backslash?
<@!213083996689661953> hey this is what i got
<@!826795838427758652> omg, that worked. thank you so much!
TokenSwapLayout
https://github.com/solana-labs/solana-program-library/blob/master/token-swap/js/client/token-swap.js
And how to get program structure? e.g.: SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8
https://explorer.solana.com/tx/54bgcv8cTe8NfaSybpHBWALNorzgv1SptbVnVyHmZja7Ts1Pes7ojmV6EtoAo3KLNDcYTgh9MCag3JUxouXADAaY?cluster=testnet
apparently someone has a bot that keeps draining it. I was getting errors yesterday when trying to airdrop
`9FSS317C4EU1dhvHdn56NkwrLA6wcDMfDPzFFTe3PqxJ`
sure what's your address
<@!555204910321369099> you know there is faucet?
right, it's just bytes, big endian, little endian, your own special flavour, etc.
hmm, structure, that's something i must dig into.. I'll try. thanks for now!
maybe this example can help you
https://github.com/solana-labs/example-helloworld/blob/b375d076ca276fc94265ed0c08407786e602399d/src/client/hello_world.ts#L194
i've tried with encoding jsonParsed but probably field falls back to base64
e.g.: �����e�����F��y����_[7� etc..
I am using web3.js getProgramAccounts method and when trying to convert buffer to string it gives me unreadable binary
I guess that each on-chain program can use a different encoding strategy with its structures. You have the binary information but you need the structure to deserialize it. I'm curious about other replies.
anyone?
Hey, how to convert base64 binary to readable? I am using RPC API and can't figure out how to convert base64 text. with JS. tnx
<@!445425471027544095> I hear you're the person to talk to about getting some testnet SOL. Could you spare some change?
From accessing a specific server under its control, certainly.  Not from the network in general
Hello Everyone, we're developing new defi project on BSC, our initial intent was to develop it on ethereum but gas fees made us change our minds. Now, seeing how much Solana grew in a short time, we're evaluating our options. Is it possible to develop for example deflationary tokens on Solana right now? Is it possible to migrate our solidity code to Solana easily or it needs some level of expertise?
Some issue on our RPC node, we are working on it

Hi, I'm toying with the idea of collectible card game type of thing.. anyone have thoughts of the best best way to represent your cards? each card as an SPL token?, and once it no longer can be opened in a card pack "New mint authority: disabled" of course over time you end up with possibly thousands of unique cards, each one being its own token.. of course most of them being not mintable.. maybe that gets quite exessive.. and wallet handling needing to track each token..
is devnet down?
I think that devnet is offline and airdrop doesn't work in testnet
it was blocking it
BRAVE BROWSER was the problem
ill try another browser
I just tried both
for me, 127.0.0.1:8899 doesn't work for some reason, but using "localhost" does
any ideas?
tiny update its actually not loading still
thank you, i tried doing it manually but i guess i was doing it wrong
If you answer ENG, I will translate ENG -> KOR
I just translate KOR -> ENG
Hi guys~ Anyone who can answer the '<#831031706638221322>' channel? 😉
in the top right there's a green button where you can choose your cluster. put in your local address as a "custom" cluster (or bookmark <https://explorer.solana.com/?customUrl=http://localhost:8899&cluster=custom>)
asymmetric encryption is certainly possible using a pubkey. decryption isn't great, since you'll need to either pass in the decryption key to the program, which makes it visible on-chain, or you'll need to statically store the decryption key in your program, which is also available on-chain.
https://docs.solana.com/developing/on-chain-programs/overview should give a lot of of the info you're looking for -- anything specific you need to know?
depends in what context you need it -- for the CLI, by default it'll be stored at `$HOME/.config/solana/id.json`
there's a few wallet options out there -- none of them are quite like metamask at the moment, but you can see what's available on the app / web / CLI wallets at https://docs.solana.com/wallet-guide
Yep, we want to use the owner address as much as possible, so the spl token account is less complicated
http://127.0.0.1:8899/ how do i use this on solana explorer?
Hello, all!

We’d love to have Solana listed on Token Terminal. 

For us, the relevant data points would be:
1.      GMV = Total transaction volume on Solana (daily granularity)
2.      Revenue = Total transaction fees paid on Solana (daily granularity)

In addition, we’d be interested in querying the:
1.      Revenue split between burns & validators
2.      GMV & Revenue composition by program, similar to solanabeach.io
3.      Total rent fees paid (daily granularity) & their split between burns & validators

We’re still new to the Solana ecosystem and would love to hear your thoughts on this methodology & a recommendation for the best endpoints from which to query this data.

Best,
Vilppu
Is it possible for a program to encrypt/decrypt securely on-chain?  Basically wondering if a program can use a secret that only it knows.
Does Solana organization have the power to arbitrarily ban any IP?
https://docs.solana.com/wallet-guide/file-system-wallet
can someone ELI5 BPF loader?
How can i get my private key ?
what is the equivalent of metamask on Solana?
Hi, I found that it looks like we can send token to one's associated token account by it's owner address instead of associated token account address. Is this a new feature?
Dom added you to the chat
Unfortunately i am on TG.  mvines there too
Gotcha. Are you on TG? will ping Dom to see if we can loop you into a convo
yeah a dedicated endpoint on devnet prolly makes a lot of sense for that.
have an ongoing thread with <@!267610913773715456> and others, i can reach out there and see if we can get connected on that
gotcha, i think that might make sense. concretely we're expecting probably 5-6k users (unsure how many concurrents), where each user might have a burst of 10 or so api reqs initially, followed by a steady stream. is this at the level where we'd need a node?
If that's a path you want to take, we can help debug issues with the node setup/etc.  Sucks, I wish you could rely on devnet.solana.com/testnet.solana.com.   
If there's a private channel you can reach out in, please do so.  It might make sense for us to run a node for you depending on what the beta competition is
yep, exactly.  But you probably wouldn't publish that URL to the world and invite the yahoos that are currently killing devnet.solana.com to slam your node as well 😉
got it. so once the node is set up we're free to interact with it via api in the same way as with devnet.solana.com i assume?
devnet and testnet only have a single machine behind devnet.solana.com/testnet.solana.com, so it's pretty easy to kill it.  api.mainnet-beta.solana.com is a load balancer and can handle more abuse before falling over
Here's the script that we use on devnet.solana.com - https://github.com/solana-labs/cluster/blob/master/bin/api.sh
https://docs.solana.com/running-validator
An RPC node is just a normal validator node with an `--rpc-port 8899`, the same system requirements apply (possibly more depending on what kind of load you expect)
are there docs on how to set up an RPC node? what would we need to do so? and are there any metrics on what sort of load requires your own node?
It's the same as testnet or mainnet-beta, if you want to guarantee a certain QoS then you need to run your own RPC node
yeah, somebody is consuming all the JSON RPC bandwidth
On that point, what is being abused here? is it the json API? trying to understand what kind of load devnet can support - Solana team suggested to move onto devnet for running our beta competition as it would be more stable than testnet, but i'm wondering if we'll be able to provide reasonably quick interactions
we need to ban some IPs
yeah somebody is abusing devnet.solana.com
quick ping on devnet again: seems like it's extremely slow? it seemed to recover somewhat an hour or two ago, but is now slow again
Use `--from FTm...` and `--owner /Users/raphael/new-keypair.json`
Goodnight!
Im heading to bed, thanks for the help so far <@!213083996689661953>
mint authority ?
so which one is the owner
and i use the FTm to paste into the command?
so the Fv1 is like the token contract address
```(base) titan:~ raphael$ spl-token accounts -v
Token                                         Account                                       Balance 
----------------------------------------------------------------------------------------------------------
FV1jhEkxCq9HhcXhXoUuMz4p2P9LcA1qu5rtpCxE4XAe  FTmLX9f8B3o1aWoRBxuUzoTLfEB7ZqA4rxYVPVeUKo58  99999000
(base) titan:~ raphael$ 

```
In place of <KEYPAIR>
Yes
do i put the filepath of keypair there
One other change you need to make: `--from` needs to be the specific token account address that you minted to, not your wallet address.
Run `spl-token accounts -v`, and you should see the token account address
oh fml
It says `--owner <KEYPAIR>`
i dont see the --owner here
its part of it
oh nvm
does it matter
so when i distribute the tokens in the cli where do i enter the --owner command
(base) titan:~ raphael$ solana config get
Config File: /Users/raphael/.config/solana/cli/config.yml
RPC URL: https://api.mainnet-beta.solana.com 
WebSocket URL: wss://api.mainnet-beta.solana.com/ (computed)
Keypair Path: /Users/raphael/new-keypair.json 
Commitment: confirmed 
(base) titan:~ raphael$

Okay, so yes, `--owner` needs to be the filepath of that keypair. It should be "Keypair Path" under `solana config get`
yes
Okay great. Does `solana address` return that `ARkji` address?

already minted
Have you minted any tokens? If not, you'll need to mint however many tokens you need to a token account. `--from` is that token account address; `--owner` is a filepath to the keypair that is the owner of that account
or mint address
so filepath ?
so the keypair is not the mint authority address?
`--owner` needs to be the path to a keypair
tried again with airdrop.db as the --db-path

The `--db-path` is a text-based database that will be created to track the confirmations of all your transactions. You can call it anything you like: distribution.db, for example
fixed
thanks
oh jesus
when doing this
You'll need to export that spreadsheet as a `.csv`
```
(base) titan:~ raphael$ solana-tokens spl-token-balances --mint FV1jhEkxCq9HhcXhXoUuMz4p2P9LcA1qu5rtpCxE4XAe --input-csv spl-token-airdrop.xlsx 
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error(Utf8 { pos: Some(Position { byte: 1636, line: 1, record: 1 }), err: Utf8Error { field: 0, valid_up_to: 1 } })', tokens/src/commands.rs:462:40
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
(base) titan:~ raphael$```
i can just put it
i put the csv file in my home folder do i dont have to use back slashes and target it right
do i just add it at the end like --db-path
its asking for a filepath
in the cli
now try the command again?
thanks
ok cool
Looks correct to me
is this fine
its working now
i did
how would i do it for 5,000+ addresses
Depending on how many recipients you have, might be easier to create the csv in a text editor
You'll probably have to re-enter after changing the format
still shows scientific notation
thanks
online
found it
dont see anything thats plain text
Don't have Excel on my machine, unfortunately
Number?
any idea where it would be here
yea its excel
ok
Is that Excel? Look for Format > Cells and change to plain text.
with that many zeros
its not letting me input integers
fuk
The cli will not recognize that
or will the cli not recognize that
if it shows scientific notation
is this fine
ah i was afraid to add that many zeros lol
Then put 10000*10^9 = `10000000000000` in the csv (sorry, I typoed above. Edited)
9
How many decimals does your token have?
im trying to airdrop 10k tokens to each address
10000.0*1
so instead of 10000 is has to be 10000.0?
oh it has to be float?
And just to reiterate a couple things in that doc, each address in the csv should be the main wallet address of the `recipient`; and the amount should be the raw amount: float * 10^num_decimals. So if your token has 2 decimals, to transfer `1.23` tokens, enter `123` in the csv.
One sec let me try that
Ok gotcha
It is the authority of the token account you are transferring from.
Is the —owner key pair the mint authority address
Take a closer look at the example command in the link Leonard shared: https://github.com/solana-labs/solana/tree/master/tokens#distribute-spl-tokens
```
solana-tokens distribute-spl-tokens --from <ADDRESS> --owner <KEYPAIR> \
    --input-csv <RECIPIENTS_CSV> --fee-payer <KEYPAIR>
```
The command is `distribute-spl-tokens`, and you definitely need an `--owner` keypair included.
i tried that and it didnt work
do i use the mint authority address?
what do i do
"missing signature for supplied pubkey: FV1jhEkxCq9HhcXhXoUuMz4p2P9LcA1qu5rtpCxE4XAe" }
im following it but i keep getting this
If you look here: https://github.com/solana-labs/solana/tree/master/tokens#distribute-spl-tokens
minted
tokens i mitned
spl tokens
just to check you're distributing SOL or other tokens?
is devnet having issues rn for anyone else
and --from
it says fee payer
i dont see the owner
which part is the owner parameter ?
wehn i do this i get the pub key i used in the command
<@456226577798135808> Hi, have you set the owner parameter? I believe it should be the signer of this transaction.
im following this https://github.com/solana-labs/solana/tree/master/tokens#distribute-spl-tokens
what does it mean by missing signature
<@!585868308419444749> any idea?
is it the same as the fee paying address
what address do i put in the --from
fk
how do i get the missing signature to work
or i have to target it
do i need a filepath to target from --db-path? i put the excel file in my main folder
i got this
```(base) titan:~ raphael$ solana-tokens distribute-tokens --from ARkjiXHjtKUGCreW7BEHxLFMZ8JnoB17urqrXRDTT7VH --input-csv spl-token-airdrop.xlsx --fee-payer ARkjiXHjtKUGCreW7BEHxLFMZ8JnoB17urqrXRDTT7VH --db-path spl-token-airdrop.xlsx 
Error: Custom { kind: Other, error: "missing signature for supplied pubkey: ARkjiXHjtKUGCreW7BEHxLFMZ8JnoB17urqrXRDTT7VH" }
(base) titan:~ raphael$ ```
was able to deploy but in general devnet feels really slow
I’d expect tomorrow sometime though since it’s the weekend.  A daily ping in the PR would be totally acceptable in my opinion 🙂
<@402202034050170880> - you can ping the GitHub issue itself, that’s more local and more likely to get a response from the maintainers of that repo
Hi guys, how long usually does it take to add name to token-list? 

I understand that Pull request explicitly states that " I will not ping the Discord about this pull request." but we asked a week ago and there are over 10,000 people in our discord who would have a better/easier first time experience on Devnet if it got pushed! https://github.com/solana-labs/token-list/pull/42
eh, no...  onLogs is far too much info.  I'm just looking to get blocks as they are finalized.  Any ideas?
thanks 🦆
onLogs....  I'm on it
how do I wait for confirmed blocks using the web3 js client?  I see onrootchange, but the roots given arent confirmed.
is deploying to devnet still an issue? need to send out a program update for devnet competition
thank you <@!466984915376799748> learnt a lot, reduced it to this https://github.com/daragao/solana-escrow/blob/master/src/processor.rs#L383-L394

which seems more sensible
how do I view my local cluster on Explorer?
Hello, I'm looking for a Python bot that manages CoinGecko or CoinMarketCap otherwise
okay thanks again
Right
getConfirmedTransaction will have the instructions
and is there a way to get the instructions of a transaction ?
thanks :))
Call^
Can getConfirmedSignaturesForAddress2 and then call getConfirmedTransaction on the returned signatures
is there a way to get the confirmed transactions for a pubkey ?
Hi, does anyone have any experience of the logsSubscribe rpc function (https://docs.solana.com/developing/clients/jsonrpc-api#logssubscribe) not triggering when you pass "finalized" as the commitment level? "processed" and "confirmed" trigger almost instantaneously.
thanks tyera
Yeah it looks like testnet works!
Worked for me. I do see the same issue on devnet.
doesnt seem to be throwing insufficnet funds now, thanks <@!213083996689661953>  🙂
ok let's give deployment on testnet a try...see if it's as borked as devnet...
https://explorer.solana.com/tx/6619hQXfSMo6Q4CHfywJeFr4Wb8QiAbbcvF8DNrwLMsLwiXw7Th7fTeu6qXBUCU9KVbbnwgKssitswGwA9yqY3G4?cluster=testnet
he was also trying to do some testing on devnet and testnet but cant deploy to devnet or airdrop to testnet, same issue 🙂
if you ping him on slack he can give you his address
I've also got Seb who needs some sol too
thank you 🙂
<@!213083996689661953> ^
one sec it's EDshWM3jBy2YUszMiFLAFLx3WkbtqR9An7JZzvg22R1P
Yes, I think I saw in a tds channel that someone has drained the testnet faucet. We'll need to see to that tomorrow, but in the meantime I can send you some testnet SOL to deploy. What's your address?
see this works fine
solana airdrop --url devnet 1
Requesting airdrop of 1 SOL from 34.82.57.86:9900
11.940007 SOL
real issue i believe is the rpc layer of both clusters needs to be rebooted i think
it defaults to your id.json in your config folder if you dont put in a recipient address.
yeah ive been using that with devnet to make it work
https://docs.solana.com/cli/usage#solana-airdrop
```solana airdrop [FLAGS] [OPTIONS] <AMOUNT> [RECIPIENT_ADDRESS]```
no idea if deployment works because i have no sol...will report back once i beg and steal some 🙂
so i cant use that for deployment either
$ solana airdrop --url testnet 1
Requesting airdrop of 1 SOL from 216.24.140.155:9900
Error: RPC response error -32002: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x1 [3 log messages]
Also it would appear airdrops to Testnet are dead
<@!585868308419444749> ^
Hey guys I've been unable to deploy to devnet...seems to be hanging on txn retries. I think RPC needs to be kicked.
Is Program account data private in any sense? Or are there any standard tricks for storing private data owned by a program?
but it seems it's not suited for public use right?
just found this: https://solflare-api.vgng.io/api/v1/mainnet/stakes/pubkey
Hi, is there any way how to get stake accounts for address? I didn't find any RPC endpoint


///////////////////////////////////////////////////////////////////////////////////////////////

How does Solana handle floating point? For example in ethereum there is no default  support for floating points
Is devnet down currently? I'm seeing `Transaction simulation failed: Blockhash not found` when posting a program
I can relate. done so much C++ programming that it just feels natural.
really o.o i just feel v comfy with C++ and Java and honestly the new languages I learned like Python is technically 'easier' but just doesn't feel the same yknow
If you haven't tried Rust before, coming from a c/c++ background I recommend you try it, very natural to transition to and don't really want to go back 😌
ill have a go at all these resources first and i'll get back to you if when i have further questions if you don't mind
i like how the resources for this is actually laid out quite easily to research unlikeotherchainscough
We have a very (VERY) simple c++ sanity test here: https://github.com/solana-labs/solana/tree/master/programs/bpf/c/src/noop%2B%2B
o shiet i realized you're the actual owner of that github repo
(esp. C++ if any lol)
any other good project contracts written in C or C++ that we can use as reference to study as well?
me too. any suggestions on what we'd need to change for C++?
i really rather not use C just because i'm biased for C++
We don't have an explicit C++ example
the docs.solana says C and C++ works, but so far i can only find C templates
I'm trying to find a C++ example though. still looking...
there's C smart contract example in the github repo. https://github.com/solana-labs/example-helloworld.git
and if so, can an entire SC be written purely using C++ to deploy on-chain or is Rust code required as well?
not sure if this is the best place to ask this, but i've only recently learned of solana and only began reading up on it. to aid my understanding, are smart contracts on this chain written using Rust or C++ rather than Solidity?
Seems like unlucky fixed after another deploy
I am just unlucky or there is some problem with program ?
I am getting `Error: Unable to find a viable program address nonce` on devnet even after redeployment problem occurs
I used to be able to airdrop +50 Sol in local. But I must have done sthg because my local wallet has a 500M SOL balance atm 😆
Isn't  airdrop limit set to 10 SOL ?
Hi Leonard, did you end up finding a solution for this ? Encountering the same pb 🙂
Can you make a dedicated discord topic?
The integration is still in progress. However, no exact ETA. Once it’s complete we will come out with docs for it and share them here. If you have any further questions you can always visit our Discord server: https://discord.gg/aSK4zew
tnx, I'll try.
something similar on solana?
Nevermind, I figured it out. Took a while to find the Tokenkeg program id
I'm not sure how the frontend is choosing the pools, but you can dig through the source code at https://github.com/project-serum/oyster-swap !
Sorry, I should have been clearer about this -- the `owner` that you're seeing there is actually the *program* that owns the account, which is always `Tokenkeg...`, so you'll need to deserialize the data in the account as an spl-token holding account, which has a *different* owner
To clarify, I don't have the mint ID, so I'd like to see all mints in the response.
The token lists just fine on Sollet.
Any way to get all SPL token accounts from an account, using the JSON API?
<@!539801435571748868> So they (serum) probably selects the one with most liquidity? E.g. if the one with lower liquidity gains more liquidity it can probably be used in serum as primary or I do not understand something right
https://solana.com/ecosystem/lunadex

where do i find the smart contract code for this dex? how does it work without a swap contract's help? looking into the code will be helpful
There are 154 token swap pools for Token Swap Program and fee account owner is almost always (TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA), so this would not work. Example: how does serum dex for RAY/USDC select EdFKkcb4G49SorBzGydGika49w3coNK5nZ134FvtxvVg token pool instead of NiCCDkNL1tKi4Y7Gmfk3mj3G3Eq5FjYcs5KqXdkcK8k...
Do you know someone who can use Chainlink on Solana? I can't find documentation
`    data: Buffer.from([vote])` this worked and vote being number `vote: number`. thanks
Got it, thank!
You can use the spl-token npm package and do it easily: https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L1311
That's a good question, you'll probably need to sort through them and assume the one with the most liquidity is the "correct" one, or use the one with a fee account that's owned by some expected address
You can find all of the `token` related code at https://github.com/solana-labs/solana-program-library/tree/master/token -- specifically for the on-chain program, you can look in `program`.  this is for ERC20-like capabilities. for ERC721, we currently advise creating a normal token mint and just mint 1 of them, but there's active development around there
Not yet, this is a ripe area for development!
The explorer doesn't give that ability at the moment.  If you use the CLI though, you can do `solana account ProgramExectuableDataAccount11111 --output-file my_output_file.so`
Nope, it gets a little tricky since you need to pass in all of the accounts at the top, but if you have a nice way of resolving all of that, it could be useful!
Ah, yes you'll have to use the associated token account program if you're doing token transfers from your own code.  the CLI and all that uses it underneath as a convenience
i will try that <@!740096814631485520>
I think you should send a buffer of uintarray in instruction data (for example use buffer.from to convert data into buffer) and remove "_" before instruction_data in your rust program.

i get a error
in client if i try something like this:
hello world example is only for one value

another question is, in this example i took it from hello world how would i access these two variable at the same time in client?
how to pass the value with solana-web3.js ?

problem is am not sure how to pass the instruction data properly so i have it in program, as if i use `msg!` to check if value is passed i am getting zero `[0]` so how would i pass the value properly into instruction_data?

and then i'm trying to check with if if value is 1 or 2

i know this is more rust question, but trying for few hours without success. i have simple entry point in program:
Hi , how to mint tokens with web3.js ?
Done!
Hi, I am building GUI for token swaps and I am figuring out how to how to get correct token swap pool for a  token pair. I am using SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8 (Token Swap Program) and the RPC API getProgramAccounts, but I receive more than one token swap pool for the same token pair.
hi Im new here but have been working on Ethereum Smart Contract for a while. where can I find the source code for ERC20 and ERC721 equivalent on Solana?
It sounds like you might need to upgrade some software. What version local validator? What version solana-web3.js?
I'm connected to localhost and trying to send a tx, using connection.sendTransaction() in web3.js passing in 'singleGossip' as preflightCommitment. I get recent blockhash error, invalid params "finalized". Anyone know how to fix?
Are there any instances or libraries for creating private transaction capability with Solana? Exchanging information privately like Zcash or monero?
Use Rust v1.50.0
When I upgrade to solana 1.6.4 running cargo test-bpf fails in this way:

```
error[E0658]: use of unstable library feature 'slice_fill'
   --> /home/mosh/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-bpf-loader-program-1.6.4/src/lib.rs:571:18
    |
571 |                 .fill(0);
    |                  ^^^^
    |
    = note: see issue #70758 <https://github.com/rust-lang/rust/issues/70758> for more information

error[E0658]: use of unstable library feature 'slice_fill'
   --> /home/mosh/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-bpf-loader-program-1.6.4/src/lib.rs:670:59
    |
670 |                 close_account.try_account_ref_mut()?.data.fill(0);
    |                                                           ^^^^
    |
    = note: see issue #70758 <https://github.com/rust-lang/rust/issues/70758> for more information
```

My dependencies (the ones that break) look like this:

```
[dependencies]
arrayref = "0.3.6"
solana-program = "=1.6.4"
thiserror = "1.0.23"
borsh = "=0.9.0"
num-traits = "0.2.14"
num-derive = "0.3.3"
spl-token = {version = "3.0.1", features = ["no-entrypoint"]}
spl-associated-token-account = {version = "1.0.2", features = ["no-entrypoint"]}

[dev-dependencies]
assert_matches = "1.4.0"
solana-sdk = "=1.6.4"
solana-program-test = "=1.6.4"
```

It works fine for v1.6.1.  Any ideas on how to fix?
IIRC that's just a bit vector of whether or not a slot produced a block
Or slot_hashes
What is slot_history::SlotHistory for then? Is that not accessible, or simply limited?
No. Programs only have access to present account state, not anything related to transaction history
Does an on-chain program have access to all prior slot and blockhashes? For instance, if the program was given a blockhash could it look up the slot it was in, and traverse through ancestors?
Or the reverse, given a slot, and find the first prior block, and traverse ancestry?
or thats hasnt been implemented yet, to make it whatever you want
or its custom
do you add 9 0's to all spl tokens minted?
probably because its early as hell
it wasnt as intuitive as i thought
cant wait for other people to see my additions to the readme to they can airdrop their own token
awesome, thanks
Yes, open a pull request at https://github.com/solana-labs/solana and someone will review
<@!213083996689661953> after i compile all of the notes to add to the README i just commit it and hope they merge the commit to master right?
or at least view it
So how do I dump a contract on Explorer?
Three different approaches here

* https://github.com/solana-labs/solana-program-library/tree/master/stake-pool
* https://github.com/project-serum/serum-dex/tree/master/pool
* https://github.com/project-serum/stake
Are there any open source staking contracts for SPL tokens?  Thank you.
as i am getting empty instruction_data when i try to see what's inside:
`    msg!("formatted {}: {:?}", "message", _instruction_data);`
`  const instruction = new TransactionInstruction({
    keys: [{pubkey: greetedPubkey, isSigner: false, isWritable: true}],
    programId,
    data: // what is the correct way to pass a number here?
  });`
how to properly pass the transaction instruction data with solana web3.js
is there any sort of linked list implementation for solana?
Sound great! But when I simply change our token transfer instruction from the user's associated token address to his SOL address, the tx failed. Does any change needed to use this feature?
ah okay
Not directly, as a program instruction can't "search" for accounts.  It only has access to the accounts it was provided
https://spl.solana.com/token#finding-all-token-accounts-for-a-specific-mint

is this possible to replicate on-chain
cool! <@!267610913773715456>, I can't edit your message in there so could you please add a link to https://github.com/crewshin/solana-swift under "Community Contributions" / "Swift"
I'm maybe 40-50% done... but could always use a little help if any swift devs come across it
Yeah
ah, you mean the content in <#763249718339567626>?
Guess I’ll try again. Sorry for the noise, but can someone add my sdk to the dev-resources list? I'd love to get some more eyes on it and possibly drum up some dev help https://github.com/crewshin/solana-swift
A solana program instruction would typically write its output into an account, so your front-end sends transactions and when confirmed loads the affected account over JSON RPC, reads it and figures out what to do next
We should just replace the ATA docs with that
hahahha
It's pretty idiomatic to have an account for each user, so use the blockchain account address space itself as the key for your map.  <@!417857235079790592> expressed this pattern succinctly with https://discord.com/channels/428295358100013066/517163444747894795/831253258382082099 🙂
2. whats with encoding and decoding of hexa strings? when you check on ethereum blockchain for specific transaction, you have encoded events and hexa, then you can decode that into human readable values back in your client. how does this work in solana?
1. how do we mimick solidity's mapping functionality where we can store some values for specific address or counter for specific uints? for instance in ethereum you can do something like `mapping(address => uint256)` or `mapping(uint256 => uint256)`. what would be best practice to achieve this in solana?
2 questions
ok i am now in the middle of development of some advanced program.
Cool idea, we could do that (soon) with SPL tokens but not with native SOL I think
So it would be possible to acquire a large number of tokens but only for an epoch
Would be interesting to have tokens that expire
If the current faucet rate limit doesn't work, we'll have to make it more fun.  Make you solve a math problem or something
Except for persistently dropping 2% - 5% more blocks than the mean.  Grrrrr ....
Just moved to mainnet, everything went swimmingly 🙂
I was so impatient that in the end I didn't even wait to see if I could get a leader slot
you'd be surprised
Didn't figure I'd get much traction on a Sunday afternoon
Sorry I was impatient 🙂
Yeah, in that case people should just ask for some SOL
The faucet is so slow as to make that impractical.  I had a script that was dropping me tokens back when there was a lower limit, but it still took forever to get to 1000.
(if there was a good reason to do so...)
When I was testing my new validator on testnet, I wanted SOL there just so that I could get slots and make sure that my validator was behaving properly when leader.
The number of slots per epoch in fact is currently fixed at 432000, but it could change in the future
Sorry I mistyped before, I meant to say "number of slots in an epoch is not fixed".  I have corrected my typo.  Thanks ...
reminder: testnet SOL is worthless, taking it all just bothers your neighbours
🍖  testnet faucet has been replenished.
There's at most 1 block generated for each slot.  Slot is the time interval in which a block _may_ be produced by the leader of that slot
Hi, the rpc call getAccountInfo returns the slot in the context but is there a way to get the slot from getProgramAccounts? Would like to know which slot the data comes from (since the data can change).
So it appears that the number of slots in an epoch is not fixed ....
guess it wouldn't include that if the number weren't variable
I see that RPC getEpochInfo returns a 'slotsInEpoch'
Hm I think I can answer my own question
Or can this change?
Hi are epochs guaranteed to be 432000 slots long, now and forevermore?
do i just find it on github and fork it
cool, yea id love to contribute
Yes, and to be honest, solana-tokens hasn't had much external use. We love prs, if you care to contribute what you've learned.
I think the spl-memo program can do what you need here: https://spl.solana.com/memo
how is someone supposed to know it needs another db path? is it just because we are still early and there isnt enough documentation
woohoo
it worked
Or give specific attributes that are not just value to an SPL tokens wallet/public id
I have a question I can't find anything in docs about. Is it possible to record metadata or give unique attributes to SPL transactions?
<@!453347985628200960> that makes sense thanks
If you actually do want to do a second distribution to the same set of recipients, again just use a different `db-path`
will try that
thanks
ahhhhh that makes a lot of sense
It most likely means you're running the same distribution a 2nd time, and preventing you from double-spending. However, I recommend using a different `db-path` for each distinct distribution (set of recipients).
These are upgradeable: https://docs.solana.com/cli/deploy-a-program ( `solana program deploy`).  Web3.js or `solana deploy` uses the non-upgradeable program.  The upgradeable loader allows you to redeploy to the same account and is very helpful for rapid development or multi-sig program upgrade cases
hey jack, what does that mean non-upgradeable?
<@!397190811239841802> The loader used by web3.js is the non-upgradeable loader fyi
or is it interchangeable
the address you send money to
isnt the public address generated by the public key
why does solana refer to the public address to the pubkey
when i sent out a batch to airdrop it had the finalizing loading then it went away
any idea what this means <@!213083996689661953> <@!585868308419444749>

thanks <@!213083996689661953>
its working like a charm
going to do this airdrop in batches
thanks again for the help!
ok, thanks
thank you
yeah, code is here: https://github.com/solana-labs/solana/blob/master/web3.js/src/loader.ts#L59
equivalent to solanas cli command for deploying the program?
`  await BpfLoader.load(
    connection,
    payerAccount,
    programAccount,
    data,
    BPF_LOADER_PROGRAM_ID,
  );`
in web3.js is this
<@!445425471027544095> can you just confirm
more seriously, it's this way for better parallelization: little bitty accounts that can all be independent from each other won't block each other in the execution pipeline, so higher transaction throughput
starts here
We take decentralization seriously 😉
don't know how to link but i got a answer for `getMinNumSignatures` above from <@!311962918511968256>  if you just search `getMinNumSignatures` anyone who is interested a lot of interesting conversation how are these calculated
A meme I made about solana development <:KEKW:829674222820917298>
i will read this thanks, was just wondering if i could find why is bpf loader better thing than what ethereum is using. if comparable at all.
Wen testnet tokens coingecko page
and bpfloader just load existing program into an instance
cool
` await connection.requestAirdrop(account.publicKey, lamports);`
account doesn't exist on blockchain until there was some funds dropped into it
ok i see
?
which bit in hello world executed equivalent of `solana program deploy`
and also load. i guess this is deploy?
why are we using `getMinNumSignatures` ? like isn't there only one signature for deploying program?
`  export class BpfLoader {
    static getMinNumSignatures(dataLength: number): number;
    static load(
      connection: Connection,
      payer: Account,
      program: Account,
      elfBytes: Buffer | Uint8Array | Array<number>,
      loaderProgramId: PublicKey,
    ): Promise<boolean>;
  }`
i'm looking at hello world exampel there are 2 bits that i am not sure about regarding bpfloader
It's a true sign of decentralization when we lose control of the value of testnet tokens
lol damnit, that's not the way this is supposed to go
i've put a bit in, but now that we've established scarcity, i feel like it has value and i want to hodl it.
I'll top it off after the new rate limiter is running
🐉
it's testnet, don't you have millions?
We're working on a better rate limiter, please hang on all
Already gone!  🍪
sent 5 😉
Idea!  On a rate limit, the faucet returns a transaction that transfers 1 SOL back into the faucet


///////////////////////////////////////////////////////////////////////////////////////////////

Let's go to <#694949720644124762>.  This has nothing to do with development
how long can this remain unsettled for?
I think this is an issue for https://discord.gg/zxPsXcB
And the second OXY/USDT is same as OXY/WUSDT. I suppose that it is an error
Hi guys!

I see two not deprecated markets with name OXY/USDT. What is the difference between these markers? Is there an error?

https://github.com/project-serum/serum-ts/blob/master/packages/serum/src/markets.json
Aw damn rookie mistake I'll add some more SOL and try again
Check the "Program Log" section at the bottom of https://explorer.solana.com/tx/3VhQWXd7uZ4HARxAqPJ1iZP6kyP2uPb5bU6uzvPWzNVaGKac3cRWMfPxfPmSfcu1JuvvPDTHYg4npQ96fDfANxxx for instance
Looks like you need more SOL in your main account
Anyone know why my SOL balance won't settle? Anyone having similar problems? Here's my wallet:  9PkWK3ZvTdVzg39jStA9YqyNSKSFDmxrgWxndwisdanN I have about 69 sol unsettled
Ahhh I see what you mean here, I’ll try some stuff
https://explorer.solana.com/tx/eNzJJbNseQfR68Cpwwcp57QtK9Ri4HQMnaiw6bM9ueogwtiY2boY38G8mzCkgrVyBFD2n3txykLwhKX2G1L5ZeT?cluster=devnet
what I thought I'd done to it since it worked last week!
I’ll try
`Fuct`....noice
`5i5YRGEPgs8zqZ447KXjC4fVW4475C7cx4rmDCZwFuct` thanks! 🙂
yeah but I think the front-end won't forward the port.  But prove me wrong please 🙂
Yup it’ll be done in the backend
even behind the GCP http LB?
<@!743771050793238528> - if you need a couple devnet SOL in the meantime, please provide your address
I can do it with haproxy for that call
ah, same!
```
$ solana -ud airdrop 0.01
Requesting airdrop of 0.01 SOL from 34.117.245.227:9900
Error: connection timed out
```
<@!213083996689661953> - I'm thinking it's time to change `solana airdrop` to use JSON RPC instead of assuming :9900 on the same host as the JSON RPC IP.  WDYT?
With devnet.solana.com a http/https load balancer now, there's actually no way to redirect :9900 to a backend (cc: <@!804350183105363980> for FYI)
brilliant, that works - ta. still getting timed out on airdrop though, balance seems to work fine
devnet.solana.com is now a load balancer so it won't respond to gossip (it did in the past but this was undocumented)
Try `solana-gossip spy --entrypoint entrypoint.devnet.solana.com:8001`
nor can I request an airdrop
```$ solana-gossip spy --entrypoint devnet.solana.com:8001
Failed to contact cluster entrypoint 34.117.245.227:8001: connection timed out```
It's pingable and I can access it over 80, but I can't connect to gossip
maybe try without the port number at the end
Hi there, is devnet currently down? I don't seem to be able to reach devnet.solana.com:8001
anchor is the best
it will handle all stuff for you
https://project-serum.github.io/anchor/getting-started/introduction.html
BTW use anchor
No worries we all start somewhere
Thanks for your patient, I'm new to Solana development
I see
so if you send sol to staking and you send all of it then yea your account will be deleted
only program accounts need to pay rent if you move SOL from this account it will be deleted
So if my contract interacts with staking, would it have to consider rent? Or is rent ignored across the board right now?
So it seems like staking would also cause rent payments
I'm staking my personal SOL, and I saw that there is rent to pay since (from the docs):

Accounts on Solana may have owner-controlled state (Account::data) that's separate from the account's balance (Account::lamports). Since validators on the network need to maintain a working copy of this state in memory, the network charges a time-and-space based fee for this resource consumption, also known as Rent.
what do you mean ?
What if the contract interacts with staking?
sums right now are super low so no one bother to play with it
Most of contracts just make accounts rent exception
Can someone explain how "rent" works? Is this something I need to explicitly handle in my smart contract?
Hey all I have recently received  'Internal Error: Subscription refused. Node subscription limit reached' is it individual or Node is just overloaded with requests? Its seems to happen to 'https://solana-api.projectserum.com' but not for 'https://api.mainnet-beta.solana.com'.
Got it thanks:)
Nope just localnet
Got it. Do you mean run localnet or are you saying a can run my own devnet node and airdrop from that? If it’s the ladder can you point me to docs on specificying nodes to request airdrop from?
oh we are kinda stuck on 1.2.3 for now but thanks for info
I believe the test validator tool uses your default cli keypair as the genesis mint, so that's more likely why you have 500M SOL 😉
Ouch, sorry you have to resort to that hack. There has been an improvement to how the browser shim is bundled in web3 in v1.2.5 that might help with this
that's right
Cool
Oh I see, whenever rent is collected, right?
accounts are updated periodically
What do you mean? We don't have slots in AccountStorage from previous epochs?
Is there a remix like online IDE on which one can develop rust contracts easily?
https://docs.casperlabs.io/en/latest/dapp-dev-guide/solidity.html

Has anyone tried this? I'm a noob to rust. But I've been coding in solidity for a while. I have a solidity smart contract which I want to deploy onto solana chain and I see solana doesn't support solidity yet. 

What is the best way to get a solidity dapp up and running on solana?
try local node
Public nodes are overloaded
Receiving timeouts on the cli as well
`$ solana airdrop 1 4jWpUsWuoJ2UtVkbA342fRrQs36nfNcuMC2qyrYKzrop --url https://devnet.solana.com
Requesting airdrop of 1 SOL from 34.117.245.227:9900
Error: connection timed out`
`"@solana/web3.js": "^1.2.6",`
Hey all, has airdrops on devnet been finicky recently? I consitently receive `Internal Error` for an airdrop of 50k lamports the past few days. Paste: https://pastebin.com/raw/wMTP58WK
I wrapped src in Buffer and it seems to fix problem ```    if (!((Buffer.from(src) instanceof Buffer)
          && (span === src.length))) {
      throw new TypeError(nameWithProperty('Blob.encode', this)
                          + ' requires (length ' + span + ') Buffer as src');
    }``` but still this is happening a lot for me and its kinda hard go around since i use different packages anchor,spl ...
There’s only as many slots in the system as in an epoch about 400k.
Yes exactly -- we typically store the `u8` seed in our solutions
console.log ```   console.log(fv)
          console.log(b)
          console.log(offset)
          lastWrote = fd.encode(fv, b, offset);``` seems all right
Again i got hit on 1.2.3 web3 with ```TypeError: Blob.encode requires (length 32) Buffer as src```
Also, is creating a new file every 400ms a good idea? 

However, I guess this process is running in the background, and also we know the size of the data we want to commit to the `AppendVec` by that point, is that correct?

It just seems counter intuitive that one would potentially want to let the OS manage 10s of millions of mmapped files. However it also implies that most of such files would be stale and not in the OS mmap cache.

I guess the equivalent status in a B+tree persistent DB, e.g. LMDB, would be one file per page.
Ooh, I see. I guess we can just clean up stale `AppendVecs` by deleting the file too, rather than resizing and deleting one section of a big file... leading to defrag issues as you mentioned...? I just didn't realise it was per slot, rather than per epoch or something... 

However, 50k TPS per second at 136 + epsilon bytes ~ 7MB write throughput/s. This is far less util than the sequential write throughput of most good SSDs?
If you have a single AppendVec then defragmentation will be very expensive
No, each AppendVec maps to a single file
Oh wait, can multiple `AppendVec` use the same `Pathbuf`? What happens to locks then...? I don't get what's going on here... Shouldn't we have a single global `AppendVec` and multiple `AccountStore` versions in memory to version the storage for different slots?
Hmm yeah, but I guess compared to the (bare?) minimal 32 byte key and an 8? byte token value for a simple token account that's a factor 3 overhead. Which goes back to your point that one should be mindful of the overhead.
136 bytes I see
there's a test test_store_overhead
it's under 256 bytes
I suppose there is a lot of storage overhead: `StoredMeta`, `AccountMeta`, `Hash`, besides the data.
It stores an AccountStorageEntry per slot
Hmm, a little digression to help me understand, how come we maintain multiple `AccountStorageEntry`s each with their own `AppendVec`? I just assumed that each of these would be several hundred GBs...
There is a rent per account byte. There is no fee charged for account access although we are considering one.
You want as few as possible, but only if it means you don't take a big hit on the size for each one.
multiple smaller accounts is generally preferred, although you can go too far in that way as well.
indexing, yes
could I ask what's the overhead of storing 256 accounts of 4KiB each, or even 2048 accounts of 512B each, versus one monolithic account of 1MiB? My sense is, not much, except the indexing overhead? Further, given the example of the SPL program, it seems tiny accounts is the direction preferred when the storage access pattern is assumed random and individually self-contained?

May I ask then if there is protocol-level incentive for creating smaller accounts? Is the account update fee based on the size of the total account or just the size of the bytes updated?
ah ok, yeh the best solution seems to be to store it in the account data itself. 

When asking the question initially i didn't fully understand about the seeds used to create the program controlled address. It appears you have to reuse the original nonce that was used to create the program controlled address
Is this the group to discuss Solana apps? I'm interested in brainstorming an anonymity service.
By "nonce", do you mean the extra `u8` that allows you to derive a valid program address?  It's up to you how to manage, you have a few options:
* have clients pass in the `u8` nonce / bump seed from the outside -> more for the client to do, probably need to use `find_program_address` by the client
* store it somewhere in the data of your accounts -> more state to manage
* use `Pubkey::find_program_address` with the seeds that you want, and just use whatever comes out first by convention -> simplest, but `find_program_address` has the potential to eat up compute power if it has a hard time finding a valid point
And, yes the updates are stored no matter how many bytes are touched. There are caching mechanisms though such that accounts which are stored often do not incur disk access for multiple updates.
The accounts system only knows bytes, so it's up to the contract to serialize data in whatever way it wants.
Thanks Leonard, I ended up realising I had airdropped 500M SOLs to my wallet 😆 
I either maxxed it out or the command was working.
With regards to this, since an SSD page is typically on the order of 4KiB ~ 16KiB, I was wondering why we don't let single account data be further shredded into pages of that size. This way, we don't waste any write capacity as well as CPU cycles doing `disk -> kernel buffer -> disk` ops.

To implement this practically, one ought to have logic that tries to pack small writes into SSD page-sized chunks, and then pad remainder with zeros. Then every account greater than a certain size must maintain a `Vec` of offsets into the mmap.

I guess this approach only makes sense if we assume that data collocated across an account of size > 16KiB do not have strong retrieval correlation, while not being overall very hot, in the sense that all of the data is buffered in memory by the OS or by `AccountsDB`

This is especially the case since the tx exec cost does not include the total size of the account whenever a modification is made. So there is no innate incentive to keep the account sizes small and thus disk writes low.

I think the specific tradeoff here is additional complexity (vec of offsets rather than single offset) which results in constant factor higher memory use v.s. write saturation and CPU cycles wasted on data copy.

Unless `SStore` cost is dependent on account size already?

Maybe I'm mistaken and one ought to be aiming to write in block-sized, rather than page-sized chunks... 

However, I suppose that accounts also act as the unit of prefetching. The above proposal would increase random reads if an account is sharded across multiple pages, even if it may aid write performance.
does the nonce for this transaction have to come from the client or is there a `recentblockhash` or similar function on chain?
I'm trying to get a program controlled account (PCA) to sign a transaction for cross program invocation (CPI)
Thanks! That was very helpful, I'll look into anchor as well as actual contracts to see how they manage the storage
Good questions, I'm not familiar enough with the accounts db to speak the tradeoffs there but the strategy you describe is essentially how all solana programs work. For example, in the SPL token program each token has a single "executive" mint account and many token "storage" accounts which track each individual balance (using your lingo). And so yeah, with this approach programs are basically sharding their state to enable higher throughput through parallelization. And since transactions specify all the accounts a program invocation is going to use, the runtime can prefetch all the storage a program is actually going to read / write before executing it.

Until recently, Rust data structures were hand packed into binary data vectors by programs themselves to keep serialization overhead minimal. https://github.com/project-serum/anchor provides a nice abstraction though which packs state according to an IDL.
Hi could I double check that the entire account data page (up to 10MB currently?) is written into the `AppendVec` MMap for every modification, no matter how small, is this correct? Can one also resize the account storage by the same append at MMap pointer mechanism? Isn't it somewhat restrictive to limit the account storage to 10MB, and also wasteful to have a max page size of 10MB? Is there a reason why the 10MB page size limit is chosen?

Further, I am wondering how the storage defragmentation scheme can run in the background without affecting the runtime performance?

Would a good strategy in designing a large application that requires a lot of persistent storage, such that `modification rate << storage size` be one that has a main "executive" account, and many "storage accounts" that are essentially pages, and we choose a page size < 10MB, maybe something like 128KiB, or even the disk sector size ~ 4KiB?

It does appear to me that a non-native token e.g. stablecoin would have the above requirements: for instance 100 million accounts @ 512 bytes/account =~ 50GB.

Is sharding across multiple sub-accounts something that is automatically negotiated when compiling a smart contract, or does one have to manually manage the accounts as the storage increases?
Further, is there any documentation that mentions how the Rust data structures in a smart contract map to storage?
Sorry, I thought you were referring to a different issue. I didn't manage to solve it, I just switch from using Docker image to `solana-test-validator`. My experience suggested that `solana-test-validator` seems to a lot more stable.
will definitely ship 1.6.5 tomorrow, just one more thing needs to land before we can ship that release
just like a full blown validator setup: https://docs.solana.com/running-validator/validator-start#system-tuning
to make run.sh work, you just need to increase number of open files though
Sorry again. Thanks 😀
ok, I saw that you sent this message early. I wasn't sure if it was better to find a solution to run the run.sh file or not
yeah, sorry <@!740096814631485520>, I should have suggested this ^ it's much easier to use
Why not use `solana-test-validator`?  It actually explicitly avoids that particular issue that `run.sh` has
Sorry to come back on this, but when running ./run.sh, I get the following error:
I think <@!306185268879425538> was referring to another issue? But anyways, the program test issue should be fixed in the next v1.6 release which should be out soon
I am not sure when the latest version will be release on `crates.io` though, maybe just use the github url as a temporary solution.
I think <@!466984915376799748> pushed a fix here: https://github.com/solana-labs/solana/pull/16469 So it should work now
https://github.com/solana-labs/solana#4-run-a-minimal-local-cluster
Is it possible to run own node on a Macbook? Is there any tutorial?
np, have fun
<@!466984915376799748> <@!585868308419444749> thanks to both of you
Ok, I will come back to you if I have any issue.
What you're really optimizing here is transaction fees and writeable account loads.  Do as starry says and fill a TX up with transfer instructions
So no way to improve the instruction batching?
Because the runtime runs transaction-level instructions and inner program instructions with a similar code path
Thanks! Why do you think that the throughput would be the same?
What do I need to do to run my own node?
you'll get more reliable results for benchmarking
Also, for this kind of load testing, you should run your own node
No problem, it was just a little confusing. You may already know this, but note that on Solana, each transaction can include many instructions. You can think of them as "meta" transactions. So in your case, you don't need to use a program to batch these instructions, they can be added to the transaction itself. I don't think throughput would be much different though
Yes, sorry if I used the wrong names
Got it, it sounds like you are trying to increase "token transfers per second" rather than TPS (transactions per second). Your transaction is a batch of transfers*, not a batch of transactions
The goal is to use solana in a project where people can exchange token. Solana seems fast but I am still learning it. To increase the TPS, I was planning to batch transactions and use the solana's sea level.
why not send a transaction for each transfer? why are you batching?
No, just increase the tps
what's your end goal here? mass airdrop?
Yes, I noticed it 😅  Do you think there is a way to improve the batching other than splitting the instruction?
<@!740096814631485520> note that the compute limit would likely prevent you from doing more transfers even if you were able to stuff more accounts
```
Program GMv1cnqxrAHQmvJRsZTH92jD1YiTkZTJomoE3qiZqaXE consumed 171918 of 200000 compute units
```
https://explorer.solana.com/tx/riDQkKAn4AbEDHVKewAo4z1NzCh6cCbM41BAhHes637VNmzNerxDPdVyttMDryStMYTjpNbrkzg5foz1Q6hx4Ck?cluster=devnet
No, doing transaction and adding a memo transaction.
You're stuffing transactions into a memo instruction?
Thanks for the response 😀
The transaction are simple token transaction
I am currently trying to test the limit of TPS with a memo that I can do on Solana and before trying to apply the solana's sealevel using Anchor (I don't know yet how I will do it), I am trying to batch multiple transaction. I am currently able to do a batch of 22 transaction with one memo but I would like to improve it.
<@!740096814631485520> maybe you could describe more of what you want to do and why you're batching so many accounts, we could give you more detailed pointers
It's not exactly a clean example
Program deploy is the closest thing I can think of
Thanks! 🙂 
Are there examples of doing so?
You maintain a state machine in an account that's driven by sub-instructions that implement the too-large instruction you want
what do you mean by drive state on chain?
No.  You need to split the instruction up and drive state on chain
Is it possible to overcome the "packet data size" in a transaction to increase the instruction size? I am trying to do token batch transaction in a rust program but I am limited by this packet data size when confirming transaction. Are there examples of token batch transaction including more than 50 accounts?
<@!445425471027544095> it's fixed
oh awesome, thanks for sharing!
Oh the lb died for some reason uhmm
<@!804350183105363980> - devnet's RPC endpoint seems to be in trouble ^
https://devnet.solana.com/ is giving 403 errors
You can get a deterministic, verifiable build by building with `cargo build-bpf` inside this docker image https://hub.docker.com/r/projectserum/build. If you're using `anchor`, you can also run `anchor build --verifiable` and `anchor verify <program-id>`.
is it possible to do everything without linux?
haven't tried that yet
i see cli is made for windows as well
what is the status of developing on windows? currently using wsl on windows and compiling and deploying on ubuntu
sounds good, thank you for your response
not right now, but there's some work in progress to validate programs, since that might become an issue, as you're pointing out
so there would be no way to check if the contracts you are sending to are legit.
Ah, no you won't be able to -- we don't have the ability to check all of that just yet
but wont that just be a compiled file? you cant see the code
If you visit the Chainlink Discord, look for the #solana-support channel and you should be good
ah okay that would be it. thanks!
Runtime will pass you an `AccountInfo` corresponding the to queried address.  You deserialize that `AccountInfo`'s `data` field to an SPL Token `Mint` and access it's `decimals` field
I'm not sure I understand.  You'd be doing the querying from your own instruction's code
sweet. what instruction or w.e. would i need to call to get the decimals associated with a token mint?
So long as you pass the mint's address with the instruction's account list, yes
is it possible to read the decimals of a particular SLP token mint on-chain?
Thanks <@!445425471027544095>
For SLP token balances, do decimals indicate functionality similar to ERC20 decimals? Ie if I have 0 decimals and a balance of 1000 I would have 1000 tokens, but if I have 2 decimals and a balance of 1000 I would have 10.00 tokens?
https://devnet.solana.com or http://devnet.solana.com is the correct URL for devnet
(although the undocumented :8899 worked silently before we added a load balancer to devnet)
Is there something wrong with `devnet`, today?
Seems like `devnet.solana.com:8899` is not reachable... Getting `timeout` errors
Is there any recommended method for using floating point operations, or say special floating point libraries
Thanks
Given the usual precision caveats 🙂
After recent tests floating point use seems to be fine but more costly than fixed point operations


///////////////////////////////////////////////////////////////////////////////////////////////

nw - thought it'd be helpful to keep you guys updated
It'll be slow for a while, I'm on it
just an update - still getting rpc errors for requests (locally)
It's back up again
we're in a chat (TG) with stakeconomy, providing them updates wrt load
That explains it
<@!445425471027544095> <@!804350183105363980> we are live right now btw, possible that's contributing to the load
Some RPC issues atm, will be fixed in 10
works for you?
I think it's down?
https://devnet.solana.com/ gives me 502 error
wdym?  It's up
any eta on devnet being back up?
Connection does not seem to default to sthg long enough.
N.B: You don't need to anchor build. Js dependencies should be sufficient.
There you go: https://github.com/Standaa/anchor-playground/tree/bug/mint-concurrency
SPL token JS v0.1.3 shouldn't be using recent commitment anymore
You can pass a commitment when creating the Connection class. But this is still pretty strange, something isn't right here. If you can share a branch to some code we can take a look
devnet/testnet close to unusable
For me localnet is perfectly fine and i dont need any sleeps
I got to the bottom of it and I am quite surprised as to what the root cause was. The following code works:
```
  const collateralToken = await Token.createMint(
      connection,
      userAccount,
      mintAuthority,
      mintAuthority,
      8,
      TOKEN_PROGRAM_ID
    );

    await sleep(40000);

    const mintInfo = await collateralToken.getMintInfo();
```
It appears it takes a while before my local cluster has registered the mint. I don't understand why this is the case. Afaik I cannot pass commitment options, so the commitment has to be too short.
It is not the first time I face such an issue and I find it hard to think about concurrency issues when developing on localnet, which I feel should be the fastest. Does laptop performance come into play ?
there a video of this, i see the mint transffer freeze thaw set owner burn approve revoke stuff im just a newb and a lil confused
so im trying to figure out how to make this token show up in my solana wallet hmm
code looks fine to me, if you can pinpoint where the error is coming from, that would be more helpful. Or if there's a transaction signature, that would be better
The code is pretty barebones:
```
  userAccount = await newAccountWithLamports(connection, 5e9);
  userWallet = new anchor.Wallet(userAccount);

  mintAuthority = new anchor.web3.PublicKey(
    "3SNSMUA8SR8Dg9VZiq441kgrpUQtcNZgoQPRXvP5ZS5h"
  );

  try {
    const collateralToken = await Token.createMint(
      connection,
      userAccount,
      mintAuthority.publicKey,
      mintAuthority.publicKey,
      8,
      TOKEN_PROGRAM_ID
    );

    const userCollateralTokenAccount = await collateralToken.createAccount(
      userAccount.publicKey
    );
    const collateralAmount = new anchor.BN(10);

    const info = await collateralToken.mintTo(
      userCollateralTokenAccount, // dest
      userAccount.publicKey, // authority
      [], // multiSigners
      tou64(collateralAmount) // amount
    );
```
mintAuthority is the public key to my local json wallet.
i made my erc 20 token now i want to make a bridge so folks can use solana instead of erc20... thats attached to my https://otoco.io/ wyoming corp
watching reading figuring out this tutorial
thanks much
might want to sign up for the phantom beta
and you won't be able to see it in metamask, metamask doesn't support solana
it's a bit manual still, there's a process outlined here: https://github.com/solana-labs/token-list
now that its minted,i want to name it and get ti listed in my sollet and my meta mask any other hints starry?
_sends a small midgeted aimal over to do your house cleaning_
<@!546872967586512938> https://spl-token-ui.netlify.app/#/ this site has a nice ui for creating new tokens. For the authority, you'll want to put your own address, have fun 🙂
anyone want to make a few bucks holding hand and walking me through this, im a little bit overmy head but i got faith 😉
its time i figure out how to make an solana token
okay i made an erc20
Fix here: https://github.com/solana-labs/solana/pull/16572 thanks!
right
<@!306185268879425538> are you sure that `Token.createMint` is the cause of the error? I think it's coming from somewhere else
you don't need to create an actual account for the mint authority, having the private key is enough
`Token.createMint` is creates a new mint account. Sometime after that call, I'm guess you're trying to create a token account but the mint is somehow valid
its not you need to create it
I am not sure what this means. Is the TOKEN_PROGRAM_ID which might be wrong ? Or the mintAuthority ? (I assume the mint Authority account is created automatically)
the code you shared looks fine
But as to why that's happening, I'm not really sure
That error means you are creating a token account with an invalid mint
for me seems all right
Is this mine code 😆
So I partially fixed it. A fork with a newer version was still linked to my project.
I am getting another error now though: `Error: Invalid Mint` for the following code:
```
    const testMintAuthority = await newAccountWithLamports(connection, 1e9);

    const collateralToken = await Token.createMint(
      connection,
      userAccount,
      testMintAuthority.publicKey,
      testMintAuthority.publicKey,
      8,
      TOKEN_PROGRAM_ID
    );
```
Any idea what could be wrong here ?
yep
Oh I see, it says `solana-keypair` instead of `solana-keygen`?
`solana-keygen recover "seed words"`
what you're doing sounds totally fine. Thanks for sharing the versions, if you have a branch with the error it would be much more convenient for me to take a look
do you mind sharing the command you are trying to run and the error you're seeing?
And i could get `solana-keygen recover` to work any tips ?
I think docs about Resuming a failed deploy are outdated `solana-keypair` does not seem to be part of CLI anymore
each SPL token got field decimals
hello guys, anyone knows why COPE (as example) must be trade without decimals, i mean, I cant sell `1.2` . is there a way to known beforehand what token can be trade with decimals or not? is there a property as `decimals` in ethereum that represents what i am looking for?
I am using the latest version of spl-token (0.1.3), alongside sol-wallet-adapter(0.1.8) and anchor (0.4.3).
Not sure what I am doing makes sense though. My token is a representation of a share in a pool. The state is kept in other accounts (a pool program account and a user account). Ideally I wanted the user to keep ownership of this token account. His state account is built using a derived address owned by the pgm.
Makes sense
Not yet, unfortunately. Hoping to get pagination and/or some kind of filtering in the future.
On the explorer is it possible to scroll all the way back to the first transaction at a given address? Right now you can click `load more` but to do that for a million transactions is a lot lol
Ah right`--"private"-rpc`
`--rpc-bind-address 127.0.0.1` is what ya want there. `--private-rpc` just doesn't publish the RPC port in gossip, but I can still port scan you or guess that you put RPC at 8899 and use it.
And/or just firewall it off
If you pass `--private-rpc` it will only listen on localhost
So I guess if my port is open ... maybe I should just use it, since I'm not preventing someone else from putting even more load on my validator than I was thinking of putting
When I built my validator I didn't even know/understand what RPC even was yet (with respect to validators)
Unless I configured my validator specially, it might be sitting there with an open RPC port just waiting to get DDOSd by someone :/
Although I just realized that
Thank you.  Slow is OK 🙂
No, you wont. It might be slow though
Am I likely to experience any throttling problem doing a 'getVoteAccounts' once per minute?
I'm developing something that periodically sucks some data out of the mainnet-beta RPC servers.  I could run it against my own validator but a) I didn't want to take the chance of adding unnecessary load to the validator, and b) I don't have the resources right now to run an additional non-voting node to act as my own RPC server.
ok
Can you change `-i` here to `-i''` (two single-quotes). https://github.com/solana-labs/solana-program-library/blob/9281b6e82899a02663c2adde1c361bd417bd3569/update-solana-dependencies.sh#L41
I _did_ just notice where the `-e` comes from
I'm not sure where that text comes from
Hi I have added the `patch` part, but it seems like it is not used, it says something like : `xxx was not used in the crate graph`, any thoughts?
Definitely more traffic than usual, especially from Asia.  We’ll probably add a instance over yonder tomorrow
I believe this issue was already fixed. Which versions of web3 and SPL token are you using?
how has performance of devnet been recently (after the new nodes, lb)?
thanks for the help
ok
Can you reset your working tree and rerun the script with `bash` ?
It doesn't here
No idea
right, so why does it generates the `.toml-e` ?
If  the `.toml` are patched, then 🤷‍♂️
I'd just delete the `.toml-e` ones
so what should I do 😂
Looks like openbsd ksh's set is posix compliant
I meant the master `Cargo.toml` is updated, but the sub directories are not.
yes
Are the pre-existing `Cargo.toml`s updated?
I checked the generated files but it seems to be the same as the one that is there previously...
I am using `zsh` on mac
The only `-e` I see in there is `set -e` 🤔
<@!287924636493152257> what shell do you use?
Hrm... actually I don't see where that would be the case
It's probably just `sed` backups
No, it's not the intended behavior, but assuming those copies look like correct manifest files, probably you could just do this as you said
Right ok, so that's not the intended behavior...
It should just edit the current Cargo.toml files (bumping the version of solana dependencies to v1.7.0). If it generating new files for you... might be something shell related?
Oh I meant after running the `./patch.crates-io.sh ../solana`, it generates `*.toml-e` for all the sub projects, do I just change it as `*.toml` ?
Sorry, I don't understand your question
So this commands generated all these `Cargo.toml-e` and then I just them as `Cargo.toml` ?
I see! Many thanks! This is smart
We include a script to patch all the solana dependencies in your `solana-program-library` repo to a local copy of solana: https://github.com/solana-labs/solana-program-library/blob/master/patch.crates-io.sh
So quickest would be to clone a local copy of solana, and run that script, eg:
```
git clone git@github.com:solana-labs/solana.git
cd solana-program-library
./patch.crates-io.sh ../solana
```

Alternately, you could run the script with a bogus path, and then point all the generated lines in the workspace toml `[patch]` section at `git` instead of `path` https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories
Hi I am wondering how can I upgrade the `solana-program-library` repository to temporarily use the latest version of solana(`v1.7.0`) in Github?

I will need some change that is only present in `solana` `v1.7.0` however, I am not sure how to do it effectively since there are so many `Cargo.toml` files that are in the mono repo and it seems like only changing the dependencies in one `Cargo.toml` that I care about is not sufficient since it causes version conflicts for `solana_rbpf` ( `v0.2.7` v.s. `v0.2.5`)
It's just the overloaded devnet RPC server I think
just for my understanding, are these certain network conditions particular to devnet or something we can anticipate on mainnet-beta as well? this tx did resolve after about 3 min vs usually <20s
devnet is taking a beating.  solana-test-validator is a great way to develop locally fast though
Lost, we don’t reprocess them
yeah it's taking me an insanely long time
anybody else finding it impossible to deploy to devnet
(the program does deploy, it's only when calling it that it fails)
solana -V gives me "solana-cli 1.5.19 (src:127e7407; feat:1160251324)". Thanks for filing the issue.
does this mean that logs will appear for https://explorer.solana.com/tx/NBky4WNwzLAHpp43zqKq6Lq4La8GSPvAZcvAniZv1W5vMvkPJctsFuV9mbssxvrvXc5hWWsRWkhkvL8837zSp6J?cluster=devnet or are those lost?
yep, np
great!
thanks for the heads up
makes sense
Fixed!
the new node has the same config as da
<@!804350183105363980> - `service-env.sh` on `dw` is missing `ENABLE_CPI_AND_LOG_STORAGE=1` as well.  I'll back away now 🙂
`da` is ok looks like, so devnet will have logs until the explorer falls back to bigtable
I'll enable
`warehouse.sh` on `dw` is missing `--enable-cpi-and-log-storage`
<@!804350183105363980> do the new devnet LB backends pass `--enable-cpi-and-log-storage` ? ☝️
<@!147971603156828160> Not sure, <@!383348505491668993> do you know why the above transaction has not associated logs in the explorer?
they don't show up for this tx: https://explorer.solana.com/tx/NBky4WNwzLAHpp43zqKq6Lq4La8GSPvAZcvAniZv1W5vMvkPJctsFuV9mbssxvrvXc5hWWsRWkhkvL8837zSp6J?cluster=devnet
<@!147971603156828160> Do you have an example?  I see them here for a recent token transaction: https://explorer.solana.com/tx/47Mw9y81sxWcSDR3iHkt1qUchCEEMzA7Y144yKHL4ayP2rFm1k87unJLs4kipRZayyDYUdeKVxPXfzFRCmnF6VkF
<@!687984626400231464> I filed an issue to track: https://github.com/solana-labs/solana/issues/16552
question: have the program logs disappeared from the explorer?
Also, did you encounter that error while deploying the program or while calling the program?
What version of the solana tools are you using?  In general the compiler expects there to be unresolved symbols in the ELF that will get fixed up at load time.  We should be able to add a check during program deployment to catch this.  We could also try and add a check during build time though this might be more difficult since we would have to sync the list of expected unresolved symbols between the tool and the runtime which currently expected to be compatible across versions.
yes the history should still be visible
I don't think so, the transaction filtering is pretty limited over RPC right now
<@!466984915376799748> or <@!383348505491668993> might have an idea
if an account gets deleted if it is cannot pay rent, what happens to transaction history of that account? will you still be able to view it on the explorer?
given a program id, is there a way to filter its transactions for ones that initialized an account?
Hi, is there anything wrong in doing this in the Frontend ?
```
      const collateralTokenPubKey = new web3.PublicKey(COLLATERAL_TOKEN_PUBKEY);
      const collateralToken = new Token(connection, collateralTokenPubKey, TOKEN_PROGRAM_ID, provider.wallet);
      const userCollateralTokenAccount = await collateralToken.createAccount(wallet.publicKey);
```
It yields a: `TypeError: Blob.encode[recentBlockhash] requires (length 32) Buffer as src`
1000 connections is the current limit.   But it's global so somebody might have buggy code and is consuming all 1000
Ah interesting. Do you know the max number of users allowed?
It's cool to see that code working actually!
Looks like there's too many other users right now, so you're getting rejected unfortunately
I assume it's coming from my useage of `connection.onAccountChange(`
I'm connected to the public node websocket in a React.js web app. Any idea why I see this errors in the console?
About the helloworld.c example: changing num_greets from uint32_t* to float* compiles, but gives "ELF error: Unresolved symbol (__addsf3)" at runtime. If the instruction isn't supported, why isn't this caught during compilation? (Are there any clang flags or other tricks one could use to make the compiler catch this, apart from having 100% test coverage?)
Requesting airdrop DEV/TEST `H2XURVANsAbYPWd5P8W9uhMh9bZFTU1bWboYoWdVGaTi` i need like 100 SOL on both


///////////////////////////////////////////////////////////////////////////////////////////////

M1 support is  unofficial at this point
I think a symlink resolves
using `solana-test-validator --log`
hey I've seen this error appear when attempting to spin up a local sol cluster on an m1 mac
```dyld: Library not loaded: /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib```
any ideas on how to resolve? looks like homebrew location is mismatched
Not sure if I said that properly
Thanks. I'm getting there. It will load the accounts needed eventually... I guess no shortcut. It makes sense that this aspect is well controlled. I just don't have a handle on the security model yet. Loading accounts in a program directly is probably a no no. But I don't yet get what stops me from sending an account and all its data as a data parameter and then modifying it in someway. Does the program check to see if it is writable even if it's not passed directly as an account ?
Can your script populate the accounts on the cluster and then invoke your program passing the keys that it needs to pass on?  In general, your program only has access to the accounts listed in the instruction that invoked your program.  This is primarily because the accounts are validated/loaded in batches for performance
I think there are some flags we can set
yeah prolly.  not sure how to do that without building `solana-test-validator` in a VM simulating an older CPU
Why am I doing this? There is a stop loss feature I'd like to add. Stop loss requires some trigger on market data. So something has to consume order book updates. I can't do that on chain due to compute expenses, so it needs an off chain component. I was hoping to store a proxy order in the cluster, and then forward it to the main Dex when price point is triggered
I'm just not trying to unit test my code. The proxy will be fairly dumb, more of a pass through. I'm kinda figuring out what and how I need to send to the real Dex from inside my program
But yes... It's essentially a system test.
Not quite. I was trying to use the accounts that I know in my program without having to serialise them into my program. Ie invoke the program with no params, but the program is hard coded with the account keys and then forwards them, or invokes, the proper Dex program
Sounds like you have a system test with your script and a local cluster.  Are you trying to recreate the same test cases as unit tests?  Aka, convert the script to a rust unit test?
It uses transactions, Solana web3, dexInstructions etc. Then the cluster had my accounts in. I have a fair bit of the serialization directly from the Solana and Dex stuff, but I've imported it all into my workspace and first few goes have required some debugging. I was trying a different path without unknown bugs in serialization to fix before I find some major problem with the entire premise of proxy orders!
Maybe we should build solana-test-validator w/o AVX/AVX2 support?
For some reason many mints come back with no data. The one that stands out for me is COPE. It definitely exists at address `3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE`, yet when requested its not in the returned data.
I'm noticing strange issue with this code: https://github.com/project-serum/oyster-swap/blob/cff4858523b77a7a9ee105a135b6dee6bbcb4634/src/utils/connection.tsx#L110
Are there cases where `getMultipleAccounts` can return missing data?
hmm yes thank you for your time. i searched and found someone with same problem. my cpu is pretty old AMD FX(tm)-8320
<@!830622541654523904> - your CPU probably not supported by the default binaries (perhaps it's slightly older).  You can rebuild from source though
```
example-helloworld$ solana-test-validator --log
[2021-04-20T16:35:37.733964439Z DEBUG solana_runtime::message_processor] Program Vote111111111111111111111111111111111111111 invoke [1]
[2021-04-20T16:35:37.734049512Z DEBUG solana_runtime::message_processor] Program Vote111111111111111111111111111111111111111 success
Illegal instruction (core dumped)
```
im trying to start a local solana cluster but im getting the follwoing error:
How does the script create them in your local cluster?  Via rpc?
Hopefully this makes some sense
The script creates them in my local cluster btw, so they are properly created (rather than in some unit test)
I'm trying to proof of concept a program that is a proxy to the real Dex program. So it needs to pass all the Dex program params
Either I do the serialisation properly, or I do the stuff in the test properly... But it's kind of the same workload. I have the accounts I need created from a script ( it create s some tokens and a market and all the event queues and stuff). I want to receive them in my program and send them on to the real Dex program
Are you wanting to avoid serialization just in your tests?  If so what was lacking in `ProgramTest`'s `AddAccount` mechanism?
Hey guys! Long time no see here! 
Have an architecture oriented question here.
We have this requirement of synchronizing a bunch of different accounts that can't be obtained by 1 RPC query. So, while making multiple RPC requests, the state can change. 

To give a simple example: 

If we fetch an oracle price at slot N and a token account at slot N + 1, there is a chance that the price has changed in slot N + 1. And if we do it the other way round there is a chance that the balance of the token account has changed.

We need a way to either do this atomically (which might be harder), or have some means of putting the data into context, so for example we could fetch an account at a specified slot height. I understand that the storage overhead for this would be insane but I guess Solana has some sort of fork resolution mechanism where it holds all states in the past X slots which would allow querying at a specific slot which is perserved?

cc: <@!337987755873140756>
otherwise tell me your address on testnet ill transfer some
<@!388758525192699905> if you are dev, set rpc to testnet and use airdrop command with solana-cli
`solana airdrop 1 <address>`
Is the reason you cannot for security? Basically if you can access the data inside a program it will allow access to all sorts?
I'm just figuring out the rules tbh. I'm lazy and don't want to write all the serialization code for a load of accounts to my program. I wanted to load the account info from some hard coded strings. Jackcmay was helpful yesterday on the topic, but I wondered if there is another way around it (stubborn)
How do I configure the SPL Token to be sent to the ERC20 wallet?

For example Serum(https://etherscan.io/token/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF)
Raydium(https://etherscan.io/token/0x5245C0249e5EEB2A0838266800471Fd32Adb1089)

Do you have a guide on how to connect?
There are no blocking operations, you can't make a request from a program. What information do you need access to in your program?
Any thoughts appreciated wise ones
Hi, before I go down a rabbit hole Id like to check here please... What do Solana programs do for blocking operations ? For example if I wanted to call some RPC code (for example getaccountinfo)... Will this be possible?
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L383
i will check
you tried this lib?
`npm i @solana/spl-token`
thanks
aa okay
it was not what you needed
<@!397190811239841802> why you deleted ?
how to create token account on web3.js
and sufficient
cause that would pretty much be equivavelnt to emiting event in eth
aha, so if i want to put my own `mgs!` to get back via websocket it woudln't work?
in the logs here: https://explorer.solana.com/tx/3HBz3dEFKXbjVfLjFd2NB39eNLRBpHULuMCRyMeV9YSH8GxHmqRw1xLQFX6UTuwUoTGUHhtU5MGxwckY1iifUKuz
only the "Instruction: Transfer" is from msg!
yup and a few other things
that's cool. does that mean it spits `msg!`'s ?
you can set filters for specific logs from your program
<@!397190811239841802> check this out: https://docs.solana.com/developing/clients/jsonrpc-api#logssubscribe
yes, I believe so
ok so in your opinion this is sufficient as a replacement to something like ethereum events, aka i could get everything i need as a client?
yup we have a websocket pubsub api where you can subscribe to program logs and account state changes
websockets?
so if anchor is not used, what would be the procedure for me to know what is happening on the chain now as an app?
I assume anchor uses logs to emit events
i am interested if anchor is the only way to emit events in the same way as ethereum can do? or can we get all this changes via websockets?
np!
cool thanks starry
nope, rent balance doesn't get affected by transactions
if not, that's fine.
every time someone changes it's data, Acccount B's data via Program A?
does balance in Account B get's reduced?
yes, this is correct. But the rent fee will probably change soon
if i do transactions to Program A, which increases counter to Account B(which holds state)
I don't really get what you mean by spam
> so i could spam the program forever in order to empty the accounts rent that is owned by same Program
can you explain what you mean here
yeah, `other account's` are not executable yeah, as they can have mutable data
executable accounts store data, it's just that the data is raw byte code, not program state. The state is stored in other account's data
good question, was interested in this myself
rent is also fixed fee for now yes per epoch and is based on the space of accounts data (if only one value or struct for example)?
otherwise would be very easy to destroy someones dapp functioning
if that's the case then it's good
so all in all i understand that rent from account that stores some data is deducted only when account is created and on every epoch if not rent exempt, and transactions do not have any effect to rent deduction of account. so i could spam the program forever in order to empty the accounts rent that is owned by same Program but wouldn't be successful as rent is not deducted when data is changed or transactions done to program.
accounts that are owned by Program and used by Program to change state
?
yes but accounts that store data are not executable
and then once marked executable, it's immutable so you couldn't withdraw to a lower balance
for example, a program cannot be marked executable unless it's rent exempt
yeah good question, 2yr min rent is mandatory in many cases
aha
(of course if account owned by program was not rent exempt with 2yr of rent, but if someone forgot to put 2y min rent, would be vuln to attack?
rent isn't impacted by transactions at all, we currently don't charge for data loads/writes explicitly either. When/if we do, those fees would come from transaction fees and would be separate from rent
so if someone wanted to attack the programs accounts storage, to destroy the functionality of dapp, he would just spam to empty the rent ?
aha
and transaction fees (separate from rent fees) are paid by whoever's signature is first in a transaction's list of signatures
so if random person submits transaction to Program A, he pays transaction fees, but also rent is deducted from programs account that stores some data?
it can't be paid by anyone else
rent is deducted directly from the account's lamport balance
in ethereum the person who submits transaction pays fee for payable function, so it's very simple.
rent is taken on initial account creation or every epoch which is 2 days(for non exempt accounts). what about whenever there is transaction towards that account via program, if data is changed, or is that payed by payerAccount that submits transaction to the program? who pays fee when executing transaction to the program that changes accounts data which is owned by program?
Got it, I'll think about this some more too
Hopefully there will be better solution but for now i am prepared for worst case
Well this is just temporary solution based on how chainlink works
got it, why don't you aggregate oracles? You could shard oracle state at a coarser level, maybe one price in each account is too inefficient
so 2 transactions is kinda default
+ i will be adding more oracles/assets
so i just run out of space of tx
20 oracles aka each is one account that is pulled to state + eg mint need to burn/send/change state etc
why are your transactions so big?
yeah that's unfortunate
still if updates happen in middle of those 10 block we got some small arbitrage going on
Thats the solution price is valid for 10 blocks
got it, well there's no way to batch transactions so that they get executed right after each other. I would suggest thinking more about your program design to see if you can get this into one transaction or at least design your protocol such that both transactions don't have to be in the same block. Maybe the first one locks in the oracle price for a few blocks for example
yes exactly
nice, why is getting the transaction in the same block important? because the oracle could be different?
adding a little sleep appears to solve issue but still would love to get transaction into same block
Haha, I had to read up on that, hope you create something a little better 😉
Just realized that i may have built Bitmex's Order Submission Error on blockchain 😆
Well will change it to form with sleep and see if that performs better
I rather fail transaction
Oracles will be updating every couple of seconds waiting for confirmation may cause oracle to be already outdated
otherwise if the first one got dropped and needs to be resent, the second one could get processed first
well, it sounds like you need a guarantee that the first one landed right?
I think so but IMO it will be better to just add sleep for 1s and send transaction first transaction without confirmation that way i will not relay on response
Looks like it's a little closer to 3s right now on mainnet actually
Confirmation should be about 1.5s
Is it acceptable to wait until the first transaction is confirmed and then send the next?
No matter which node you connect to, all transactions are forwarded to the current leader. There are normal circumstances which could cause the order to be flipped. Imagine the first transaction tries to take a write lock on an account which is already being used, it will get added to another queue for later processing and the second one might get processed when all the account locks it needs are available
Is it possible to use UDP packet fragmentation for large instruction-data transaction?
I image if i got direct connection with one node it should work fine. So loadbalancing is just messing with me right ?
So transactions are too big to bundle. Right now delay is set to 10 blocks but would love to keep it zero. User signs both transaction in same time then i send them using `Promise.all` with right ordering. It's for Synthetify purpose any operation require updating oracles and that is what first transaction is doing.
okay thanks
Hmm, can you describe your requirements more?

Why aren't you able to combine these into one transaction?
What's the acceptable delay between the 2 transactions?
Does a user first sign and send the 1st and then sign and send the second? Or is this for a bot?
<@!466984915376799748> I am looking for consistent way of sending 2 transactions so their ordering will stay same. Using public endpoints sometimes transaction are flipped in same block. Any idea how to enforce it ?
hmm <@!453347985628200960> and <@!792782891196874792> any ideas here ^? Rust's whole thing is zero cost abstractions. Ideally the optimized bpf byte code is roughly the same no matter what higher level language features you use
found some neat "facts" about using for loops and vectors on solana programs:

* using an `.iter()` on a a vector vs using `for i in 0..some_vec.len()` is about 2k compute units more expensive
* using `step_by`  in a for loop increases costs by about 1.5k compute units
*  initializing a vector to a capacity of 5, even if you will only insert 1 element in that vector is cheaper than initializing a vector with no capacity and pushing 1 element onto it
`new Account()` creates a valid address, but there won't be anything on-chain until the account has SOL in it
yeah it works, but I need without sending SOL create address for user
Try sending some SOL to the address first
No that's all
but return null
```
    const account = new Account();
    const accountInfo = await connection.getAccountInfo(account.publicKey);
```
yes I tired
any easiest way to develop on solana from a solidity programmer?
I would like to remove the mint authority from my SPL token ($MCAPS), in order to freeze the supply. I saw in the docs, that `spl-token authorize 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z mint --disable` could have this effect. Is there anything else, I'll need to do to cap the supply?
https://solana-labs.github.io/solana-web3.js/classes/account.html#constructor
`new Account()` will generate a new keypair
Hi, how can I create a new account or address with web3.js?
Any guides to offloading data to cheaper decentralized storage, e.g. Filecoin, from a Solana program?
I'll rework for that, thanks
Yeah
would that do?
OK, so:
1. Create a new wallet using `solana-keygen`... drop some lamports on it 
2. Load those in the CLI to then create Tracker accounts
You still need to pass in _a_ system account to fund `UserWallet` with.  Seems like there's not much point in the extra steps
However; If I can load the keypair from the command line for the CLI then I can do that and forego beating my head against the wall 🙂
Emulating what we were doing in the typescript code vis-a-vis web3.js
Hoping to achieve what?
No, I was trying to create it IN the CLI
Are you not providing `UserWallet` to the CLI app?
So using web3.js testing we create the 'UserWallet' to then create the Tracker account and everything is peachy.
What I'm trying to do now is attain the same thing in our rust CLI we are creating
Ok
Yes
`UserWallet` is owned by System Program?
And, the UserWallet account 'signs' the transactions
So, we want to use an account (call it UserWallet) to create an account (call it Tracker) that is owned by our program. User is responsible for funding the Tracker so when our program performs an operation we transfer service lamports from the Tracker account to a service account we setup.
I think you're just creating more problems for yourself by adding more complexity.  There's something fundamental missing, but you're not communicating it well enough for me to grasp
I can use `solana-keygen` to create a number of wallets if that is feasible
or from rust code?
Is there a way to 'load' a wallet in addition to the default into solana-test-validator?
Yeah you can't use an account that your program owns with any of the solana CLI tools or to pay fees
Which is the same as the `signer` in the above snippet
So, the code above works BUT when I go to use the keypair from the above to use in `from` and `payee` and `signer` when creating a recipient account it fails with error saying I can't. <@!445425471027544095> told me I need a system created account to do so. In the interim I am using the default account in my `config.yml` (uses `id.yml`) and it works.
I don't think I'm understanding what the issue is.  This code fails?
Correct, the SOL recipient is 'owned' by our program which does the transfer (+/-) in the program logic
If not, you'll need your own transfer instruction
So this SOL recipient is or is not owned by the system program?
I was using that as the basis to emulate in the cli we are building but the above is rejected when creating additional accounts with error saying 'you can't pay using that account'
So, our program transfers lamports between accounts paid for by a 'wallet' account. In web3.js we were creating a 'wallet' account which was accepted as the 'payee' when creating new program owned accounts
No need to complicate things
I'd just use `system_instruction::transfer()` in that case.
Yes, that will pay for other accounts for our program
To be clear, you're just looking to create a system account holding SOL, right?
My thought that there was a system key I could use as the owner and that would fix things?
So, here is what I have thinking I was creating a wallet account however, creating a subsequent account and designating the former as the payee doesn't work. So, on <@!445425471027544095>  advise, I keep using the `.config/solana/id.yml' keypair (all this is in solana-tet-validator btw): 
```rust
fn new_wallet_account(
    rpc_client: &RpcClient,        
    signer: &dyn Signer,
    program_key: &Pubkey,    
    commitment_config: CommitmentConfig,
) -> (Keypair, Account) {
    let account_pair = Keypair::new();    
    let account_lamports = rpc_client.get_minimum_balance_for_rent_exemption(
        0.try_into().unwrap()).unwrap();
    let account = Account::new(
        account_lamports, 
        0,
        &program_key);           
    let mut transaction = Transaction::new_unsigned(
        Message::new(
        &[system_instruction::create_account(
            &signer.pubkey(), 
            &account_pair.pubkey(), 
            account_lamports, 
            0, 
            &program_key)],
            Some(&signer.pubkey())));    
    let (recent_blockhash, _fee_calculator) = rpc_client
        .get_recent_blockhash()
        .map_err(|err| format!("error: unable to get recent blockhash: {}", err)).unwrap();       
    
    transaction
        .try_sign(&vec![signer, &account_pair], recent_blockhash)
        .map_err(|err| format!("error: failed to sign transaction: {}", err)).unwrap();        

    let tx_signature = rpc_client
        .send_and_confirm_transaction_with_spinner_and_commitment(&transaction, commitment_config)
        .map_err(|err| format!("error: send transaction: {}", err));
    
    println!("Signature {:?}", tx_signature);
    (account_pair, account)

}
```
SOL recipients are created upon crediting the account.  Nothing special needs to happen there
SOL
SOL or SPL Token?
The default config appears to only allow 1 account that can create/sign accounts
<@!585868308419444749> is it possible to create a new 'payee' system account from within a rust cli? If so, is there any example?
Welp, I guess I'll just have to keep earning; maybe I'll stick around for a couple more epochs now that I know how to move the tokens! ... thanks again 🙂
I thought we had a more specific one for when the funds were unavailable due to delegation
Yeah, kinda makes sense if the tokens are locked
Ah wait... sorry that _is_ the error you should be getting
Guess I'll wait until the epoch ends and try again.
The temp token account whose authority I'm trying to change is writeable
Howdy - doing a CPI to transfer authority of a temp token account over to my program & getting a "ExternalAccountDataModified" Instruction error after it completes.. I am modifying data owned by the Token program in my program by invoking the TokenProgram#SetAuthority - is there anything else I need to do to allow this call?
~~does the recipient account need to be funded?~~ nope
Shouldn't be
Would that be why I'm getting an "insufficent funds" error now?
`Epoch Completed Time: 21h 23m 51s/3days 21m 36s (2days 2h 57m 44s remaining)`
Oo, how long do I have to wait now?
`Stake deactivates starting from epoch: 172`
Looks like you missed the epoch boundary with your deactivation
Thanks for the help btw, learning alot.
Ah, i figured the epoch ended yesterday so I was good to withdraw?
You'll need to pass `--withdraw-authority KEYPAIR`
BTW, you can't withdraw from this account until the stake cools down
No.  That's for offline mode
using ```--signer``` flag?
Yeah it needs the withdraw authority for the stake account
Do i need to provide a signer somehow?
Gives me: 
``` Error processing Instruction 0: missing required signature for instruction```
```solana withdraw-stake D3kvgpDWyApqdRnADLfgstvGKZHJY8XPNY2yKTdv5D1m Hj1EbVkWsCaM8nqc2ug3QvKs28j6nG7kP2cR5nmHnAfs 15 --fee-payer ~/.config/solana/sol_wallet_01.json```
ok let me give it a try
You want `solana withdraw-stake`, not `solana transfer`
(delegating stake)
Yes, I was staking with this acct.
Oh that's the `--from` account?
Yeah, there's your problem.  Stake accounts can't pay fees
Yeah that's correct.  Also has nothing to do with what I'm asking about 🙂
Ah for the id.json the Owner is ```Owner: Stake11111111111111111111111111111111111111```
I used ```solana-keygen pubkey $HOME/.config/solana/id.json``` to create the account
Same for  the keypair parameter of `--from`
Otherwise its wrong
You should see `Owner: 11111111111111111111111111111111`
`solana account ~/.config/solana/sol_wallet_01.json`
Hmm, I'll admit to not knowing what that means. "system account"
Your error message suggests that it's not
```
~
❯ solana balance ~/.config/solana/id.json
15 SOL

```
Are all of these accounts system accounts?
I have 15 SOL in there I need to move 😅 Not a huge amount, but, not a small amount either...
Thanks for the quick support btw
```
~
❯ solana balance ~/.config/solana/sol_wallet_01.json
2.53613711 SOL

```
What's `~/.config/solana/sol_wallet_01.json`'s balance?
Hmm, what am I doing wrong here? I can;t seem to make the command work
`solana transfer Hj1EbVkWsCaM8nqc2ug3QvKs28j6nG7kP2cR5nmHnAfs 12 --allow-unfunded-recipient --fee-payer ~/.config/solana/sol_wallet_01.json --f
rom ~/.config/solana/id.json` There's the full command...
No. 0.000005 SOL
Having issues with the cli and this pesky error: `Transaction simulation failed: Error processing Instruction 0: invalid program argument`
Hi. How much should it cost to send SOL between accounts? More than 2 SOL?
thanks <@!501570363566587905>
I think this is pretty close to what you're looking for https://github.com/project-serum/anchor. Though the IDL (similar to ethereum's abi) isn't standardized on Solana.
We don't have any docs that offer guidance on program serialization.  We have been recomending folks check out borsh serialization and have started to add support for it in the sdk: https://github.com/solana-labs/solana/blob/master/sdk/program/src/borsh.rs
<@!453347985628200960> is there somewhere in the docs discussing serialization guidance?  I didn't see any reference if the accounts section of the dev docs
is there any url where i could read about this serialization?
cool thanks
ok so there's no concept like in ethereum where we use ABI to encode/decode
I'm saying your program decides how its data is serialized.  Internal structures and native programs all use bincode
what does that mean sir? so there is ABI?
It's up to your program
how is data encoded/decoded in solana? do we have some kind of interface like ethereum's ABI?
thanks for the advice
ok.... I'll serialize it I guess
it seems like its not a normal thing I'm doing then... I count create Account::new, but requires all the lamports and data etc
thanks, it helps *some*... I was hoping to be Lazy - I have a load of scaffold to create complicated serum-dex accounts and have them running in my cluster and wanted to avoid getting into all the details of the data to expect etc
Have you looked at programtest? You can manually add accounts (and their data) directly and then reference them in an instruction.  Does this help?
https://github.com/solana-labs/example-helloworld/blob/b375d076ca276fc94265ed0c08407786e602399d/src/program-rust/tests/lib.rs#L23
ie I dont pass any accounts, but have hard coded accounts in the program and can look them up
I do feel that its wrong... and maybe succceptible to hacking...
thanks Jack - the end goal would be to pass all the accounts properly in the instruction, however I have a lot of accounts and data and wanted to short circuit the development time by skipping the serialization for now. I kinda just want to execute my program with empty accounts/data but with some known public keys and data, kinda like an "integration" test.... am I missing a very key point that you cannot load known accounts from inside the program due to signatures (or something - I am still vague on that part)
needs to be supplied as part of the input for sure but you could use the hard coded public keys to verify that the correct accounts were passed into the program
Hello, is it possible to have a meeting with someone from Solana tech team? We are a software development team looking to build out our first project on solana and would like to have a quick consolation about the tech. While we did look around for the info, we ended up having more questions than answers.
Hi <@!808635736541888543> , The accounts provided to the program are part of the instruction definition and must be specified up front.  There are some exceptions, like the new way programs access sysvars.
any help appreciated !
is there a way to lookup the AccountInfo given an account PublicKey from inside a rust program ?
hi all, hope everyone well.... I am trying to test/proof of concept a program by hardcoding some accounts so I dont have to build all the serialization code up front
ah ok, I'm not really worried then. Thanks
There have been multiple times in the past when we've drifted by over a day.  These are uncommon, a bug, and something we aim to try to fix quickly.  But it has happened and certainly _might_ happen again.  This is why we use slots but up to you of course.


///////////////////////////////////////////////////////////////////////////////////////////////

i think it might have something to do with the fact that im on m1
does anyone know what this is?
so ive been going through the paulx guide (im sure most of you know what that is) but after setting up the template repo, im getting a bug in the `cargo.toml` file that reads:

`error: failed to run custom build command for reed-solomon-erasure v4.0.2`
Great, we are working on a fix for the serum API
how to fix it ?
https://github.com/solana-labs/solana-program-library/blob/df994bf426fbab903b47e7e9d1a9cd9e4e8ef9ba/token/js/client/token.js#L493
Im getting ```
failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions
``` when I use ``` createAssociatedTokenAccount ```
<@!466984915376799748> Just an idea, but I think it would be incredibly useful for devs to have either a workshop or a youtube video solely dedicated to debugging Solana Apps / Txs. I am sure a fair amount of us are not tracking bugs in a very efficient manner. Having a look at how people like you do it would be extremely valuable.
After change to `https://api.mainnet-beta.solana.com` every thing is better
Does anyone know why and how to resolve the problem?
And the solana client version is `solana-cli 1.6.4 (src:b04ce802; feat:3342604240)`
Hi, i depoly program on `projectserum` cluster, but got error`============================================================================
To resume a deploy, pass the recovered keypair as
the [PROGRAM_ADDRESS_SIGNER] argument to `solana deploy` or
as the [BUFFER_SIGNER] to `solana program deploy` or `solana write-buffer'.
Or to recover the account's lamports, pass it as the
[BUFFER_ACCOUNT_ADDRESS] argument to `solana program close`.
============================================================================
Error: Data writes to account failed: request or response body error: error reading a body from connection: unexpected EOF during chunk size line`
no worries
thanks
aa I got it
Not sure what you mean by "my token"
There is only one token program and one associated token program
I cannot see anything giving stake accounts for an owner in web3.js, is it expected for a dApp to build the associated stake accounts addresses then get those accounts and decode?
what is it ? where can i find it for my token?
yes, it is also in there
yes
Token programid?
what programid?
what about progamId?
ASSOCIATED_TOKEN_PROGRAM_ID yes
in here https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L26
Are programId and associatedProgramId Token Id ?
I don't know what you guys are doing, but I have been told Bartosz is building out governance for Solana - voting programs, front ends, etc... so if this is Solana related, maybe talk to him... but if it is for your own project, obvs do what you like.
giving out voting tokens based on some metric/ ciriteria seems like a sensible solution to both, sybil and double voting. Thanks <@!97731475364929536>  <@!311962918511968256>
It's just up to the issuer, they can do whatever... so that might not be what you want idk. Also ppl can give their tokens away / sell them.
I believe there is a client program in that github which gives the tokens to validators in proportion to their stake delegations, but that is just a client program, you could make your own.
How does it know who to give tokens to? In proportion to stake?
it has been used for a few community votes, like to turn on inflation for mainnet.
there is a voting program in the solana-program-library where the issuer gives out voting tokens... you can see it here https://github.com/solana-labs/solana-program-library/tree/master/feature-proposal obvs that is controlled by the issuer
you can create any number of accounts obviously - so doing it that way - one guy can just make a 100 accounts
i don't know what you guys are trying to do.
Would this be better or worse than storing users’ pubkeys?
hmm, interesting idea, might make sense here
yeah, but that's a different story
<@!171672353896398858> you could issue all your voters "voting tokens", that they send to a yay or nay account... or something like that.
Wouldnt this be vulnerable to sybil attacks
Is there a way to limit users to call a program only once other than storing their pub keys in an account? I.e. a vote program where users are allowed to give only one vote
the websocket subscriptions might be a good place to start
Yep! just thinking aloud which set of methods are best for tracking stake managers/stake pools
Heh.  We have docs 🙃 
https://docs.solana.com/developing/clients/jsonrpc-api
https://docs.solana.com/cluster/rpc-endpoints
and you've seen this, right? https://docs.solana.com/developing/clients/jsonrpc-api
this kind of thing? https://github.com/solana-labs/explorer/blob/42bd6270983684f8e9f080ddf546eea82a9cb665/src/providers/block.tsx#L57
😦 solana doesnt like webpack5?
Do you know where it is that they do the API/RPC calls?
I would have thought it makes the ledger correct, but not 100% sure.
code is here: https://github.com/solana-labs/explorer
I’d like to know too! I just want to do something like the blockchain explorer: ping every slot(?) and ask for the state of the blockchain, list of validators, amount staked, etc
where can I get programId SPL Token program account?
Might be able to do better with a custom snapshot dir and give it its own NVME disk
Looks like ~90s ATM
https://metrics.solana.com:3000/d/monitor-edge/cluster-telemetry-edge?viewPanel=70&orgId=2&refresh=60s&var-datasource=Solana%20Metrics%20(read-only)&var-testnet=mainnet-beta&var-hostid=All
for a mainnet instance
good idea! roughly how long does creating a snapshot take?
Maybe you want to hack a custom `ledger-tool` and just sample snapshots?
while havng RPCs responsive
😄
if slot % 100 === 0 freeze()
is there a way to maybe pause sync every 100 or so slots and do detailed analysis?
You might be able to  stream the desired account over websockets, but that will be per write
If they really need to be at the same slot, short of adding custom code, yes
so going back at our original example where we need to fetch, atomically, price feeds and token account balances for a very large number of accounts the best way is running our own RPC and increasing the response buffers  and doing a single getMultipleAccounts?
That's what banks are 🙂
You'll OOM pretty quickly if you try to do otherwise
what about account states at specific slots?
Fetching at a slot is tricky because we only keep non-rooted blocks around
Yeah it stores the previous N _shreds_ as specified by `--limit-ledger-size`.  How many slots that is depends on cluster load
for ease of correlating data
fetching at a specific slot would be cool
but for example, back to my original question, does the ledger not store previous N slot states, or does it re-sync if it needs to resolve a fork?
Log yes, produce meaningful analytics, maybe a bit harder 😄
Seems like you should be able to log from application though, no?
I think we just collect that out of haproxy logs
I think that the RPC doesn't analyze calls and inbound requests so we don't have that ATM
Good.  Did you guys report calls and rates somewhere?  I didn't see them in the linked convo
backend, heavy backend
Hey so im taking it a step back and running through some of the tutorials. I was checking out the dapp tutorial and when running ***build_simplest*** script I get the error ```Package `solana-bpf-simplest v0.0.1 (/home/joey/simple-vote-tutorial/src/simplest-rust)` does not have these features: `program`
``` how should I go about fixing this?
Do clients call directly or is there a backend in the middle of all of them?
Old  code is old 🙂
Thanks for the help Trent, works fine now. Silly me,  I originally forked a repo for a tutorial I found and forgot to update the packages
No, we reported it here as well https://discord.com/channels/428295358100013066/689412830075551748/825342543225946142
Oh.  Were you querying beyond the local  ledger history?
`getConfirmedBlocks` actually
On `getMultipleAccounts` ?
That is a solid idea! What we have encountered in that scenario is 1-2 minute hangs on some requests that we weren't able to identify
Run your own RPC infra and the response buffer size is tunable <:trollface:552227154390286376>
That solves it partially, but the amount of data we are syncing is a bit bigger than this endpoint is capable of returning.
Although, getMultipleAccounts at a specific slot height would probably solve our problem
Please upgrade 🙂
Oh god
"@solana/web3.js": {
          "version": "0.86.4",

Yeah I get "Transaction simulation failed: Blockhash not found"
Which version of <@832686202074300446>/web3.js are you using?
You're still getting expired blockhash?
This looks fine
03ec9d1dd6f9fb02ab8c01206d15d3668b6b353e23e8eb53a562a7382ab46ce5aa1f7fe8812b5c9c56d78111a5879f9b345050fbf19348c6bd5ed21a82a9c9e509a4cc834bd473e040bd7655b9a6b1ce3085fa1d3423a834d1039c6f1c059319dede8e2e28fa2484882a74dcef00b6a985d34ecf42b68c50d6ae3091655ae25b07f21d5ca7accc1eed99427e25e9a0ccaadd0e9f372f448a0350541cb2830ccff9e1958097f6727b13afc87db8ea1711a93732e5cc2006199c3f629547bb8a1f0c0300050a55c6959d7dd65720683132feba5bf0bf74b3b0aa8590f3f969cfec354d810626594c8d2ae80f0e89d8df885739dca177883e33abf1c5fe47a8ec66c121cbb8ecc8de5c9a513120b9edfbe2b9d57374c59bc38c648587601aad1a701bb7d2edb8a1fb5a770e4433183d00679921a1536dbaa510b5083359b55bcff6aee76fbf0b869a6eb5490f318fa5854985019d1a2f064a5c0e03bafdc9d6de7bbe2033b36c96671fdc6a17e20b25874264db4e30e9cb643e0b5f0250880f9c85c3ff1bf47b06a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9000000000000000000000000000000000000000000000000000000000000000096a1837ac4ea330d9b0c6dcba58ca38e36a032839eb83d7b76eb020fd5c02e172855661b78bce36221fffbf562f05d18bf6562ea29ebe37a70678223960db8f505080200013400000000f01d1f0000000000a50000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90704010500060101070303010009033200000000000000080200023400000000e0be240000000000da0000000000000096a1837ac4ea330d9b0c6dcba58ca38e36a032839eb83d7b76eb020fd5c02e170907000103040206070f020001c80000003200000000000000
Sounds right.  JS isn't really my thing
The output from ```signed.serialize().toString('hex')``` ?
Can you build a TX on a throwaway wallet then, give me the hex-encoded, serialized, signed transaction blob?
As fast as possible, not long enough for blockhash to not be recent'
Recent blockhashes have a TTL
Mmm.  How long did it take you to confirm on the wallet?
the wallet opens the popup, connects, asks for signature all as it should
Wallet comes from the sol wallet adapter
```
    import Wallet from '@project-serum/sol-wallet-adapter';

    const connection = new Connection("http://localhost:8899", 'singleGossip');

    let providerUrl = 'https://www.sollet.io';
    let wallet = new Wallet(providerUrl);
    wallet.on('connect', publicKey => console.log('Connected to ' + publicKey.toBase58()));
    wallet.on('disconnect', () => console.log('Disconnected'));
    await wallet.connect();
```
If I had to guess its `signTransaction` is mangling something
What type is `wallet` ?
Hey guys, I'm trying to integrate an external wallet, but having problems creating the transaction. I have a working transaction where I input the private key as a string and decode it. But having problems with the transaction when signing it using the wallet.
Working tx:
```
    const privateKeyDecoded = privateKey.split(',').map(s => parseInt(s));
    const initializerAccount = new Account(privateKeyDecoded);
    const tx_1 = new Transaction().add(
        createTempTokenAccountIx, 
        initTempAccountIx, 
        transferTokensToTempAccIx, 
        createBetAccountIx, 
        initBetIx
    );
    let txid_1 = await connection.sendTransaction(
        tx_1, 
        [initializerAccount, tempTokenAccount, betAccount], 
        {skipPreflight: false, 
        preflightCommitment: 'singleGossip'}
    );
    console.log(txid_1);
```
The tx using the wallet: When I tried without partial signers it obviously failed verification. Now with partial signers the blockhash can't be found.
```
  const tx_2 = new Transaction().add(
        createTempTokenAccountIx, 
        initTempAccountIx, 
        transferTokensToTempAccIx, 
        createBetAccountIx, 
        initBetIx
    );
    let { blockhash } = await connection.getRecentBlockhash();
    let partial_signers = [tempTokenAccount, betAccount];
    tx_2.recentBlockhash = blockhash;
    tx_2.feePayer = wallet.publicKey;
    tx_2.partialSign(...partial_signers);
    let signed = await wallet.signTransaction(tx_2);
    let txid_2 = await connection.sendRawTransaction(signed.serialize());
    console.log(txid_2);

```
😦
Kinda sounds like you need to learn the ropes on a simpler example, like helloworld
````/home/solana/Desktop/solana-program-library/target/debug/spl-token-lending-client`
thread 'main' panicked at 'Transaction::sign failed with error NotEnoughSigners', /home/solana/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-sdk-1.6.2/src/transaction.rs:235:13``` Im getting this in token-lending client. Not sure why it does not have enough signers
Now to find those large rocks 😆
Ok great, thanks for letting me know
<@!445425471027544095> it was a client side bug 🙂
sola.na/docs contains the RPC methods in the latest release (1.6.6) but in github you're looking at the `master` branch, which is unreleased (that method will eventually be shipped in v1.7.0 though)
hey check out https://docs.solana.com/cluster/rpc-endpoints
Update: Looks like there are some RPC methods not published on the docs page. See https://github.com/solana-labs/solana/blob/master/docs/src/developing/clients/jsonrpc-api.md#getblock
It must be possible as the block explorers do it
Hi all,
I'm working on an integration that requires enumerating all of the blocks since genesis and fetching the transactions. Is there a way to do this with the JSON RPC API?

I've had a good look at the docs and nothing there seems to fit the bill. I'm wondering if I'll have to do a tighter integration with a node to get this data
so now i can actually get started!
Figured it out.  Linux PATH didn't automatically prepend solana bin folder to it, but windows WSL path did
Hey all, a dev is asking me for a public node URL, any chance someone could provide me one or point me to the right place in the docs?
I'd use `Pubkey::default()` for that, more explicit
yea it is. can we set upgrade authorities to the incinerator and that effectively disables upgrades?
If that's a burn address, then yes
i See 🙂
Thanks for the help
does solana have an equivalent of `0x0000dead` that ethereum does?

i know of https://docs.rs/solana-program/1.5.4/solana_program/incinerator/index.html, does this suffice?
They all had approximately the same error message
Mmm, there were a few other compatibility fixes later, IIRC.  One of those must've been what was getting you
<@!585868308419444749> 
I get the same error with 0.93.0.
Using 1.5.0 solved it! 🙂

**commitment?: Finality** parameter was added, is this a problem?
I’ll triple check again when I’m back at PC
idk, still seems like a bug in oyster or something.  RPC appears to be responding as expected
So it doesn’t even get a chance to not handle it correctly from what I can see
Except I log the data right after the rpc call before any other client side processing is done and the data is missing
When I use the “filter by tag” option and get rid of wormhole tokens, then cope loads
`src/utils/accounts.tsx` probably isn't handling the nulls properly
Yep I get that, but it ends up breaking other tokens like COPE that are in the last chunk and coincidentally are toward the bottom of the token list. That is how I found the issue - cope account wasn’t being loaded and cached in app
<@!447814520224743424> - yeah, so when those are passed into `getMultipleAccounts`, it'll return `null` for that entry because they don't exist
Thank you for answer.
I am using web3.js(0.90.0) included in serum-ts, but I will try adding 0.93.0+ version myself.
Yeah some don’t - most of the wormhole tagged tokens don’t so I can filter those out. But COPE and other tokens toward bottom of list that do exist were not loading
It's always enabled.
Aight. I’ll experiment. Is zstd an option that has to be enabled on the RPC node too?
lol wut.  Some of those don't exist.  https://explorer.solana.com/address/H3oVL2zJpHJaDoRfQmSrftv3fkGzvsiQgugCZmcRBykG (wKEEP) for example.
Maybe the token-list is broken
I had tried this on my Linux laptop and it failed.  But it seems to have passed when running in WSL
I plugged zstd into the Rust client side, didn't do JS though.   For larger responses it's nice from a bandwidth reduction perspective
How about using https://docs.solana.com/developing/clients/jsonrpc-api#getmultipleaccounts
Probably a pretty big win for something like `getConfirmedBlock`
No.  I think you just want 0.93.0 or newer
The `superstruct` uses the dependencies included in web3.js.
Should it be implemented separately with the latest version?
Hi there.  Stupid question.  I'm trying to run the example_helloworld rust program and I get the following error:

example-helloworld on  master [!] is 📦 v0.0.1 via  v12.18.2 
❯ npm run build:program-rust                                                                                                                          

> helloworld@0.0.1 build:program-rust /home/aaron/Documents/example-helloworld
> cargo build-bpf --manifest-path=./src/program-rust/Cargo.toml --bpf-out-dir=dist/program && mv dist/program/solana_bpf_helloworld.so dist/program/helloworld.so && npm run clean:store

error: no such subcommand: `build-bpf`

I've ensured that I have rust installed and that i've run `npm install`.  What is the next thing that I should check
I think you want a version after superstruct was updated
I am trying to get transaction information, but I get an error.
Devnet works normally. Can you see why it doesn't work on the mainnet? I use web3.js 0.90.0 (serum-ts).

```
Error: 
    at new StructError (/node_modules/superstruct/src/struct-error.ts:37:18)
    at Function.assert (/node_modules/superstruct/src/struct.ts:55:13)
    at GetParsedConfirmedTransactionRpcResult (/node_modules/superstruct/src/struct.ts:31:46)
    at Connection._callee41$ (/node_modules/@solana/web3.js/src/connection.js:2682:29)
    at tryCatch (/node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js:63:40)
    at Generator.invoke [as _invoke] (/node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js:293:22)
    at Generator.next (/node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js:118:21)
    at asyncGeneratorStep (/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at processTicksAndRejections (internal/process/task_queues.js:97:5) 

type: '{jsonrpc,id,error} | {jsonrpc,id,error,result}',
  value: {
    jsonrpc: '2.0',
    result: {
      blockTime: 1618935054,
      meta: [Object],
      slot: 74532160,
      transaction: [Object]
    },
    id: '7f9eeeb5-52c6-43da-95e2-7a5ca13611f9'
  },
  path: [],
  branch: [
    {
      jsonrpc: '2.0',
      result: [Object],
      id: '7f9eeeb5-52c6-43da-95e2-7a5ca13611f9'
    }
  ],
  failures: [
    {
      value: [Object],
      branch: [Array],
      path: [],
      type: '{jsonrpc,id,error} | {jsonrpc,id,error,result}'
    }
  ]
}
```

code:
```
const connection = new Connection('https://solana-api.projectserum.com'', 'recent')
const response = await connection.getParsedConfirmedTransaction('447AYoc2ZMLNng81G6cG8fdXtzkEDmRzRjWfobkGie6ijrnaCVSeMdoAaR19tFhbwGpyHhQ3PGfYZzmG9y8y6Phu')
```
help appreciated 🙏
A question for anyone else around: I noticed many of RPC calls have an encoding options and support ZStandard compression. Are there any benchmarks around that or recommendations for what clients should be using? I think most of the available projects like oyster-swap are using base64 without compression, is that because it is the better option or just because it didn't require zstd client side library to decompress and was simpler?
Here is the log, each chunked RPC request output as JSON, and then also the missing mints, that are found later because of the missing accounts returned.
The full rpc request payload if you can get it from the browser debug console.  Otherwise sure the pubkey list that I can throw into a curl command
No problem. Do you just want the pubkey list?
Thanks, AFK for a bit.  Will check when I’m back in a few (hours)
Let me try capture that for you and see if you're able to reproduce
Fun.  Well if you can capture the JSON RPC request payload, I’ll love to see if it can be reproduced with a raw curl command
I'm definitely at a loss here, though, it's kinda weird
Yeah, at least from looking at the bash file, these should be very similar !
Ah. Yeah the wrapper should be running via cargo 🤔
though similar results happen in `release` as well
If I exclude all the wormhole tokens in the token-list - which appear like they're uninitialized mints and likely have no account and are OK to be empty, then I only request 136 tokens and all of them (including COPE) now return fully.
that's from `${REPO_ROOT}/validator/`
That's from `${REPO_ROOT}/target/{debug,release}/` ?
It's looking like a server side problem.. if I check the data in `results` before it gets processed. I can see huge gaps where `data` is empty: https://github.com/project-serum/oyster-swap/blob/cff4858523b77a7a9ee105a135b6dee6bbcb4634/src/utils/accounts.tsx#L527
(within my cloned repo directory)
which should be running the compiled bin
This was directly from running `./solana-test-validator`
I'm fairly certain, though not 100%
Are you sure you're running the right bins?
this is on an older Intel Chip as well, though, not like my M1 mac or something
yeah, though, super weird
as a side note, I'm on tag v1.5.19
Weird.  Well you could just delete this line: https://github.com/solana-labs/solana/blob/05fa7250b0d026369a54357500cb9d73bfc0cdaf/core/src/validator.rs#L1422
If you don't run into an illegal instruction abort later then I guess you're fine 😕
which matches what was happening even before setting the flags and such
(it just finished compiling and started the test)
```
[2021-04-20T22:19:22.473109163Z WARN  solana_core::validator] CUDA is disabled
[2021-04-20T22:19:22.473144682Z ERROR solana_core::validator] Your machine does not have AVX support, please rebuild from source on your machine
```
<@!445425471027544095> yeah, I still sadly run into the same problem 😦
Haha
Yeah, use the heavy ones 😆
So throw a rock at <@!752722929397137452> is what you're saying? 😆
Ok. I'll look at the client side code a bit more see if there is something broken in getMultipleAccounts
@b wrote that code initially looks like
server is sync
bug on the client side is my guess
Ok, so likely a bug on the server side?
sorry no I mean the code on the JSON RPC server side
(though perhaps I'm doing something quite silly ! I will try another vanilla build, just in case)
Where do you see it being synchronous? I thought it breaks up the requests into chunks of 99 and puts each of them in `Promise.all` which would execute them all in parallel, no?
even when not messing with flags
But the problem is that it seems to not be respecting the fact that my machine doesn't support AVX
hm
<@!374397256469839882> - you shouldn't need to mess with rust flags, by default it'll build binaries that are compatible with the host
I'll check that out 🙂
Thanks! I've been trying to compile it with `RUSTFLAGS="-C target-cpu=native -C target-feature=-avx" cargo build --release --all`, but that seems to fail
I think that'll do it
```
$ git clone git@github.com:solana-labs/solana.git
$ cd solana/validator
$ ./solana-test-validator 
```
It seems like doing the simple thing, which is compiling straight from the source, doesn't really seem to work 😦
Hi! Quick question, what's the easiest way to build `solana-validator` without AVX features
I checked the `getMultipleAccounts` implementation and it's basically synchronous, so I feel this is either a bug in accounts.tsx or web3.js RPC request/response matching.
Yep, so it is requesting 363 accounts (requested in groups of 99) and getting back 147. There is no waits between each request, they are chunked and sent in parallel requests using `Promise.all`
Actually let me double check that statement
<@!445425471027544095> so I can see in the dev console that the last request in the chunk is only getting back half the accounts in the response
So I'd need to get the entire list in curl format, and chunk it up in a loop
yeah, prolly not failed.  the response might be truncated or __?  Simulating in `curl` would probably be easier
No failed requests in Network tab
I've tried public RPC and a more private less restrictive node which shouldn't rate limit in this case but I can double check with the operators
or that's running in your browser, check the network debug info to see what comes back
https://github.com/project-serum/oyster-swap/blob/cff4858523b77a7a9ee105a135b6dee6bbcb4634/src/utils/accounts.tsx#L517
you might be getting rate limited but not sure, just guessing
I guess I would have to compile all the addresses into a list and submit with curl 🤔  But the JS code does it in chunks of 99 since 100 is the limit per call
I'm trying to determine if this is an RPC issue or a client-side issue
In the broken case its trying to get all accounts in https://github.com/solana-labs/token-list/blob/main/src/tokens/solana.tokenlist.json
Do you have a curl command that works vs. one that doesn't work?  https://docs.solana.com/developing/clients/jsonrpc-api#example-32
If I use curl with just a single address (COPE) - I get a result back
I haven't tried that
strange, do you observe this when just `curl`ing `getMultipleAccounts` directly?
<@!445425471027544095> <@!466984915376799748> any thoughts on this one?
ah im not sure but ill check this out
Does rosetta have separate sysroot you need to install x86_64 openssl into?
```/Users/4/.local/share/solana/install/active_release/bin/solana-test-validator: Mach-O 64-bit executable x86_64```
What about the solana-test-validator binary?
strange, I get ```/opt/homebrew/Cellar/openssl@1.1/1.1.1k/lib/libssl.1.1.dylib: Mach-O 64-bit dynamically linked shared library arm64``` when running ```file /opt/homebrew/Cellar/openssl@1.1/1.1.1k/lib/libssl.1.1.dylib```
and ```root:xnu-7195.81.3~1/RELEASE_ARM64_T8101 arm64``` with `uname -a`

i feel like im missing something obvious
ah good catch, could be missing rosetta!
Oh... is there some sort of x86-64 emulation going on here?
```    /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib: mach-o, but wrong architecture
    /opt/homebrew/Cellar/openssl@1.1/1.1.1k/lib/libssl.1.1.dylib: mach-o, but wrong architecture
```
symlink causes an error on m1
All the info passed to my program rather
Yeah, that's the hack, not the end goal. To save myself time do you think I can get all the info passed to my account, signed etc, store it, and then invoke it on another program later ?
I think I get what you are wanting.  A program cannot load an account on demand (one that was not passed directly to it)
Again, thank you for your time. It's much appreciated!
<@!585868308419444749>, <@!445425471027544095>, <@!453347985628200960> and <@!466984915376799748> ... Thanks for all your support, I've got the CLI we are creating doing what I needed (create wallets outside of the code and make them signers on load) and paying for the accounts the program owns. Couldn't have gotten where we are without your help. Outstanding team!
Kind of like client sends order to my program, my program stores somewhere, and later forwards.
Although the idea is that the accounts are passed to my program legitimately, honestly etc and stored for later invocation.
Thank you jackcmay. I will review more closely.
Maybe these programming model docs will help: https://docs.solana.com/developing/programming-model/overview
We love feedback so if something in there does not make sense let us know so we can improve them.
Accounts passed to your program are loaded from the system's account db and are committed back laster if the transaction was successful.  If you want to just send data to your program you can do so with the instruction's `data` field.  Note though that if you call another program (via `invoke`) and pass accounts to it, those passed accounts need to have been passed to your program.  Program's are not allowed to modify the data of an account owned by another program.  What I think you are suggesting is that your program create the serum dex's account state and pass it to the serum program.  That's a no-no.
I've tried `ln -s /opt/homebrew/Cellar/openssl@1.1/1.1.1k/lib/libssl.1.1.dylib /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib` to no avail, ill see if im missing something
okay thanks


///////////////////////////////////////////////////////////////////////////////////////////////

not to mention stakepools can change their fees at any time and that's something we definitely want to watch out for
if you wanted things like average validator uptime though...
I feel a polling model would be fine for stake-pools in general, they mostly only change in interesting ways at epoch boundaries
In general, what are the limits for websocket subscriptions? I'm just trying to think of the "correct" (scalable) architecture. I was thinking of subscribing to each `StakePool` at the very least, but possibly even each validator. Mainnet has on the order of 10^3 validators --- i'm guessing this would be pretty intense even every slot
Yep, then ping probably <@!539801435571748868> for review.
What would I have to do exactly? Just make a PR to the repo?
I'd be happy to!
For a JS-client, currently.  Yes.  We don't have a JS client yet under https://github.com/solana-labs/solana-program-library/tree/master/stake-pool, like we do for SPL Token [1].   Want to work out of the SPL repo to build such a thing though, if you need it anyway?


[1] https://github.com/solana-labs/solana-program-library/tree/master/token/js
oh wait i can use the borsh serializer it looks like
right, so i have to write my own parser for `pub struct StakePool`
The RPC server knows about some programs and is able to decode their account data.  This is a hard coded list.  More generally you can't rely on that, and instead would request the "base64+std" encoding and decode the account data client side
oh it's not in the web3js lib though
so i'm just looking at the `getProgramACcounts` RPC call, I can see there is a `jsonParsed` encoding optional parameter
That depends on the program that owns the account.  We don't have a uniform data layout.  Account data is just bytes that the program encodes how it wants
what's the "correct" way to deserialise the stuff in an Account?
sure thing, I'm just playing around with basic RPC calls now, anyway
no worries either way, at worst it'll just take awhile to respond 🙂
oh you're around. I didn't want to @ you and bug ya
<@!97731475364929536> once the interface is nailed down, i'll deploy again to devnet / testnet.  that version's pretty old
No global state.  Only persistent storage is via the accounts that are passed into it
The program account is just an executable, like /bin/sh.
yeah, looks like jon has deployed an older version of the program on testnest at https://explorer.solana.com/address/poo1B9L9nR3CrcaziKVYVpRX6A9Y1LAXYasjjfCbApj?cluster=testnet
I think i need to understand the solana programming model a little better. I was reading the solana docs but still not 100%
i see
and you call the program to create a new stake pool instance
Yep
so there's one "source code" account holding the program
Each pool has a different one of these: https://github.com/solana-labs/solana-program-library/blob/3613ffe3b05f41de2355eb2954245016f9978473/stake-pool/program/src/state.rs#L31
But same program
oh i see
Yep.  The program (executable code) is the same. What you're referring to would be different configuration options for a given pool account
etc etc
or if you wanted to do a private stakepool
but don't different stake pools have say different validator whitelists
huh wait
Like SPL Token, etc
There'd probably be a single stake pool program that almost everybody uses
oh, wait. sorry lies
yes they would
Aren't there lots of different stake pool programs? wouldn't they all have different pubkeys?
Sorry one more question
A ed25519 public key can be used as the address for one (and only one) account
im sorry for these terrible questions btw lmao
and any single keypair can have many accounts?
web3.js `Account` is killing us 🙂
yep
that says "persistent", does that imply that accounts live onchain?
https://docs.solana.com/terminology#account
Program-controlled, user-authorized, public, restricted storage?
stupid question: what is a concise way to define what an account is in solana?
thanks !
Replace `jq` with `jq -r  .result.transaction[0] | base64 -d | wc -c`
The "transaction" field contains the transaction.  Count the bytes
but how do i get size from that
I guess we don't show that in the explorer.  You can pull a transaction down with JSON RPC though, and inspect it.  An example:
```
$ curl https://api.mainnet-beta.solana.com -X POST -H "Content-Type: application/json" -d '
  {
    "jsonrpc": "2.0",
    "id": 1,
    "method": "getConfirmedTransaction",
    "params": [
      "5MfJbsGxJG2SQcXFMSrzema5hna6hQT16qR8e2zw1x4q9imw3gfbjEfZWMnXfmxuEvAvLoiSRs9NdcoNo1jz6aWv",
      "base64"
    ]
  }
' | jq
```
doesn't say on the block explorer
how can i check a transaction size on the blockchain
Max transaction size is 1232 bytes. Addresses are 32 bytes.  There's other stuff in transactions too. I haven't mathed it exactly but that'll give you the ballpark
or anyone else from the team 🙂
before it blows up the transaction size?
<@!445425471027544095> how many addresses is too much as an input
thank you !
ok got it
Figure out what liquidity pools to dip into on the client, then run a tiny transaction to perform the swaps.  The on-chain program is just for the atomic bits.  The rest can be off-chain
Some of that work will need to be done on the client side
yeah and that probably will blow the transaction size, so unlikely to be viable.
so it loads all of them
are you saying the only way is to create a transaction with every single address?
based on availibility of tokens at a given address
inside the program
and it dynamically changes which one to connect to
that connects to various different liquidity pools
but say im building a program that is like a trading algorithm
oh right
The runtime needs to know what accounts to load before running your program.  They're all declared in the transaction
Makes sense?
That is, when the client creates the transaction that holds your program's instruction, they also provide FdiTt7XQ94fGkgorywN1GuXqQzmURHCDgYtUutWRcy4q as an input address
The account address, FdiTt7XQ94fGkgorywN1GuXqQzmURHCDgYtUutWRcy4q, must be provided as input to your instruction
as an Account object
how do i get this into my rust code
https://explorer.solana.com/address/FdiTt7XQ94fGkgorywN1GuXqQzmURHCDgYtUutWRcy4q
this is a wreapped sol token account
yeah, only line 412 was the example 🙂
`manager_fee_info` comes from this line: https://github.com/solana-labs/solana-program-library/blob/3613ffe3b05f41de2355eb2954245016f9978473/stake-pool/program/src/processor.rs#L346
https://explorer.solana.com/address/FdiTt7XQ94fGkgorywN1GuXqQzmURHCDgYtUutWRcy4q
for example
it requires mint, delegate, state blah blah
yes but the function you linked me requires more than just the account address
The account address must be provided as input to your instruction
given that address how do i create the AccountInfo object
say all i have is the token address, abcdefgh
given a public key
yes but how do i create the account info
The spl_token crate provides methods to unpack an AccountInfo.
example: https://github.com/solana-labs/solana-program-library/blob/3613ffe3b05f41de2355eb2954245016f9978473/stake-pool/program/src/processor.rs#L412

ref: https://github.com/solana-labs/solana-program-library/blob/3613ffe3b05f41de2355eb2954245016f9978473/token/program/src/state.rs#L125
basically given an address, I want to fetch how much tokens its holding in rust on chian
given an account address, how do I create the AccountInfo or Account object in spl_token::state in rust? '
Hi all, has anybody implemented multisig wallets in Solana yet? 🙂 (edit: found the github repo https://github.com/project-serum/multisig)
I think (@)jon has a version of the stake-pool program deployed on devnet but not sure.  We're still making big changes to it though
This stuff is all on the testnet/devnet and not on mainnet right?
ah, gotcha! That's a handy pattern, thank you
General idea: Use `getProgramAccounts` [1] to locate all stake-pool program accounts that successfully deserialize into an `AccountType::StakePool` [2]

[1] https://docs.solana.com/developing/clients/jsonrpc-api#getprogramaccounts
[2] https://github.com/solana-labs/solana-program-library/blob/master/stake-pool/program/src/state.rs#L17
how would I search for all the pools?
(this is for building a stake pool dashboard)
got it
Yes so I'm trying to look for all of the stake pools
yes, the pool address is known beforehand.  I guess you could also use RPC to search for all the pools too.
wait, but you need the stake pool address? i'm looking at `get_stake_pool` function in `client.rs` and `command_list` in `main.rs`
The scrollback from the <#738359173405736980> channel will probably help with context.  I'm unclear on the current state of the project though.  I think it's now idling waiting for a new champion to push it further forward
Thanks <@!445425471027544095> . Is there something to follow on the ArWeave integration?
lol yes, eeeee
gotcha
please NOTE?
oh
please not what?
yes, definitely.  The stake pool command-line tool does exactly this.  Here's the RPC client code: https://github.com/solana-labs/solana-program-library/blob/master/stake-pool/cli/src/client.rs
But please note, stake pools are still under construction so this code may change
I guess there could be a roundabout way of doing it by getting all validator nodes, getting all stake accounts delegated to each validator nodes, .but then i'm not sure what the next step would be
btw, <@!445425471027544095> , is there any way to get a list of stake pool accounts from the RPC?
yep, exactly.  Using BigTable sucks because the Solana Foundation runs it, and could potentially turn it off (accidental or otherwise).  But it was a quicker way to get an MVP out.  The storage backend from RPC is pretty pluggable and could be easily extended by somebody with motivation
Ah, interesting - thanks for the info! I take it getConfirmedBlocks goes to the BigTable instance today & in the future would probably go to ArWeave?
<@!204332593766858752> - yeah, the memo program kinda does exactly that: https://spl.solana.com/memo
The "memo" is just data in the transaction, it doesn't get stored in an account on chain at all
The cluster itself doesn't care.  All that matters to move the cluster forward is the blocks down to the highest max-confirmed root.
It seems like you could query other transactions associated with the current account using getConfirmedSignaturesForAddress2 and then getConfirmedBlocks to get a sort of 'permanent' data storage for that account in the form of inputs/outputs all being saved in the transaction history
There's a couple ways to measure it:
1. 12TB in a BigTable instance for quick(ish) access over RPC.  There's also a WIP ArWeave project to store Solana blocks on ArWeave
2. Copies of the real cryptographically secure ledger are in cloud storage multiple times.  These aren't currently shared publically but are more just as a failsafe to repopulate BigTable if we ever needed to
Does the Solana mainnet cluster care about preserving history indefinitely or is that more of a temporary feature?
how much storage is that
wow
all of them
Nice, thank you. How many old blocks are stored?
> how permanent is this history?
As long as there's an entity that cares about preserving it, and runs RPC servers to access it
It's not possible.  You can view the other instructions in the same transaction though
Actually, above sorta answers the question - although my next question is, how permanent is this history? Is it viable to store data permanently in transaction history instead of in accounts?
Is it possible to read from transaction history in a Solana program? Wondering to what extent that could be relied on as a store of data
Some methods to get you started:
* https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedsignaturesforaddress2
* https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedblock
How does one get historical data from the JSON RPC API?
Airdrop to yourself using the solana CLI

https://docs.solana.com/cli/transfer-tokens
Im finding developer who knows web3.js for porject
also docs mention a faucet program for devnet, how can i get devnet sol to play with  ?
Big thanks, now the real work begin 😉
why error ? When I use createAssociatedTokenAccount https://github.com/solana-labs/solana-program-library/blob/df994bf426fbab903b47e7e9d1a9cd9e4e8ef9ba/token/js/client/token.js#L493
Yep! https://docs.solana.com/cluster/rpc-endpoints
The new version of the `spl-token` CLI assumes you're using associated token account addresses, which may not always be the case, especially for older accounts.  Check out the help, which will tell you about the `--address` parameter
Sorry to hear that, we do our best to keep things up to date, but sometimes things fall through the cracks.  There was actually a nice discussion about additional resources starting at https://discord.com/channels/428295358100013066/517163444747894795/834703881803137088
What sort of dead links were you seeing? we'd be happy to fix those up asap
check the help using `spl-token transfer -h`, but you probably need to specify the `--from` arg
Is there public testnet rpc node available  ?
Thanks, i think i found what i need now i need to glue things together 🙂
Not a dumb question at all! This confused me for awhile to be honest. You've completely understood the purpose and the general idea, so the only difference is that `createWithSeed` is more used with a normal private key in user-space, ie. you sign with your private key, and provide the seeds that include your public key and "something else" to derive the address, while `createProgramAddress` is the program equivalent
Maybe this will answer your question? https://docs.solana.com/developing/programming-model/transactions#account-address-format
Thank you so much!!
Everything before was working fine
Hello any idea why this command return me an error about another account address ?
some of the hyperlinks meant to explain things in depth link you to dead pages
the only thing i have seen is the paulx article and its really not that good to begin with
am i just bad at googling for this or is there a serious lack of quality documentation on solana dev in rust?
A comment on the docs and source code too: It would be extremely helpful to be able to tell without having to look at the source which methods are on-chains and which are not. I find it to be a regular source of confusion.
E.g methods from serum common used to be in a standalone repo, but are now part of serum-ts monorepo (just an example).
Why error ?
Dumb question.
What is the nuance between `createProgramAddress()` and `createWithSeed()`  ?
I know that:
• Both return a public key
• `createProgramAddress()` takes seeds and a prog_id as params. It returns a PDA which is off-the ed25519 curve and has no private key (completely managed by the program)
• `createWithSeed()` derives a public key from another pubKey, a seed and a program_id.
I assume it has no secret key either, but CAN be on the curve.

Does it only make sense to use these methods when creating SPL token & mints?
Ok my question is dumb is should be more like : from the bytes of my public key what is the encoding of a solana address ?
exactly!
Giant as in one deployed program is mom for all SPLs
Ok. So.... we have one giant token program that generates subaccounts with unique hashes and owners, where the owner can be system user account, multi sig or programs, and it’s ok cause the execution can be done in parallel cause state change happens in the subaccounts.
i see 🙂
ohhhh
`spl-token balance -h` can tell you 🙂
bingo -- it'll specifically be the program derived address that's the owner, and you can have a bunch of those
Hi there,
I'm starting to toy around with sol and the first thing i want to look at is public key derivation scheme à la bip32 and account address 
Should i use program  ? or can i happily derive off chain with with hded25519 and build my addresses from there ?
how do i get the balance of a token account from spl-token cli
Got it. So I assign the program as the “owner” for the SPL token ?
so that way, you don't necessarily need a signature
using program derived addresses, you can have the program "sign" a mint transaction in a permissionless way -- more info about how those work at https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
Okay I will do that thank you 🙂
The error was the link for the image of token, it was not a direct link, the rest is fine, but still, in the solana explorer the name don't appear :/
yeah that'll be your best bet, and if we're dragging our feet then you can ping 🙂
Okay np problem, so I can open an isue for it ? 🙂
oh oops! can you submit another pr or issue about it?

Yup, all the SPL tokens are deployed by one single program. So changing core token functionality will be fairly limited for now. So we can assign a program to be able to mint, but the mint txn will need to be signed by a user account or multi-sig, would that be correct?
So I was wondering how to correct this ?
Yes it's about a PR, the PR was accepted and pushed, but there was in error in it lol and nothing display on solana explorer 😅
in the solana case, it's the on-chain program which runs and manages other on-chain programs
if it's about a pull request, they'll get to it 🙂
what is a bpf loader?
Hi there, is it possible to talk with an admin of https://github.com/solana-labs/token-list in dm please ? Thank you very much
That's the idea, but to be clear, you wouldn't redeploy the standard token program, since that's already in place and well-supported by all of the wallets.  You may want to create a program that manages / holds the main tokens and then distributes some *other* tokens to royalty recipients, or whatever logic you need.  You'll soon be able to modify the token program for your needs and deploy that, but there's a lot of work to have it well-supported by the whole ecosystem, so we first encourage you to compose with the existing token program
also, does this mean that if someone do not use this SPL, wallets etc cannot recognize their token?
quick question on this - so the desired design pattern is to deploy a standard token program, and compose on top of it, for example in the staking program. 

however, doesn't it mean *anyone* can compose on top of it, or is there a way in the standard token program to limit it?
the error text on my machine is the exact same as the one in their gist
here is a gist of someone who had the same issue: https://gist.github.com/yahsinhuangtw/fe0156e559572dc2a798f58bc1882fff
haha thanks! deadlines are a powerful force 😅
<@!539801435571748868> Thanks for the reply! I will have a closer look at the code in Github.
Hey Jon! Been tracking all your work on spl-programs, and i am super impressed at how prolific you are. 😄
It's definitely possible, but you'd have to develop your own program to do things like distribute royalty payments.  your best bet is to compose a solution on top of the current token program
That's exactly right! <@!672313824191315978> let me know if you have any other questions
devnet.solana.com in sollet gives me "failed to send transaction: Node is unhealthy". I tried various tx and same issue
<@!672313824191315978>
Im getting ```
failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions
``` when create createAssociatedTokenAccount
<@!668473703855685664> whats. the error?
thanks 🙂
Hello everyone!
I am looking into creating a fungible token / smart contract, that can be made to provide royalties to an address or multiple addresses similar to the ERC721 tokens on Ethereum (https://eips.ethereum.org/EIPS/eip-2981). Can someone tell me if this is possible and if so point me in the right direction?
I have reviewed the SPL documentation as well as the on-chain programs documentation and am still not sure, so any advice would be much appreciated.
You'll want to use the `@solana/spl-token` package: https://www.npmjs.com/package/@solana/spl-token
Yes, this is correct! What doesn't work?
In web3.js, for example, is there a function that can be used to send USDT from wallet A to wallet B?

**SystemProgram.transfer() ** seems to be able to transfer only SOL, but can't other SPL tokens be sent?
but this should work, what happens?
ah yes sorry creation
in my  case
I found but it doesnt work  https://github.com/solana-labs/solana-program-library/blob/df994bf426fbab903b47e7e9d1a9cd9e4e8ef9ba/token/js/client/token.js#L493
i guess issuing the transaction is simple but also complex, since you have to fund it, etc
++
but not one showing the creation.
in the middle of the page
yes https://spl.solana.com/associated-token-account
is there sample code showing client side example of the creation of associated token accounts?
nope, just a fan. It's still in beta but once audited, I wouldn't be surprised if it became the defacto way to write programs
its indeed an amazing tut
this looks amazing. was thinking of using it, but wondering how production ready it is. are you one of the core maintainers?
I got swarmed
ah but it works on mainnet-beta
I am getting `ws error: Unexpected server response: 503` trying to do it on TOKEN_PROGRAM_ID on devnet
Better to give your program an `Initialize` instruction that's called atomically with `SystemInstruction::CreateAccount` to act as a filter
Yeah I think so
Thanks
with the poor man's free RPC
when you subscribe do you get rate limited too?
You'd also probably drown in them
If you specified the System Program ID, you'd get SystemInstruction::CreateAccount notifications
What is the best web3.js function to listen to tx interacting with a given program id?
https://github.com/solana-labs/solana-web3.js/blob/7abb0f7/src/connection.ts#L3357-L3366
onProgramAccountChange? not sure what that means "whenever accounts owned by the specified program change" would a new account trigger this?
after hello-world i would say https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/ is a great way to get introduced to many solana concepts
We need to get that thing audited 🙂
Ah nice
there's also a bunch of examples in the anchor repo: https://github.com/project-serum/anchor/tree/master/examples
Or memo first, maybe
Mmm... spl-token probably
<@!585868308419444749>
after hello-world
whats the best example program to learn from
yep got it
Just no `--log` param on the validator
😄
easy
lol that works
ohhhh
Yes!
run both?
and then run solana -ul logs
are you saying i should run solana-test-validator
`solana-test-validator` starts all of the network stuff on localhost?
Yeah that's why I was interested in whether you were passing other flags to `solana-test-validator`
whenver i run that
but that just says unable to connect to server
The exact command in the pre-formatted text box
No
solana-test-validator solana -ul logs?
you mean type
`solana -ul logs` seems to work here
just --log
Are you passing other flags to `solana-test-validator` ?
only TRACE messages
however now my debug messages aren't coming
Ah shit
i ran that RUST_LOG mask
Good.  I was also confused 🙂
ah wait nope
ignore me 🙂
ah wait i got it
confused
but i dont want the validator logs just my messages
it says do this in the README
Enable on-chain program logs:
```bash
$ export RUST_LOG=solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=debug,solana_bpf_loader=debug,solana_rbpf=debug
```

Start a local Solana cluster:
```bash
$ solana-test-validator --log
```
learning from that
just trying to debug the hello-world program
solana -ul logs                                                                                   root@a544b1c58320
Streaming transaction logs. Confirmed commitment
Error: unable to connect to server
Try `solana -ul logs` instead of passing `--log` to `solana-test-validator`
dont care for the validot rlogs
i just want my programs log messages
Are you really  interested in the validator logs, or do you just want your program's log messages?
how can i ignore these vote messages
i keep being spammed by these messages
when i run solana-test-validor --log
solana_runtime::message_processor] Program Vote111111111111111111111111111111111111111 success
beyond the hello_world, what is another good simple program to tap into?
How can create token associated  account? web.3js
got it, thanks
<@!539801435571748868> would be you best source of info on that program
Tokens are minted here, I think https://github.com/solana-labs/solana-program-library/blob/master/stake-pool/program/src/processor.rs#L1489-L1499
If not, is there an example where it shows LP tokens being minted?
in this staking program, are there any LP tokens minted?

https://github.com/solana-labs/solana-program-library/blob/master/stake-pool/program/src/stake_program.rs
got it
It's just bytes.  Serialize whatever you want into it however you like
is this "storing of type" the same operation as create a subaccount for the program for the account?
is devnet having any issues atm? im getting a `ws error: Unexpected server response: 503` from the devnet.solana.com endpoint
so that is why every account have to store the token type.
the account data is capable of storing types?
ok, this is interesrting.
thanks <@!831450660146642974> , I have set the devnet and deployed, but also wondering how to set up the front end
For instance an SPL Token Account, or SPL Token Mint, is a program-defined type, stored in a native account's data
All accounts are native accounts at their core.  Anything else is implemented in a native account's `data` field
so does this apply to only system owned accounts, or all sub accounts like for example a USDC  subaccount owned by a user
thank you!
Like this? https://docs.rs/solana-program/1.6.6/solana_program/account_info/struct.AccountInfo.html
is there an api for functions available to ```account_info```?
i see this `try_borrow_mut_data` function call in hello-world example, but i dont see this anywhere else in the docs.
as in, i see that these programs use tokens, but i am not sure where they create new tokens
btw, sorry for n00b questions 🙂
are LP tokens minted for these?
i read through those
In https://spl.solana.com: token swap, token lending, stake pools
is there an example of this?
got it
We encourage a model of composability, where you don’t modify the SPL Token program at all.  Instead new features are added in new programs that call into SPL Token instructions.  This is a little different than ERC20 where the interface is all that matters and everybody supplies their own custom implementation
haha, love the "quotes and all"
ok, but what if we want to build on top of it? do we modify it, and how is interoperabiltiy maintaineed?
Air quotes and all 🙂
Yep
like the erc20?
is the token program considered a "standard"
hey guys
less hassle
If you want to interact with token swap without altering the program i recommend to use the one that is on devnet
thanks!
`cargo-build-bpf` is included in the Solana tools
Ah, please install https://docs.solana.com/cli/install-solana-cli-tools#macos--linux
error: no such subcommand: `build-bpf`
should i need to install build-bpf?
works for me.  For us to help you, you'll need to provide specifics of what's going wrong
Thanks <@!445425471027544095> 

To build a development version of the Token Swap program, you can use the normal build command for Solana programs:

cargo build-bpf

but seems not working
Yes there is usage.  Things like https://swap.projectserum.com/#/info are based on this program
Hi, may I ask has anyone set up the Token Swap
https://github.com/solana-labs/solana-program-library/tree/master/token-swap
you can create a "Bid" account for each user which stores their latest bid
getting timeouts on the devnet 😦
unable to figure that part out
I'm working on an auction and looking for ways to associate accounts with bids
had a question around setting up a hashmap in solana programs
hey hey just starting dev in solana
np, welcome!
I see. my bad then sorry again for bothering.
The maintainers of that repo don't hang out here much, they do a sweep once a week or so
lol nice, I like it.  You get one ping then check the box
sorry I read that we could ping once in a while won't do it again
ahem 🙂
Hey was wondering if someone from the team could pass our pull request to the github owners:
https://github.com/solana-labs/token-list/pull/58
<@!585868308419444749> 
thanks 👍
or is there some slightly less large configuration lol
is everyone just chucking 128gb, 32 core systems with NVMe SSDs at this
I guess I'm wondering what kinds of nodes people are running then
Hi. I need help or advise.

I have API node on my server. Then my steps:
  - I send encoded transaction and get hash.
  - I try to get confirmed transaction by hash. Transaction is valid and all is ok.
  - I try to get confirmed transaction by hash. There is no such transaction on my node and mainnet.

Why it is happen? Is it out of sync?

Logs (custom):
...
8930644 01:14:43.857: submitTransaction. [sol-prod-activ-14-012] (api.sendEncodedTransaction). 5kcVGEER8vA8hkUpogK13HkfM1xMXTaeko9FyXjLw8uUU4YBnNL3gB9igzSGm2L9vXZowCYc9j4UDDSLuFfTrhD3
...
8930691 01:14:44.488: getTransaction. [sol-prod-activ-14-012] (api.getConfirmedTransaction). 5kcVGEER8vA8hkUpogK13HkfM1xMXTaeko9FyXjLw8uUU4YBnNL3gB9igzSGm2L9vXZowCYc9j4UDDSLuFfTrhD3. TransactionParseStatus: isOK.
...
8932118 01:15:18.029: getTransaction. [sol-prod-activ-14-012] (api.getConfirmedTransaction). 5kcVGEER8vA8hkUpogK13HkfM1xMXTaeko9FyXjLw8uUU4YBnNL3gB9igzSGm2L9vXZowCYc9j4UDDSLuFfTrhD3. TransactionParseStatus: error<There is no transaction with such hash>.
...

May be the solution of this problem - it is to wait 1,2 or more confirmations? But it is not a good solution for me.
ha, love it
testnet RPC is also still a single box in somebody's shed somewhere too.  scaling that as well
Demand has increased quicker than we expected
mainnet-beta RPC infra is now managed by pros, we're scaling devnet infra still.
Also it looks alright but why is devnet so dead slow compared to mainnet-beta?
it's also fairly slow as far as I can tell? I mean, it does ok for testing for sure !
It's free 😛
You need to be reasonable, yes.
Yes, I know, but i have heard of the hardcore rate limitations
"Free tier" is here: https://docs.solana.com/cluster/rpc-endpoints
I know that if i start my own, my knowledge is so thin that it will eat all my time instead of doing what matters, the dApp side of things
But it seems like Solana could have a free tier like that if a RPC as a service pops up, helps a lot to get started with minimal overhead
I was wondering why I hadn't heard of this service
ok
oh
maybe I'll start using them instead of rolling my own node 😛
On the polygon chain
oh really ? where ?
I was impressed by Polygon, not sure how they do it but they have RPC as a service for free and you can hammer it quite a lot, something like 150k requests per day, no more than 100/sec LOL
right
*just for accounts BTW.  Other stuff you want to persist
also thanks for all your answers btw !
Yep. tmpfs all the things
are you also using tmpfs on these instances <@!585868308419444749> ?
There are operations working on RPC as service as well
for experiments use localnet 😄 or devnet
I mean, it's probably fine for small scale experiments
yeah, this is also my thought 😦
Seems quite prohibitive to run a node for a simple dApp that has no revenue
absolutely ! this is most of my worry
Keep in mind that egress will murder your bill in the cloud
We use n2-standard-32 on GCE
In AWS or GCloud or whatever
Especially with a single, maybe-not-NVMe disk
ok; what would be some usual instances to run a reasonable node on?
It would help, yeah
it's very odd, it appears as if it is catching up and then falls behind
I'm not, should I be? 🙂
Actually, tmpfs might be sketchy with 32GB RAM
And are you running accounts on tmpfs?
ha, yes, think, it's whatever the default is on linode
Think or know? 😉
god I can't type sorry
*NVMe
I think it's nVME
SSD 640 GB local storage
What's your storage situation?
is having a hard time keeping up with the other nodes
yeah, it just appears that even my current set up with 32 gb RAM, 16 cores
ok, sounds good
<@!832481870360084490> - specs are basically the same.  A non-voting node does all the same work as a voting node
I'd also like to know this!
(esp rn, when silicon is kind of a pain to find... though running instances on DO or whatever would work, too)
It seems that the specs even for such a system are particularly beefy
quick q: what's the cheapest possible way to run a nonvoting, nonparticipating node?
Is there actual error text?  That summary isn't very useful


///////////////////////////////////////////////////////////////////////////////////////////////

You should deploy with the upgradeable loader and not clear the upgradeable flag until you're sure you're done with it.  In this case the program buffer account rent of past deployments can be recovered
Hello everyone one question about program accounts after they are deployed. The rules say that a readonly executable account cannot have its balanced changed. But since once set to readonly executable it cannot be unset doesn't this mean that any lamports in this account are then forever "stuck" there? For example if I wanted to deploy an updated program for the version 2 of my app I've basically lost my lamports that were in this account.
Sorry nvm it is stored in data account. To read it you need to pull data from this account.
I can print its value, but I cannot understand where it is stored
Guys, is it possible to check the solana explorer, the variables stored in a smart contract and their respective value?

I am studying the hello world example, and my entrypoint has been successfully called 3 times, I would like to see this data stored through the explorer
Is there a reason why solana/web3.js only returns a subset of transaction fields from `getConfirmedBlock`? It doesn't set the` message` which has the `accountKeys`, etc
withdraw's a bit strange for constant price in general, since we enforce maintaining the price if you're withdrawing both token types at once, but i'm happy to talk through your findings!
```solana program write-buffer ./target/deploy/oracle.so --buffer-authority usb://ledger?key=0  --keypair ~/.config/solana/id.json
``` In this case `buffer-authority ` is signing all transactions aka impossible with ledger. I think it should work like deployment of programs
i think i may messed something it worked on 2nd try still typo in docs
set-buffer-authority does not work ```solana program set-buffer-authority 6Bj2vrb83v2vGjE2fFeQcLhpjfoqF1nrBBiDcAJCKrPd --new-buffer-authority 9ko37FkzzaK89wQrQLVrZ5pip5o6oM3dUxuCpZPCYCmx
Error: Setting authority failed: Error processing Instruction 0: invalid account data for instruction
``` + there is typo in docs  `--new-upgrade-authority` instead of `new-buffer-authority`
Seems like `solana program` does not set right upgrade authority when using ledger ```solana program deploy ./target/deploy/oracle.so --upgrade-authority usb://ledger?key=0    ``` this still uses default key as `upgrade-authority`
Is there a reason why serum/bonfida/raydium do not have an (iOS) app? Is it due to app/play store restrictions?
well if someone is interested i can provide all data
EDIT: I think withdraw is clearly not doing the right thing, the rest of the saga with token_b_price is a UI issue
lost forever most likely
The best fun with constant price is that when you withdraw the liquidity a part stays in limbo
rekt
i think that is how we land on this 1/50 ratio rather than the expected 20
the ratio of decimals between those two tokens is 1000
oh i think i found the problem,
token_b_price in UI is quite deceiving, as it doesn't translate decimals
and i claim bounty, but more importantly, fame
I declare constant price to be bugged
even with 99% slippage
actually price looks alright on mainnet in the swap UI but it always fails with "Swap instruction exceeds desired slippage"
Given https://github.com/solana-labs/solana-program-library/blob/master/token-swap/program/src/curve/constant_price.rs#L37-L52
it should be what i said
it gives the expected result
1 token B gives 20 token A, but trying on mainnet now the result is completely different
https://discord.gg/98drp7Y3
#dev-questions in the serum discord is the best place for questions about Anchor
<@!831450660146642974> what would you expect as a result?
https://explorer.solana.com/tx/4Q5VzMagSAYTzjCAaMminWBXrDxctdNMSYVVSqWLgushEDZxECJ17GGZBsQEybqdSxqSXodKUC791N6JJPnomxwp?cluster=testnet Initialize swap, so far so good, right curveType 1 constantPrice, token b price is 20
token A 5HAit9JjFKsbcmnST3wfm6PhPwQcuUH6hGcig4VYRoFY 4 millions
token B  JCZTt8Ph1fh7sYbFHBD9tbN8Gx2WuNhuihzdkPsd2JLr 200 000
https://explorer.solana.com/tx/716vqiEeeKYR8aS54JDrBoygR2n2z4dsFFjKdL2rXg7QXnphTUhJnxTHBLZ6vAcKdL9UGijMwyhhWvVp63d18bR?cluster=testnet first swap
150 000 token B for... 2991 token A, like O_o
https://explorer.solana.com/tx/4PMLnNeHQzss7t4WT8SiFmUq8jSdNP4HRUK4bziyRhhmLMcXg2wT3ygxzqs13ndJzRmW7BG4cC6TytkVJGoLWpD3?cluster=testnet second swap
100 token A for... 4985 token B
<@!539801435571748868> I think i am either stupid, or i found a gigantic bug in curveType constantPrice
I'm trying to setup a multi-sig token transfer and ran into an issue that produces a crash. This example is run with the same key, which controls the nonce-authority, but neither of the multi-sig accounts, that are allowed to sign the transaction.
whereas, it appears, from webjs it is up to the caller/program protocol to serialize or not
found it in `instruction` it is doing a `serde` serialize which uses the first 8 bytes for the data length
<@!466984915376799748>  What I can't find is where in the SDK 'message' it encodes the data... All I see in the `compile_instruction` is a clone of the data vector.
<@!831450660146642974> I didn't realize they were deprecating serum swap, i'll double check what's going on there. either way, the codebase will certainly live on 🙂
Essentially i am feeling my tx is too slow to occur, I set skipPreflight: true, then it went from 4s to 1-2s
Not fixed yet... it does appear that the Instruction data on the client IS being serialized. If I send from webjs the data goes over as `[1, 1, 0]`. However; in the CLI with:
```rust
            Instruction::new(
                *program_key,
                &vec![1u8, 1u8, initialize_instruction],
                vec![
                    AccountMeta::new(account_pair.pubkey(), false),],
            ),
```
It is resulting in: `CompiledInstruction { program_id_index: 3, accounts: [1], data: [3, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0] }`
no worries, just sounds like there might be a bug that could be fixed
But thanks for your help
I'd have to double check to make sure I'm correct about the different conf levels, and can't right now, sorry...
hey! programs store state in on-chain accounts: https://docs.solana.com/developing/programming-model/accounts#storing-state-between-transactions
hmm you should be able to wait for a lower level of confirmation, can you describe more what's happening when you use lower confirmation?
haha I thought the same thing at first, happy to hear you fixed it!
if solana programs are meant to be stateless, why do so many programs have a `state.rs` file?
DOH! Correct, I found the issue.... I thought it was the sdk instruction file...
Interesting. Thank you... But my observation is if I create a market on serum Dex i do have to wait some time to be able to  do Market.load. the only way I've found to get the market.load to find the market is to wait for some higher level of confirmation. I'll have another play and see which one guarantees the market can be queried
that error is happening on chain inside your program. Can you share some of your code around line 56 in `src/insructions.rs`?
Hmm I don't exactly follow but let me know if you get stuck on this
Oh, well if you're talking about a single node cluster, that's different. I was speaking to a normal running cluster like tds or mainnet.
> Why would local cluster with one node not know that it's finalized?
For a single node cluster, you don't have to worry about malicious nodes or forks or anything. Every block is basically final. It's just that we assume a node is running in a cluster and define finalization as 32 block confirmations
Am I supposed to serialize the 'data' in the Instruction first?
i am asking because i see a 4s delay between a chain event and my tx timestamp i craft from it, and that is the only thing that looks intensive. I guess i'll have to drill down then
Still a bit confused. Why would local cluster with one node not know that it's finalized? Does the information only cascade one way and a single node doesn't know that the transaction is confirmed? Or is my guess just non sense? Lol
And the error:
```
2021-04-23T10:32:07.354295000Z DEBUG solana_client::rpc_client] -32002 Transaction simulation failed: Error processing Instruction 1: Program failed to complete
[2021-04-23T10:32:07.354342000Z DEBUG solana_client::rpc_client]   1: Program 11111111111111111111111111111111 invoke [1]
[2021-04-23T10:32:07.354357000Z DEBUG solana_client::rpc_client]   2: Program 11111111111111111111111111111111 success
[2021-04-23T10:32:07.354369000Z DEBUG solana_client::rpc_client]   3: Program TrackDKBcmqgPqRqyCjgjQraARqjtpPb6JJ1VWtiUxj invoke [1]
[2021-04-23T10:32:07.354382000Z DEBUG solana_client::rpc_client]   4: Program log: libstd rust_begin_panic
[2021-04-23T10:32:07.354394000Z DEBUG solana_client::rpc_client]   5: Program log: panicked at 'called `Result::unwrap()` on an `Err` value: Custom { kind: InvalidData, error: "Not all bytes read" }', src/instruction.rs:56:55
[2021-04-23T10:32:07.354411000Z DEBUG solana_client::rpc_client]   6: Program TrackDKBcmqgPqRqyCjgjQraARqjtpPb6JJ1VWtiUxj consumed 200000 of 200000 compute units
[2021-04-23T10:32:07.354425000Z DEBUG solana_client::rpc_client]   7: Program failed to complete: BPF program panicked
[2021-04-23T10:32:07.354437000Z DEBUG solana_client::rpc_client]   8: Program TrackDKBcmqgPqRqyCjgjQraARqjtpPb6JJ1VWtiUxj failed: Program failed to complete
Signature Err("error: send transaction: RPC response error -32002: Transaction simulation failed: Error processing Instruction 1: Program failed to complete [8 log messages]")
```
Hi, I've been successful creating a new account in our CLI app. Recently I wanted to add an account initialization which is done by our program. The instruction data is a 3 byte vec![1, 1, 0] and I pass the target account whose state I want to initialize. However; I'm getting an error on the send_and_confirm. Here is the code:
```rust
    let mut transaction = Transaction::new_unsigned(Message::new(
        &[
            system_instruction::create_account(
                &wallet_key_pair.pubkey(),
                &account_pair.pubkey(),
                account_lamports,
                state_space.try_into().unwrap(),
                &program_key,
            ),
            Instruction::new(
                *program_key,
                &vec![1u8, 1u8, initialize_instruction],
                vec![
                    AccountMeta::new(account_pair.pubkey(), false),],
            ),
        ],
        Some(&wallet_key_pair.pubkey()),
    ));
    println!("Tx pre-sign {:?}", transaction);
    let (recent_blockhash, _fee_calculator) = rpc_client
        .get_recent_blockhash()
        .map_err(|err| format!("error: unable to get recent blockhash: {}", err))
        .unwrap();
    transaction
        .try_sign(&vec![wallet_key_pair, account_pair], recent_blockhash)
        .map_err(|err| format!("error: failed to sign transaction: {}", err))
        .unwrap();
    println!("Tx post-sign {:?}", transaction);        
    let signature = rpc_client
        .send_and_confirm_transaction_with_spinner_and_commitment(&transaction, commitment_config)
        .map_err(|err| format!("error: send transaction: {}", err));
```
shouldn't be too bad if you're calling it occasionally. If you call it in a tight loop with lots of iterations it's going to slow things down, not sure why you would do that though
yes the js one
oh <@!831450660146642974> you're asking about the JS function?
yeah I don't recommend using it on-chain. It has variable compute cost depending on how many nonces it tries until it finds a program address that's off the curve
not really related to program complexity, it could be that some nodes are having a hard time keeping up with higher TPS, could be networking issues, could be that some nodes are offline and it takes longer to get to 66% of the stake confirming. hard to say
`PublicKey.findProgramAddress` is this function particularly intensive? I could time it...
yeah np, <@!539801435571748868> please correct me if I'm wrong here 😛
Thank you for confirming it isn't going anywhere
fair point
Yeah I guess they could say "Serum Swap" is being deprecated
Is it generally 30s for full confirmation? Or does that depend on the complexity of the programs and transactions
`swap.projectserum.com is being deprecated`
`Swap is being deprecated`
but feel free to reach out to serum about it!
Those swap pools are being deprecated, it's just the code in the solana program library that isn't. I don't think it's particularly unclear, that message is aimed at users not devs
Clear answer, thank you
So this need to be reworded
I believe token-swap is the basis for other swap projects, so it's not going anywhere afaik
Blocks are created every 400ms so if your transaction lands in a block, it will gain an additional block confirmation roughly every 400ms. I think that's how it's meant to be interpreted. Anyways, the 30s is for finalization which means the block is never going to be reverted. Solana provides "optimistic confirmation" which is another form of finality which says that the block is final unless X% of the stake does some slashable behavior (or the cluster stalls, I think). Serum uses full finality because when large amounts of funds are at stake, you want to be certain that the funds are settled. Most apps don't need that though and I would argue that Serum doesn't require that either. Optimistic confirmation is about 1.5-3s
Is this poorly worded? Is token-swap support by projectserum deprecated or is token-swap also deprecated by everyone .i.e. solana-labs?
Hi, I had a question about confirmations please... In much of the marketting it says confirmations are 400ms. However for many of the Dex operations it takes longer (say 30 seconds) to get fully confirmed.  This is running a local cluster, or against testnet. Could anyone help enlighten me what's happening to cause such discrepancy please ?
Did anyone in here tried to create a wallet app for iOS? Are there difficulties to keep into account / any best-practices to share?
Is there a specific channel for anchor's issues?
it's kinda hard to understand(
ok thanks for the answer, then i have diffrenet question about how can i connect my own token wallet by using token address and creaeted-associated-programm-account ?
It can't change
okay, then for production i should change it or not ? or the ASSOCIATED_TOKEN_PROGRAM_ID will be the same even in production stage ?
All program IDs are constant for a deployment.  It's just the address where the program executable data lives
okay, again thanks for your feedback, it sounds good, but do you have any information about ASSOCIATED_TOKEN_PROGRAM_ID? Should i change it or it's a constant value such as TOKEN_PROGRAM_ID? If i can change it, how can i get new one ?
Yes, token program is always the same as it's a Solana program
Hi, I haven't actually needed to create associated token
thanks for reply, but i didn't understand how you created ASSOCIATED_TOKEN_PROGRAM_ID. TOKEN_PROGRAM_ID is always the same, am i rigth?
Solana js libraries
I use the Solana is libraries and use the Token class directly. Not sure if that's any help. Have a look at GitHub.com/teddytomas/js
Hi, what are ASSOCIATED_TOKEN_PROGRAM_ID and TOKEN_PROGRAM_ID ? how can I get them for creating my own token?
👍
Yeah I probably just have some sort of PTSD from this being our third docs platform an it's not completely awful
Just sayin...
I would be interested in collaborating with someone on implementing an RPC client for running examples built with Web3. Coming from the app/web dev world that would be really helpful in learning how to develop on the platform
It sure does.
It has a copy button though!
Yeah that's just a boring ole markdown page
a mini codepen or something similar.
Who maintains these docs? It would be cool to be able to run the examples from within the page itself. Know what I mean?
and I see a non empty result!!!
yep - that's what I did
Just steal the curl example and replace the RPC url with the mainnet-beta one
Pass the program ID instead (`TokenKeg...`)
The mint is the designator for a particular token
Yep way off 🙂
In that example I see a mint property. Can I replace that with programID: MY_WALLET_ADRESS or am I way off base here?
<@!809618961779392513> try this instead. https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountsbyowner
Hrm... actually, we have a much less terrible way to do this now.   Should probably update the example
`TokenKeg...` is the SPL Token program ID and should stay the same
yep - I changed that to my wallets address
You want to change the `vines...` one
That's not the address you want to change
I think that's what I am missing. How do I find the address for Solflare?
The example uses: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
And which address did you use from solflare in the JSONRPC query?
so in my curl request I am using this endpoint: http://api.mainnet-beta.solana.com
Yeah that should be right
ahh sorry. In my Solflare account I am able to select Mainnet, Devnet, or Testnet. It was defaulted to Mainnet.
Ok. That example is fine
> I my settings I do see it set to mainnet
I don't know what that means.  Can you elaborate?
I my settings I do see it set to mainnet. Is that different than mainnet-beta? Also, let me see how I can find the right cluster to target. I am looking at the "Finding all token accounts for a wallet" example here: https://spl.solana.com/token
I'm also not sure which examples you're referring to to be sure that _they_ are targeting the expected cluster
Solflare allows you to select which cluster it's targeting, so that assumption may be incorrect
I have been working through the SPL docs and have some questions. I am able to run the example curl request for Finding all token accounts for a wallet. However, when I substitute the wallet id from the example to a wallet I have on Solflare I see an empty response. I am assuming that Solflare is also running on mainnet-beta. Apologies in advance if this is a basic question but I am new to Solana.
Yep
Is the the right channel for JSON RPC related discussions?
No need to ask to ask. Just ask. We have bright community to lighten our load
Hi I'm looking to talk to someone (admin/developer) about developing a new protocol on SOL. Thanks 🙂
On devnet*
https://pastebin.com/raw/8H0w7KH0
Whenever the flag is specified, deploy fails
I seem to be having issues deploying an upgradeable program when specifying max-len
Thank you! So the client is simply just to interact with the on chain program. And in that case they are using typescript to do that
https://github.com/solana-labs/solana-program-library/tree/master/token/js in this case it is used for integration testing but also builds a npm package <@832686202074300446>/spl-token
https://github.com/solana-labs/example-helloworld/blob/master/src/client/main.ts in this case it is a nodejs example, that you run on the computer
for integration testing but can be also used in a webpage, some part of it
Hey, I’m hoping someone can help me with some basic stuff. So on some of the example projects on solana there are multiple folders. The one I’m a little confused about is the client directory. So is this directory used for just testing or is it used to interact on a webpage. I’m like pretty sure it’s just for running test but I would like a second opinion 😂
Would it make sense to implement a associated stake accounts tab on the solana explorer for system programs?
since txns have a limited size and you aren't encouraged to chain many of them
makes sense, though it does mean things like flashsloans would go against this
got it
You can think of dependent transaction like a bubble in a CPU pipeline
It's kinda against our data independence credo.  You can't parallelize operations on dependent data
not trying to be a pain, just curious as to why it wouldn't be an actual thing built into Solana
huh, ok, weird I mean, it seems like a useful thing to have, so not sure why it would be a "don't do that" kind of thing?
Most of the time, people go with "don't do that"
ha, so there is no "canonical" way to ensure a number of transactions can be atomically executed ?
That is, there's no prescription
But if you want to anyway, it really depends on your state dependencies
The real method is, "don't do that" 🙃
ty for the help, this channel is great
so, if I'm reinventing the wheel in a weird way, would love to know what the "real method" should be
(I mean, I'd be happy to implement an extra program, but it doesn't really need more than that in terms of state 🙂 )
so, if I didn't want to implement an extra program, what would be the other approach?
That's a way, sure.  An extra program might be unnecessary complexity if all you really need is to gate each transaction's execution on a counter, for instance.  But might make sense for more extensive state
(sorry, this should likely be very simple and I'm confirming what are silly questions/answers)
because contract calls from other contracts/programs are not counted against the `PACKET_DATA_SIZE` total
and this is not counted against the txn total
The idea is: make a program which calls A, then checks if it completed, B, and C, similarly and then fails
got it, so, to summarize, say we want something like transactions A, B, C to happen atomically
the spl token program is far more complex than i thought it'd be
You would implement a state machine in the program that each of your transactions drives forward
what do you mean by this? Sorry I'm not quite sure, still a n00b
yeah, sadly some of the instructions are out of my control
You need to drive state in account data
You'd need to manage that yourself somehow, perhaps with the help of a program.  But generally sounds like you'd want to reduce your instruction sizes
the transaction sizes are too small to include a very complicated transaction, so it has to be broken up, but then, because it's not atomic, if a part fails, the system kind of breaks miserably 😦
is there a way of doing multiple bundled transactions that all fail if at least one of them fails?
For context, I'm trying to follow: https://docs.solana.com/integrations/exchange#poll-for-blocks and figured I should use the `@solana/web3.js` but it doesn't set the `message` on the `transaction` here: https://github.com/solana-labs/solana-web3.js/blob/master/src/transaction.ts#L669
Quick question around using the web3 lib. When I call `getConfirmedBlock` I don't get back `accountKeys`, I'm expecting it under `transaction.message.accountKeys`. Any idea why? Or how best to get that from the transactions in the block without having to fetch each transaction?


///////////////////////////////////////////////////////////////////////////////////////////////

does in fail in middle after x transactions ?
Public endpoints may be overloaded
bump for help 🙏
How to change token name and token symbol ?
check out the SPL Memo program: https://github.com/solana-labs/solana-program-library/tree/master/memo
It's a simple example of how to get a string into a program
1.6.4
What's your `solana --version` ?
In the helloworld the code first borrows the account data then calls LIttleEndian::write_u32. What would be the equivalent for a json style string, let's say around 100 characters?
I think its failing while calling BpfLoader.load to load the token program. Not sure why. It works fine on local.
I think utf8 works for json no? Or did you mean something else?
depends on the string encoding
Well in the example helloworld it shows some stuff regarding endian on the program and the Buffer-Layout on the client. So I thought I might have to do something similar for strings.
<@!585868308419444749> bumping because i see you online 👀
I see, you'd just pass the string data into the program via the program instruction data using whatever encoding you want (ASCII, UTF-8, etc)
Sorry I'll stop doing that. I would like to store a small amount of json string on accounts. These will be arweave indexes that point to the full data on arweave.
(also I'd prefer not to be at-ed.  I was in the middle of something 🙂 )
wdym?  Accounts just hold data.   Are you asking about how to pass strings to  a program?
Hi, I am getting "unexpected server response 405" when trying to run spl token javascript library on devnet. It works fine on local.
<@!445425471027544095> Do you have documentation on how to pass strings to Accounts?
Yeah it's important.  On-chain metadata that stores a link to the program source and a method for reproducing exact ELF that's been loaded into the program account would be great. One trick is that there's no single way to build a program, even if it's rust based. It's definitely solvable for the masses though
Yes. I think it's very important.
<@!501570363566587905> I just realized something, why am I (someone who is not really a blockchain developer) trying to determine if the issue is important -- do you think this issue matters ?
thanks
<@!501570363566587905> sorry didn't see your respond
"then you are just trusting this publishing site" - ethereum ppl trust etherscan, right? i don't think we need to aim higher than that... obvs i have no idea how to implement what you described... but it's an initial design, any Green Names out there with opinions? i just know this is gonna be a problem going forward, oh "code is law" but where law?
It's not perfect. But it does allow you to, as you say, "trust but verify".

I think a better solution would be a community maintained crates.io type site where people can publish to and which exposes an API to pull source, hashes, and a "is verified" boolean, which apps like explorers can use. But that would just use something like what I described above internally, and then you are just trusting this publishing site. So depends on the tradeoff you want. Do you want to have a convenient experience for non technical people, or do you want to be full crypto paranoid and build + verify everything yourself.
Is there any examples to save strings into Solana Accounts?
hmm, ok... I can see how that works -- but I am not smarrt enough to know if that is the right solution.
what do ppl think?
You have to trust the docker container, though.
By building locally with the commands above and running `sha256sum <path/to/build.so>`
How do they know the github hash is right?
<@445425471027544095> is there custom pool in solana? Similar to uniswap
A cheap way of doing this is by just publishing releases with the commit hash on github. Not as good as something like etherscan where the whole community can publish their source, but better than nothing. Here's how I've been doing this https://github.com/project-serum/multisig/releases.  Anyone can clone the source and run `anchor build --verifiable` and check the commit hash against these releases. Can also run it directly against the deployed source with `anchor verify <program-id>`.
Although this was discussed quite some time ago, and it doesn't seem to have attracted a lot of attention, I think this is a pretty serious gap. The whole ethos of "verify don't trust" don't really work if all you have is byte code.
Hello, please tell me if there is a client in C #. and is it possible to use the Nethereum library to work with transactions?
Hello everyone, I'm very happy to have joined the discord, I can't wait to learn more about Solana, i hope i will be to integrate it into my application
What's the best way to start learning, deploying smart-contracts on the Solana ecosystem. I'd love to start playing around with code for fun and see where it goes
How can I store json strings in my accounts? Do I need to use buffer-layout?
You're limited by the max compute units in each transaction: https://docs.solana.com/developing/programming-model/runtime#compute-budget
Sorry to bother you with so many questions: is there an estimate in terms of upper limit of how many log messages can be included in a block?
How to change token name and token symbol?
Cool thanks
There’s some on-chain work on this happening but it’s not finalized.  So no standard yet
Hi, some help would be great. Got a question regarding NFTs 👆
That, or call getSlot: https://docs.solana.com/developing/clients/jsonrpc-api#getslot
what would be the best way to get the most recently confirmed block? Would it be with a slot subscription?
Other way, it’s the oldest block
Heya! I just wanted to confirm that the jsonrpc-api call`getFirstAvailableBlock` it's a poll for the most recently confirmed block correct?
Sorry I don’t
Not quite what I need but thank you. I know you know nothing about this particular library, but do you know anything about the query performance of Arweave? Can it handle thousands of concurrent users?
https://docs.rs/solana-program/1.6.6/solana_program/log/fn.sol_log_compute_units.html <-- use this to get an idea of what you're using
I think it’s here: https://github.com/TheLoneRonin/SolarweaveBridge
I know nothing about it though
so we should be frugal on our msg! usage?
It does cost, yes.
By way is there code for how the solana team is interfacing with Arweave in order to archive your data. I'm planning on building a dapp that uses solana as an indexer and arweave as the datastore ...
is string interpolation in `msg!(...)` expensive? Should we be using `msg!` liberally/frugally in our program?
Try using `solana log` instead
create custom pools
<@!466984915376799748> is there a website similar to uniswap on solana ?
Question on the example-helloworld app. I noticed that the programAccount seems to be created with the BpfLoader.load and the greetedAccount is created by the SystemProgram.createAccount. But for the payerAccount I don't see any instructions to create that account into the blockchain. I only see requestAirdrop and getBalance calls. If this account got lamports where are they being stored?
<@!585868308419444749> might be able to help
bump
Bumping
Thank you so much!
I personally think all projects should do external audits to catch bugs like that, we can't do anything to stop people from deploying buggy smart contracts. We try to make bugs hard to create in our program environment and help developers write correct code whenever we can. In the case of Uranium, there's speculation that the bug was intentional and if that's true, there's not much you can do.
thank you!
Oki got it
you can think of 400ms as the max time it will take a transaction to get into a block, and then you need to wait for consensus because the produced block isn't useful unless everyone agrees it's valid
Hey <@466984915376799748> . I’ve just read about another exploit over on BSC (Uranium Finance), from what sounds like a rather simple\obvious mistake in the smart contract. These kind of exploits really hurt the nascent DeFi industry and give the chain a bad rap. Have the Solana team thought about creating a scanner for all SCS on Solana and advising the teams on identified issues? Getting this right could be a competitive advantage for Solana.
oh very very thanks to you!
Why a short blocktime is important like 400ms? ( if the finality is around 1.5s? )
See here https://discord.com/channels/428295358100013066/517163444747894795/836952181960867860 you can watch this issue
yup, in web3 you can use onSignature with the "confirmed" commitment level to get notified when a transaction is optimistically confirmed: https://solana-labs.github.io/solana-web3.js/classes/connection.html#onsignature
I mean if i want to put some custom property from my own in nft then what should i do?should i make my own nft smart contract?
no worries, might help to review the docs if you're new to solana: https://docs.solana.com/developing/programming-model/transactions#instructions
Thank you! I thought it was below the second 🧐 Is there a status that we can query to know which transaction are in "optimistic confirmation" state?
I'm a bit confused myself tbh, I know the answer is in the serum code so I'll figure it out, thanks anyway
customize what property?
In a separate terminal, you can run `solana logs -u localhost` to get the tx logs
should be around 15s in ideal conditions for full finality. But we also have a notion of "optimistic confirmation" which is more like 1.5s and will only be reverted if 5% of the validator stake does something slashable.
what is the average finality time for a transaction?
thanks for feedback. tell me one more thing! Can i customise Property of nft in solana?
not really, there's a debug page here that I'd like to spruce up some day: https://break.solana.com/slots
I'm a little confused what you want to do. Are you trying to create a transaction that calls your program multiple times? Or do you just want your program to be able to call itself?
Hi Guys,
Is there any page where we can see statistic about time for finality for transactions?
will be some beta version by then
you can look at the code here and create this transaction yourself for signing with sollet: https://github.com/solana-labs/solana-program-library/blob/636407d7a948291fbc90c760420dc6e7c55459e0/token/js/client/token.js#L504
so hop;efully
i will soon have 2 weeks off so would like to build something with metadata
thanks starry sounds exciting.
So for the time being I reckon the program side is the only way ? Would you have an example of that somewhere ?
Hi does anyone have logging working? Can you send me your RUST_LOG environment variable and any other relevant setup? Thanks!
we likely need a wallet adapter interface in web3 that can be passed instead of an `Account` keypair
we have a wip pr for that: https://github.com/solana-labs/solana-program-library/pull/1544
I'm not really sure how Solible works, I think you'll have to do your own research. Maybe you could read about how NFT exchanges work on other chains
is there any example of NFT program with metadata so i can have NFT with image?
Ok. So, if i want my program to call another of it's own instructions, without the user calling the instruction directly. It can get the accounts from ```instruction::AccountMeta::new``` and passing in the pubkeys? Then just create a new instruction with ```instruction::Instruction``` passing in the program id, data and vector of accounts?
<@!466984915376799748> I am wondering what the purpose of the Token constructor is in the FE, e.g:
```
  const poolTokenMint = new Token(provider.connection, mintAddress, TOKEN_PROGRAM_ID, userWallet);
```
If I try to set a wallet (e.g sollet) as payer it won't work (calling `createAssociatedTokenAccount` will crash). This implies the only way to create an associated account from within the FE is actually to do it within my pgm ?
are you guys not getting my question?
thanks a lot
Nope, not possible
https://solana-labs.github.io/solana-web3.js/classes/connection.html#getconfirmedsignaturesforaddress2
<@!445425471027544095> Hello I'm having an issue showing logs. Specifically I don't see my msg! logs at all. This is my RUST_LOG value export RUST_LOG=solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=info,solana_bpf_loader=debug,solana_rbpf=debug. Also I use command solana-test-validator --log
Is it possible for a program to create the ```AccountInfo``` object needed in an ```invoke_signed()``` call, just from a  ```PubKey``` object without the user passing in the Account object?
Guys like NFT exchange Solible, How i can make smart contract of my own nft exchange. Is it possible with spl-token command line interface(cli)?
Merely deleting `node_modules` and reinstalling fixed it.
is there any method or function to do it ? Appreciate any feedback )
knowing wallet address, how can i get all transactions informations related to that account
i have a question about solana web3js
hey everyone
Has anyone integrated arweave with solana? I'm considering doing this, but for my users I want to avoid them having to "double pay". That is pay for a transaction on solana to create an index into arweave and then again on arweave to save the actual data there. Is there a mechanism to make this a single payment with just one coin?
if anyone has idea about this then please suggest me some good stuff.-Thanks
Can i write my own nft contract by using spl library . what's the procedure?
hmm good question, not off the top of my head unfortunately
`solana airdrop --help`
Hi <@!466984915376799748>, I get the following typing error when running Anchor Migrate:
```
../../node_modules/@solana/spl-token/lib/index.d.ts:11:10 - error TS1259: Module '"/Users/standaa/node_modules/@types/bn.js/index"' can only be default-imported using the 'esModuleInterop' flag

11   import BN from 'bn.js';
            ~~

  ../../node_modules/@types/bn.js/index.d.ts:586:1
    586 export = BN;
        ~~~~~~~~~~~~
    This module is declared with using 'export =', and can only be used with a default import when using the 'esModuleInterop' flag.
```
My tsconfig.json already has `esModuleInterop` set to true though. Any idea what might cause this ?
Hi, I'm sorry if this is a really stupid question but I'm just trying to set up a  token following the token program. So I'm trying to start it on devnet, but it states I have  insufficient balance. How do I  accuire  devnet tokens?
There are a few ways to do it, actually. But typically yeah, if a program owns tokens, the owner of the token account should be set to a program derived address: https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
if I want to send token from program to account, the token account should be owned by the program, correct ?
83qa93rDtK4zZR7W2WAs9EXELt39VigFj4kTC8WBpa7
got it, what's your address?
We got 1M there, only used up like 50k, but some huge scale is coming our way
we will be creating accounts, doing our own implementation of the faucet similarly how we did on the testnet
oh, why do you need so much?
~200k
I don't have that much but how much do you need?
Hey guys, I need a significant amount of Devent SOL since we will be migrating solrise to the Devnet. Who can hook me up?
typically it's just exchanges that may want to do this
now that you understand it, can I ask *why* you want to do this?
anyways, you're welcome <@!750260892146597970>!
maybe we should have an easy option for creating an ephemeral keypair for the token account creation
makes sense now. thanks a lot!
yup, exactly. It's just needed for creation and then you can forget about it
ah I see. so the private key in that separate keypair is actually not useful, we just need the pubkey of it
their own keypair, token transfers always check if the "owner" of the token has signed
okay I see. so when user creates a token account using a separate keypair, and he wants to transfer out of that account, does he sign using that separate keypair, or using his own keypair?
No matter what they're all "owned" by the user
Does that make sense?
If you add a keypair to the `spl-token create-token` command, the token account will be created from that keypair
But `spl-token create-account` will create an "associated token" account for a user which is actually created by the associated token account program. It doesn't have a keypair
I'm not sure if that command output is clear about what type these accounts are
Solana accounts come in 2 varieties: Accounts created from keypairs, and accounts created from programs
Each token account is a Solana account
The `spl-token accounts` command shows all the tokens owned by the user
these two accounts returned are for the same token, but associated with different key-pairs?
oh, so in ```$ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v
Account                                       Token                                         Balance
--------------------------------------------------------------------------------------------------------
7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  50
CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  50  (Aux-1*)```
and you can have as many of those as you want
when you specify a keypair, you're creating a "non-associated" token account
but I understand how you came to that conclusion
not exactly, you can only have one associated token since there's only one per wallet
the snippet I pasted suggests the same user account used to be able to have multiple associated token account for the same token? (`AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM` in the example)
```
ARGS:
    <TOKEN_ADDRESS>    The token that the account will hold
    <KEYPAIR>          Specify the account keypair. This may be a keypair file or the ASK keyword. [default:
                       associated token account for --owner]
```
```$ spl-token accounts
Token                                         Balance
------------------------------------------------------------
7e2X5oeAAJyUTi4PfSGXFLGhyPw2H8oELm1mx87ZCgwF  84
AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  100
AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  0    (Aux-1*)
AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  1    (Aux-2*)```
To get around this you can add a keypair as the last argument. The new token account will be created for that keypair
Can you copy/paste the part of the docs where it says that command can be called multiple times?
Got it, makes sense. Here's what you can do:

First, study this code: https://github.com/solana-labs/solana/blob/1c95e2bbee0a221f7ff4a4666605363aabc26a74/cli/src/cluster_query.rs#L1714
The code calls `getProgramAccounts` RPC endpoint for the stake program. This endpoint will return ALL of the stake accounts by default so the code adds some filters. The first filter ensures that only valid stake accounts are returned and the second filter only returns stake accounts for one voter pubkey (which is what you want)
spl-token spits out an "Account already exists" error if I followed the example in https://spl.solana.com/token
this seems no longer possible with spl-token on v1.6.6, is that correct?
question about example in https://spl.solana.com/token, where `spl-token create-account PubKeyOfMint` can be called multiple times, generating multiple associated token accounts of the same token for the same user
Thanks a lot for reply, but this will output details of all validators... I don't want to fetch huge data just for getting very small information... I need output similar to cli command 'solana stakes voteAccountPubKey'
have you tried calling `getVoteAccounts`? https://docs.solana.com/developing/clients/jsonrpc-api#getvoteaccounts
right make sense.
and so I expect most liquidity will go to those
but honestly, it will probably not get used much because other teams are building off that code to release more feature filled protocols
so in that case, it would keep getting updated
so I was imagining we could support two versions of lending and keep that one as the single collateral version
agreed
I think single collateral lending has its own benefits
not totally sure
Does Solana foundation intends to update the program once we have cross collateral? Or it will just stay like that?
Thanks! This is precise enough
we really need verified source in the explorer 😦
If I remember correctly, it's this commit: https://github.com/solana-labs/solana-program-library/commit/f24d375b75f5855c0de82ce61174d777675c1f8b
Hi I am wondering which version of the token lending is this: https://explorer.solana.com/address/LendZqTs7gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi ?
ah, i see
this is already what the rpc api service does here btw: https://github.com/solana-labs/solana/blob/master/core/src/send_transaction_service.rs so you if you setup your own rpc server, you get this for free
I messed about with it really briefly https://github.com/mcf-rocks/solanity as Reisen told me at the time, the GPUs are not much quicker than just using a fast CPU, and I could not improve on it -- but yea, this version is not deterministic
This is very cool
Found like 10 mvines keys in a day :P
<@585868308419444749> <@345046176149536769> <@445425471027544095> Yeah that grinder was a pretty janky weekend job to get something to work in the TdS only days, someone here forked it and fixed a lot of the janky bits. I think <@311962918511968256> ?
You're actually better off removing the OsRng Keypair call from every iteration of the CPU grinder though (it spends like 70% of the time in the OS and context switching otherwise) and using it just for the initial seed with an increment or shift register after, it loses basically no entropy, I had a lot more luck doing this with a 3990X than I did with the GPU grinder
Devs can subscribe to when a transaction is processed which is faster but there's a chance that the block doesn't end up in the main chain so you would have to account for that in your app
so blocks are created roughly every 450ms but consensus takes a little longer. Every new block has to be voted on by a supermajority of the cluster and I believe we are aiming to keep that around 1.5s but yes it's been higher than that lately (3-4s)
you know what i mean, you get excited by 450ms block times, but then when you build something it takes.... 3-4-5 seconds....
what theoretical speeds could i expect using my simple app? were there any performance speed tests done with some simple apps like paying some SOL or SPL back and forth to smart contract?
what speed of transaction confirmation could we expect in normal situations, for instance to call simple smart contract functionality like putting some SPL into escrow? i was trying few things in raydium for example to stake some amount, and it takes few seconds. can we ever expect speeds below 1s or is 450ms block times just, well how it says' 450ms blocks times?
Hi Team. I am developing a Staking website using Solana web3 JS API. I am not able to fetch Vote account info as I am not sure what method/constructor to call with what parameteres....any documentation/tutorial I can refer
I have no idea how sophisticated trading bots are at this point.  Definitely not outside the realm of possibility
> You can get a slight edge by bypassing  RPC and submit transactions straight to the leaders' TPU port, but this is very complex logic
<@585868308419444749> 

Is there any chance that Markermaker bots also use this to get an edge when marketmaking?
We have another implementation in Rust now too FYI <@!585868308419444749> : https://github.com/solana-labs/solana/blob/master/client/src/tpu_client.rs
This is the core of how Break does it. https://github.com/solana-labs/break/blob/master/server/src/tpu_proxy.ts
You can get a slight edge by bypassing  RPC and submit transactions straight to the leaders' TPU port, but this is very complex logic
Anyway.  Like I said in your cross post, there's no fee market.  You don't  pay more to go faster on Solana
Glad I disabled that this morning
@everyone
Hi Is there anyone here that is Tech Savvy to teach me how to increase fees for the LP providers so that my transaction speed can be faster on Solana? Im not saying that the speed is low or mocking in any sorta way but I need a faster transaction speed for IDOS and for such and learning such valuable lesson can be really helpful for me.
Please, ive been trying everywhere but i cant find any information regarding about this. There should be a way.
Hey Guys! I am a newbie in Solana.Can anyone tell me how i can start writing my own nft smart contract?Please Help me......
What is the convention to store metadata for Solana NFTs? Does SPL token program provide a way, or it's kept off-chain?
hello, which solana project would be best to build an NFT front-end on? any opinions appreciated
This particular case is a little clumsy though. B and I were talking about it last week.  We could probably stand a `SystemInstruction::TransferAll`
You always sign a transaction with a recent blockhash.  The fee is bound to that blockhash.

For example,  `getRecentBlockhash()` returns both the blockhash and the associated fee calculator, so you can figure the cost of the transaction before choosing to sign and broadcast it.

https://solana-labs.github.io/solana-web3.js/classes/connection.html#getrecentblockhash
I know but do we have a general way to do this? I don't want hardcode tx fee in my code
the current tx fee is fixed at 0.000005 Sol
but how do I determine tx fee before send that transaction?
just subtract the transaction fee from the account balance and send the difference
Yes, that is reason I asked how to implement transfer all as CLI
Hey guys, After updating `"@solana/web3.js": "^1.7.0"` to the latest version. I am enconutring an issue when starting localnet. Previously I was using `"@solana/web3.js": "^0.86.4"`.
use https://solana-labs.github.io/solana-web3.js/classes/systemprogram.html#transfer
remember you need to save some sol for the Tx fee
Hello guys, with web3js, how do I implement to transfer all balance from an account to another?
discord is interesting
can't believe the latter is even allowed
I like how I painstakingly react with 🍻 to try to keep it in the recent box with little success, then add <:koolaid:831946858178936845> and it just lives there
<@!585868308419444749>

Ah, https://github.com/ChorusOne/solanity
I think someone had one, but it always started from the same value
<@!595275888292265985> had a GPU grinder way back iirc, somewhere
We'd totally accept a PR for GPU support 😉
`vines` is really easy, I have boatloads of those.  But nobody wants that
I think i will shorten my vanity
of course.  mVines, MViNeS =>  🚮
but you were looking for lowerclase letters, correct?
I kinda gave up on it and then one day it happened!  🥳
okay good to know
i saw when you got up to mvine, ha that one extra letter took months
I bounce around a lot, donno.
What cpu were you using
🤕
👀
The letters you're looking for influence how long it'll take.  `mvines...` took me months.   But I've ground other 6 character prefixes in days or less
eh, how long did it take you. (I know it is probabilistic)
A gpu could help in theory.   `solana-keygen grind` is CPU only though
did you us a compute heavy machine ? does having a gpu help ?
yes!  I finally got me an `mvines...`: https://explorer.solana.com/address/mvines9iiHiQTysrwkJjGf2gb9Ex9jXJX8ns3qwf2kN?cluster=devnet
just the person i was looking for
has anyone here gound a long vanity address before?
I'm trying to integrate Serum into our app, and am wondering if there's good docs on how to subscribe to trade events in real time?
hey all
https://spl.solana.com/token
Hello, could you quick explain me how to start with creating a new Solana token?
Hm, I'm trying to decode it actually:
```
connection.getAccountInfo(muhPublicKey).then((accountInfo) => {
  // log the account info here
})
```
Yes, the program data on chain is just BPF instructions
is that because program is compiled?
Not generically, no
It depends on the program.  Each program is free to decide how it wants to encode account data
Is there a way to view the source code for a solana program if I know the address?
This is a really basic question, but how do I decode the data object from getAccountInfo? I've tried .toString() with 'utf-8', 'binary', 'base64' etc. https://solana-labs.github.io/solana-web3.js/classes/connection.html#getaccountinfo
👍 they might know more then
okay, that's gonna be raydium
Cool.  So the next step is to figure out where that program came from and ask them what 0x1c means.  It's not a built-in program
LIQUIDITY_POOL_PROGRAM_ID_V4 = '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'
"custom program error: 0x1c" -- this error code depends on what program you're running at the time.  Without that info it's pretty hard to help
I know that is probably impossible to help with that info, but asking anyway..
I am receiving error "custom program error: 0x1c" and "Error: InvalidInput" when sending transaction and I am basically stuck. Any clue how to resolve this?
great, thanks
yes
could I calculate it via web3 by signing it and calling  serialize().byteLength ?
transaction size limit is based on the UDP MTU size actually
Hi. is the transaction size limit based on the overall transaction element size or on the instructions?
Thank you very much.  got a few steps further already just from disabling Rust and using Rust-analyser instead.
<@!208527206966755329> - 1) transferring tokens within programs is a bit more involved because you need to call into the token program from your program to do it.  
2) transferring lamports to another account is just a matter of adding to the account's lamport balance.  But your program can only decrement the lamport balance from accounts that it owns
Oh that's neat!
cause I have no idea on where to start
can you give me a workflow on how to do this ?
There's an upgradable program loader that allows you to redeploy a program to the same address.   You can do it as many times as you want, and (if you want) at some point prevent future redeploys (`solana program --help` for all the options)
Nothing great that I know of yet, we still need a bunch more howto guides and tutorials 😕
Hi I have a question about upgrading the on-chain program. Because the on-chain programs are immutable once deployed, does this mean I need to deploy a new program to a new address to do upgrade?
paulx article is very complicated compared to what I am trying to do
is there an article or something ?
Yep
is it possible for a program to send tokens and sol ?
None of them give any concrete reasoning for this though
I was thinking about making an amm with LS-LMSR but it turns out that it implements a concave cost function and I've seen that described as "bad" in two separate academic papers now
I wanted to understand why it's generally frowned upon if your AMM implements a cost function that has a concave curve
Are there any AMM experts in here?
naw not a test just a function that lets you change the admin of an account and i want to make sure that whoever calls this function doesnt accidentally give the default address
If this is for a test, use `Pubkey::new_unique()`
thanks. eh i dont necessarily want the system program id just want to make sure that any pubkeys given in this function call arent the default
Yes, `Pubkey::default()` is a `[0u8; 32]` which base58 encodes to `111...`.  If what you want is the system program id, you should use `system_program::id()` though
Will `Pubkey::default()`  give the address with all `1`s in it which  i think is the system program?
https://www.npmjs.com/package/buffer-layout for examples/doc
The size in bytes of the entire encoded layout
It's probably easier to think about the "struct" as a view over a byte buffer
More or less
so span is basically getting the length in bytes of the struct ?
oh nvm, dataLength should be in bytes ? so that would be 4 yeah
dataLength takes a number, so basically it's same as 2**32 ?
can't follow
```getMinimumBalanceForRentExemption(dataLength: number, commitment?: Commitment): Promise<number>```
So for that buffer layout you pasted before, `span` would be 4?
Yeah I think so
Oh, must just be the length then?
```  const lamports = await connection.getMinimumBalanceForRentExemption(
    greetedAccountDataLayout.span,
  );```
I should've pasted this
I'm incompetent at JS because people pick the wildest names for stuff 😆
No sure, maybe the whole byte buffer?
Right, and what does ```    greetedAccountDataLayout.span,
``` do ?
I'm basically incompetent with JS, but AFAIK that reserves 32bits in the buffer referenced by the name `numGreets`
This is a really basic question, but how do I decode the data object from `getAccountInfo`? I've tried .toString with utf-8, 'binary', base64 etc. https://solana-labs.github.io/solana-web3.js/classes/connection.html#getaccountinfo
this creates a u32 variable named numGreets ?
for example ```const greetedAccountDataLayout = BufferLayout.struct([
  BufferLayout.u32('numGreets'),
]);```
Now I get it. Thanks for the explanation!
A native `Account` _owned by_ the SPL Token program, carries data which represents an SPL Token account which is _owned by_ the SPL Token account authority
is there any good resources to understand the BufferLayout ?
Yeah, `owner` was poor choice of field name here.  It compounds the overloading of `Account` in the SPL Token context
Thanks!
See `associated-token-account` in the same repo
My 0.02.... you are limited to 10 MB state.... storing the token and owner could fill up quickly. IMHO... off-chain
BTW, one more question: how does the program know which SPL Token Account is associated by a given wallet address? Should I build a database outside the chain to keep the mapping, or should I build a mapping on-chain?
Quite confusing at the first glance but now it is clear. Thanks <@!445425471027544095> for the help!
Then I just realized that this line of code set the owner of the `Account` which is defined by this program. It is not the owner of the `Account` defined by Solana!
However when I am reading https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L85 I found this example code sets the owner as the user account for the SPL token account
> The on-chain owner, from the Solana runtime perspective, of all SPL Token accounts is the SPL Token program.
Yeah this was what I originally thought.
Not sure if that answered your question though 🙂
The on-chain owner, from the Solana runtime perspective, of all SPL Token accounts is the SPL Token program.  The user that holds a given SPL Token account is defined by the user's wallet address that's stored in the SPL Token account.   User wallet address can be any address
Will this disallow my program to modify the newly created account in the next transaction because the program is not the owner to that newly created account anymore.
If I have created a new token on Solana, and then I need to give some of them to another user (account). Should I created a new account for him, and store the balance to that newly created account and then set that user as the owner of the new account?
wait, let me rephrase it
Does this mean that, if I want to issue a new token, then my program should be the owner of that account?
In this section it says a program can only modify data to the account that it owned
https://docs.solana.com/developing/programming-model/accounts#verifying-validity-of-unmodified-reference-only-accounts
Thanks!
Please just ask, don't ask if you can ask. Ask 🙂
Hi may I ask a security question about the ownership?


///////////////////////////////////////////////////////////////////////////////////////////////

I did provide all 3 required accounts: the funder, the new account, and the base (which is the funder), so what am I missing?
but I'm getting this error: ```connection.js:3064 Transaction simulation failed: Error processing Instruction 0: An account required by the instruction is missing 
    Program 6U2HUQAzdCphQ8a69djMfakgZzAPs756NkWcXTsKGKBu invoke [1]
    Unknown program 11111111111111111111111111111111
    Program 6U2HUQAzdCphQ8a69djMfakgZzAPs756NkWcXTsKGKBu consumed 200000 of 200000 compute units
    Program 6U2HUQAzdCphQ8a69djMfakgZzAPs756NkWcXTsKGKBu failed: An account required by the instruction is missing```
I'm trying to invoke `CreateAccountWithSeed`, like this:```    let sub_account_ix = system_instruction::create_account_with_seed(
        funder_account.key, &new_account.key, funder_account.key, seed, 100000, 16, funder_account.key);

    let result = program::invoke(&sub_account_ix, &[funder_account.clone(), new_account.clone(), funder_account.clone()]);
```
sweet, glad we got this sorted
Actually now I created new token account after switching to wallet 2 and it works fine. Thanks. And sorry for the confusion.
oh, yes.  The `--keypair` argument is the wallet address, so you need to change the `--keypair` when switching to a 2nd wallet.
Right, not that good for usability, guess the naive list approach works best then
I did not switch to wallet 2 when I tried to create another token account. Looks like passing keypair doesn't really help. I need to create it after switching to 2nd wallet.
yeah just means that adding bids are now serial, and the front-end would need to retry if there's a collision
The problem was with how I created the token account using new keypair.
Yeah I would just have a counter in the main auction account for the bidding accounts
Ok, I finally solved it now
But I can only see the tokens in both wallets when I run `spl-token accounts` from wallet 1. When I switch to wallet 2, I see nothing
deriving probably means the bids need to be placed in order, so you can derive account 0, 1, 2, ... until you find one that doesn't exist and that's the last bid.  Not sure if that works for your desired user flow though
The tokens i created from wallet 1 are transferred successfully to wallet 2. Wallet now has 50, wallet 2 has 50
I want to help, I just don't understand either
I guess im still not able to explain the problem 😥
"and be able to see the tokens in both places." -- why would you though?  Tokens either belong to one wallet or another (unless we dive into multisig stuff, which makes token ownership non-binary)
Hi guys, got a question. I have an auction where people bid and I want to display those bids. Currently i have one big list in my auction account where I add bids just for display services cause it’s easy to retrieve and then I have a bidding account for each bidder with their own bids. Is there a way to get rid of that list? I thought of deriving all bidding accounts from the auction account and then call the getMultipleAccounts endpoint after having derived all accounts in the frontend but then after you get the accounts you have to order the individual bids from all those bidding accounts to display them correctly. Maybe thats fine, just wondering whether theres a better way
But im still not sure how to transfer tokens between 2 different wallets and be able to see the tokens in both places.
🙈🙈 alright, I struggled to explain the problem. I concur 😂
You already did whatever you did.  What I'm saying is your description is ambiguous
I meant when you were describing the problem here
I see. So how do I specify the role ?
It could be either the owner or the address
How do I transfer these tokens to another wallet?
The confusion here is coming from the fact that you aren't stating the _role_ of the new keypair when creating this account
Ok, so I ran spl-token gc to clean the aux account now.
I used new keypair to create 2nd token account for the token I created
Infact yesterday I asked this same query. Because if you try to create one more account for the same token, it fails.
The 2nd token account was created using new keypair, not the first wallet
Ah, so both those token token accounts are associated with the 1st wallet.  You can even run `spl-token gc` to cause that Aux account to be cleaned up and the tokens will return to the your primary account, the one above it
<@445425471027544095> in this screenshot, the wallet marked in green is the 2nd wallet which contains 50 tokens. Later I switched to the 2nd wallet (you wont see the command because I did it in another tab). As you can see, I dont see any tokens there.

heh, ok I don't understand the problem then 🙂
Might help to express the issue in terms of actual explorer.solana.com accounts and transactions, so I can see concretely what you are or are not seeing
Transfer happened. I can actually see the tokens in 2nd wallet when I use `spl-token accounts -v`
sounds like the transfer didn't actually happen then, if you still see them in the first wallet
Mostly, yeah.  Transaction encoding/signing is all client-side though, we don't offer RPC APIs for that
The current wallet actually contains the tokens. I can see when I query from the first wallet.
I did this. I am supposed to see the tokens after switching because I transferred them.
Are the SDKs just JSON RPC calls?
Cruel world
https://spl.solana.com/token#example-transferring-tokens-to-another-user
yeah, that's about why we're still manual.  All the existing tools work until they don't, and now you're in a tough place
So how do I access the token and transfer them back from this wallet?
Each tool has it's own schema, and each tool can only generate APIs for a small subset of languages.
Specify `--owner /path/to/other/keypair.json`
Except there isn't a standard
`spl-token accounts` only lists the tokens for the current wallet (`--keypair`), not all other wallets

I did. But the wallet contains the tokens. Its just not able to recognise the token created by other wallet.
That makes sense, you switched wallets
Ok let me explain what I did.

1. I used `spl-token cli` to create a new token, created token account, minted some tokens and distributed to 2 other wallets.

2. When I use `spl-token accounts` from the main wallet (the one I used to create token), I can see tokens in all wallets.

3. But when I switch to other wallet using `solana config set --keypair <keypair>` I dont see any tokens. I cant even access the spl token I created from first wallet.
The OpenRPC "spec" is like 14 days old.
heh, neither.  It's a cruel world
I haven't come across a standard format for writing JSON RPC specs, let alone docs.
I totally hate it, but haven't come across a decent JSON RPC API docs generator
Solana CLI doesn't support bip32 yet.  Sollet is deriving `m/44'/501'/0'/0'` from the ground(? 🤔) keypair as root
At least your formatting is consistent
Yeah
docs are serious business!
That's a lot of manual work lol.
Thanks.
I'll help out here: https://github.com/solana-labs/solana/blob/master/docs/src/developing/clients/jsonrpc-api.md in the main repo
Ok, thanks.
Will answer later, going AFK for a while
F. What repo are the in?
Manually 🤘
Sorry for pinging, but hoping if you know the ans to this <@!585868308419444749>
How are the RPC docs generated?
I wanted to generate bindings for languages other than Rust and C++
That's annoying
No formal spec. I’d love to have one actually
Please ping if you know the answer to my question.
Donno
I mean I used the `--use-mnemonic` param and it gave me a seed phrase, just unsure as to why when importing this 12 word phrase into sollet it doesnt come up with the corresponding address.
I don’t really understand your question
There is no seed phrase :).  You might be able to import into sollet.io by jacking around in the JavaScript console.  But not advised
<@445425471027544095> sorry for tagging, but need your help 😁
Or just the docs?
I got the address I want and did it with mnemonic phase, but cant seem to find the corresponding address on sollet when importing the 12 seed phrase
I used `solana-keygen grind`
<@!445425471027544095> I heard you generated a neat address, wondering if you could shed some light on this, unless you did it without a mnemonic phrase
But it is an improvement
Including people with the developer role lol.
haha that's an improvement then
<@!445425471027544095> you locked the channel to everyone.
Hi, can you help me on the following behaviour I am seeing?

I am not able to see the spl token across wallets. I can only see it from the wallet (account) I created from although the tokens are distributed to multiple wallets. Is there anything additional I need to do other than setting spl-token config to a different wallet keypair in order to see the token created from other account?
Like a Postman spec or similar.
Is there any formal specification for the JSON RPC API?
donno
like libraries
<@!445425471027544095> I was able to create custom pools with serum dex when I run it locally, is there code to interact with the pools ?
Hey guys, I generated an address using `solana-keygen grind` with mnemonic phase and its given me a 12 seed phrase. When exporting to sollet, not sure what the format is but none of the addresses that show up are the one I generated.
The maintainer, (@)armaniferrante, is known to hang out here from time to time as well
and it has docs!!!! 😍
this is very interesting indeed
It looks very promising, and solves a lot of problems that people run into when first trying to play with Solaan
Just curious do you use this tool? What do you think of it?
This is very interesting. I'll check it than you
Have you seen https://github.com/project-serum/anchor yet?  This frameworks offers a higher-level abstraction around some of the data serialization questions you have, might be easier to jump in there
This was helpful thank you. But it does not actually save the string message into the data of the account. I see in other examples like helloworld that LIttleEndian::write_u32 is used to save a number, but what about a string?
I am really struggling to understand why this is happening. From 1 wallet (account used to create token), I can see token supply and balance. But dont see the token from another wallet. Both are connected to same cluster. Racking my brains whats going on.
Hi Team. Can anybody please let me know if there is any tutorial on Web3 JS API. I have run the hello world program. Also I have seen few test cases and wallet adapter, so now I can conncet my web page with Solana cluster still I am struggling with basics.. Any sort of tutorial or video that can help me to strat with basics would be good.
Thanks Starry for information. Can you recommend  me any detailed tutorial for Web3 JS API? I can see documentation is good but I think I am struggling with basics. So please help me and let me know if there is any tutorial that can help me to start on the API.
only took an hour and half of debugging
right, so this is how errors work in dex. You get an error like 0x22. Convert it to base10 = 34. Then look up error number 34 in the error.rs
is the python solana package actively developed?
How can i get the current / history of tps via rpc api?
I am facing a weird problem (could be due to lack of my understanding).

1. I have created 2 file-system wallets. I created a new spl token from one of my wallets using cli and minted some tokens. I managed to transfer some tokens to my 2nd wallet.

2. I can see the balance of both accounts

3. However, when I switch to my 2nd wallet, I dont see those tokens.

I thought when you create a new token, everyone (all wallets connected to that cluster) should be able to see.
then it can come from any of ```pub enum SourceFileId {
    #[error("src/state.rs")]
    State = 1,
    #[error("src/matching.rs")]
    Matching = 2,
    #[error("src/critbit.rs")]
    Critbit = 3,
}
```
for example I convert 0x22 into 100010 binary (or 34 in base10)
Hi, I'm getting a custom program error 0x22 when trying to do cross chain invocation against the dex. I've tried turning the hex into a line number, but a) I'm not positive I'm converting it correctly, b) none of the ways I've converted it look like they throw an error
Hi Guys,
I was wondering if there is a way to store sensitive data on the blockchain, if yes how? Like a data which can only be read by the wallet and not by other wallets?
I have a question, How to interact with contract( i.e. Raydium swap)  via CLI?  Thank you
coming from solidity, just wondering if the smart contracts utilises gas?
is the smart contracts built purely in rust?
I got a question. So I just managed to successfully run solana at my local machine
Let's stick to dev discussions here. This should be part of <#428295358100013069>
if you had to explain why would someone switch from ethereum to solana, besides the ordinary it's faster, scalable etc, what would you say? i know that faster and scalable is obv reason. but what would you say?
you should be passing the stake program account
you should look at the code I shared before and study it more
voteAccount is not a program id
https://solana-labs.github.io/solana-web3.js/classes/connection.html#getprogramaccounts
I have tried with .tobase58() also
This is the code. Vote Account in it is my vote acound id
const voteAccount = "5aGC2ugXkQBDnBpFbhFrEtink5EP29M1o7xEuo7zPyYQ";
        const accountFilter = connection.getProgramAccounts(voteAccount);
how are you creating `programId`? It needs to be a `PublicKey`
Hi Starry. Thanks a lot for help. When I am trying to call getProgramAccount I am getting an error from Solana Api itself.
can't do that with that method. You can query `getConfirmedSignaturesForAddress2` to get all the transactions that interacted with an account. The transactions would have that info
Hello man, on onAccountChange of Connection (web3 js), how do I determine from which account send to the account (and amount transfer)?
will do
Can we only setup validators right now?
Hi guys 👋
I'd like to run a solana node, but solely the blockchain data; don't want to run a validator yet
there are instructions here: https://github.com/solana-labs/token-list
suppose so, if you can provide any more details and put it in an issue that would be great. I haven't seen this come up before
definitely not
Then I guess the `confirmTransaction` in web3 is not working as expected
Is it advisable to simply skip the "confirm transaction" step after sending it?
Yes, both recent
<@!828981157936627783> are you using the latest version of spl-token and recent version of web3?
if it's finalized, it was processed
When I try to run `solana confirm` on the signature, it says finalised. But not sure whether the transaction went through or not.
are the transactions actually getting processed? just no confirmation?
weird, you have enough devnet sol?
I am running the spl token code from git as is. It works on local just fine. Failing on devnet.
No, its not.
https://docs.solana.com/cli/usage is broken - it's missing all the solana-* command docs, as seen at https://beta.docs.solana.com/cli/usage
are you skipping preflight?
If confirmation fails, it usually means your transaction is invalid and was rejected by the cluster
To be more precise, its the `confirmTransaction` function inside `connection.ts`
I am using spl token js library. Its the `sendAndConfirmTransaction` where its failing. The transaction is not getting confirmed.
wow. So obvious when you say it 🙂 thanks ! sorted now
Shit
it wasn't displayed in your terminal? It's not saved to disk
you shouldn't need to construct a transaction inside a program, is that what you're doing?
I just generated an address using solana-keygen grind with --use-mnemonic but the out put isnt a seed phrase. Where can I find this?
hmm... so it fixed one problem and surfaced another. I need to use a transaction so was importing solana_sdk::transaction::Transaction; - but there is no equivalent in solana_program
hah nice, great to have that history. When I don't know the answer to something it's the first place I check 😛
yeah, was looking way back to like aug last year... Thanks for the help!
oh did I? you should use `solana-program` instead of `solana-sdk`
I see <@!466984915376799748> had similar problem before, but in the token program... not sure what to do here. Any help greatly appreciated
```error[E0432]: unresolved import `std::panic::catch_unwind`
 --> /home/teddytomas/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.31/src/future/catch_unwind.rs:3:18
  |
3 | use std::panic::{catch_unwind, UnwindSafe, AssertUnwindSafe};
  |                  ^^^^^^^^^^^^ no `catch_unwind` in `panic`

error[E0432]: unresolved import `std::panic::catch_unwind`
 --> /home/teddytomas/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.31/src/stream/catch_unwind.rs:3:18
  |
3 | use std::panic::{catch_unwind, UnwindSafe, AssertUnwindSafe};
  |                  ^^^^^^^^^^^^ no `catch_unwind` in `panic`

LLVM ERROR: Cannot select: 0x7f3738052fe8: i64,ch = AtomicLoadOr<(load store acq_rel 8 on %ir.2)> 0x7f373801c0c8, 0x7f3738052c40, Constant:i64<2>
  0x7f3738052c40: i64,ch = CopyFromReg 0x7f373801c0c8, Register:i64 %2
    0x7f3738029700: i64 = Register %2
  0x7f3738052eb0: i64 = Constant<2>
In function: _ZN12futures_core4task10__internal12atomic_waker11AtomicWaker4wake17h06d1e6d96010f410E
error: could not compile `futures-core` 
```
Hi, having problems since I imported solana-sdk into my rust program
maybe I'm sending you wrong direction here. What code are you calling that is not doing what you expect ?
Where do I see what is being used? I am using the spl token js code as is.
it works well on line 92, but the line 96 always error
Hi, I need help about how to use the `Transaction.sign( [account] ) ` ? 

`account.publicKey.toString()` is work when I can use it  directly to show the string of public key.

However When I  use `Transaction.sign( [account] ) ` to sign the tx,  there is error ‘Cannot read property 'toString' of undefined’.

How can I  solve this error ?
Has anyone grinded a 5 char with mnemonic phrase, if so how many keypairs did you have to search though
Hey guys, how get amount, source and received publicKey of transaction ?  with web3.js
that being said I do find the transaction confirmation of 400ms possibly confusing. I was hoping to find serum was matching on 400ms cycle (maybe it is)... but from a user perspective it takes me maybe 30s to get a confirmed trade. Which is amazing given everything going on... but its not yet as fast as a centralised LOB.
serum is the reason I took interest in crypto again, and then finding solana was so fast I'm fully engaged again....
Hi, I dont have too much experience with AMM, but I read somewhere there is risk of loss (there is some term for it). I have lot of experience with orderbooks and think they are probably the best way to do exchange/trade auctions
hi, are you using comitment ='max' or are you using a timer ? I initially used a timer until someone enlightened me
I see that sendTransaction is working but 'confirmTransaction' is where it fails.
Never looked
Actually quite interested in this though, never done it. Do you know if there any guides on how to do so
Thanks
Or port it to GPU 😉
Just more CPUs
Cheers! Also any ways to speed up the grind process? Is this based on pc resources?
Otherwise you need to store the file safely
It's recoverable via seed-phrase
Hey guys, trying to generate a custom sol address and came across the --use-mnemonic param. What are the perks of generating using a mnemonic phrase?
Looks like token js library is broken. All functions like createMint, mintTo, transfer are failing on devnet (works on local)
This is one of my daily success metrics
Great, i may not need to use JS in that case. Thanks
CLI, yes
The one from a newer web3.js should be more reliable.  CLI even more so
What is the most preferred approach devs use to deploy programs on mainnet? Through cli ?
Got it. Well I was hoping to use the js loader function to deploy my own programs. I guess i have to spend time fixing that now.
Half of the info isn't relevant to _using_ the library
I think the real issue is that the README needs split into a README and a DEVELOPE.
I'm not sure. The tools could just be targeting and old version of the web3 tool chain that doesn't have as reliable a deploy procedure.
trying to make some difficult decisions and my brain hurts
whether you agree or disagree, i'd like some reasons
general question: do you guys think that traditional AMM formulae are inferior to hybrid models where liquidity is contributed to an onchain orderbook?
Hey Guys is there any github link (or Reference) for NFT smart contract which uses Spl-token library to make his contract?
Well, I was simply following instructions from readme on github for the token js library and it failed on devnet. So got curious as to why its failing.
Right.  I'm still unclear what your trying to achieve by redeploying the program?  The only thing that should need in that js module is the tests
Ideally it should work even if the program is already there on public cluster, because im loading into a new account
I was running the spl token js library as is, on devnet
Can you elaborate on what you're trying to achieve
I'm not sure why you're trying to deploy the token program on the public clusters, it's already deployed there
This is the javascript library (using bpfloader.load)
Transaction failing (taking more than 30s to confirm) when trying to load token program into the account.
Thanks
What's failing exactly?
Should be the same program ids on all clusters
Helo
Hey sorry to hijack your conversation. Since you are active, I had a query I was trying to get answer to.

Token javascript library code is failing to load token program on devnet (working fine on local). I wanted to check what is the token program id and associated token account on devnet which I can directly use instead of loading the program again (assuming devnet already has it).
What do you mean by "authenticate" in this case?  The cluster is permissionless, client just stuff transactions in and they make number change or they don't
A DEX ecosystem built atop Solana
(also, what actually is Serum lol?)
If I don't use that, how do I do authentication?
Right.
JS though, might need to port
https://github.com/project-serum/sol-wallet-adapter
Thanks.
Serum has a thing.  Gimme a  sec
Does Solana have something like Metamask, or do I need to roll my own systems for authentication?
That makes sense.
You'll probably have to find that balance for your application. There's no prescription
Depends on what you're doing.  The RPC interface can do a lot of the heavy lifting for you, but that doesn't tend to scale well to a lot of clients (overloads the RPC server)
I normally don't have a backend when I'm using blockchain stuff.
Is it better practice to have the Solana stuff on the front or backend?
An SDK is mostly just a JSONRPC wrapper and some (de)serializers
Assuming I write the backend in rust.
I can probably get away with only interacting with Solana via the backend.
AFAIK rust and Love won't play nice together.
The C and C++ SDK are the same code base
How is the C++ SDK?
The C SDK is pretty limited.  It might be easier to just write a Lua SDK.  cc/ <@!428296821794668544> 👀
<@!434048028630974464> The way the fees work is like this.  Client constructs a transaction message, then queries the cluster for a recent blockhash which is tied to a `FeeCalculator`.  So long as the recent blockhash is extant, the fee rate is good.  Client then passes the message to the `FeeCalculator`, which returns the fee the transaction will be charged.  The fee is a function of the recent blockhash and the composition of the transaction message.  No lamport value is ever directly assigned in the transaction structure.  The runtime determines the fee in the same way during transaction execution, using the `FeeCalculator` for the recent blockhash  and the transaction message.
I'm interested in using it with my existing Lua game code.
Has anyone bound the C SDK to Lua?
Not knowing how much a transaction will cost, if or when it will execute
Non determinism, what exactly is that referring to?
" It smells of exactly what we dislike about Ethereum's "gas", non-determinism."
"if the network is congested, the slot may prioritize the transaction offerring higher fees"
I think you stopped at the part you like, rather than reading the whole document
?

But bazed on the official documents..
Well you could add a bunch of extra signatures.  But that doesn't change transaction ordering
There isn't
U told me here yesterday that theres no way to increse transaction fees
Yeah, like this https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/src/processor.rs#L83-L86
<@585868308419444749> theres a way to hardcode transaction fees
I see that `system_instructions::create_account_with_seed` creates an instruction with a list of `[AccountMeta]`, which seems to map exactly to what the instruction needs. So is it right that `invoke` will look at that `[AccountMeta]` and do the job for me?
I meant something like `invoke(&creation_ix, &[])`
No.  Instructions can't instantiate `AccountInfo`s.  Only the runtime can do that
oh, so in this case I just provide an empty `[AccountInfo]` then?
ATA is probably the closest example we have, https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/src/processor.rs
By passing the address to your program's instruction.  The runtime will load it for you
Appreciate any help here
```pub fn invoke(instruction: &Instruction, account_infos: &[AccountInfo]) -> ProgramResult {
    invoke_signed(instruction, account_infos, &[])
}
``` the second argument is a list of `AccountInfo`.. how do I create an AccountInfo for an account that hasn't been created?
The new accounts address.  You'll need to pass it to your program's instruction as well
so what should I put in invoke's second argument?
If there's already a real allocated account there, the instruction will fail
It's not really _created_ there,  the runtime will just pass the program a new default (empty) account for that address
question: why does the instruction require the account to be already created (account reference 1.)?
I'm looking at how to create an account from within a program. ```pub enum SystemInstruction {
    /// Create a new account
    ///
    /// # Account references
    ///   0. [WRITE, SIGNER] Funding account
    ///   1. [WRITE, SIGNER] New account
    CreateAccount {
        /// Number of lamports to transfer to the new account
        lamports: u64,

        /// Number of bytes of memory to allocate
        space: u64,

        /// Address of program that will own the new account
        owner: Pubkey,
    },```
😮  thanks a lot for the help!
Well that's a burn address.  No private key needed
hmm do you know how do these people generate custom addresses then?
You should be able to get 5 or fewer reasonably (few days)
mvines took months to get his name as a prefix
ah I see.... what's a recommended length for prefix?
Also that's going to take forever 🙂
Eh, we should validate that input better.  `l` isn't base58.  Replace it with a `1`
The number of matching keypairs to produce
just 1 question:
```
--starts-with <PREFIX:COUNT>...
            Saves specified number of keypairs whos public key starts with the indicated prefix
            Example: --starts-with sol:4
            PREFIX type is Base58
            COUNT type is u64
```
what does the COUNT here refers to? is it the number of keypairs? or the number of characters in the prefix?
getting this error and not sure what to make of it:
```
error: Invalid value for '--starts-with <PREFIX:COUNT>...': cctdaniel: InvalidCharacter { character: 'l', index: 8 }
```
thank you 🙂
`solana-keygen grind --help`
Hello! I saw that some users (e.g. skynetcap) have an address that starts with a custom string, just wondering how you could do that and maybe anyone here could shed some light on that? Thank you! 😊
Exactly! Thank you. Not sure why I didn't see that.
LIke this? https://spl.solana.com/memo
Hi all! Is it possible to store a message on a transaction? I'm scouring the docs but can't see anything.
thanks!
I bet Serum folks know. https://discord.com/invite/zxPsXcB
Hi 👋  How can I query Serum Dex prices? and market caps?
How was your experience?
Has anyone here used Solana for games?
The python module is third party.  You'll have to seek support through its author
can I somehow increase the timeout on the requests through the python solana lib?
SystemProgram.createAccount includes an “owner” input to indicate the program that should own the account, the system program or otherwise
A SystemProgram.transfer into a non-existent account will automatically create a new system account at that address.
How is it determined that this is a system account? In the code it just does a new Account object instantiation in the getNewAccountWithLamports function. How does the system runtime know to create it as a System Account? And when exactly is this happening?  Is it perhaps during SystemProgram.createAccount, I wasn't expecting the fromPubkey account to get created only the newAccountPubkey.
<@!585868308419444749> any idea what that could be?...
System accounts are special in that way.  They are automatically created (with 0 account data) whenever lamports are transferred into them.
I see one more question the payerAccount never runs an instruction to actually create it, even though it does run requestAirdrop and getBalance. How is this account getting created on the blockchain, since it has lamports?
https://docs.solana.com/cli/deploy-a-program#redeploy-a-program
We do support upgradable programs now
When you say upgrade how does that work. I thought updates were not allowed and you had to deploy a new program account.
It’s an optional keypair that can be used to deploy and upgrade the program with.  If it exists, some the command-line program deployment commands will use it.  You don’t have to use it though
In the example helloworld project why is the dist/program/<project name>-keypair.json file created. It appears to be the key for the program but what is using it and why? Since I'm already creating a programAccount object that passes no parameters to the constructor
might be somewhat related to what I'm experiencing...
is solana mainnet rpc having issues for anyone? im unable to get any requests through and am getting an error

```
Error: 503 Service Unavailable: {"jsonrpc":"2.0","error":{"code":503,"message":"Service unavailable"},"id":1}
```
https://hub.gke2.mybinder.org/user/opinionatedgeek-mango-explorer-9ou1lpb0/notebooks/Pandas.ipynb

running this notebook will get you the error
never mind, I can't 🙂
let me PM you a link to reproduce the issue...
I was thinking about that though this morning was working flawlessly
What do you mean which program? Mango exchange
What program are you querying accounts for.  That call can be very expensive.  You might just be timing out and Python is being python and giving you poor quality error messages 😉
furthermore, other requests are going through..
no nothing major...
not even 1 req/min
And I switched IP with my VPN but I'm getting the same result..
Were you doing something abusive that may have resulted in an IP ban?
It was actually working this morning and I'm quite clueless as of why it doesn't anymore...

Thanks a lot 🙂
hello hello,
I'm having an issue with the solana python library. I'm t rying to query "get_program_accounts"
But the connection keeps getting broken by the "remote host"

See the screenshot...
We exist well below that layer
No "you guys" involved
Seems like it was isolated to raydium and anything dependent on it.
interesting
that's why step finance had that issue as well
maybe many of you guys were piggy backing on same code
can confirm that works
Ok. so this is totally a step ui problem and nothing to do with solana or RPC.  ☑️
I think you need to send the step devs in here
https://github.com/raydium-io/raydium-ui/pull/7
BigNumber needs to be used in places where Number type is being used.
step devs say
looks like a general issue as other sites are affected as well
computed: {
    ...mapState(['wallet', 'liquidity', 'url'])
  },
this.liquidity.infos
That's a little too step-specific for this channel.  If you know exactly which solana rpc method is being called we might be able to help
which stores some pool infos
i think it's for fetching the liquidity infos
For which rpc request?
websites throwing Error: Number can only safely store up to 53 bits
are there any other solana endpoints besides of export const endpoint = 'https://api.mainnet-beta.solana.com'
// export const endpoint = 'https://solana-api.projectserum.com'
ok
Sounds like a <#694949720644124762> problem
hey guys i have a file system wallet but for some reason I cant access it in sollet using the seed phrase it gave me
the id json file is also unreadable by solflare
how can I access it?
What is the token program and token swap program ids on devnet? I am assuming devnet already has these programs deployed. Since loading the token program on devnet is failing, I might as well use the ones deployed on devnet directly.
I have debug in place to print the upgrade auth and halt immediately after resolving it.  The keys are correct there so long as the Ledger wallet replies affirmatively.  Must get lost in the plumbing
Odd.  There must be more bugs
Hmm, still wrong though.  The upgrade auth is H2XURVANsAbYPWd5P8W9uhMh9bZFTU1bWboYoWdVGaTi
so upgrade is mine default ```solana address
H2XURVANsAbYPWd5P8W9uhMh9bZFTU1bWboYoWdVGaTi
```
i should know that 😆
devnet
Is that on a local cluster or public?
upgrade authority != program ID
another thing is we put `--upgrade-authority` before program path i have to sing all transactions using ledger ```solana program deploy --upgrade-authority usb://ledger?key=0  ./target/deploy/oracle.so
```
and ledger works just fine
all stuff is closed
still does not work
```solana -k usb://ledger?key=0 address
DAGrkwQhTPwvEYHh9mMUychGKFwNpypG6BMYfXT2v5AK
```
```solana program deploy ./target/deploy/oracle.so --upgrade-authority usb://ledger?key=0 
Program Id: CXhe5JSabG6cUbooCCESz2cAcTYDAJCm48v5iGJEA8Qu
```
Which works fine on local
Must be something else. All I can see is that its failing in bpf loader.
I actually see that new program account creation happening, which is a transaction and it went through fine.
Basically, if `solana -k usb://ledger?key=0 address` works, `solana program deploy ...` should as well
It looks like there's a bug in the resolution of `--upgrade-authority` in the case that the Ledger Wallet returns an error.  Instead of raising the error to the user, it falls back to the default pubkey.  Can you test again making sure that the Ledger wallet is unlocked,  Ledger Live is closed and the Solana app is running?
Got it, thanks
Is it very common to see devnet choked?
Makes sense, thanks
Could be wrong, but I believe the name and symbol is not stored on-chain ?
loading a program's byte data into a program account is definitley a transaction.
Thats my only idea if it works on local
Possible. But im facing this issue for more than a day now.
I am not sure if loading a program is even considered a transaction
Its the first transaction, loading the token program using bpf loader


///////////////////////////////////////////////////////////////////////////////////////////////

And this is how I start the solana-client `let sol_client = solana_client::rpc_client::RpcClient::new(url.parse().unwrap());`
This might be me not understanding Rust/Tokio properly, but when I try initialize a solana client inside my tokio::main function for my web server, I get this error
```
thread 'main' panicked at 'Cannot drop a runtime in a context where blocking is not allowed. This happens when a runtime is dropped from within an asynchronous context.', /Users/edu/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.4.0/src/runtime/blocking/shutdown.rs:51:21
```
Events are an unreleased feature. You can use a `git` dependency if you want to test it out, though.
Instruction account keys are collated and replaced by a one-byte index during serialization
We have tooling for Rust or C/C++.  There's both a Solidity compiler and EVM runtime in the works, but neither are ready for primetime today AFAIK
I assume a transaction with many duplicate accounts get compressed in some way? e.g. if I send the sysvar Clock pubkey in both instructions in a transaction, solana web3 compresses that
hey, I'm pretty much new to the blockchain/solana ecosystem, I would like to know which langage/tool do you guys use for creating smart contracts? I have heard of Solidity but is it usable on Solana? or only Ethereum network?
my compilation issue seems to be resolved in 1.6.3
Afaik It always preserves the order. That's the whole point of it. Cf. https://www.karltarvas.com/2015/01/21/order-of-resolved-values-in-promise-all.html
So far i didnot have problems with ordering using Promise.all but it would be great to have more consistent solution
Maybe the sdk moguls can give a more precise answer, like jackcmay ?
Hopefully, but then I guess it won't be a P0. It makes sense in the Eth world where a block is ~10s, but for 400ms it is a lesser pb.
Maybe we get something like BatchTransactions
But it is an interesting one as imo it relates to how flashloans are used, i.e several instructions sent in one block.
This is a question I won't be able to answer unfortunately 😕
Ah ok. In that case I have no idea 🙂
hmm im jst doing localnet dev tho i don't need testnet or devnet
Filed https://github.com/solana-labs/solana-web3.js/issues/1019
i allow for delay of couple blocks but still if there is possibility of fitting it into one block that would be great
I need to update Oracle and then send Transaction as soon as possible
I believe minimum size is 50m shreds, which is about ~125 GB
Edit: For devnet you may have luck using a sata ssd, in case you have an old one laying around
<@!149990576572334080> What do you mean by keeping ordering ? Making async calls but be able to fetch Tx by index ? Then Promise.all() would probs fit the bill ?
Any cool trick for sending transactions in series but without waiting for confirmation and keeping ordering ?
hey guys im running a test-validator for some dev work and left it running overnight and the rocksdb folder grew to 13 gb? is there some way to not have it take up so much space?
"@solana/web3.js": "^1.2.5"
Im seeing a very common `UnhandledPromiseRejectionWarning` from within the most recent solana web3 release: https://pastebin.ubuntu.com/p/YkhtfBYnvz/
```
cannot find attribute `event` in this scope
``` 

<a:aPES_Think:493353113332219924> 

im importing anchor_lang:

```
use anchor_lang::prelude::*;

```
thanks
Yep, here’s a link about this from earlier today in <#428295358100013069> - https://discord.com/channels/428295358100013066/428295358100013069/827757568595329034
well ERC20 allows you to associate a name with the token. it seems right now SLP doesnt have that outside of the token program id?
What do you mean by name variables?
will the SPL token standard ever adopt name variables like erc20 does
thanks
Yes https://docs.solana.com/developing/programming-model/calling-between-programs#program-signed-accounts
https://project-serum.github.io/anchor/tutorials/tutorial-3.html#signer-seeds

> (TODO: add link to docs)
do these docs exist yet?
Pass in a devnet connection when constructing the provider. I.e. change the url here https://github.com/project-serum/anchor/blob/c3865ac40137ddd7f30cba6692a5d2e56c3a5a83/ts/src/provider.ts#L29.
how can we set anchor provider to devnet?
Thanks for the thorough answer <@!445425471027544095> ! 🙂
Ohhhh, yeah I thought it had to do with the commitment levels but I thought 'confirmed' was the "ultimate" level(if we can call it that). Guess I should have read a bit further.  I'll take a look at the docs you sent
<@!712675334176243746> - so this is slightly confusing.   I think what you're seeing is due to the different commitment levels for a transaction, some useful background info at https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment

`get_confirmed_transaction` returns transactions at the `finalized` commitment level by default (due to historical reasons), but you're probably seeing transactions show up at the `confirmed` commitment level from the log subscription.  

We recently added a `get_confirmed_transaction_with_config` method [1], and through the `config` struct you can request `CommitmentConfig::confirmed()` [2] instead of the default of `CommitmentConfig::finalized()`

[1] https://docs.rs/solana-client/1.6.3/solana_client/rpc_client/struct.RpcClient.html#method.get_confirmed_transaction_with_config
[2] https://docs.rs/solana-sdk/1.6.3/solana_sdk/commitment_config/struct.CommitmentConfig.html#method.confirmed
I'm printing the tx signature to check it on the explorer and it shows up as confirmed
Hey! I'm using the PubSub client in the rust client! I'm trying to understand why when I get a notification coming from a logSubscription, I get the tx signature and call `get_confirmed_transaction` with it  inside that notification callback I get a null response?
thanks for the explanation 👍
Your problem is that you didn't pass in `myAccount` into the `signers` array. If you're creating a new account, the account being created needs to sign the transaction. Using your above example,

```
      await program.rpc.toggleAccount(false, {
        accounts: {
          myAccount: myAccount.publicKey,
        },
        instructions: [await program.account.bridgeAccount.createInstruction(myAccount)],
        signers: [myAccount],
      });
```
```
      // Invoke the update rpc.
      await program.rpc.toggleAccount(false, {
        accounts: {
          myAccount: myAccount.publicKey,
        },
      });
```

stopped the issue
ah i think i see the problem
whats the best way to debug this particular error

```
Translating error Error: Signature verification failed
```

from

```
    it("Creates Account", async () => {
      // The program to execute.
      const program = anchor.workspace.SimpleBridgeFinance;

      // The Account to create.
      const myAccount = new anchor.web3.Account();

      // Atomically create the new account and initialize it with the program.
      // #region code-simplified
      await program.rpc.initialize(true, {
        accounts: {
          myAccount: myAccount.publicKey,
          rent: anchor.web3.SYSVAR_RENT_PUBKEY,
        },
        signers: [myAccount],
        instructions: [await program.account.bridgeAccount.createInstruction(myAccount)],
      });
      // #endregion code-simplified

      // Fetch the newly created account from the cluster.
      const account = await program.account.bridgeAccount(myAccount.publicKey);

      // Check it's state was initialized.
      assert.ok(account.enabled);


      // Invoke the update rpc.
      await program.rpc.toggleAccount(false, {
        accounts: {
          myAccount: myAccount.publicKey,
        },
        instructions: [await program.account.bridgeAccount.createInstruction(myAccount)],
      });

    });
```

im reusing the same account so it should work still no?
thanks
right... lol
lol. it's friday
I was going to present something as a scam, but ran out of ambition 🙂
Hehe ok
Just post a github  link in here when some green names are around, I guess
hehe. What do I have to dooooooo
Process... 🤔
I'm writing a swift library right now and maybe 25% done. Whats the process for getting it listed in the <#763249718339567626> list? Hoping to draw a little attention/support if possible.
haha
Not this time!  We beat you to it
Yup. No worries I was just getting back up to date and wondering if I blew something up lol
We decided to rate limit the testnet faucet hard 😆
Can you point at devnet instead?
Yeah it's dead ATM
Trying to hit the JSON RPC `"https://testnet.solana.com"` and getting a 503. Did something change in the last 2 weeks?
<@!417857235079790592> you need to convert to camelCase when using the javascript client.
Nope I'm just an idiot. Ignore me.
i have a function that looks like
```
    // toggle_account is used to enable/disable the account with the bridge
    pub fn toggle_account(ctx: Context<Update>, enable: bool) -> ProgramResult {
        let my_account = &mut ctx.accounts.my_account;
        my_account.enabled = enable;
        Ok(())
    }
```

but when attempting to use it with the rpc with anchor i get:
```
     TypeError: program.rpc.toggle_account is not a function
      at Context.<anonymous> (tests/simple-bridge-finance.js:48:23)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
```

```
  it("Toggles account status", async () => {
    const myAccount = _myAccount;

    // #region update-test

    // The program to execute.
    const program = anchor.workspace.Bridge;

    // Invoke the update rpc.
    await program.rpc.toggle_account(false, {
      accounts: {
        myAccount: myAccount.publicKey,
      },
      instructions: [await program.account.bridgeAccount.createInstruction(myAccount)],
    });

    // Fetch the newly updated account.
    const account = await program.account.bridgeAccount(myAccount.publicKey);

    // Check it's state was mutated.
    assert.ok(!account.enabled);

    // #endregion update-test
  });
```
that's a new one!
thanks
Yes, serde libraries like https://borsh.io/ support them.   The kinds of things that one usually would use a hashmap often map to accounts in Solana, where you use the account address as the hashmap key.  Essentially the blockchain account address space is your hashmap
can we use hashmaps with solana?
Yes! Exactly what I've been waiting for. Bye bye `#![feature(proc_macro_hygiene)]`!
1.6 has Rust 1.50 support, that's reason enough!
For general program development, I don't see why not.    I'm still backporting toolchain improvements to v1.6 though, such as https://github.com/solana-labs/solana/pull/16331
that was what I used as pointed by paulX tutorial 😉
Is 1.6 ready for primetime?
Here's my little template that contains all this boilerplate (that ugh, is still on Solana v1.5...I'll go update this now): https://github.com/mvines/solana-bpf-program-template

For unit-level testing, we have a crate called `solana-program-test` that allows you to easily send instructions directly to your program
For integration-level testing, there's a  `TestValidator` struct that allows you to essentially create a `solana-test-validator` instance from a Rust integration test, load your program into it and talk to it over RPC like you would from a real client
another question is what is the best way to test these contracts? (basically just Rust unit tests?)
Yes that's right.  Your program could choose to always use a single account.  This would effectively serialize all transactions that use your program
the multiple accounts thing suddenly makes sense :). thank you

in theory nothing would stop from always using the same account though? (of course would lose performance)
> Is there any good reading material comparing the. design of ERC20 and of a SLP Token?
Not sure that exists. Much of the SPL Token functionality was inspired by ERC20.  We mostly just took the ERC20 and *solarized* it

The multiple accounts thing is just the way that Solana parallelizes transactions.  Instead of a single map held by one account for all tokens, we break it up into lots of little accounts. One per token. This way, transactions affecting one token can execute in parallel to a transaction affecting some other token because the accounts they touch don't overlap. We expect the user-facing wallet to hide the complexity of multiple token addresses as that's basically an implementation detail. This way is a little more work for the client code, but much for efficient for the blockchain runtime itself.

> What is the best way to make the solana-test-validator print out some logs around what is happening in the programs (why it might fail)?
In a separate console run `solana logs` to stream all transactions that your `solana-test-validator` is executing
I have many noob queestions (know Ethereum/Solidity, but new to Solana)

Is there any good reading material comparing the. design of ERC20 and of a SLP Token?

Why do you need to create an account to be able to have tokens? (why can't you use your own account) Is it because the Token Program can only manage PDA (Program Derived Address)? Doesn't this get messy when, you have multiple tokens (each token needs to have its own address)?

I followed the tutorial from PaulX (which is amazing https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/) but now running into some issues. What is the best way to make the `solana-test-validator` print out some logs around what is happening in the programs (why it might fail)?

Loving to learn Solana (and Rust), but in the initial up hill battle
<:GalaxyBrainPepe:769907682496741376>
holy shit anchor is amazing
ill check that out
There are much nicer alternatives now to this kind of manual pack/unpacking, such as https://github.com/project-serum/anchor
thanks
ah ok
they correspond to the enum elements in https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs#L22
for https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs#L374 where are these numbers `0`, `1` etc... coming from? im having a trouble understanding how the value of   `tag` maps to the various token instruction enums
That is very kind of you 🙂
I'm enjoying it 🙂
thus turning you into my personal Rust tutor which is not a burden I meant to place on you
I apologize for not knowing Rust at all and thinking I can learn it at the same time as making solana changes
It's OK Tyera, I am learning alot here
I would expect any actual programmatic use of the program to know whether it has a memo or not, not use an Option<> ....
From my perspective it's just convenience for the cli implementation which is just about the only place you may or may not have a memo
I do apologize about the time you spent banging your head against it 😦
That's exactly what I was typing 🙂
How about I just not put WithMemo in spl_memo? 🙏
I've been wondering about a clever way to use a trait to clean a lot of this up.
My apologies, I was a little short-sighted about how much of a PITA moving WithMemo would be.
That would work for master, but not for the v1.6 (beta) and v1.5 (stable) branches
Could I update spl_memo to re-export version 1.7 of solana-program instead of 1.6.2?
So is it a versioning problem?
I mean, from a human perspective they are the same type. But not according to rust.
spl_memo::solana_program::instruction::Instruction is specifically v1.6.2 solana_program::instruction::Instruction
Whereas the Instruction in the monorepo is v1.7 in master, or v1.5.18 on branch v1.5, etc.
This re-export thing was a way that we could handle the spl program crates being separate from the monorepo, but also dependencies in the various versions supported in the monorepo. The result is that working with specific types (Pubkey, Instruction) is a giant PITA
So if I have a B in cli, I have to convert to A and pass to spl_memo, get back an A, and then convert that back to B as the rest of cli expects.  No?
As far as spl_memo is concerned, Vec<Instruction> is type A; and cli Vec<Instruction> is type B.
So I have to convert cli's Vec<Instruction> to the type expected by spl_memo, but spl_memo will once again return the converted type, so then I have to convert that back again to use the result in cli.  No?
I cannot use this with the Vec<Instruction> type as known to cli.rs apparently
```impl WithMemo for Vec<Instruction> {
...
}
```
In spl_memo:
Or does re-export actually define new types?  Sorry Rust ignorance here.
wut? 🧐
They are not?  I thought they were the same type.
So Tyera in this case I have to convert the Vec on the way into the convenience function, and then convert the result again?
Oh memo re-exports solana-program 🤦
The fundamental issue is that solana_program::instruction::Instruction and spl_memo::solana_program::instruction::Instruction are not the same type
That won't help
But I will try
trent I am happy to do that but expect tremendous pain given that everything I've tried always just produces more errors
Rust really doesn't have a better way to deal with this type of re-export situation?
You could try getting `Instruction` from `solana-program` instead of `solana-sdk`  in CLI globally
Yes
So basically you are doing a clone from one type to the other?
It might also be a versioning thing and the message is lying to you
Sorry i did not understand what your link showed, I will read more carefully
It's possible, the type just has to be converted as in the link I just shared.
I tried forcing a cast with 'as' but no dice
Which is crazy because they are fundamentally the same type
OK so the problem I have is that cli.rs is already using Vec<Instruction> and it knows this type as Vec<solana_sdk_instruction::Instruction>.  But when I move the convenience "WithMemo" implementation out to spl_memo, well spl_memo knows Vec<Instruction> as Vec<spl_memo::solana_program::instruction::Instruction>.  Therefore it doesn't seem possible to use such a convenience function defined in spl_memo from cli
No, sadly. We have to do this in the monorepo too: https://github.com/solana-labs/solana/blob/e4889220c46dd857c66a5d2768ed5fd6c994ccb4/transaction-status/src/parse_token.rs#L428-L442
Is there a way to let Rust know that these are the same types?
(I've been asked to move my WithMemo to spl_memo and when I do that and then try to use it from cli, this is the kind of error I get)
`solana-sdk` re-exports all of `solana-program`
```Error[E0308]: mismatched types
    --> cli/src/cli.rs:1237:17
     |
1237 |                 ixs,
     |                 ^^^ expected struct `solana_sdk::instruction::Instruction`, found struct `spl_memo::solana_program::instruction::Instruction`
     |
     = note: expected struct `Vec<solana_sdk::instruction::Instruction>`
                found struct `Vec<spl_memo::solana_program::instruction::Instruction>`
     = note: perhaps two different versions of crate `solana_program` are being used?```
Example error:
Now I"m getting confused about solana_program::Instruction versus solana_sdk::Instruction
Thank you Tyera, yeah I figured all that out
cool.. its 2 cents to mint a token
Hey, sorry I missed this convo! If you're still having trouble, you might checkout this chunk of code: https://github.com/solana-labs/solana/blob/master/account-decoder/src/parse_token.rs#L6-L34 (Note that spl_token_v2_0 imports its own solana_program::pubkey::Pubkey)
Basically, handling the different Pubkeys is a pain, but it's not a fundamental incompatibility.
tl;dr, comparing strings is easiest
cool
Yeah just once
this is easier than eth i must say
minting a token is a one time fee right
ok thanks
Yes. That bit of SOL pays the rent for the account that hold the mint data
just need to transfer sol to it
i did spl-token create-token and it worked
i need to transfer sol
made a booboo
sorry
i tried checking the tokens supply before even minting the contract
omg im so fucking stupid
i think i got it working
i have to transfer sol to it so it can mint a token?
i keep getting this error when im trying to view the tokens supply
pubkey: ARkjiXHjtKUGCreW7BEHxLFMZ8JnoB17urqrXRDTT7VH
I suspect that what happened was I was relying on a transient dependency on solana-program via spl-associated-token-account and just needed to specify a more concrete dependency where I needed it
Fingers crossed
I just tried specifying solana-program as an explicit dependency in cli/Cargo.toml and I think this fixed it?
hm
cargo version hell 😦   It can probably be worked around, somehow.  I'd help to see the exact error (I'm about to step out for a bit though, will look later if somebody else doesn't jump in)
You need _Rust_ v1.50.0
Oops typo
Yeah
all the time?
You need rust v1.50.0
Getting this issue when running tests 
```   Compiling solana-banks-server v1.6.2
error[E0658]: use of unstable library feature 'slice_fill'
   --> /Users/nicholasgregory/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-bpf-loader-program-1.6.2/src/lib.rs:571:18
    |
571 |                 .fill(0);
    |                  ^^^^
```
Sorry I am new to rust, does this represent a fundamental incompatibility or can I work around this somehow?
But there is a dependency on solana-program v1.5.8 via spl-associated-token-account v1.0.2
Which requires solana-program ^1.6.3
I need to use spl_memo v3
I may very well be very confused here but
ok maybe not then 🙂
Although my code doesn't seem to deadlock...
Interesting... I'll take a look. But weirdly enough I'm never calling unsubscribe. Maybe when the connection drops, it tries to do so.
<@!821639748652761121> - oh, yeah yuck.    `k.to_string() == spl_memo_v1_id().to_string()` might be an easy way out of this corner
and compare manually
So I suppose I have to extract the bytes out
So I guess I can't compare like this because the Pubkey types are different for the different versions of the spl_memo library I am using or something
this _might_ be due to https://github.com/solana-labs/solana/issues/16102 actually
```error[E0308]: mismatched types
  --> cli-output/src/display.rs:35:12
   |
35 |     (*k == spl_memo_v1_id()) || (*k == *spl_memo_v2_id()) || (*k == spl_memo_v3_id())
   |            ^^^^^^^^^^^^^^^^ expected struct `solana_sdk::pubkey::Pubkey`, found a different struct `solana_sdk::pubkey::Pubkey`
   |
   = note: perhaps two different versions of crate `solana_program` are being used?
```
Anyway, now I seem to have a versioning problem
Thank you mvines, this is my newness to Rust showing I guess
hm
Also speaking of the devil 😂, here's one of the errors:
```
 INFO  solana_client::pubsub_client > receive error: ConnectionError(Protocol("Connection reset without closing handshake"))
 INFO  solana_client::pubsub_client > websocket - exited receive loop
Disconnected: receiving on a closed channel
 WARN  solana_client::pubsub_client > unable to unsubscribe from websocket
```
try `*k == spl_memo_v1_id()` ...
I see, but yeah for sure I'll see what I come up with and keep you posted 🙂
Should I implement the PartialEq trait for Pubkey?
```error[E0277]: can't compare `&solana_sdk::pubkey::Pubkey` with `solana_sdk::pubkey::Pubkey`
  --> cli-output/src/display.rs:35:8
   |
35 |     (k == spl_memo_v1_id()) || (k == spl_memo_v2_id()) || (k == spl_memo_v3_id())
   |        ^^ no implementation for `&solana_sdk::pubkey::Pubkey == solana_sdk::pubkey::Pubkey`
   |
   = help: the trait `PartialEq<solana_sdk::pubkey::Pubkey>` is not implemented for `&solana_sdk::pubkey::Pubkey`
```
The error I get if I try simple == comparison is;
For example, if I want to check if a Pubkey is the public key of a given SPL program
Question: what is the best way to compare Pubkey for equality to another Pubkey?
The PubsubClient probably needs some TLC.  I’d love to see what kind of retry logic you needed to add and ideally we can incompatible that directly into PubsubClient for a near-term future release
I guess I'll have to add some retry logic on my end in the meanwhile
Yeah it happened when running that on the CLI, but also using https://docs.rs/solana-client/1.6.1/solana_client/pubsub_client/struct.PubsubClient.html#method.logs_subscribe on my app. But I assume this is what the CLI uses under the hood
You're getting the connection closed errors when running `solana logs`?  But yeah might be some connection retry improvements to be made in that area still
Ohh really? That's great, I didn't use it too much but I had a couple of `connection closed` errors? Is there a timeout or something?
`logsSubscribe` is stable, we just need to mark it as such still 🙂
Hey! I was hoping someone could help me with rust client... I need to track transactions for a given set of addresses but the `logsSubscribe` is unstable, and I can't find the `account_subscribe` method on the rust client. I was thinking just using a plain JSONRPC client to use the endpoint but I figured I'd ask first before spending the time on it
I tried DM to avoid muddying this channel further but you don't accept
https://github.com/solana-labs/solana/pull/16291
can I ask you a question about
hi Tyera sorry if you don't mind
Got, alright thanks for the help
ok so the parent program would sign a program-derived address when it invokes the child.  Child needs to check the derivation for address to ensure it's actually program-derived from the parent, and that the parent "signed" it.   To do this, yes the child needs to be aware of the parent's program id
I want to make sure that other people cannot write to these child accounts without going through the parent program
I have a method on a parent program that I want anyone to be able to invoke.

When invoked, the parent program will produce a state for an account owned by a child program.  I then invoke the child program to write the new state to the account.
> Which program is the owner of program derived addresses 
Whatever program id was provided when the address was derived

> is there a way to make sure the caller of a program only comes from another specific program (without hardcoding the program id of the invoker to the child program?)
The use case might help.   Without the program id, how would be child program identify the caller?  (although I think normally this would be implementing by signing the transaction/inner-instruction by an address that's known to the child program)
Which program is the owner of program derived addresses and is there a way to make sure the caller of a program only comes from another specific program (without hardcoding the program id of the invoker to the child program?)


///////////////////////////////////////////////////////////////////////////////////////////////

any good technical newsletters or blogs around Solana? Looking for something similar to https://0xkowloon.substack.com/ but around solana/contracts in rust
it is not very convenient for new starter
solonaweb3.js lacks of samples
My command is like this: spl-token transfer EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v 1 recipient_address --allow-unfunded-recipient --fee-payer ~/wallet.json --from my_token_account --owner ASK;
I got an error msg when using solana-cli to do transfer: "RPC response error -32002: Transaction simulation failed: Error processing Instruction 0: custom program error". Any hint what's it about?
Yeah I realized that lol
Just write it to an account from your program?
By stuff, I mean large amounts of text.
There's probably a better way on Solana, though.
I used event logs as a super hacky way to store stuff on ethereum.
Programs can log with `msg!()` (in Rust) and that shows up in a transaction log that can be read over RPC.  This information is not stored on chain so you should trust it as much as you trust the RPC server you're talking to.
Does Solana have something like Ethereum's event logs?
We have an example of "creating a new account" (account size zero to x), but you are correct, system program does not allow realloc of an already "created" account
SystemProgram::Allocate fails if the account is already allocated.  <@453347985628200960> - in my head we have an example of resizing an account from within a program, but I can’t find it and starting to wonder if I’m just imagining a future that doesn’t yet exist
quick question: what would happen when I call allocate() on an existing account, with the intention to increase storage size?
Also i would like to share that i managed to create a valid public solana address from a given seed:

```rust
use common::for_tests::get_passphrase;
use ed25519_dalek_bip32::DerivationPath;
use ed25519_dalek_bip32::ExtendedSecretKey;
use ed25519_dalek_bip32;
use std::str::FromStr;

#[test]
fn test_generate_public_address() {
    let derivation_path = DerivationPath::from_str("m/44'/501'/0'").unwrap();
    let passphrase = "shoot island position soft burden budget tooth cruel issue economy destroy above";
    let mnemonic = bip39::Mnemonic::from_str(&passphrase).unwrap();
    let seed = mnemonic.to_seed("");
    assert!(seed.len() > 0);
    let extended_private_key = ExtendedSecretKey::from_seed(&seed).unwrap().derive(&derivation_path).unwrap();
    let ref priv_key = extended_private_key.secret_key;
    let pub_key = extended_private_key.public_key();
    let expected: [u8; 32] = [209, 116, 57, 112, 12, 204, 210, 227, 77, 240, 219, 131, 247, 214, 100, 175, 77, 227, 239, 184, 145, 145, 104, 209, 140, 106, 243, 5, 77, 98, 211, 248];
    assert_eq!(priv_key.as_bytes(), &expected);
    let public_address = bitcoin::util::base58::encode_slice(pub_key.as_bytes());
    assert_eq!(public_address.len(), 44);
    assert_eq!(public_address, "2bUBiBNZyD29gP1oV6de7nxowMLoDBtopMMTGgMvjG5m");
} 
```

But i still didn't managed to do it with `solana-core` / `solana-sdk`, i rly want to integrate solana into our product, but i don't find any example/guide regarding the rust api
cool i'm curious what could be done
(curl: (28) Failed to connect to 192.168.1.88 port 8899: Operation timed out)
i tried `➜  ~ curl http://192.168.1.88:8899  -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0", "id":1, "method":"getBalance", "params":["83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri"]}'` but that hang forever
Hello, what is the official public solana node url ?
<@!752722929397137452> might have an idea
i wanted to do some nft game, is there an alternative for images atm?
I want to see that PR rewritten on top of https://github.com/solana-labs/solana-program-library/pull/1600 first.  Unsure if that’ll happen before the 15th though
https://github.com/solana-labs/solana-program-library/pull/1544 is this pr going to be merged by hackaton 15th may?
I am looking for a developer that are interested to work for a project, solana developer more precisely.
I was able to do it with File system wallet
anyone can help me to transfer spl token with Solana-cli using paper wallet?
hi anyone have docs about "programIdIndex" ?
Anybody?
API for SPL token holders
same to you 🙂 Send me a friend request
Is it possible to download the solana blockchain without running a validator?
u are not allowed DM by others .bro
We can talk and conclude. Drop me a DM <@!442512656776298497>
this is my 1st day learning solana.
am i eligible for your project?
it is so complex for newcomers
const tx = new Transaction()
        .add(createTempTokenAccountIx, initTempAccountIx, transferXTokensToTempAccIx, createEscrowAccountIx, initEscrowIx);
    await connection.sendTransaction(tx, [initializerAccount, tempTokenAccount, escrowAccount], {skipPreflight: false, preflightCommitment: 'singleGossip'});

the code from the guide is here https://github.com/paul-schaaf/escrow-ui/tree/master/src
Thanks budie. I wanna invoke sonala smart contract from external environment by uisng solanaweb3.js suites. not directly writting rust code...
this is also a good guide: https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/
see Token.createTransferInstruction
any buds give me an answer
by using solnanaweb3.js
how to make transaction for transfer native SOL token.
https://docs.solana.com/developing/programming-model/transactions
https://docs.solana.com/wallet-guide
and how can i make a transaction?
have you read the solana docs ?
not sure what you want to do tbh... I've never created a wallet by a connection
<@!808635736541888543>  dear toms. can you share me a simple code
Once you start, you'll need to send transactions through the BanksClient to do anything like create accounts
after i connect to rpc server. how can i generate a wallet? any samples for sharing sir
its the commitment level. I'm not exact on all the differences between the different levels, but basically it goes from low certainty to high certainty that any transaction is comitted and wont be rolled back
i'm not a real rust expert, so this might be a really trivial question. But i noticed that once you call `let (mut banks_client, payer, recent_blockhash) = test.start().await;` to generate the BanksClient, it becomes basically impossible to call add_account on the ProgramTest instance.

I was running into that issue, because I was trying to create an account that is owned by the payer itself. The payer is only known after calling start, but I can not pass it as an owner to add_account after calling start.
var conn = new solanaWeb3.Connection('https://api.mainnet-beta.solana.com','singleGossip')
or a constant string?
self defined parameter?
what is singleGossip represent for?
lol... not sure if this helps you cmonanesi, but I simply do this: connection = new Connection(url, 'singleGossip');
<@!539801435571748868> i see you are typing. can't help waiting for you answer
exactly -- we force the PDAs to be "off" the ed25519 curve, and there's a 50% chance that your seeds will hash into an address that's off the curve
how to connect a rpc server?

any one give me suggestions?
oh, so I dont create - I 'find' one ?
any one has nifty code?
No worries 🙂 I'm realizing that we don't have good docs on this, but you'll want to use `PublicKey.findProgramAddress` instead, which will give you a valid program address and an additional seed used to create it
i have not find samples from docs
hello buds. how can i using solanaweb3.js connect to remote rpc server?
sorry to keep bothering you jon, but hopefully this will be last q for a while: this code doesnt work to create a PDA: `PublicKey.createProgramAddress([Buffer.from("stoploss")], stopLossProgramId);` I get `Error: Invalid seeds, address must fall off the curve` and I cant find a clear example ! any ideas ?
great!
ah yeah, if you need to sign with a pda you must use invoke_signed
Found a good working example here, that I managed to adapt: https://github.com/paul-schaaf/spl-token-faucet/blob/main/src/program/tests/functional.rs

```
    assert_eq!(
        banks_client
            .process_transaction(transaction_deposit)
            .await
            .unwrap_err()
            .unwrap(),
        TransactionError::InstructionError(
            0,
            InstructionError::Custom(
                MangoErrorCode::FeeDiscountFunctionality.into()))
    );
```
I'm guessing I need to try using invoked_signed but I'm def having problems creating a seed PDA properly
what is a keyed_account please ? also - anyway I can debug this to inspect the values in there ?
```if account.is_signer && // If message indicates account is signed
        !( // one of the following needs to be true:
            keyed_account.signer_key().is_some() // Signed in the parent instruction
            || signers.contains(&account.pubkey) // Signed by the program
        ) {
            return Err(SyscallError::PrivilegeEscalation.into());
        }```
yeah, I guess I can write some code to just test that specific case, but my actual usecase is a bit more complicated. anyway, I'm debugging down to this code in `programs/bpf_loader/src/syscalls.rs
Yep, you check the package.json for the commands, like `clean` and `clean:program-c` and `clean:program-rust`, and then you'll run `solana-test-validator --reset`
https://github.com/solana-labs/example-helloworld/blob/be74521aacd8cd8fa544f27ac4c5d55a50f7b064/package.json#L17
Thanks Starry very helpful remarks.
is there any command for this?
can you try cleaning, rebuilding, and restarting your test validator with the `--reset` flag to clear the ledger?
I don't think the mint being owned by the PDA has anything to do with it
i am using Rust version
Hm, this may be specific to the C version of the hello world program.  Are you using the C or Rust version of the program?
then why this Error if i used all command properly?
But in that scenario I don't have to also sign because the mint is owned by the PDA ? The signer is just the account ?
I'm not totally sure of your usecase, but you'll likely want to use `program-test` to check that the correct errors / successes are coming out.  There's some examples in the solana-program-library repo, and here's one: https://github.com/solana-labs/solana-program-library/blob/master/examples/rust/transfer-lamports/tests/functional.rs
any signer for your program will still be a signer when invoking the next program. No need to pass seeds
yes my test validator is running now and i also used solana-test-validator command.
Ah yes, thanks, good to know.
Feel free to discuss here!
Are you also currently running the test validator with `solana-test-validator`?
yeah but when i run that command then i find error -no device found.
So this is definitely possible using the `SetAuthority` instruction, but you may be better off just immediately creating the account for the PDA
Hello guys, I am looking to discuss about Solana development, if there's any dev free to discuss, please drop me a DM.
Oh sorry, I'm referencing something different, forget what I wrote, hold on
I have a token account that I have transferred funds to, and then I change the authority to owned by the PDA
Started to write some unit tests for mango markets to test some invariants. Was curious, what's the best way verify the error code of the on-chain program? Did someone already write an example for this kind of unit test?
thanks Jon. However after staring at it for a few minutes I'm still not getting it... what does this mean in practice: "And only if the data is zero-initialized or empty" ? when I transfer ownership to my PDA initially I dont have an empty token account
Looks like he's on it: https://github.com/solana-labs/example-helloworld/pull/186
Did you deploy the program to your test validator? The error message ` Program needs to be deployed with solana program deploy dist/program/helloworld.so` seems to suggest that
Yep! You just have to be sure to set all of the data to 0 before transferring, check https://docs.solana.com/developing/programming-model/runtime#policy
New to Solana... Just wondering how Oracles are done in Solana... say I needed to implement an fx rate oracle... would I have an external process execute a program every X seconds to update the current rates? Then when another payment program wanted the rate it could invoke the fx rate oracle program and fetch the currently stored rate and expiry time?
DM
LF NFT SOLANA DEV
Hi <@!466984915376799748> , I have a signature problem with an SPL token CPI. I can get a transfer to work from PDA owned token account to user associated token account, but not the opposite. Here is what I tried:
• test
```
const ix = await program.state.instruction.withdraw(new BN(10), {
      accounts: {
        poolTokenMintAuthority: poolAuthority,
        poolTokenAccount: poolTokenAccount,
        userAssociatedTokenAccount: userAssociatedAddress,
        tokenProgram: TOKEN_PROGRAM_ID,
        userAccount: userWallet.publicKey,
      },
    });
    let tx = new web3.Transaction().add(ix);
    let { blockhash } = await provider.connection.getRecentBlockhash();
    tx.recentBlockhash = blockhash;
    tx.feePayer = provider.wallet.publicKey;
    let signed = await userWallet.signTransaction(tx);
    let txid = await provider.connection.sendRawTransaction(signed.serialize());
    await provider.connection.confirmTransaction(txid);
```

• Program
```
let cpi_ctx = CpiContext::new(
                ctx.accounts.token_program.clone(),
                Transfer {
                    from: ctx.accounts.user_associated_token_account.to_account_info(),
                    to: ctx.accounts.pool_token_account.to_account_info(),
                    authority: ctx.accounts.user_account.to_account_info(),
                },
            );
            token::transfer(cpi_ctx, amount)?;
``` 
I get a `signature verification failed`. I understand my user associated token address being owned by the userWallet, the latter needs to sign the tx.
What I am not sure about is if the CPI should use `new_with_signer` and what the `seeds` would be in that scenario considering the mint is owned by a PDA. What's wrong here ?
Anyone doing NFT markets for online games on Solana?
Where does bpf-sdk.tar.bz2 come from anyway? It's downloaded from https://solana-sdk.s3.amazonaws.com/stable/bpf-sdk.tar.bz2 but where/how is it built?
<@466984915376799748> I believe a change of yours broke the helloworld C example. (Is bpf-sdk-install.sh called anywhere? Should it be called manually?)
any help greatly appreciated
to simplify the question can I transfer ownership to a program and then that program transfer ownership to another program ?
currently I get an error `signer privilege escalated` and  `Cross-program invocation with unauthorized signer or writable account` when I try to invoke the placeOrder from inside my program with the PDA as the owner account
Good morning everyone. Could someone help me pls and confirm if the following should be possible ? I have User Wallet with coins. I create a temp token account and transfer funds to it, and then assign ownership to a PDA. That PDA then transfers funds to another program (the serum dex) via placeOrder
Hey guys how do I make swaps on the cli
So today i decided to have a read around commitment
https://github.com/solana-labs/solana/blob/c54daa80092ec47ce4064faca7f30690ade3f338/web3.js/src/connection.ts#L205-L220
How do i link this back to 
https://docs.solana.com/implemented-proposals/commitment ?
2 days ago my helloworld program was working but now showing above error.
Error: Program needs to be deployed with `solana program deploy dist/program/helloworld.so`
    at Object.<anonymous> (/home/neeteshmaurya/example-helloworld/src/client/hello_world.ts:160:13)
    at Generator.next (<anonymous>)
    at fulfilled (/home/neeteshmaurya/example-helloworld/src/client/hello_world.ts:26:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
npm ERR! code ELIFECYCLE
npm ERR! errno 255
npm ERR! helloworld@0.0.1 start: `ts-node src/client/main.ts`
npm ERR! Exit status 255
npm ERR! 
npm ERR! Failed at the helloworld@0.0.1 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/neeteshmaurya/.npm/_logs/2021-04-30T08_48_43_420Z-debug.log
getting this error when -- npn run start for example helloworld program
So im the second case I get the rent exempt form the sender? Like they send me 1 but when I unwrap I actually get around 1.002
https://docs.solana.com/developing/programming-model/accounts#rent <-- I recommend you read this
but when unwrapped, the rent exempt + wrapped sol balance both get transferred to your account
In the second image you can see that after I unwrap the wrapped SOL (1) I get more then 1 SOL in my balance
<@!815980392108392449> this is because each account has a rent exempt balance which is not included in the token balance


Another strange problem we found with wrapped SOL is when someone transfer to you some wrapped SOL

Hi there, I have a question about the wrapped SOL. We called the spl-token wrap with 5 but the balance inside the wrapped SOL is less then 5
I'm newbie of solana.
I plan to implement a thing like meta transaction for next hackathon. Is there anyone that knows the example source code of it?
when i deploy my example helloworld.how to fix it?
Error: Dynamic program error: no device found
thanks
see this: https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/
i was asking that how a beginner can start writing program?these programs are little intermediate level. It is little tough for beginner to understand these program..
See here: https://github.com/solana-labs/solana-program-library/
there is no stuff on internet except example helloword.
Hey Guys! Did anyone make his own solana program(smart contract)? Please Give me github link of that program for understanding(reading) purpose that how i can start writing my own program(smart contract).
when compiling the smart contract, this error happens
Im on MacOS High Sierra 10.13 and I follow the official guide to run the hello word dapp
cargo 1.51.0 (43b129a20 2021-03-16)
which version of cargo/rust you're using? and how to reproduce this?
anyone see this issue?
> Running: cargo +bpf build --target bpfel-unknown-unknown --release
> dyld: lazy symbol binding failed: Symbol not found: ____chkstk_darwin
>   Referenced from: /Users/.../.rustup/toolchains/bpf/bin/cargo (which was built for Mac OS X 10.15)
>   Expected in: /usr/lib/libSystem.B.dylib
Hi I am wondering why I can't borrow in this UI? https://solana-labs.github.io/oyster-lending
I have deposit the fund and withdraw the fund no problem, but I can't seem to borrow against it...
i see, tyvm
So you can do `MarketState.load(conn, market_address, program_id)` where `program_id` is the above
<@287924636493152257>
ah, so i would fill this in for program_id when making a MarketState object?
This is the v3 program: 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin
program_id is fixed depends on the version of Serum on-chain program you're using.
Hey guys, 
Check out our latest Solana Development course over at https://solhack.com

Any devs here want to help me build the next course?   Any tutorials, notes, screenshots,  screen recordings you can send my way? Will build out a SOL DEV 101 course with it
could anyone tell me how i would obtain a PublicKey (program_id) from a market address? using pyserum
Can someone drive me with solana sdk, i would like to create a KeyPair from a given seed, but i do not find the function in the SDK allowing me to create a valid keypair from seed
ok great, thanks
Yes, it runs the transaction on the RPC server but doesn't commit the result to a block
is that equivalent to an EVM call? It reaches a node and really runs?
Oo, i thought i typed simul... in the search. Thanks
https://solana-labs.github.io/solana-web3.js/classes/connection.html#simulatetransaction
https://github.com/solana-labs/solana/blob/master/web3.js/src/connection.ts#L3218-L3225
There is a keep alive ping:
Can't seem to find a single thing talking about this "simulation" in the web3js doc
with web3.js
Is there a way to do a transaction simulation without actually sending a transaction?
hello I am looking to develop a bridge between BSC and solana -- before i begin I was wondering if there are any repos that are currently addressing this problem i can contribtue to?
thank you
external process: cronjob, `while true; do ./send_it; done`, etc
who sends that transaction? a blockchain external process?
solid
This is exactly how things like the Serum DEX work. They call it a crank. A permission-less transaction that just kicks a on-chain program to do something.  It's not spam, the crank is paying for the transaction so it's as valid as any other
would it be terrible to periodically send a transaction to a program that contains instruction data to have it execute a certain action? is that a good way of achieving what he described or is that considered wasteful (tx spam)?
Not currently on chain.  That's a service I've been hoping somebody would build for a while now.  It does require some off-chain agent to kick it, perhaps integrating it into the validator code at some point so validators can kick the timer
The backend might have hung up on you.  I don't think we have a keep alive ping
The way I've come to appreciate it through developing is the address is the address of an Account whereas the Owner is the program that has control over it. For example, the owner of a wallet account is, typically, the System program. Of course there is more nuance than that, but it's a good start.
When looking at the solana block explorer, what's the difference between address and owner?
does that make sense?
so when we want a program to be able to hold multiple different PDAs, each for their own use cases, we pass in dynamic seeds into `Pubkey::find_program_address` but we can pass it a static hardcoded seed if the program only needs 1 pda throughout it's lifecycle?
is there something like a timer in the solana blockchain? to execute programs automatically every given scheduled time
I am using building a dashboard using the JSON RPC API and wanted to ask a question about the expected behavior of websocket subscriptions: 

Is the websocket subscription expected to remain open indefinitely? 

I am able to run 'accountSubscribe' successfully to obtain my subscription ID. After this point I am seeing an expected event come through the websocket, after which I don't receive any further events for the subscription ID. I would expect the account subscription to emit changes to AccountIndo for as long as the websocket remains open - is this not the expected use case?
sure, thank you
That seems like you’re using an older release.  Can you upgrade to v1.6.6
getting this error on localnet, can anyone provide any help at all?

Error: failed to get recent blockhash: Error: failed to get recent blockhash: Invalid params: unknown variant `finalized`, expected one of `max`, `recent`, `root`, `single`, `singleGossip`.
    at Connection.getRecentBlockhash (/Users/cameron/simple-vote-tutorial/node_modules/@solana/web3.js/src/connection.js:2363:13)
    at <anonymous>
    at process._tickDomainCallback (internal/process/next_tick.js:228:7)
<@!222259920727310336> try the following and let us know:
`getrandom = { version = "0.2.2", features = ["custom"] }`
<@!222259920727310336> Looks like something in the dependency tree is depending directly on `getrandom` v0.2 and our workaround only works with v0.1.  Can you tell using `cargo tree` where that dependency is coming from?
Thanks, I already put the dummy feature in as a dependency but it's still showing up compile error.

I was try to fork the dependency and remove the rand part to see if it works
Check out the faq and let us know if that doesn't solve the dependency problem: https://docs.solana.com/developing/on-chain-programs/faq#rand-rust-dependency-causes-compilation-failure
when will the flutter library be updated?
I'm so bad at planning architecture
I'm still thinking about the actual structural details
I mean Solana kinda is a database itself.  Bulk storage will be expensive, it's more designed for lots of little pieces of data
Or should I just write contracts?
Are there are solutions for using Solana as a database without too much work?
Interesting
am i blind or i can't see timestamps of transactions? 😆
You'll have to smooth over the block latency, otherwise state updates at ~400ms will be jank.  But again depends on the kind of game really.
This archived example needs work to get it working against the current SDKs, but might be something to look at a little: https://github.com/solana-labs/example-tictactoe
https://explorer.solana.com/address/B51jFZnR4y2JrnzmdWJxZiMRH1GbxT5zY9m5BFN6LQV3/tokens?filter=4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R
i'm testing exploer
I think that a decentralized game would be cool, but it's not at all practical.
I was thinking about just using it for game assets etc, not having the game fully decentralized.
yes leaning, but depends on the requirements too.  A first person shooter maybe not so much
`solana airdrop 1`
I'm interested in making a decentralised game. Is Solana a good choice?
How can I acquire SOL on the testnet?
Hey team, I understand that getrandom is not supported when we compile into bpf, but is there a way around it if one of the dependency libraries has getrandom as dependency?

```
Compiling matrixmultiply v0.2.4
error: target is not supported, for more information see: https://docs.rs/getrandom/#unsupported-targets
   --> /Users//.cargo/registry/src/github.com-1ecc6299db9ec823/getrandom-0.2.2/src/lib.rs:213:9
```


///////////////////////////////////////////////////////////////////////////////////////////////

Oh thanks for letting me know! Glad it worked out 🙂
just for later reference, base64 didn't work, but pasting the decimal octets [n1,n2...] worked like a charm.
Thank you!
Network issue, works like a charm on the node hosting laptop
Yep, you were right
sounds like a good plan
Same. Can I try to get the .so file onto the laptop that is hosting the node and try to deploy it from there?
Got it, still looks like some sort of networking issue to me.
Yup, you can use `solana-keygen recover`
Any way on the CLI to get the privkey from the seed?
Sorry, I meant sent
are any actually confirmed? This shows 0 confirmed
The cli doesn't use a derivation path, your best bet is probably base64 encoding the wallet private key and importing it directly
before and after pictures


Yea. A good amount are sent, but at 380-400 it fails and it enters in that waiting state
Pretty odd, are some of the transactions succeeding and others failing? Any more context you can provide would be great
In particular, what derivation path to use?
The seed phrase coming out of the command line file wallet tool, how do I use that to get the account into Sollet?
Sadly I disabled the firewall altogether and still the same issue.
I'll do that, 2 seconds
great, you'll need to enable the `57468` port for udp
Looks the same
```IP Address      | Node identifier                              | Gossip | TPU   | RPC Address           | Version
----------------+----------------------------------------------+--------+-------+-----------------------+----------------
127.0.0.1       | 2UH1hGPwoCD4VY91iygY1Rh2FSbmbJGu52rFzLCrKsYh | 1024   | 57468 | 127.0.0.1:8899        | 1.6.3
Nodes: 1```
should look like this
```
IP Address      | Node identifier                              | Gossip | TPU   | RPC Address           | Version
----------------+----------------------------------------------+--------+-------+-----------------------+----------------
127.0.0.1       | CU8ReVyYRmkgCA1vvGSmuVfaUduW5jMtoC2aYcuVdfbg | 1024   | 56365 | 127.0.0.1:8899        | 1.6.3
```
Try running `solana gossip` to see what the TPU port of your test validator is
I should enable the 8899 port?
Oh, I'll check that
the deploy process uses udp to send transactions directly to a validator's transaction processing port rather than going through rpc via http
ah, if it's on another laptop maybe there's a firewall issue. Make sure you have udp ports open
And the solana versions are the same
The RPC URL is fine, the cluster is running on another laptop

maybe? what shows when you run `solana config get`
Is this the cause of this problem maybe?
But I am using airdrop before the deployment to get some SOL
Still doesn't work even after deleting the keypair from target/deploy
Oh yes
when you deploy, you deploy your *.so file from the target/deploy directory right?
generating a new keypair with --force?
How can I do this?
Can you try deleting the keypair file in `target/deploy` and try again?
yes
96 kb
`solana-test-validator` is also v1.6.3?
but seems it's probably not big hmm
ok, I meant how big is the shared object file
No bigger than 200 lines each
It's a basic program, with 5 files
pretty odd, how big is your program?
It's stuck, after the wait it runs again and fails, and waits again
<@!298106827978178560> are you seeing any kind of error? or is it just stuck on the confirming step?
got it
And the cluster I am using is by running this command: ```solana-test-validator --log```
My sonala version is: solana-cli 1.6.3 (src:2e983fb3; feat:3342604240)
also, if you don't mind, can you share the address of the program you're deploying?
which solana cli version are you using?
They are being confirmed but at a certain point they all fail
I have 10 SOL so I guess yes
it's the same SOL under the hood. But wrapped SOL is a special account that can be handled as an SPL Token. Normal SOL accounts are not SPL Token accounts
no worries, wish discord had proper threads
Sorry, no
Are you working with Andrei? I was responding to their question about program deploys
And our processing budget used is a fraction of the max_units
We have enough lamports to pay for the rent on the accounts if that is what you mean
Do you mean 'lamports' or the budget of 200 K max_units?
None of the transactions are being confirmed? Does your address have enough lamports to pay for the transactions?
That would be the fall back, but increases state, complexity
Program deploys are done via hundreds of transactions
Any reason you can't split into multiple transactions?
Each proof has up to 4 128 byte values
For tracking NFT transitions requires a number of 'proofs' of existence or non-existence
None at the moment, what's your use case for larger transactions?
Eewww.... so data must fit in the remainder after signatures. Are there plans to increase this?
The full limit for a transaction (including signatures) is 1232 bytes. Instruction data size is only limited by total transaction size
are wrapped sol and native sol the same thing ?
noob mistake kek
well nvm fixed
```    const blockhash = await this.connection.getRecentBlockhash(
      this.opts?.commitment || Provider.defaultOptions().commitment
    )
    updateTx.recentBlockhash = blockhash.blockhash```
solution ?
```failed to send transaction: Transaction simulation failed: Blockhash not found```
Does anyone know the cause of this?

Hi, I am trying to deploy a program but I get this when I run the command:
<@!466984915376799748> is there a maximum # of bytes for the `Transaction` in the `sendAndConfirmTransaction` webjs call? Or, more specifically, a cap on Instruction data size?
😃 thanks a lot <@!466984915376799748>
The program turned to executable. You freaking save my day.
Damn, you rock <@!466984915376799748>
<@!700244911101837352> when you run `solana deploy --help` it will tell you to pass two things:
1) path to your program.so file
2) path to your program private key file (take yours out of the trash first)
lucky you
So what's is your idea with the priv key <@!466984915376799748>
Ah nah, :))) It's still in my trash can. Hahaha
unfortunately, I destroyed it instantly due to security
<@!700244911101837352> when you deployed the first time, did you save the private key of your program account? (looks like you have `return program;`)
I never use it before. But gimme a sec, I'm learning how to use `solana deploy`
Do you mind using the solana cli?
Ah, I see. That is probably the least reliable way to do it unfortunately
Btw, `"testnetDefaultChannel": "v1.4.8"` is what I had in package.json
I'm using `"@solana/web3.js": "^0.87.0",`
```
const deployProgram = async (data, payer, connection) => {
  const program = new Account();
  await BpfLoader.load(
    connection,
    payer,
    program,
    data,
    BPF_LOADER_PROGRAM_ID,
  );
  return program;
}
```
<@!466984915376799748>  Can you have a look at my custom deploy cmd
Make sure you deploy with `solana deploy` in this case since your partially-deployed mainnet program is using bpf loader v2
😛
one of the biggest I've seen, must be good
you are deploying a really large program
haha, I will be here to help if needed
:)) I'm quite nervous now dude. I will redeploy but please stay with me hahaha <@!466984915376799748>
The bytes are the same but if the writes don't finish, some of the data will be zeros still instead of byte code
Deploys use a lot of transactions and if they don't all get processed, then your program won't get marked as executable
<@!700244911101837352> you can try redeploying your program on mainnet
Ha, yeah rent is getting pretty expensive 😅
I spent nearly 2.3 SOL on the program 😂 damn
It's so expensive to do a live debug.
do you have any idea what the reason lead to the difference.
however, devnet is executable and mainnet is not executable.
You can see bytes length are the same that means I deployed the same program for both networks.
and on Mainnet: https://explorer.solana.com/address/SenTTyY6aynBEQ6ZKTF4ex16Bq9E2R5zhm7yjzXjTeX?cluster=mainnet
This is my program on devnet: https://explorer.solana.com/address/DV9TWNbaN8nabswzdDT1PYqqcP8eKvBtGGXShKj5E5ya?cluster=devnet
<@!466984915376799748> I think I find out the problem
That's weird that I run the same function and it's ok on devnet.
any clue bro?
<@!466984915376799748> I did. In case of turn on preflight check, `Transaction simulation failed: This program may not be used for executing instructions` it showed this one.
It means your transaction likely wasn't processed by the cluster, it's safe to try again but if you continue hitting this issue, make sure you are using the preflight check to check if you're trying to submit an invalid transaction
So really appreciate if anyone can get me around
I know the error msg is quite ambiguous, but the txid didn't appear on explorer for me to debug further.
Hey I tried to send a tx to mainnet and this error occurred.
`Error: Transaction was not confirmed in 30.01 seconds. It is unknown if it succeeded or failed. Check signature 41CWbpq8voi34b7MQYCDwiSJNt56MXkRNcvtWZzjZZazLQHAkpPN6ffs5oUDPngAHxRgTxwjhnrHeH2hkg7DoAd using the Solana Explorer or CLI tools.`
very useful, thanks alot
For a slightly higher-level framework though, try looking at https://github.com/project-serum/anchor
i see thanks
You can encode whatever you'd like in that array of u8s
but you saying it could be larger the u8?
i see that
yes its an array
you can have more than one u8 though, isn't that what you're asking?
yep
yeh, they all use u8 in instruction_data
Here are some: https://github.com/solana-labs/solana-program-library/tree/master/examples/rust
any examples?
thanks
you can put as many octets as you'd like in instruction data provided that the transaction doesn't exceed 1232 bytes in total
probably instruction data.
would i use instruction_data or accounts?
if I wanted to send a hash
i can choose?
yes
can instruction_data be larger than u8?
I got this working in my cli template, see this commit:
https://github.com/mvines/solana-cli-template/commit/32eec3b5b345c148e565bff7df981c5c1157e049

There's a problem in solana 1.6.2 that causes RpcClient to blow up when running in a tokio 1 runtime.  Solana 1.6.1 doesn't have this problem, so for now you can get unblocked by pinning to `=1.6.1` until the root cause can be fixed
Hi, please help me, how can i store data in my solana account ? Maybe there is a guideline?
make sense
I found it. getParsedConfirmedTransaction
na, Solana uses ed25519.  That program does allow for some secp256k1 operations though
Hi.
Is there a function that can inquire transaction details(Instructions) in solana-web3.js?
https://docs.solana.com/developing/runtime-facilities/programs#secp256k1-program

it appears that solana uses the same elliptic curve as ethereum. does this mean we can use the same private/public keypair on ethereum/solana and get the same address?

ie can i sign a message on ethereum and verify its signer on solana?
<@417857235079790592> - Everybody who interacts will your program would need to provide that account as input.  For example your program could require that account 0 is always that address, and fail the instruction if it’s not
okay i am now able to create the program address:
```
 let program_key = Pubkey::create_program_address(&["mysupercoolseed".as_bytes()], ctx.program_id).unwrap();
```

how can i store information under this program account so that any user who is interacting with my program can read from this program account?
As soon as possible.
<@!445425471027544095> any context on when testnet will come back up? <@!267610913773715456> mentioned we should expect something Monday evening PT
if you return an error pretty sure it unwinds the stack and aborts any changes made
How would be possible on solana to create a flash loan contract? How theorically I coukd create a contract that move tokens that will fail the transaction if are not given back with a fee?
thanks 👍
ok yeah so your program would then need to have an initialized token account at a program-derived address, so the program can sign transfers from the account that it's holding back to users eventually.  You'd initialize that token account within the program, much like the associated token account program does [1].  Transfers into the program's token account will fail automatically if it's not the same kind of token (a different token mint)

[1] https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/src/processor.rs
its basically a program that will receive specific tokens from users and will hold onto them
Cool, thanks for sharing!
Yeah if you wanted to restrict to a certain kind of token you could save the mint address for that token in a program account somewhere.  There’s probably a nicer way to do this but I’d need more context about what you’re trying to build in order to suggest a possible alternative
uhm it would be deployed beforehand to this program being deployed. 

someone in the serum discord said for anchor i could a state struct or pass the token program id into the `new` function with anchor structs
Where does the program get the token to transfer from?  Would it hold a treasury account?
Explorer source code is here: https://github.com/solana-labs/solana/tree/master/explorer
There is no backend, beyond the JSON RPC API provided by api.mainnet-beta.solana.com
so lets say you have a program that wants to always transfer a certain token and no other token.

would the best way to implement this be hardcoding the address somewhere in the program? i dont think i've seen any example programs so far that have hardcoded variabels
Also just out of curiosity, how does the Solana explorer work then? On the backend at least, does it use the Rust client, the JS client or is it validator that sees all the transactions?
Oh I see, that's bummer... That would be great though, keep me posted on how that goes!
what dependency would in eed to upgrade?
<@712675334176243746> - i ran into this the other day as well.  Totally sucks but you currently can’t use RpcClient from a tokio runtime context like this.  I might make time to work on this next week


///////////////////////////////////////////////////////////////////////////////////////////////

Hi - just thought I'd ask about compute units to be sure. Can I assume that a transaction fee is not affected by the number of compute units used by a transaction. If I use 100 units or 200 000 compute units, the transaction fee is the same right?
Prefixing accounts with a variant discriminator and checking that discriminator everytime you deserialize is one way.
how can we find this, and fix?
Oh jeeze now I forgot to run cargo fmt again ...
Yeah `tree` should do the same as `build`,  but without all of the building
thanks for your help
ok I ran the script, nothing changed, so apparently my cargo build directly in programs/bpf had the same effect ...
I'll add that to the CI error message as well to avoid future confusion
ok thanks
I just added some spl dependencies
<@!821639748652761121> try `./scripts/cargo-for-all-lock-files.sh tree`
Also it feels strange to me that the Cargo.lock updates were so extensive
Maybe programs/bpf is special, it's the only thing in "exclude" in the top-level Cargo.toml
Exactly what build commands do I need to run to build the whole tree?
OK so if I do an explicit cargo build in the programs/bpf directory, the Cargo.lock file gets updated
But I do a top-level 'cargo build', not sure why that is not building everything including the bpf subdirectory and its Cargo.lock file?
such as programs/bpf/Cargo.lock
Some subdirectories that I didn't touch apparently now have Cargo.lock changes
oh I think I understand a little better
The Cargo.lock file was updated by my change and has the changes that the build is complaining about
I don't quite understand what is going on
My pull request is getting an error in the buildkite/solana/checks step because of "Uncommitted Cargo.lock changes"
Hi, sorry for being a noob to Rust and the Solana build process
Ah. That will do it.
remaining_accounts is cool but not that safe
i use 😆
Aren't you using Anchor? This isn't possible if you are, since it prefixes a unique 8 byte discriminator to all accounts (unless you're using the  `AccountInfo` directly).
Yesterday found this bug in my code 😆
I'm speaking from experience 😆
For example, one common attack I expect a decent amount of first time solana programs to be vulnerable to is account substitution for program owned accounts of different types. E.g., passing in an spl `Mint` when a function expects an spl `Account`.
I think a general, best practices + security section would be a great idea.
I think whole PDA needs more info / examples
We should probably add that to the docs 🤔
Prefixing the seeds array with a static string would be good for domain separation and some prevention against collision attacks
Indeed, static strings are useful if the PDA can be shared across the program, though it wouldn't be appropriate in that example, since it would allow the vault to be shared across many check accounts. Generally, if you have per user program accounts, each of which own their own program controlled vaults, I wouldn't use a static string.
https://github.com/project-serum/anchor/blob/master/examples/cashiers-check/tests/cashiers-check.js#L37
Can you link me to the code you're referring to?
<@!501570363566587905> I have seen that u use `new Account()` as seeds for `findProgramAddress` If i want to just create one program authority i should just use some static string and i will save space thanks to that.
User resolved by upgrading solana cli to 1.6.3. Thank you.
Yeah I don't even know how to hunt it. But I'm compiling with solana 1.6.3 and crate solana-program 1.6.3 and the problem disappeared for me
Public endpoint is kinda slow network itself works fine
FYI this is being reported on 1.6.3 still, though I don't have a good repro case.
Has anybody else noticed devnet becoming really slow?
Thanksss
Anyway, ty for answer and confirming what I feared 😦
I guess I understand better now why a user has to go over all this shenanigans on serum-dex just to add a pair
I get the problem and I understand the choice Solana has made here. I think it's just unfortunate they didn't find a solution and I hope there will be one in the future.
UI will either need to rely on a backend storing the list of pubkeys (loss in decentralization) or of pubkey passed in the url (loss in userfriendliness)
<@!152089247254315008> This has been mentioned a few times in this thread. You need each user to hold an account with the data. Having a mapping in the program account does not scale. Cf: https://smith-mcf.medium.com/a-simple-solana-dapp-tutorial-6dedbdf65444
Is going through some kind of DAO pair validation the only solution to protect against this kind of DOS attack on mappings and stay decentralized ?
I still don't get how to store mappings in solana.
I understand that I can create an hashmap, and map pubkey to account that the program would own. Take uniswap for example, it would be possible to map public key to pool account that would store the states of the pool. (equiv https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Factory.sol#L11)

This hashmap would be stored in the solana program account.
However, there is a 10 MB limit on program account. What happen when there are more than 10 MB of pool pubkey ? How do you deal with it ?
Hey <@752722929397137452> can we talk a little more about what you're brewing cuz we've been working on a DApp that we think may have a use case for that token standard
i can't get it to run from the documentation i am a noob
is there a tutorial for memo program?
Not right now, believe <@!752722929397137452> has something brewing
<@267610913773715456> ?
trying to setup tests for a Solana program Any good docs about how to do this? I having trouble with the most basic stuff as how to create an array/vector of dummy `AccountInfo`
Yes it is all in command line
it can be created with command line right?
I'm not from Solana, but you can create a token using the Solana Program Library: https://spl.solana.com/token
I could not found
I wanna create accounts and token on solona, is there a SDK or a library?
<@!445425471027544095> Any policies for that file? Can a person just dump 10k NFT tokens there?
https://github.com/solana-labs/token-list/blob/main/src/tokens/solana.tokenlist.json
Hi team, is there any documentation for staking of SPL tokens? There is a documentation for staking SOL tokens (https://spl.solana.com/stake-pool) but couldn't find any doc for staking SPL tokens.
Where to send PL ? which repository in github ?
Ah no, this is our fault.  We used to have a localnet.sh script to properly run Docker, but it seems like it was removed.  You'll need to expose some more ports, so your run command will look something like:
```
docker run 
      --publish 8001:8001/tcp # entrypoint
      --publish 8899:8899/tcp # rpc http
      --publish 8900:8900/tcp # rpc pubsub
      --publish 8901:8901/tcp # (future) bank service
      --publish 8902:8902/tcp # bank service
      --publish 9900:9900/tcp # faucet
      --publish 8000:8000/udp # tvu
      --publish 8001:8001/udp # gossip
      --publish 8002:8002/udp # tvu_forwards
      --publish 8003:8003/udp # tpu
      --publish 8004:8004/udp # tpu_forwards
      --publish 8005:8005/udp # retransmit
      --publish 8006:8006/udp # repair
      --publish 8007:8007/udp # serve_repair
      --publish 8008:8008/udp # broadcast
      --tty
      --ulimit "nofile=500000"
      solanalabs/solana:1.5.19
```
Pull Request, look it up on Google
what is a PR?
Edit this file and send a PR: https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/src/tokens/solana.tokenlist.json
so where can I add those?
I think this data is kept off-chain, as the current canonical token model doesn't support these fields.
Ok, so I think it's a bug. It works with 1.6.2 but not 1.6.4
Like here to add "Raydium" as name, add decimals and "RAY"Like here to add "Raydium" as name, add decimals and "RAY"
this is with recipient funding
Any ideas? haven't seen this before
This pubkey is not known to me
Seeing a weird error on transfer in devnet: Account could not be parsed as token account: pubkey=7GfzhXfsJ5kjmNHeVkx3HemGjXXziGmS3M27KDo1bZNe
Me too, if you find answer,let me know
(
Nope sorry
Like here to add "Raydium" as name, add decimals and "RAY"
something like this ?
<@!270976095698944000> https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/src/tokens/solana.tokenlist.json
Hello,
I wanted to ask for all the properties of a SPL-Token. I haven`t found a full list on Solana.com. In particular properties like name, decimals and symbol. How do I change/add those?
Regards
Nyan
Hey did you find answer?
port 8900 is not exposed, i miss something ?
Connection to cluster established: http://localhost:8899 { 'feature-set': 1160251324, 'solana-core': '1.5.19' }
Using account Bq4HF5twg2dovjmPKEFiUbKvADsP5CWMLEKDo8PQNXNv containing 0.0355036 Sol to pay for fees
Loading hello world program...
ws error: connect ECONNREFUSED 127.0.0.1:8900
<@!466984915376799748> seem docker file missing to expose some service
Hi everyone, i have question, can I create own cryptocurrency on Solana token with my name and symbols of  cryptocurrency, like in ethereum or neo ?
thanks you <@!466984915376799748> for your time 🙂
Nope, not yet
nice 🙂
We have one here: https://hub.docker.com/r/solanalabs/solana
yep i have, the goal will be to have just a docker image to reduce time to lunch a test dev 🙂
You can try running the `solana-test-validator` binary which is installed with the solana tools: https://docs.solana.com/cli/install-solana-cli-tools
Hi team, sorry to add to the pile of questions here. May I know if there is any documentation or example for a fixed price NFT auction (similar to Ethereum's OpenSea)?

Example of OpenSea's ERC721 token atomicMatch function: https://etherscan.io/address/0x7be8076f4ea4a4ad08075c2508e481d6c946d12b#code
HI, there is a docker image for run a solana cluster ? purpose to interact / test with js sdk without install all in my hosts ?
is there a way to detect that by some metric ?
Hi, is there any metric that you can use in the system to monitor rollbacks, or tell if there is a lot of churn on any hot addresses ? For example a high throughput system that has some contention (by design, or inadvertantly) may have a bottleneck
omg ❤️❤️😍😍 thx i have a looksie
If I have functions and permissions of an application on an EVM and the database on a decentralised dB then you can possibly have a fully decentralised solution?
or would i have to design my own?
is there an alternative to the erc1155 standard on solana
Hey guys, I have a question in regards to developing on solana
Good morning. I am new to solana and I have been trying to exchange tokens between two token's account by using my own process_instruction. Inside the program, I use a spl_token-transfer-instruction and invoke it by signing it with the source account owner account. Unfortunately, I receive an error telling me that the seed used to invoke the instruction is wrong. 
Is right to invoke the instruction by using the seed of the source account owner account? Is there an example of how to get the seed from an account created with <@750257486975467582>na/web3?
<@!222299314779717632> - FYI: https://github.com/solana-labs/solana/pull/16364
Got it.  Right now it’ll start pruning at 500gb or so!
idk it fills up pretty fast.. leave it running overnight and bam 12 gigs +
just like lets say max 10 gigs
What kind of limit are you looking for?  It should just be a minor plumbing effort to add a limit
unfortunately not 😦
can you pass `--limit-ledger-size` argument?
hey guys is there a way to limit the size of the test-ledger produced by solana-test-validator?
yep exactly, will try both thanks
or build from source
you could try to symlink it there
yea. looks like you are using a prebuilt binary which expects it in that path
but I have it in: /opt/homebrew/opt/openssl@1.1/lib/libssl.1.1.dylib
It is looking for the lib in: /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib

try homebrew openssl?
(btw it seems I don't have an opt dir in /usr/local)
Would you know how I could fix this ? :x
I tried reinstalling openssl, but it didnt change anything

Hi guys, I face this issue when I try to start solana-test-validator (under macOs/M1)
it's still a lot of calls, but it could work
so just look up confirmed transactions as the signatures appear
oh cool
That is, what `getConfirmedSignaturesForAddress2` provides (minus the memo I guess)
It also provides the transaction signature and result
how do they get all of the transactions instructions and display them efficiently? Surely they don't follow the two step process above
i figured there must be some websocket version, since the solana explorer has all the latest transactions
unfortunately logsubscribe literally only returns the logs
`logsSubscribe` is probably the closest thing with a `mentions` parameter for the account you're interested in following
But is there a websocket version of this? (with a single function)
Currently it's possible to manually call <https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedsignaturesforaddress2> to get all the signatures linked to a program account. Then call <https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedtransaction> to get the transaction info for that signature
Thanks!
yep!
Ok so I believe its safe to say `Account balances can only be decreased by the owner program`
~~So for this bullet: `An account not assigned to the program cannot have its balance decrease.` should actually say ``An account not assigned to the SYSTEM program cannot have its balance decrease.`~~
Thanks!
Aha I see, its all right here too https://docs.solana.com/developing/programming-model/runtime#policy
Yes.  The system program always honours the request of the private key holder for an account, but other programs are free to behave differently
I see, so if I am understanding, account funds can only be managed by the owner program, yes? So even if I hold the private keys to the program, lamports for child accounts and only be adjusted through a program run?
yes, the program that owns the account could do this if it wanted to.
Is it possible to make sure lamports are never withdrawn from a rent exempted account?


///////////////////////////////////////////////////////////////////////////////////////////////

Is there a limit on transaction execution time?
I'm interested in dialoguing with experienced devs.
The project we're building necessitates Solana usage. I'm relatively new to the ecosystem, but thus far love both the technology and the community.
Hi all. I'm overseeing a security offering in the US (EST).
works like a charm now, thanks.
Can you try https://api.mainnet-beta.solana.com/ ?
devnet works fine from that machine.
https://mainnet-beta.solana.com operation timed out
Anything going on right now?
I'm getting a timeout on mainnet-beta
Not sure whether this belongs in Serum or Solana so I'll re-post my message from Solana's discord here:

I have a request for an example/tutorial: I use Svelte (not React) and currently the docs/examples make it difficult to figure out the following "basic" procedure:

I'd like a simple example on a vanilla js (or Svelte which is close to vanilla with reactivity and state management built in) oyster swap (or Serum swap) UI that lets you:

1. Log in to a wallet (either on Sollet or with client-side wallet generation i.e. new Account(...) )
2. Make an AMM swap order
3. Manage liquidity
4. View balances

This would go a long way for developers like myself who are considering building with Solana but are missing decent examples/references that aren't made specifically for React/Redux.
<@!354311113330130944> One thing I notice in your dump is that the only external calls are for messaging.  I see references for spl_token in there and would expect to see an invoke call associated with the call to invoke to spl_token.
Hi! Does anyone has created a postman collection with the JSON RPC request?
<@!354311113330130944> `--dump` is probably not going to help you with an invalid argument error.  Have you determined what call is returning `InvalidArgument`?
I am looking for a way to deterministically generate program accounts for users I found that there is method `CreateAccountWithSeedParams` but you still need to pass `newAccountPubkey` i assume that i should generate this using `findProgramAddress`. But why i should pass seed again in Creation of account ?
Adding token name, decimals, etc to be shown on the explorer?
<@!585868308419444749> any way this could be done?
How to add token ticker?
the dump
Hey <@!453347985628200960> I was referred to ask you for advice about BPF  debugging on this channel. Continuing my message, I also have a `build-bpf  --dump` output  which I will be posting below. The noteworthy detail is that the dump doesn't contain any of `wormhole` bridge symbols, and only mentions the correct name for the `*.so`. It does however have `spl_token` symbols, and at the moment I'm trying to find out why that is.
I'm getting "Invalid program argument" before calling my Solana program which appears after just moving to use cargo build-bpf, without alterning the actual accounts involved intentionally. What are my options for debugging?
thankee ser
Hello, can someone help me please set up a multisig wallet? Any guides I can follow? Thanks !
You can use the public node ```solana slot --url https://api.mainnet-beta.solana.com```
Is there a Infura-like service for Solana? I wanna just explore the Solana ecosystem without running my own node
Hello everyone, what do you reckon is the best way for a mapping ?
1. Pass a user wallet account to my program and rely on it to build a derived account or
2. Have the FE create a derived pubkey from the wallet (`createWithSeed`) and then create an account from this pubKey (`createAccountWithSeed`) and pass the derived account to my program ?
Afaik I read Smith | MCF picked option 2 in his tutorial, but I am curious of the benefit of making an extra call in the FE to create the account from the public key ?

And in the case of 2. How do you get the derived Account ? I can fetch AccountInfo, but not an Account when the tx has been finalised. The context is that I think I need to pass the derived account to my program to populate it with values (e.g shares, collateral). Or maybe I am wrong and the program should derive the pubkey itself and write its data field ?
Hm, I just tried an airdrop on devnet and it worked, are you still seeing this issue?
Perhaps the call to `invoke_signed` isn't passing in the right seeds used to generate the program address?  You can check out a full example at https://github.com/solana-labs/solana-program-library/blob/7d4e51399a5af694f0e450a34a2bd6bcef68d814/examples/rust/cross-program-invocation/src/processor.rs#L36 and https://github.com/solana-labs/solana-program-library/blob/7d4e51399a5af694f0e450a34a2bd6bcef68d814/examples/rust/cross-program-invocation/tests/functional.rs#L18
if you're using devnet, you can airdrop yourself some SOL to do your work: https://docs.solana.com/cli/usage#airdrop-sollamports
What's the best way to disassemble the BPF programs on Linux? I'm looking for something more advanced than `cargo build-bpf --dump`
```
spl-token create-token
Creating token 4rNJWq8S2H7bEvcgGXppM5bxdyWA9vd38PHWdgJvhzPH
Fee payer, 7R8e... , has insufficient balance: 0.0014716 required, 0 available
```
Hi, for create token in dev.net cluster. Is it 0.0014716 gas or sol? and can i create free test token ?
Hi, I just switch to devnet since testnet is unavailable, but I can't get block hash
```failed to get recent blockhash: TypeError: Failed to fetch```
so i think i found the issue with my transfer. the authority im setting as the authority of the transfer is a program derived address, but for some reason im unable to use that program derived address as a signer for the cpi transfer call
fixed, thanks
https://devnet.solana.com/

cert expired for this website
Just restart your terminal and the tools will be available
❤️
yes
Right... so ~/.profile then?
im kinda slow, sorry hehe
oh wow I got it
Is that line already in your ~/.profile?
`PATH="/Users/user/.local/share/solana/install/active_release/bin:$PATH"` is the command. It is below the message. The message is the _it_ the documents refer to
You need to read one more word.  The key. _it_
theres no command below
Because it says if I get the **update your PATH**, to run the recommended command below
zsh: no such file or directory: /Users/user/.zprofile
Is that line already in ~/.profile and/or ~/.zprofile?
and dont know what command to use
Thats what I got after running the code
Please update your PATH environment variable to include the solana programs:
    PATH="/Users/user/.local/share/solana/install/active_release/bin:$PATH"
I just dont get what command to use
theres no error message
Please paste the actual error message
<@!585868308419444749>
Whats the recommended command if I get that message?

yep
Does  export RUST_LOG=solana_rbpf=trace work with the  solana-test-validator?
Will do thanks
Follow the instructions here https://docs.solana.com/cli/install-solana-cli-tools
This is all I've done, sorry

ohh, sorry..
Forgive my confusion...
All I ran was Rust and the $ cargo install spl-token-cli line
No, solana
the cargo?
What method did you use to install?
zsh: no such file or directory: /Users/user/.zprofile
Ok.  Do you have a ~/.zprofile ?
source "$HOME/.cargo/env"
Only 26 bytes... How about `cat ~/.profile` ?
That should be readable
-rw-r--r--  1 user  staff  26 Apr  5 15:19 /Users/user/.profile
`ls -l ~/.profile`
Now we're on to something
says permission denied hmmm
are there solana paths add to PATH in your `~/.profile` ?
Yeah that was clearly installed with cargo
spl-token-cli 2.0.10
SPL-Token Command-line Utility
this what i got: /Users/user/.cargo/bin/spl-token
heres my approve tx: https://explorer.solana.com/tx/556ZtqJbgo5LAtMSw41gG3fn5kHJn2u2DGgZ4MAkC78875ijZ42cG4zSqP4CXAvQn26Zfj1Ve4JEDhXomziwwemd?cluster=devnet

heres the failing transfer tx: https://explorer.solana.com/tx/2WqW6Ggsq4JY4Rv1xhcT4yhFQgs8mRH3wqbStzuGDPbg5TD2SY4UsgycfooY6DhhYKcqdW6PFjHrr8Bhap9TcniS?cluster=devnet
What's the output of `which spl-token` ?
nope i didnt
Did you install `spl-token-cli` with `cargo` at some point in the past?
zsh: command not found: solana
But no `solana` ?
yea spl-token command works
No, but they should be in the same path.  So I'd be surprised if you have it and not `solana`
wait could spl-token be used instead of solana command?
zsh. <@!585868308419444749>
thanks
i think that did it
confirmOptions should be `options`
oh i see where
What shell are you using?
I've also tried `confirmOptions`
hrm.... am i doing this wrong? i feel like im doing it correctly

```
await bridge.rpc.relayTokens(relayAmount, {
      ConfirmOptions: {
        skipPreflight: true,
      },
      accounts: {
        vault: swapPairAccount.vault,
        recipient: god,
        beneficiary: provider.wallet.publicKey,
        // beneficiary: registrar.publicKey,
        registrar: registrar.publicKey,
        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,
      }
    });
```
Yes lool
You're "the person", I assume?
Tried it 100 times, still no good lol. Running mac
thats what i thought
ok
Thanks!
It's us, not you.   Testnet is still restarting
Hi, my Sollet.io tx failed on testnet and I notice the testnet channel said there's some upgrade issue but seem to fixed. I wonder the issue is on my side or the testnet is still unusable
You can skip the preflight commitment by passing in `{ ..., options: { skipPreflight: true } }` to the RPC method call, where `options` is a `options` type from web3.js https://solana-labs.github.io/solana-web3.js/modules.html#confirmoptions
Where do I look to get a better understanding of compute unit costing? I'm finding that account state pack/unpack consumes approx 6000 compute units each. I'm also finding some of my vector append operations that are taking 3100 compute units. I'm assuming vector length is in the calculation somewhere? Thanks.
Yes.  But the installer should have done that.  They can probably just start a new terminal
add to the path variable?
what should be done?
message
after installing the cli and the person gets this messae
<@!585868308419444749> `-bash: solana: command not found`
thanks
It's `skipPreflight: true` on the SendTransaction method: https://docs.solana.com/developing/clients/jsonrpc-api#sendtransaction
hmm ok ill check those out
> You can at the RPC level.
how would i do that?
Anchor doesn't have a way to override the preflight check I guess?  You can at the RPC level.
It seems like you're likely failing in this check: https://github.com/solana-labs/solana-program-library/blob/3ab19ba5141c7d79ec214e91b160f74516210f3a/token/program/src/processor.rs#L199
(or worse https://github.com/solana-labs/solana-program-library/blob/3ab19ba5141c7d79ec214e91b160f74516210f3a/token/program/src/processor.rs#L218 if the delegate account wasn't passed in right)
im running this through tests in achor so the tx doesn't end up getting broadcasted it aborts due to simulation failure
can you share a link to the transaction that failed as well?
sent 99.8m tokens and the remainder is in my account thanks again! <@!585868308419444749>
it worked
ok thanks
Yes. I told you as much and you replied "ok"
so all i have to do is fund the account?
it didnt send because of the error
I thought you already did... https://discord.com/channels/428295358100013066/517163444747894795/828804265752395776
weird
but the account doesnt exist
do i just fund the account

yes
not sure what im doing wrong. Im attempting to do a `transfer` from a program that i have approved spending for.

https://explorer.solana.com/tx/2AA8PM9JJShBoLUSVufG8TaYyAPhiB3AgAebjb7yiP4HA2eC5MX7gdSxRoKh6xhrD3yDer4MX2ZgZsRMLu8WoZ8C?cluster=devnet is the tx where i do the approval but i still get an error

```
   Program log: from: ABgdRF6XSei9nuGLL4MMxnua2eoikZvBrKpW3REddm8C, to: GFwNDWqdPa5oZdmfaR3zhXLiPd5dHXU8gnV9tsPhGR3t, authority: 9UJ1AYv6rko5xu4Z7DnA5hLaNZFxDu9BxqKp1LULivqC, registrar: DLYxvBuhwHNNFZrseQMN8rDw39bqWpi1zao7yJ2zeiku
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [2]
    Program log: Instruction: Transfer
    Program log: Error: owner does not match
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 2997 of 124536 compute units
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA failed: custom program error: 0x4
    Program 9YbLCkrnxCv1M1L1eJjdj9DkQhesFbkipGCVL44wFpos consumed 78461 of 200000 compute units
    Program 9YbLCkrnxCv1M1L1eJjdj9DkQhesFbkipGCVL44wFpos failed: custom program error: 0x4
```

i've logged the from, to, and authority parameters i have
Was there an error?
its still in the account
because the tokens didnt send
what do i do once its created
ok do i just send it again to that address?
Assuming you passed that flag, you just created it for them
ok so what does the other person have to do in order to get the tokens? create an spl token wallet?
The only thing that's local is the wallet keypair.  Everything else is on chain
If a program-derived address is the owner for the source token, you'll need to use `invoke_sign` to signal to the runtime that the program is "signing".   A token transfer instruction expects the source token to authorize the transfer
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs#L260
these are mainnet tokens right
so its local?
They need an _account_ it can be controlled by the same wallet
so they need a spl toke wallet? <@!585868308419444749>
ok
And with the token account, you don't need to use invoke_sign function to use the spl_token transfer instructions?
Do as it says, the destination account is a SOL account, so in needs to create the associated _your  token_ SPL Token account

Thanks!
you are a legend
it worked! thanks again man
I think the command that _was_ failing will work now
yup its updated
Make sure `spl-token --version` is v2.0.10 now
<@!740096814631485520> - sorta.  I'll assume you want a program-derived address to be the owner of the source account (since you're asking about seeds).   The sender of the transaction derives the address using the seeds and passes the program-derived address into the program as a normal account argument.  The program then uses the same seeds to re-derive the address, to confirm it's correct, and then can use `invoke_signer` with it.   The associated-token-account program is a pretty simple program to walk through to get a better feel for how this works.   One place to start is here: https://github.com/solana-labs/solana-program-library/blob/3ab19ba5141c7d79ec214e91b160f74516210f3a/associated-token-account/program/src/lib.rs#L73-L74
and paste that
do i just check the block explorer for the mint authority
update done
also how do i find the right account that can be parsed to paste into the memo to transfer from
its working
Try `solana-install update`

What does `solana --version` say?
do i have to install spl token cli again ? <@!585868308419444749>
Hope that it is clear 😅
whats the command to update my spl-token cli
I may be mistaking about who the owner of the source account is. It is the mintAuthority of the token account and also the owner of the source account that send the token to another account.
ah ok
The owner of the source account is the program itself?   If it's a regular user that's signing the transaction, then they could just add the memo no?
We derive the ATA
oh,  yes.  duh
It's _from_ a mint, no?
ah, what's supposed to happen if you transfer to a mint?   It transfers to your ATA for that mint?
I think you need `spl-token` v2.0.10 to use that syntax
`FV1jhEkxC...` is a token mint account, not a token holding account.   The mint defines the properties of a given kind of token, but doesn't actually hold tokens itself
Thanks! So I can do a transaction from the owner source account to another account by using invoke_signed function and adding the seed of the owner source account? And add the memo during the transaction?
i keep getting this message when trying to transfer my tokens
```(base) titan:~ raphael$ spl-token transfer FV1jhEkxCq9HhcXhXoUuMz4p2P9LcA1qu5rtpCxE4XAe 99800000 A4TjjpgbgVKGCLpCjgFsCJfjHiKP5dSc2zFLLnzYrqWe
Account could not be parsed as token account: pubkey=FV1jhEkxCq9HhcXhXoUuMz4p2P9LcA1qu5rtpCxE4XAe
(base) titan:~ raphael$ ```
Yeah, we probably should add memo support to web3.   There's a helper for a Rust client at https://github.com/solana-labs/solana-program-library/blob/master/memo/program/src/lib.rs#L30 that shows how the memo instruction is formatted.  It's very simple.  The program id is the memo program, and the instruction data is just the UTF8 memo string.
I am trying to add a memo to an exchange between two users of a token. I was using solana/web3 for token exchange before but I didn't find any way to add a memo with this library.
if you tell me a little more about what you're trying to do, I can probably be more helpful
It depends on who is the owner of the source token.  If the owner is a user who signed the transaction (maybe they trust the program to perform some checks and then transfer on their behalf), then there's no seed at all.  The seeds are only used if the owner of the source token is the program itself, in which case the seed is used to derive the program address that owns the source token
Thanks a lot! 🙂 
For the invoke_signed function, how do you get the seed variable and which seed account do you use for the spl_token transfer?
nothing immediately comes to mine but here's a `MintTo` example that would be pretty close: https://github.com/solana-labs/solana-program-library/blob/3ab19ba5141c7d79ec214e91b160f74516210f3a/feature-proposal/program/src/processor.rs#L250
yes
Hey, are there examples of rust contract using spl_token transfer to transfer tokens between two account?
ok thanks
temporary hack until we throw this on-chain
<@456226577798135808> - https://github.com/solana-labs/token-list
<@!585868308419444749>
how do other tokens have tickers ?
thanks as always
ah ok
Until then, this. https://github.com/solana-labs/token-list
Keep an eye on https://github.com/solana-labs/solana-program-library/pull/1544
SPL Token doesn't have native metadata support yet
<@!585868308419444749> any idea how to set a ticker for the token
ok
This seems like a <#694949720644124762> issue
<@!585868308419444749> any idea what could be going on?
the address^
ARkjiXHjtKUGCreW7BEHxLFMZ8JnoB17urqrXRDTT7VH

i have balance in the address but when im using the cli and minting a token it says balance is 0
Sounds like you're taking the `&mut` twice
but in C you can pass a pointer ot a function and reuse it. later, in this case you don't seem to be able to do that if you pass a `&mut`
It's like writing code in C, except you don't have to track all of that stuff in your head any more 🙂
for now jsut want to play until I get how solana programs work
the language the. main headache is the borrow and ownership of variables, which has made me program in way that seems weird to me, I am sure Iwill pickup later on how to do this stuff better
hahah true
Which is actually more complicated than the language in many respects
Hehe. That's not even Rust.  It's just the package manager 🙃
I was going to lose a month on that... need to learn better Rust, it is more challenging than I assumed
thank you 😉
magic!
Under `dev-dependencies` though
Hrm... I'm not sure then.  Maybe try adding https://github.com/solana-labs/solana/blob/364af3a3e01e258694e16aed57838d36305aa9c3/program-test/Cargo.toml#L25 explicitly?
I have `solana-program-test = "1.6.2"`
I'm not 100% sure.  Do you have `program-test` in your `dev-dependencies` ?  The procmacros seem to get pulled from there for this crate https://github.com/solana-labs/solana-program-library/blob/3ab19ba5141c7d79ec214e91b160f74516210f3a/stake-pool/program/Cargo.toml#L30
oohhh any idea on how to set them on agian?
anchor
Looks like those are features you must have disabled in `Cargo.toml` somehow. https://github.com/tokio-rs/tokio/blob/master/tokio/Cargo.toml#L68-L73
Anyone able to guide me on why I can be getting this error on my tests?
```The #[tokio::test] macro requires rt or rt-multi-thread.```

It is more a Rust question than a Solana one, but I have been following the examples (and I am learning Rust), so just felt here would be a good place to post hte quesiton
Using what SDK?
for the SLP token approve, `authority` is the account with authority for the transaction, `delegate` is the person approving spending for, and `to` is the account this approval applies to?
The BPF toolchain doesn't support Windows ATM. You need to use WSL to build programs there
whats link.exe

whats this
But they also allow 
1. To pay on behalf of a user, which is annoying to do on Ethereum (proxy sc).
2. To update your program, which is not so simple and feels clunky on Eth even when using Zeppelin.

This is a good link https://spl.solana.com/associated-token-account
The shenanigans are mostly a consequence of storing state into accounts.
Well not really, as addresses are derived from a user wallet. I don't remember how it is supposed to be done precisely, but this was discussed some time ago in this or solana's dev thread. There is a way to fetch all token accounts owned by a user for example.
You've followed the instructions too far. That's for if you _can't (or don't want to)_ use the prebuild binaries (which you just installed)

Good to go now right?
Told me to download this?

Looks like something is busted with the docs update.  That should be `solana-install init v1.6.4`, I think
```
Transaction simulation failed: Error processing Instruction 0: invalid account data for instruction 
    Program BDKfDiVBT4VS4TBywdtvpp9CdYv3VaZ5uMMBaECykoNb invoke [1]
    Program log: {"log_type": "relay_tokens", "amount": "12", "vault_address": "DCY5GFe7YjvKy6Gp3HxKTrJ7YeevoSgCTsz9yEzo8iUE", "asset": "🦐"}
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [2]
    Program log: Instruction: Transfer
    Program log: Error: InvalidAccountData
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 2124 of 176232 compute units
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA failed: invalid account data for instruction
    Program BDKfDiVBT4VS4TBywdtvpp9CdYv3VaZ5uMMBaECykoNb consumed 200000 of 200000 compute units
    Program BDKfDiVBT4VS4TBywdtvpp9CdYv3VaZ5uMMBaECykoNb failed: invalid account data for instruction
Translating error Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: invalid account data for instruction
```

how can i figure out whats causing invalid account data for instruction?
But then I got stuck here... lol

OHHH OKAy
Correct?
cd c:\users\kevin\documents\solana-release
set PATH=%cd%/bin;%PATH%
So basically
let's say you downloaded it to the Downloads folder. Might be something like this:
`cd c:\Users\<my-user-name>\Downloads\solana-release`
just means to use `cd` to get to the directory with `solana-release` in it
sorry for being a noob
sorry, learning all of this, first time and its really fun
navigate to the directory which it was extracted to, what does that mean?
it will expand to the existing value
I get an error message by pasting it into my terminal
`%PATH%` is there to preserve what you already have
that's right
Or what goes into %PATH%
and thats it?
cd solana-release/
set PATH=%cd%/bin;%PATH%
so I just paste this into the terminal
No. `PATH` is a special variable that tells cmd.exe where to look for programs
PATH is the name of the environment variable
set Downloads=%cd%/bin;%Downloads%
so could it be
What does PATH means?
cd solana-release/
set PATH=%cd%/bin;%PATH%
having trouble with this
hello
Is the transaction fee dependent on the maximum possible compute units for the program or do all programs just have the same transactions fee?
You've got it exactly right
Former.  Reviewer can unresolve if need be
github review etiquette issue - do I resolve conversations I think are complete?  Or do I wait for the person who started the conversation to resolve it?
yea thats true
I think the footguns in ethereum are just more subtle (and there's plenty of them).
feels much more complex than ethereum
makes sense. man lot to learn for solana development


///////////////////////////////////////////////////////////////////////////////////////////////

Thanks a ton
Thanks yeah on a tiny screen until this evening.  At me with your devnet/testnet address and I’ll get to it later
Michael will be in and out this week.  Leave an address here so he can send to you next time he's here
<@!445425471027544095> wanted to follow up on this. as per suggestion we've moved to devnet for greater stability. probably looking for 10k devnet SOL for the launch. what do you need to set that up?
Thanks! It's good to hear the official word. I've rejigged my code to make it clearer (to me) and... yeah, it's working as you say. Sorry!
The response array is indexed the same as the input addresses. Feel free to post a sample, if you're seeing something confusing.
no real effect on the chainlink integration though, really just a restructuring
that's why it's not longer listed there
and now became oct network
and CDOT raised funds and decided to prioritise polkadot and near for now, but we still work with them in a less formal manner
They team within CDOT that did the Chainlink integration split off (on good terms)
https://oct.network/ I guess
I actually haven't seen their new octopus network website.
I think the question was about cdot rebranding to octopus network and there being no mention of Solana on the new site
and they removed it?
I must be misunderstanding - was the link to the chainlink integration on that website
The site works for me
https://cdot.network/ the site listed in the LINK announcements
hopefully have something by end of april
It's currently just going through an audit
which site is this <@!296346160124395520> ?
Sorry, I'm not too familiar with the current status of the project.  Maybe <@!267610913773715456> has an update next time he's around
Rust test works fine but on solana math is wrong 😆
or i am doing something wrong
Why on solana `10f64.powi(((6 as i16 - 8 as i16) as i8).into())` returns `100` instead of `0.01`
oh huh, weird if they are still working on it given that theyve deprecated the site, thanks
You might skim the chat log in <#787976833060438036>
oh
no, Chainlink is the same as LINK
ah cool, seems like it might have price feeds at least
There are too many
Sorry I can't keep track of all of these projects
Is chainlink the same thing as Cdot?
yeah, read the rest of the comment you replied to
Mango's documentation has a bit on their use of oracles: https://docs.mango.markets/development-resources/mango-client-api Might be some use to you.
I have no idea if it meets your criteria though
It's a thing I've read about
chainlink
If I call the RPC method `getMultipleAccounts` with 3 public keys, and get 3 results back, how do I know which result is for which public key? They don't seem to be in the order of the parameters (unless I'm doing something wrong), and the public keys sent don't appear in the response.
are there any working oracles someone has used on SOL? I see the year old announcements for LINK but they dont list SOL feeds on their site. It seems 9 months later Cdot was given a bunch of money to do it instead but they've rebranded and there isnt even a Cdot anymore and no LINK feeds on their new brand either.
thanks !
that's a really good question actually.  you can look at how the token library works at https://github.com/solana-labs/solana-program-library/tree/master/token/js but we don't have an easy to use example just yet.  I've been working on one, but i need to wait on some other changes before merging it in
Do you have examples for using this library ?
Sorry, I'm not sure I understand the question.  You can look up the solana web3 library at https://solana-labs.github.io/solana-web3.js/ and explore your possibilities there
@plutus Sorry, wrong nick, <@!539801435571748868> sure 😅
I'm not familiar with how anchor is passing numbers unfortunately -- is it not compatible with BN?
Also you may want to tag me <@!539801435571748868> instead of the other person 😆
I see so can we say that from JS to the program (via anchor instructions) we can only send maximum 53bits, while in the other way, from program to JS (inside the accounts data) we can have 128 bits and display it in JS?
<@!413015915014258699> Alright, that makes sense
I may be misunderstanding, but I'm not sure if you'll want to include it in `default` since that controls your package's features, and instead just be sure that you always enable `no-entrypoint` on your dependencies individually.  Here's an example: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/program/Cargo.toml#L19
<@!539801435571748868> Can you suggest some example repositories for JavaScript Api ?
BN can support any number of bits -- we use it to represent the pubkey as a 256-bit integer for example.  You can pass that as a 128-bit uint if you like.  It's the JS `number` that only handles 53 bits
<@!413015915014258699> Alright,  so putting the stuff that  turns our dependencies'  `no-entrypoint` s on into `default` is what I likely need right?
typically nowadays we go the opposite way, where a program specifies the `no-entrypoint` feature in order to be re-used by other programs.  the program's entrypoint is always included then, and turned off using that feature.  here's an example: https://github.com/solana-labs/solana-program-library/blob/34583bf7484d76b5de91ada994b030dd16748b11/token-lending/program/src/entrypoint.rs#L3
<@539801435571748868> Hi Jon, well I am trying to pass to the rust program decimals numbers via anchor. The problem now is that the rpc instructions in anchor only support BN as far I can see.  And BN can only handle 53 bits, while in rust we can handle up to 128 bits, so if we have many zeros (for example for accrued interest) we can't display it properly
Exactly what I was hoping for, thanks!
Great, then you can build something similar to the spl-token client or any of the CLIs that use solana -- here's a template you can use: https://github.com/mvines/solana-cli-template
I'll take over since Jack is probably asleep 🙂 that's exactly right, you'll need to use a program address and create the account using `invoke_signed` and then perform whatever logic you need
We already have a TS client
Right, but we have specific instructions for our program. Basically I want to build a CLI for our program
If you're using solana-test-validator, you can just use the normal CLI tools and point them at your validator, using `solana config set --url http://localhost:8899`
That seems like a reasonable model.  You can also specify a certain number of decimals and do everything in terms of fixed-point numbers.  What are you trying to do exactly?
You've got it right, here's an example PR of someone adding a token: https://github.com/solana-labs/token-list/pull/25/files
Check out https://docs.solana.com/running-validator/validator-start#linux to update the open file descriptor limit
<@!453347985628200960> Alright, I got an okay-looking dump. the root cause was that we're not called with `program` enabled. Is there a new feature name that bpf-sdk uses to treat the crate as a program and not a client-side lib with no entrypoint?
Sorry to bother you again, but how can I clone the memo account in the invoke function if I only have the public key and the account doesn't have a private key. Do I need to use invoke_signed and just pass the seed?
While this looks good for other reasons, I'm looking for a shell Client (in Rust) to interact with our program running in solana-test
something like this? https://project-serum.github.io/anchor/getting-started/introduction.html
Is there a CLI client shell/template that leverages solana-test-validator we can use?
ohhh, because perhaps we don't have `program` enabled on us
For example, if program A calls program B, program B's account must be included in Program A's instruction
I see, i will try it 🙂
Ah, it must be passed as one of the accounts to the invoking program's `process_instruction` function.  You do that by including it in the invoker's instruction.
But how can I get the memo account with create_program_address function? It returns a public key and not an account?
Check out: https://docs.solana.com/developing/programming-model/calling-between-programs
That's correct, the invoking program must have been granted access to the program it is invoking.  That means that the program being invoked is passed as one of the invoking program's instruction arguments
I am using the 1.5.11. To pass the memo program in the invoke function, I need to get the memo program account?
<@!740096814631485520> Do you know what version of Solana you are attempting to run the memo program?  We are working on removing the pain point of having to pass the program as part of the arguments to `invoke`
Didn't think about it 😅
Are you also passing the memo program?
thanks! 
I will look at it but other than the fee payer, there is no one else that need to be passed
Usually the error you are seeing is because you are invoking an instruction that requires an account that you are not passing with the `invoke` call
<@!740096814631485520> Check out this example: https://github.com/solana-labs/solana-program-library/tree/master/examples/rust/cross-program-invocation
And remove `program = ["spl-token/no-entrypoint"]`
Try this in the Cargo.toml instead: `spl-token = { version = "3.1", path = "../../token/program", features = [ "no-entrypoint" ] }`
Thanks for the reply 😀  
I tried it but I get the following error while doing a unsigned memo: "An account required by the instruction is missing"
Do you have an example of invoke?
<@!354311113330130944> I'm following your line of thinking.  that `no-entrypoint` feature should disable spl-token's entrypoint, though I do see that symbol in the dump
<@!453347985628200960> can i help me to understand ?
<@!740096814631485520> Yes, you can invoke the memo program via `invoke` or `invoke_signed`
Hey everyone, just wanted to ask how do you invoke the build_memo instruction in a transaction? Can I use solana_program invoke?
Right now I'm  trying out the `--manifest-path` flag
and it looks about the same
Re: do.sh yes, for that reason I installed bpf-sdk separately on my machine and obtain the dump manually
<@!451393777861525514>  I just want something that will confirm something like "we have two entrypoints and are taking the first one"
It looks like wormhole has a custom build setup that is currently using do.sh, I think the upgrades that have been made to convert to build-bpf aren't working as intended.  What are you hoping the IR inspection will do?
or a stage earlier?
Do you know of any interesting Cargo incantations to get something like LLVM IR?
yeah,  I mean the feature line in `Cargo.toml` is precisely what should remedy that
That  doesn't quite explain why the spl-token is being deployed as the bridge program but maybe there are old artifacts laying around?
In the modified do.sh it looks like it was calling `"$sdkDir"/rust/build.sh "$projectDir"` which is building a program that is not cwd, this was replaced with a call to `cargo build-bpf`, you might be able to replace that with `cargo build-bpf --manifest-path="$projectDir"/Cargo.toml`
Yeah, Let me double-check the call that's causing this
Looks like the program that is being deployed as the bridge (which I think is the intended entrypoint) is actually the spl-token program and the instruction sent is being misinterpreted as an `InitializeMint` instruction and thus failing because it is actually an instruction intended for the bridge program.
Let me know if I can help narrow our focus down in any way, it's a sizeable repo
setup is the RPC caller that initializes our program that's baked in with the Solana node (peep the `*.patch` file: https://github.com/drozdziak1/wormhole/blob/bpf-sdk-update/third_party/solana/Add_crypto_syscalls.patch)
It's Complicated™. Just  pulled 1.6.4, but 1.5.5 which coincides with solana-program version in the bpf program behaves  roughly the same. Will verify. Meanwhile, logs! Click `solana-devnet` in the UI to the right if it's not already selected https://cloud.tilt.dev/snapshot/Acyu64YMB4w2rsqPrwk=
What version of the solana tools are you using?
<@453347985628200960>, of course, give me a sec
BTW sorry for the keyhole view, we're open-source and this  is the branch where I'm poking at this https://github.com/drozdziak1/wormhole/tree/bpf-sdk-update. Do ask me if it's quicker than digging through our codebase
I see, so you are running a local node, do you have logs?
In which sense? We do have control over the RPC-serving node, it's just sitting in a different container
Are you executing locally?
but that's hearsay, I'm looking for a way to learn about what's precisely happening
<@453347985628200960> Yes! It  claims I'm calling  InitializeMint. I wouldn't be surprised if it's instruction number coincides with the intended instruction in our own program 😛
<@!354311113330130944> I don't see anything out of the ordinary it the Cargo.toml file.  Do you have an idea what call is throwing `InvalidArgument`?
Hi there, I was just wondering what is the best way to handle numbers with fractional precision (like price) with anchor and rust. For example pass in some price to the instructions from JS, do some math in rust and store the results in an account. We were considering using little endian, convert from bytes to do math operations and store it back bytes in account data. Any suggestions?

Going into the crate does not really change anythingj. I'll also try isolating the crate. In a different vein, I'll post the `Cargo.toml` in a moment, notice the features section - it seems to do the right thing but is also  the only "unusual" mention of `spl-token`.
`--manifest-path=<path to Cargo.toml>` should also work
Have you tried cd-ing into the same directory as the `cargo.toml` you want to build and issuing `cargo build-bpf`?
<@!453347985628200960> Thanks for reaching back to me. You're right,  if the top-level argument is invalid the dump won't help. But  my specific case is just moving on from the `build.sh` to `cargo build-bpf` with no changes in the passed arguments whatsoever, which brings the question of whether we're calling into the right program. The filename makes sense - it's `spl_bridge.so` which corresponds with the crate.. However, this crate is part of a cargo workspace, and somehow is automagically picked up from its root. I'm trying to see if `--workspace` or cd-ing into the crate changes anything
<@!539801435571748868>
I created token in terminal, do i need PL to https://github.com/solana-labs/token-list with name, icon ... ?  what else after this ?
Not sure if this is the right place to ask but I was wondering what is passed to the ``ProgramAccountChangeCallback`` in ``connection.onProgramAccountChange`` in the ``solana-web3.js`` library
What's the API Rate limit for the Solana API?
following the instructions here ... https://github.com/solana-labs/solana
[2021-04-06T06:21:56.870023700Z ERROR solana_ledger::blockstore] Unable to increase the maximum open file descriptor limit to 500000
thread 'main' panicked at 'Failed to open ledger database: UnableToSetOpenFileDescriptorLimit', core/src/validator.rs:1069:6
Hi All.  I'm getting this error when trying to spin up a Solana node for dev.
yep use <#796351569921703946>
can i get the developer role?
Appreciate the help trent
I see what your saying, time to go waste my time with them I'm sure
i have noticed
solana beach is behind at times by a confirmation or two
Seems like the exchange didn't create the transaction properly
So it did nothing. Exactly as was specified in the transaction
No.  I'm saying the transaction specified that the amount to transfer is `0 COPE`
Theres no cope in my exchange and none in my sollet wallet...
Exactly it should be 1
The transfer amount was `0 COPE`
Since it says completed and whatnot
That token never made it to my wallet. Exchange claims tx is fine
https://explorer.solana.com/tx/b2K9fzEWGUP1iTTudqEz2JN8DcA6NPsfj4zKRCBZqPtQd8naaK1M8bemLfwc7CTACzkw1EHrX356PRG59YgYLfS
Gladly 1 second
Link or it didn't happen <:trollface:552227154390286376>
RPC infrastructure keeping different history depths, most likely
Why for the same address, explorer.solana shows 30+ transactions whereas solana beach shows 6 transactions? https://explorer.solana.com/address/FmKdFSEAiW5U3dJ922YMjjs9mQB3jqLbvW9hzv8uZ4uV https://solanabeach.io/address/FmKdFSEAiW5U3dJ922YMjjs9mQB3jqLbvW9hzv8uZ4uV/
Quick question about a transaction, it was a test transaction for a small amount thankfully. But it shows completed in explorer, coin never showed up in my wallet it's been 24hrs.
thank you
Hmm I'll take a look. I think this is what's causing the problem
The github workflow config for SPL is here. https://github.com/solana-labs/solana-program-library/blob/master/.github/workflows/pull-request.yml
Is there an example or walk-through on how to set up automated tests for a program using Github actions, or any other test runner?
I was wondering, if I wanted to air drop an SPL token to every wallet that had 1 sol or greater, is that possible?
^
It's very much a seller's market at this point.  Most folks that are willing and able to develop on Solana full time are working on their own projects or quickly swept up by another
maybe here is the best place
wait, i see that it is archived
Great, thanks so much.
you might want to to try <#762879542263545876>
We've all been there re the name
I realize my name is a bit unprofessional. Nonetheless, the project is legit, and I'm happy to elaborate in another thread.
Does anyone have input on my question, re: finding Solana devs?
Your best bet is to write a small test program that does the allocation and logs the units consumed before and after using `solana_program::log::sol_log_compute_units`
Can I find out how many compute units it takes to create a Vec<u8> and to extend? It seems like the cost is related to number of bytes. Thanks.


///////////////////////////////////////////////////////////////////////////////////////////////

I have to cancel as many serum dex orders as possible in a call, and I don't want to attempt more invokes than necessary. Each cancel is variable length because of some technical details
Not currently, unfortunately, but it could eventually be a syscall.  What's your usecase for it?
Hi, did anyone every study cross chain calls ? Solana has wormhole which allow to transfer tokens from one chain to another. Using the same architecture, I deduct it would be possible to make cross chain calls (call a function of a solana program from a ethereum smart contract). Is there anything existing ?
So here is the repro: https://github.com/Standaa/test/
If you want to run it, you'll have to copy paste the programId issued by anchor deploy into App.tsx.
Upon making the repro I realised I had made a global.d.ts file and `declare module "@project-serum/sol-wallet-adapter";`. Might cause the typeErr I am seing (haven't juggled with Ts definitions in a while).
The latest web3 should have fixed those past issues
Yeah we should just get that updated
Hi starry, I am thinking about this long exchange: https://discord.com/channels/428295358100013066/517163444747894795/805692450962145302
I am working on a repro. I'll have it ready soon.
I assume there is no alternative to sol-wallet-adapter, which is running a completely out of date version of web3 ?
Can you link to the issue monolist was hitting? Also can you please outline the repro steps or share a link to some code with this error?
is there any library or example of doing zk-snark or starks in Solalan?
Is there a way to get the current Solana compute consumption? I know there's `sol_log_compute_units()` But I want access to the number, don't want to log it
HI , i saw there's a "NIG finance" that says it is based on Solana Ecosystem . Is that a legit project? Can any admin answer that
Hi <@!466984915376799748>, <@!585868308419444749> I am facing a similar problem to Monolist with `nacl.sign` using the 1.2.0 version of web3.js present in Anchor.
My Ts code crashes at: 
```
nacl.sign = function(msg, secretKey) {
  checkArrayTypes(msg, secretKey);  <======== THIS LINE
```
With the following error:  `TypeError: unexpected type, use Uint8Array`
I wonder if this is supposed to be fixed in 1.2.0 ? What is the root of the problem precisely ?
what is this, a converter or an upcoming support for solidity on solana?
that's being actively worked on, you can check <#778656605453156376> for more info
We don't seem to have enough documentation about it, but you'll want to use `solana-test-validator` for that
Hi all, I want to port my ERC20 dapp written in Solidity to solana chain. I saw that Rust is the language of contracts in solana. I have no prior experience with rust, is there any reliable tool which can convert the solidity code into rust? Or if there's any other work around, please let me know. tia...
I've got ```
"export" is not internal or external
command, executable program, or batch file.
```  when i wrote ```
export RUST_LOG=solana_runtime::native_loader=trace,solana_runtime::system_instruction_processor=trace,solana_runtime::bank=debug,solana_bpf_loader=debug,solana_rbpf=debug
```
I thought same, but It’s tutorial on Linux, I tried on Windows
https://www.youtube.com/watch?v=vu05JSdvwmo&t=10s
i was checking this video but i think it's outdated?
is there any recent docs on this?
i'm trying to set up local node in docker for development test and environment to develop
great! tyvm
I pinged internally, give the team a few more days. We've received the form, believe they usually batch it and submit it all together.
hey <@!267610913773715456> any eta on adding our project (Soleon)  on https://solana.com/ecosystem ? we've submitted the form about 4 days ago, got told to tag you
Non-_checked are technically deprecated, but I don't think we've actually marked them as such yet
thanks
makes sense
_checked can be parsed for visual inspection in offline signing situations and are easier to pick out of a block due to extra data that they carry and verify
whats the difference between the various spl token functions and their `_checked` versions?
So solanabeach.io got an update, but why is https://tds.solanabeach.io/ still showing the old UI?
Adjusted as necessary.  If you get 429, back off
Anybody?
Sent!  cc/ <@!445425471027544095> 
 https://explorer.solana.com/tx/2R7FeZ9n8D7WZCPdU6sALM2c7hfopus8YLjgJASSDsPYFsq8Xrf13GTw9TSj8B39x9hS7ik5C9JDcgcHTDnDkmKg?cluster=devnet
Good point!  I didn't want to rock that boat, but what's privileged access if you don't use it 🙂
<@585868308419444749> - you could always just ssh into da and steal from the faucet, that’s all I was going to do this evening
I think I finally found all of the places CI was blowing away the local keypair
I'll take like a mill to JCgK8ZHPF2WBW7jSE75AMwVyavo3ds9f67YZPZd8LoSe while you're at it 😉
SG. can send to 6kViB3jWrTmmRHRyVwd15CSUB5gq7AyeGTvdvDMeMLcY on devnet


///////////////////////////////////////////////////////////////////////////////////////////////

Not sure why spl-token balance can't find the account I just created (88UPYWq3pUt8wtHpfzh9h8wEPPKEje8YNfwxv2u6LaGZ). Tried on devnet & local solana-test-validator...

My guess was maybe not having fees paid, but even if I airdrop into the account, there's nothing?
When I make a new account, I can't seem to find it?
$ spl-token create-token
$ T=HgbtXNrH4j7awk41dg72LF97BWnJcZCf1BpwTeQtJk2B
$  spl-token create-account $T
$ A=88UPYWq3pUt8wtHpfzh9h8wEPPKEje8YNfwxv2u6LaGZ

$ spl-token balance $A
Could not find token account AwwdgVNpBTTaEm6ZEXFFUgjkKQmevAz9HMAnmA8wRoSg

$echo $A
88UPYWq3pUt8wtHpfzh9h8wEPPKEje8YNfwxv2u6LaGZ
Hey folks - trying to create a token following the guide: https://spl.solana.com/token#configuration
Thanks!
Yes, should be: `spl-token create-token ~/path/to/vanity/keypair.json --owner usb://ledger?key=<derivation> <other_options>`
I talked too soon. It does seem to fail, but now it just takes longer to fail 😭
I assume the same will work for creating a new token with a vanity address key pair specified
Awesome thanks 🙏
The test runs a validator in its own threads, when a test fails it may take a bit for the test infrastructure to realize that and close everything down
Yes, you can use our cli hardware wallet syntax to use a ledger for any signer in `spl-token`: https://docs.solana.com/wallet-guide/hardware-wallets
eg: `spl-token create-account EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v --owner usb://ledger?key=0`
This would create a USDC token account owned by the key at `m/44'/501'/0'`
ok didn't have solana cli tools installed
Now I just have the weir behaviour that the test does not finish, it just hangs for a bunch of time
Thank you <@!453347985628200960> that makes more sense why it suggested the `test-bpf` (still lots to learn about Rust and Solana.
i'm running ubuntu in wsl
`$ solana-test-validator
solana-test-validator: command not found`
so i'm trying to run `solana-test-validator --log` from hello world example and it throws an error
Is it possible to use spl-token cli with a ledger? or how best can you create tokens that are owned by a hardware wallet
<@!364408554406281218> program-test does not currently support account creation/realloc when testing the program built nativly (x86).  Running the test built as a bpf program should work, try `cargo test-bpf`.  If that works you might have to featurize that test with `#[cfg(feature = \"test-bpf\")]`
Yeah, allocated up front during account creation, after that you are feel to use that 1MB anyway you like 🙂
we are storing a serialized HashMap in it
So our usage will be between 512 and 1MB at any given time (going up and down based on state information for the account)
Not grow beyond the 1MB but utilize increasing amount within the 1MB
The account data will be allocated during `SystemProgram::CreateAccount`.  How were you planning to grow the account?
If I set a new account to require up to 1 MB storage (actually it will grow from 512 bytes to 1MB) for rent-free, does the system pre-allocate the 1MB as part of the account creation or do I need to set it up prior to using?
Why do account data gets resized?

I have been following PaulX (https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/) blog post, and made half of it. Decided to make a test after using the `solana-program-test`, and now get the error that `resiszing is not supported` by the program test.

I am wondering why does the account get resized? 
my test: https://github.com/daragao/solana-escrow/blob/master/tests/escrow.rs

Any help would be amazing 😄 thank you
thank you <@!585868308419444749>, its much appreciated
<@456226577798135808> <@!308860562916507649> checking with BD on how to proceed.  I'll get back to you
What might I be doing that leads me to this?

```thread 'solana-bank-forks-client' panicked at 'Account data resizing not supported yet: 165 -> 0. Consider making this test conditional on `#[cfg(feature = "test-bpf")]`', /home/doart3/.cargo/registry/src/github.com-1ecc6299db9ec823/solana-program-test-1.6.4/src/lib.rs:316:25
```

i am running some tests using the program tet solana
<@!466984915376799748> I am using https://testnet.solana.com in both frontend and backend.
I am using the Rust `solana_program_test` crate there is a nice function to `add_account` without sending an actual instruction.

Is there a way to create a token, and initialize a token account without actually sending an instruction? Or do I need to send an instruction as normal?
Yes, if you send a transaction to an rpc node that is running behind, it won't know about that blockhash yet even if the cluster has already confirmed the block. Which RPC endpoint have you been using?
<@!195044797134798848> I am not sure but I think my situation is the opposite. The process only take few second and the tx may fail at first then success when I resend, it looks like the blockhash I use is "too new" instead of "too old". Is this situation possible?
it sounds like the transaction's "recent blockhash" times out. you have around 2 minutes after you create the transaction to send it, so if the user takes a long time to sign it, it won't work. it is possible to work around this by using nonce accounts: <https://docs.solana.com/implemented-proposals/durable-tx-nonces> + <https://docs.solana.com/offline-signing/durable-nonce>
Thank you <@!466984915376799748>
I see that the web3 solana is a good resource to compare with the Rust crate and try to understand better, thank you
please tell me if you need more information or would like to speak with our team
how I can progress this then? is it completely blocked? I'd love to start interacting but it's a little difficult when the other party doesn't want to participate
Hi, I want to pay fee for our user, so we let user partial sign the tx in frontend then pass to backend to partial sign then send. It generally works but some time it will failed due to "blockhash not found" error. It looks like the fronend set the blockhash but when backend send the tx the backend connection consider this blockhash is not exist yet?
1) Our JS docs have a bit more context on what those params are: https://solana-labs.github.io/solana-web3.js/modules.html#createaccountwithseedparams
2) SPL Token is a deployed program, not native. Instead of everyone creating their own token contract, we have one SPL Token program currently which can be used to create new "token mints" with a specified mint authority. The authority can then freely mint new tokens. More docs here: https://spl.solana.com/token#operational-overview
solved!
`brew update
brew upgrade`

ty <@!152089247254315008>
Related ?
https://discord.com/channels/428295358100013066/517163444747894795/828394251112677386
Hey <@524532694168895489>
Also...
I think the readme has a lost step regarding docker
We don't feel comfortable publishing due to lack of content and no interaction between our teams
pls help!
I saw a message that recommends switch to WSL, but im on mac
I have installed all the suit tools (node, npm, rust, solanacli) - iOS SO
hi guys. im trying to run hello-world example, but when I run solana-test-validator, I get this message
Assuming for now I'm just testing and doing things locally, I could use my node?
is there any docs or tutorial to setup local node and environment in windows via running ubuntu inside of docker?
I see another similar newer PR get merged just now
It will be hard to sign transactions using the RPC calls on unity, unless you have a service somewhere running node that signs all the transactions for you
hi, i'm kind of a noob, but i'm working hard now to grasp how this all works. I developed a simple vr app in Unity that I want to expand to demo transacting sol in-game from one player to another. I'd like to hear from someone about what might be the best way to do this. So far, I think building for webgl I could do to use the javascript api, but there are performance concerns and the native openXR api i used to create interactions would need to be scrapped for the webxr api. Is the solution to use this "RPC PubSub WebSocket Endpoint"? Or is there an alternative I'm not aware of that would be better? Thanks
https://github.com/solana-labs/token-list/pull/43
Which PR is yours?
thank you, i appreciate your help  !
I've pinged the guy that usually takes care of it.  I'm not sure of the review process myself
no worries if not, I am just curious !
great thank you! is there anyway for it to be reviewed ahead of this?
I believe we sweep the PRs once per week or so
I've been sent from <#439194979856809985>  😄
hi guys who can I speak to get help to review and merge a PR to the token list solana repo?
Sorry for the basic question once again:

Question 1: What does the `from_pubkey` and `to_pubkey` represent in the `create_account()`  instruction creator https://github.com/solana-labs/solana/blob/6606590b8132e56dab9e60b3f7d20ba7412a736c/sdk/program/src/system_instruction.rs#L244-L270

Question 2: Is the SPL Token a native program? When someone sends a transaction to `spl_token::id()`, is that a token? Who is able to mint?
gotcha, well i'm sure they're happy to work with you if you're running into the issue a lot
Anyway not a big deal. It would be better if I could just amend serum dex to properly update state when an order is canceled
I don't yet have a proper testing framework so I have to populate the orderbook on devnet and stuff
actually, if you have that feature, you could optimize on the client side by simulating a bunch of transactions, and lowering the max_cancels until you get one that works
It's not urgent, I've just instructed users to retry with lower max_cancels if it fails due to compute
correct
gotcha, so you would keep canceling until the remaining compute limit was under some threshold?


///////////////////////////////////////////////////////////////////////////////////////////////

