You cannot emit specific events but you can subscribe to supported change "events" on log, accounts, and programs using RPC subscriptions (see rpc api docs). I'm unfamiliar with the service-level guarantees...
thank you for reply. i can't find anything related to what i'm looking for, i'm trying to figure out whether it's possible to emit events from the contracts, e.g. something particular happened, and if there's a client subbed via, websocket for example, it would be notified on such a particular event
Hi can you guys speed up the process of merging pull request, I checked there are a lot of PR from 1-2 weeks ago but no any Solana dev merge it.

This really impact to the business of projects.
once the transaction is sent to solana web3, can the sender cancel it before it is fully confirmed?
so if i generate new keypair with cli:
`solana-keygen new --outfile keypair.json


Wrote new keypair to keypair.json
=========================================================================
pubkey: GEGaBhrJRoPpr4cYgETytgH3dLvfniBZoxtZZmXYJTXL
=========================================================================
Save this seed phrase and your BIP39 passphrase to recover your new keypair:
soccer upgrade medal there forget into rib lemon huge inherit craft couch
=========================================================================`

what is the correct way to load keypair from file in this case? using seed phrase or raw array from .json file? so `https://solana-labs.github.io/solana-web3.js/classes/keypair.html#fromseed` or `https://solana-labs.github.io/solana-web3.js/classes/keypair.html#fromsecretkey` ?
Once you pay to deploy a program is that money gone with the program? Or can you take it off and get some back?
Many examples here that include reading/writing data to/from accounts from the program: https://github.com/solana-labs/solana-program-library
account that the program owns
Data in the program, or data in an account that the program owns?
The closest thing would be the JSON RPC API subscribe methods: https://docs.solana.com/developing/clients/jsonrpc-api

I'm trying to figure out the internals of the RPC callbacks myself.

Open Issue on Events: https://github.com/solana-labs/solana/issues/14076#issuecomment-860132744
if I want to hold multiple data in the program, how would I achieve it?
hello. is there a way to produce/emit events from solana contracts like for example in ethereum's Solidity?
I'd be interested to see that ;p;
hello guys
hello any body help me?
hello guys anybody can help me to create stable coin on soalan?
Hmm...you know any other method by which we can load smart contract?
I made no edits to the last time I ran it
I really cant get my head around with this.
how to retrieve and manage thousands of token accounts and accounts linked to a main User Account?
How much does it cost to upgrade a program in sol?
right on:
`SystemProgram::CreateAccountWithSeed`
not directly, but I believe it would be done using this mechanism
https://project-serum.github.io/anchor/tutorials/tutorial-3.html
appreciate the heads up!

have you gotten as far as Account lookups by custom hash? say SHA256 keys?
just going through tutorials for now
thats how I understood the response, but I haven't tried it myself yet 😅
Ok, so user executes program with fee and account is created using fee collected from user in turn securing the cost to maintain their account?
so you're only paying for some globals (probably up to 1 MB, can't think of reasons why you'd want to store more) and delegating the per-user cost to... users
not exactly an answer to your question, but based on my question (and an answer for it) - I'd assume that you do NOT store data per user in data accounts rented by you. you store them in users data accounts

question: https://discord.com/channels/428295358100013066/517163444747894795/853183454027579392
answer: https://discord.com/channels/428295358100013066/517163444747894795/853267045385764884
From what I understand, a standard HashMap is best represented as an Account per key/value pair. That essentially means 128 bytes per pair for just the keys. For 1 million keys that's roughly 128 megabytes of storage and costs 445.44 SOL annually (~15.8K USD) before accounting for values. Rent needs to be allocated for each key within each Account???

You have worked through some data structures... An example, how would you store a very large list of voters by public key and their geocoordinates on Solana?

With Solidity, a map can manage account public keys as keys having string values in a single contract and charge per transaction.
is it possible to have multiple PDAs used as signers when calling `invoke_signed` <a:aPES_Think:493353113332219924>
but I just run that and it installs a package and still do `cargo build`
I did try `softwareupdate --install-rosetta` and it does not seem to make a difference
thanks!
Thx
Yeah
who knows in 10 years time that transfer fee could be worth a lot more 🙂
0.000005 SOL
can we have a "hỗ trợ developer" channel for the vietnamese devs
I read online $10 for 1 million transactions
How much does one token transfer fee cost?
Hey, I am using Sollet to approve a transaction and it works. When I transfer SOL the message is clear "Transfer SOL",  but when transferring a different token is it possible to change the text of "Unknown instruction:" to something more user-friendly? Thanks.


///////////////////////////////////////////////////////////////////////////////////////////////

I reproduced this problem now on mainnet <@!585868308419444749> , here is the output from my log file: 
```
spl-token transfer 7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU 0.010000000 9PdcvUBGLrmA4QYq2DLsG1cQ2Y285JnpvrdCgCA1o61o --fund-recipient --allow-unfunded-recipient
HTTP status client error (429 Too Many Requests) for url (https://api.mainnet-beta.solana.com/)

spl-token transfer 7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU 0.010000000 9PdcvUBGLrmA4QYq2DLsG1cQ2Y285JnpvrdCgCA1o61o --fund-recipient --allow-unfunded-recipient
Transfer 0.01 tokens
  Sender: DyoKwjWiZv5uUWsk6HPZzW1eYQi4KgtXB5XND8uJgbN4
  Recipient: 9PdcvUBGLrmA4QYq2DLsG1cQ2Y285JnpvrdCgCA1o61o
  Recipient associated token account: AMFWnSWKEGf1LqmAwa8976XwyZr57oTjQmqvYP3okfdM
Signature: 5Ly2c6mK6UXi5rpV2aJb9GciF1ZS3rMiWi3mtsVTq5TaKDz2bUHzKWiUb27FfSKzb7bhaFowf95Ew6n3eDYBdCs8
```
Basically, `spl-token transfer` can return an error code, even if the transaction actually succeeded, you can see it here: https://explorer.solana.com/address/AMFWnSWKEGf1LqmAwa8976XwyZr57oTjQmqvYP3okfdM.
I see, maybe you can give me a timeline.
?

The max account data size is 10MB , or is allocating from within a cross-program invocation it is 10KB
hey guys, quick question, an account address, how many data can it store?
Hi, is there any way to speed up PR approval in the solana-labs/token-list branch. Here's my PR if you need it https://github.com/solana-labs/token-list/pull/306
Yes, the client script creates both a lending market and the reserves. I don't know what is causing the issue with your lending market, so the easiest thing to do is to start from a known good state
I know this is hard to verify, but I have a simple script that uses `spl-token transfer` and retries to send a transaction if it failed with a 429 error. The first time it returned `HTTP status client error (429 Too Many Requests) for url (https://api.devnet.solana.com/)`, and the second time `Signature: 4hMZsjhuawZdykx4srH3jgyGiLh2RKz7dCpx8joTSKPzfQUGigrVh2pptarBZhifof5CwQiQgtu8BywPsohoXUUL`.

But if I check the explorer (https://explorer.solana.com/address/6yGiNerjCZsexyExvwcUTTscKhaHGsftb3ssutcHA7Vb?cluster=devnet), there are 2 most recent transaction that happened only seconds apart, and I only got the signature for the last one.
<@!150787664553967616>  just realized when I do it like that it  creates a new lending market, and does not go to the old one
Yeah it works for me when I deploy the program and than run the main.rs normally.
Or what if the recipient's address is being funded with `--fund-recipient`?
Any difference between devnet and mainnet in that situation? I'm pretty sure we just had the opposite happen :/
Yes.  The proxy rejected the request and lives in front of the RPC service
When `spl-token transfer` CLI returns with a `HTTP status client error (429 Too Many Requests)` failure, is that a guarantee that the transaction failed? It has a non-0 return code.
Hey <@!584788446443208704> Hi
Are you using M1 or Intel based MAC ?
I haven't looked at the client code, but could it be coming from there? Pretty hard for me to say without seeing your whole setup. Does it work if you deploy the program and use the client without modification?
In my case, OpenSSL is the problem.
Anyone else facing trouble running test-validator on Mac M1 ?
https://tenor.com/view/mike-taylor-why-why-me-me-slide-gif-15024288
also
Im using the same payer I used for the first set of reserves
hmm strange the account that is the payer has like 50 SOL on it lol. i Is this error coming from the lending program or from the chain?
You need to make sure the account paying the fees for the transactions has enough SOL to cover the accounts that are created for the reserve
Ok so after trying this it gives me an error that the account does not have enough lamports for rent exemption, do I have to fund them somehow?
That sounds like it would work
I was trying to modify the client so that It would use my already created market and not create a new one. Should I just remove all the stuff that creates the market and than replace it with my pubkey to my already deployed one?
Yep, check out the `backport-serum-v3` branch which does this and is deployed on devnet. It uses the old client scripts to set up reserves
I’m pretty sure it’s frowned upon to just scrape information directly off solana explorer. If you look in <#763249718339567626> there is something for python on solana although im not familiar with it. You can also just use the Solana JSON RPC to get what information you are looking for
Not without breaking any pre-broadcast signatures
If I send a partially signed transaction to a server. Can the server modify the keys of an instruction before adding their signature and sending to the blockchain ?
Hello Guys! great team!... Is there a python client api for the explorer solana? i want to check a token whenever a transactions comes in and out
<@150787664553967616> on the old version is it possible to deploy a new reserve to a lending market?
bump!
Hi, I found some strange behavior of testnet. 
Context:
1. First account: https://explorer.solana.com/address/JBLgou9eHM162ftnd7BvoDdDaSygDvB1apcvA5eHyRsa?cluster=testnet
2. Second account: https://explorer.solana.com/address/HQYjxmF9sVrRQH6ywgAvw5F3zpcLsUjWRP7GQ9stSzbK?cluster=testnet
3. Transaction (transfer from 1 to 2, value = 1000 lamports): https://explorer.solana.com/tx/3M7u3RRnYFWHckyBZnjCuN7CREoHUSWpJYjyfJ8DGBA39g6h3Uumu8c9642fWsttCSbghnv4Qxr94a8iZhZZhNSb?cluster=testnet

Block explorer show 0 lamports on second account
API request also show 0 : curl https://api.testnet.solana.com -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1,"method":"getBalance","params":["HQYjxmF9sVrRQH6ywgAvw5F3zpcLsUjWRP7GQ9stSzbK",{"commitment":"finalized"}]}';

{"jsonrpc":"2.0","result":{"context":{"slot":80942162},"value":0},"id":1}

Is that a bug or I doing something wrong?
gentle bump on this^, and can we also bump the `spl-token` version over here? https://github.com/solana-labs/solana/blob/c2191d885dc9689088c0dedcb30433a51a01bf12/account-decoder/Cargo.toml#L26
and how do i connect it with frontend?
Is there an open source Solana wallet modal similar to https://github.com/Web3Modal/web3modal, or someone is building one?
Is there any update on when this PR https://github.com/solana-labs/solana-program-library/pull/1544 will become the part of the release?
i am asking about creating spl  token using rust programming language
Nope, not possible, you must pass all accounts if you'll be accessing their data or lamports
Can i save just the pubkey on the account on whose i want to move the lamports without providing it later instead read the saved data and use that pubkey?
For example you are locking some amount of lamports in the program and you address is saved in storage_account
Later I'm calling refund, your address is taken from storage_account and lamports are transfered to you?
depends what you mean by "limit" -- if you want to limit the total number of tokens, you'll need to mint all of them, then set the mint authority to `None` so that no more can be made.  you can check more at https://spl.solana.com/token
then how can we set token limit..
you can store the pubkey of the account whose lamports you want to move.  bear in mind that in order to work with it, you'll need to pass in both the account with that data, and the account with the lamports.  your program will need to validate the inputs before choosing to move the lamports
Nope, please use the program that's currently deployed
HI.. should we make any changes in SPL token program to make our own token..
yo <@513742723111714817>, mate what is the best way to save address in the struct so to be able to use `try_borrow_mut_lamports()`, I have following scenario, account can lock lamports for some time, after that time lamports can be refunded, everyone can call this function but lamports should go to account who locked it which is saved in my struct but not able to transfer ;s
Thanks so much!!!
Ah, it's just doing https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedsignaturesforaddress2 and putting in the wormhole program as the address
Hm, it's probably just using some of the web3.js calls to get that info, so it should be possible with web3.js
Enjoy! https://github.com/solana-labs/solana/blob/32742df1b4d1d85c45e34645984c45941ce3356c/rpc/src/rpc.rs#L1631
Thanks! I'm aware of the explorer but not sure if it is possible to export the data elsewhere. Is that possible?
32 is the rough max
The explorer can do that for you: https://explorer.solana.com/address/WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC
Ah in that case, see my answer at https://discordapp.com/channels/428295358100013066/836969024130777118/853971690667900958
It's an interesting question -- it takes the same amount of SOL to create the buffer account and fill it with the data from your program, but then you'll get it refunded, so you don't *spend* as much, but you still need the SOL to get the accounts and transactions done
`find_program_address` just iteratively calls `create_program_address` at least once, so `create_program_address` is pretty much always cheaper
No, you need to use a different account
`fromSecretKey` will do it, if you load up the keypair file as a byte array
Once the funds are in the program account, there's no way to recover them at the moment
Absolutely! It's much easier using `solana program deploy` from the CLI https://docs.solana.com/cli/install-solana-cli-tools
it works in follow way, guy locks lamports for some period of time and later he can refund it, everyone can call refund function but should be transfered to the guy who locked them and i saved his address in the struct when they were locked
no, everyone can call the instruction, but i want specific address to receive the locked amount
isn't the accounts you want to credit/debit being passed in as part of the instruction/txn?
yes you are right and I understand, but how is possible to save some address on chain and then later to get this address and transfer lamports to it, it's not possible to work only for the accounts who calls the functions i guess
adding/subtracting of lamports is at the account level, not some string
I had no idea how to save address in my struct object using borsh to it, what is the correct type for that goal
lamports are on the accounts
Why are you trying to add/sub lamports to a String?
yo guys, what type  to use with Borsh for address in struct so to be able to call `.try_borrow_mut_lamports()?`
`solana help`
and if it does not have a 'ready to run' command that suites your needs you'll need to either write Rust code or JS code using the `web3js` interface
for that, check out `solana` command
No, that gets you the configuration with the RPC URL
Please help.
Hi FastFrank thanks a lot for replying. Just wondering how 'solana congif get ' give me list of all accounts own by the program. I have checked using 'solana congig get --help' but could not find any option/parameter that can get me list of all accounts hold by any particular public key/ program
`solana config get`
<@821644010040328254> Hi Avacado. I am also looking for this information.
Ok, starting with that then. Thanks a lot for fast response!
Start learning Rust and, in parallel, reference the `Token` program in https://github.com/solana-labs/solana-program-library to correlate
<@!814228493302497301>
To be able to join a team that works with cryptocurrencies or be able to make money out of it alone one day. Not interested in investing that much. I think potential is tremendous
What are your goals?
I am on that site already. just kinda wanted guidelines what to prioritize if possible
https://docs.solana.com/
Any advices where to start? I want to be working within crypto area? Do i just get the most general knowledge about everything i can? Do i start learning Rust instantly? I would really appreciate any tips
Whether you do it in unit or integration tests is up to you but, yes. To really test the program you have to deploy it to the `solana-test-validator` (see it's options) or have the `solana-test-validator` started within your tests. I believe this is what `example-helloworld` demonstrates.
thank you very much, in fact, in the meantime  i'm disecting the example and the SPL, and it's starting to make sense to me. as for testing, is it possible to do a full program instruction testing with just unit tests?
or is there actually an answer out there somewhere?
hi

is there any way to manipulate local snapshots?

I'd like to test how much slots behind local snaphot could be before it is not able to catchup anymore?

Or is it the question for another channel?
Hello everyone. Could someone link me to the RPC server repo? I can't find it and I'm interested in the implementation of rpc_client.get_token_accounts_by_owner
From a program organization with unit tests and local integration testing, a good start https://github.com/solana-labs/example-helloworld also more advanced examples exist in https://github.com/solana-labs/solana-program-library.
You are A-OK using these as your framework for your own program.
For testing without deployment, see `solana-test-validator` as that is exactly what it provides.
that is, whether it's possible to fully test them via unit tests
my biggest 2 issues atm is whether i should use builtin programs as an example and build my contracts in the same manner, or is there a distinct approach to build 3rd party programs, and another is how do i properly test them without deployment?
hey guys, could you share some decent guides/docs on smart contract development, and how to unit-test them would be wonderful. for now i'm examining the builtin programs e.g. ExchangeProgram and using it as a base example, but would take any other useful samples to research, thank you very much.
Greetings, in accordance to StakeInstructions, which one should i focus on if I want to obtain:

Weekly/Monthly staked amounts in Solana (Specifically SOL)

Like, how do I get the total staked in monthly timeframe? (Which instructions should i focus to get that?)
I would have another question, how many AccountInfo can I pass in a single transaction instruction
thanks so I guess like 0.001 SOL
Less than 0.01$
actually, how do you name a token? (provide a full name and a ticker)
creating a token mint seems to only use public keys, sizes and other "technical" properties
Hi guys, I cannot find how much it costs to create a SPL token mint on mainnet. Anyone has an idea? thanks
Which PRs do you mean specifically?
hello dear i need a roadmap to start create stable coin anybody help can assist me?
Needing some assistance with website integration for wallet connection with Reward percentages. Can someone get in touch with experience. Might be on the BSC network though.
How can i connect my program to client and access program data?
hi guys, I'm trying to get some statistics on the wormhole bridge. Is there any tool I can use to quickly pull a list of all the transactions that occured on the bridge?
do you mean creating accounts? or is there a special instruction for creating programs? inside the command-line tool for creating spl tokens i only see create account and then initialize mint in the same tx but i dont see how that solves the problem?
Thank you for your answer! But, I want to get a validator list that 'someone' staked. Is there any way to get this information?
Hi Guys. I am building a betting platform. Here I need to use a lot of CRUD activities like list bets of a user etc. I am looking for a good way to store data so that I can easily get relevent data. Please help me with thoughts/tutorials that can help me to build this application.
Sir how can i take snapshot for any address which have X token?
^ nm, found it 🙂
Anyone know where the source for `solana-test-validator` is? I'd like to build it.
you use a client like solana web3js
Hey folks! Anyone know how to interact directly with the contracts of solana dapps?

I mean, from solana explorer like with etherscan or another option
I think that's the problem since I am not crediting another account but I wasn't sure ... thanks !!!
You have to balance the debit by crediting another account... you can't just "disappear" lamports as far as I know.
When redeploying a program is the cost the same?
Is `create_program_address`  cheaper than `find_program_address`?
Do anyone knows what that error means and how to solve it ? Thanks in advance
Hi guys .. I am trying to set the balance of an account to 0 and I am getting this error:
I'd assume that it's the difference between SOL and Lamports
https://docs.solana.com/terminology#lamport
when creating a createTransferInstruction, is the amount to send in some weird int format that accounts for  decimals? i have to tack on 9 additional zeros to the sum i want to transfer and can't find any documentation on this, thanks!
Can you change the private key of your program/wallet?
Yes wrapped sol is it’s own token account
is wrapped sol program id different than native sol?
Is it possible to safely authenticate a user via their wallet address/in a websocket connection to a nodejs server?


///////////////////////////////////////////////////////////////////////////////////////////////

does anyone have any idea what this error means and how to solve it?
thank you so much!!
so there is something hidden in the framework I guess that does my other stateful thing. cool
awesome 🙂 🙂
erm... well I'll see if I can do this bit on my own ! thanks!
ProgramAccountState::pack(account_state, &mut account_data).unwrap();
aha, makes sense
You have to write the account data back, here you are only unpacking it for reading/editing
I have another stateful thing that is stored/retrieved ok
am I missing some step ?
but on the next transaction there is nothing in the keys
eg this works ```        open_stoploss_orders_unpacked.add_keypair(&stop_loss_state.key.to_string(), "");
        open_stoploss_orders_unpacked.pack_into_slice(&mut open_stoploss_orders.data.borrow_mut());

        msg!("added stoploss to openOrders {:?}", open_stoploss_orders_unpacked.data_map.keys());
        let mut open_stoploss_orders_unpacked = OpenSLOrders::unpack_from_slice(&open_stoploss_orders.try_borrow_mut_data()?);
        msg!("unpacked and found openOrders {:?}", open_stoploss_orders_unpacked.data_map.keys());
```
I am trying to use the map to store state between transactions. I can serialise into and out of the map ok and state is maintained, however *only* in one transaction. The next transaction that retrieves the map there is no data in the map
hey <@!814228493302497301> , thanks for your help the other day. I tracked my issue down. Totally PEBCAK. However I am still having some difficulty, if you would be so kind as to lend me a few more moments of your time ?
<@!123887120346644482> <@!394537695185076244> `spl-token-cli` crate v2.0.12 should be available via cargo now.  It will be included in the CLI tools package for the next release as well
you'd have to pay for their rent-exemption
Great! So If I were to send someone an SPL-Token that did not have their account funded do you have to pay for "Rent-Exemption" or just for like temporary
```
$ solana rent 165
Rent per byte-year: 0.00000348 SOL
Rent per epoch: 0.000005583 SOL
Rent-exempt minimum: 0.00203928 SOL
```
Awesome! Do you know where I can find the cost?
for a token account, yes
And the fee for rent is always the same?
exactly, rent + transaction fee
I am using Solana-CLI version 1.7.1 and rustc version 1.52.1 on a **MacBook Pro M1**. I am trying to run the 'hello-world' example. All step go well except on running
```
$ solana-test-validator
```
I get
```
dyld: Library not loaded: /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib
  Referenced from: /Users/prashantdandriyal/.local/share/solana/install/active_release/bin/solana-test-validator
  Reason: image not found
zsh: abort      solana-test-validator
``` 
I have opened an issue here but no response from the Solana team:
https://github.com/solana-labs/example-helloworld/issues/236

Anybody experienced this on M1 ?
<@!453347985628200960> i dont have this error if i delete 1_character_counter_increment.c and .h
<@!539801435571748868> How much is the fee to create an associated token account? Are you just paying for rent?
Ohhhh I see. Thanks 🙂
here's your code: https://github.com/solana-labs/solana-program-library/blob/135d97b1ed92bda1b1d02ccec531a0612cdecc36/token/js/client/token.js#L2248
Oh there's definitely a way -- the associated token account address is just a program-derived address, so you just have to copy how it's derived
I'll check it out thanks. And I take it there is no way to do this with just the JSON RPC?
Not sure tbh, I just checked the source code 😕
is getAssociatedTokenAddress new? It does not seem to be in the version im using
Sure, you just need to generate the associated token account address using `Token.getAssociatedTokenAddress` from `@solana/spl-token` and then fetch that account
Is there a way to check if a wallet has this account? Like using json rpc or web3?

In order to complete the transfer, the account will have to get created beforehand, unlike with SOL, which you can just transfer to any account
of course, here is my code:
https://github.com/Mystiik/MyField-Solana
Is it something we could reproduce?
I built it with "npm run build:program-c ", i will check cargo build-bpf --dump for more info
How did you create your ELF file?  Also, have you looked at the program dump (`cargo build-bpf --dump`) to see if anything stand out?
Yes a program can deploy themselves and sign pda addresses
Sure, check out https://github.com/solana-labs/solana/pull/15927 -- not sure when I'll have time to get back to it at the moment unfortunately
on deployment
Sounds like a malformed ELF file.  Do you get that error on deployment, at runtime, or somewhere else?
Is it possible to send an SPL token to an account that does not have an associated token account. Like can you just send it empty
Sure no problem, to avoid confusion for users though, we try to force them to always use the one "associated" token account. `spl-token create-account` can do that for you though
I've got an Error: ELF error: ELF error: Relocation failed, unknown type 1, any idea why ? 😮
Ooh hehe, how soon would this be shipping, or is it still in the planning stage? Any issues/design proposals yet (and links if you would be so kind)? Or just one "for the future"?
you have it all correct
Hey there, not sure if this would cover it, but you should be able to trust the pubkey of the account
That's right, `solana-keygen grind` all day
Yep, you've got it all right!
haha good to hear 😄
Sure, it shouldn't be necessary, but you can do `to_string()`
yeah...my question seemed a little confusing
actually i figured it out 😅
I'm not sure I understand the question.  To "connect it to frontend", you just need to send transactions to the program's address, which doesn't depend on how it was deployed
Hi guys, is there anyone who can provide the consultation (paid) regarding the implementation of the NFT marketplace on Solana? Including (but not limited to): architecture, accounts creation, smart contracts, NFT creation, transactions, wallets support, available libraries in languages other than Rust or C etc.
What's the best way to "listen" payment from an address with the spl.js ?
can a program invoke itself and sign the transaction ? If yes, how ?
Hi! What does this error mean?
Yes, it's paid back to the reserve. The lenders hold collateral tokens which represent a share of the total reserve liquidity, so as the liquidity increases from interest this is how they earn a share of it
Okay, Thanks!!
I'm hitting `Using Connection with default commitment:recent, but method requires at least confirmed` this in web3 even after using `confirmed` as commitment. Anything else I can check on the failed TX to understand where its failing?
No, fixed at create time
If so, how to do that?
Can we update size of an account in solana, like if initially it have a size of 100 bytes and in future we want to increase its size to 1000 bytes?
🧐
Is there any function to convert Pubkey to string in my rust program?
struct for pubkey, if required
I'm unable to ser/deser on Pubkey in my rust program
Does anyone know how to solve this?
Is it `StakeActivationData`?
Do you know where it is? I tried searching `Delegation` and `StakeState` but none popped up
Any idea about this?
New here. Is there a Truffle development suite equivalent for Solana? Thanks!
yeah, as these are traded around their value will shift, and i want to participate in that shift over time
I don't know, but probably not. Are you talking about sending some "fee" to a specific address
is there any goal of changing that in the long term?
the spl-token standard has no "side-effect"
ah 😦
no
There is a device in ERC-1155 where, when a token is transferred, it sends some of its value home.  Does Solana have a similar mechanism?
<@150787664553967616> where does the interest paid to lenders come from, is it from the borrowers?
Is there a request who can get the block by hash using solana web3 api?
i keep getting: Creating account DnY5YSfJTzf5ZHLsf9c8zEBuDU5fdNYHwmKZKn3tDaUn
Error: Account already exists: DnY5YSfJTzf5ZHLsf9c8zEBuDU5fdNYHwmKZKn3tDaUn
can i create 2 accounts for a token?
I have generated a token using cli, and if it have 3 decimals then while transferring 1 token I have to transfer 1000 tokens on devnet network i.e., append zeros equal to no. of decimals in the token. Will I have to append zeros for other tokens too? like sol or btc on mainnet network
is this true?
nvm, i've found in the docs that the solana address is the pub key (aka your wallet address) and the id.json is the private key of that wallet that you should not share with anyone else
is the address returned by "solana address" the same as the address in ~/.config/solana/id.json?
Thank You!!
Hi guys, is there any recommended way to build uuids for an associated account data object ?
You should deserialize the struct and chase pointers within the spl program. One way to do this is to import the state struct into your rust bpf program. You may be able to get the pubkey directly with a CPI call, if it exists. I'll let others elaborate on this.
It's tricky and manual to do this currently. Anchor simplifies the boilerplate drastically. You may want to look into anchor instead of a "raw" solana program, where applicable. Else, manually constructing the fields in a web3.js transaction in js/ts is your only way.
-
Hello, can I check that solana-program-library program-ids were generated via grinding pubkeys for the 5-letter human-readable strings?
You have to hack on the rust code. Here: https://github.com/solana-labs/solana-program-library/tree/master/token/cli
Please change the program ID you want to deploy to. In these two locations:
https://github.com/solana-labs/solana-program-library/blob/master/token/program/program-id.md
https://github.com/solana-labs/solana-program-library/blob/db4792c4fea0f2f38c0130227d03de9d61ed3ef5/token/program/src/lib.rs#L30

Note that currently, you need to deploy to a program-id with an actual private key. (please correct me if I'm wrong).

Alternatively, just use the existing deployed programs directly.
Hi, could I ask what is an itoken? Will there be any support for common interfaces for SPL-tokens that have different structs underneath?

Meaning, that like in Solidity, one supports methods with certain type signatures, i.e. common ABI/IDL but have a different token struct/program state than standard SPL-token?
not sure if i'm asking in the right place...
or is it any documentation available?
is it possible?
i would like to create tokens/airdrop/mint etc. from rust code, not only from spl-token CLI
Hi everybody! Is there a programable version of this cli https://spl.solana.com/token ?
can anyone help me?
thanks 😄
hello. I am getting this error " Error: Account 5RAkANn6fxXfUp8me1WBphDVVSXaqZYsc5pYigSofziV is not an upgradeable program or already in use" when i am trying to deploy spl_token.so file in devnet. can anyone help me out..
Hello! I want to know how can i connect my program to client.
I know that we have to `solana program deploy` first. But im not sure how to connect it to frontend. Web3 docs arent much useful as they arent explaining what a particular function does. 
Thanks!
can we cast Pubkey to string so we can compare some stuff
<@585868308419444749> Could you please tell me if you know
Is the precompile verification done in Solana devnet and testnet? I'm passing an instruction to the `Secp256k1` program, but passing bogus values also seems to pass. The same failed in `solana-program-test` with `InvalidAccountIndex`, but seems to pass on testnet.
Reentrancy is disallowed, as the message says
Because you have two Ws in the call stack
I do cpi like this 
```
my custom multisig program => W
my custom program => C
token program => T

W => C => W => T 
```
and I got 
```
Cross-program invocation reentrancy not allowed for this instruction Program //W's program id here//
```
why can't I complete the tx ?
<@&439193644826755093>
How i can take Snapshot for Aidrop?
Hey guys, i'm stilling having problem with installing `cargo install spl-token-cli` on my M1 getting the error:  `error: failed to run custom build command for ring v0.16.12`. I did run `softwareupdate --install-rosetta` and configured my terminal to run in Rosetta, but it can not build `ring`. I am assuming it's something in rust. Has anyone been able to get Solana to run on an M1?
bump on question 1 + 2 new questions:

2. how does storing strings work?
strings can have variable length (as opposed to u64 or bool), so I'm a bit confused about their storage. is there any example of how to define a user account that stores strings?

3. another thing is - can data be migrated between accounts (for example if we want to upgrade the functionality). are there any best practices to follow around upgradability?
Anyone know how to find token mint address of a token in my program using rust?
There's an analogue for both
Thanks! Is there any way to get it from the JSON RPC call/ web3js?
https://docs.rs/solana-stake-program/1.7.1/solana_stake_program/stake_state/struct.Delegation.html#method.stake_activating_and_deactivating
Is there any way to check how much stake is activating/deactivating in a stake account?
I'm afraid that error message doesn't tell me much! If you can link to a repo or gist with a complete reproduction of your issue, I'll take a look.
Sorry for the late response. Looks like I can make new markets and everything fine but in the chance I wanted to add anther token to my market I'm still having trouble. ```thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ClientError { request: Some(SendTransaction), kind: RpcError(RpcResponseError { code: -32002, message: "Transaction simulation failed: Error processing Instruction 1: custom program error: 0x2", data: SendTransactionPreflightFailure(RpcSimulateTransactionResult { err: Some(InstructionError(1, Custom(2))), logs: Some(["Program invoke [1]", "Program log: Instruction: Approve", "Program  consumed 2434 of 200000 compute units", "Program  success", "Program invoke [1]", "Program log: Instruction: Init Reserve", "Program log: Lamport balance below rent-exempt threshold", "Program consumed 9061 of 200000 compute units", "Program failed: custom program error: 0x2"]) }) }) }', token-lending/client/src/main.rs:410:55
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace``` This is my full error  I had to remove token addresses because discord only lets me send so many characters before having to buy nitro lol. This was all done on my local net.
bump 🙂
Okay, Will try, Thanks a lot!!
Sounds like you need to find out which accounts another way, maybe from the client side
How can I solve this? Please help me
So I don't know which account to pass
But as I don't know before calling the program which account data my program going to change
Is there any way to change accounts data without passing to the program? I am working on a program which reads public key of one account based on some condition from many accounts stored  and change data of this account
All accounts that a program wants to read or write must be passed to the program.  The one exception is there are new access function that allow a program to read `Sysvars` without having to pass their accounts
Like if I have stored some account infos, then in my program I am reading those accounts. Can I write or change data of those accounts if I don't pass them in entrypoint function while calling the program?
While calling a program
Is it compulsory to pass all the accounts (that we are going to change or read) in entrypoint?
is there someone who can answer some of my questions about the grants
i have a client was curious if possible doing it via cli
The CLI tools aren't intended for creating arbitrary data accounts.  You should write your own client tooling to support your program
https://docs.solana.com/offline-signing/durable-nonce
`create-nonce-account           Create a nonce account` what does this mean in solana-cli? also how would one create new data accoount for existing program via cli?
contract stake example with rust?
RE "unable to confirm" transaction.  That's a timeout that I don't believe is configurable via CLI.  The client has received a positive or negative response from the cluster for the given transaction ID.  By no means doe it indicate success, however it usually happens if the cluster rolls back one or more forks between broadcast and acceptance, requiring longer than usual for the including block to confirm
Great!  Thanks for the support
ok, i guess we'll just remove retrying for now, thank you. If you manage to find a way to avoid the "unable to confirm transaction" error too (that one in our experience 100% means it went trough), that would solve a lot of current problems we're facing. the offer to help stands, even if you need someone to just run 200 tests or whatever
We've got it.  I'll ping you when new bins are released to cargo
got it. thank you for the explanation! do you know who is working on that so we can offer any help and try to find out a timeframe maybe?
Yes.  At that point I thought the spl-token tool had 429 support.  I've since learned that I was mistaken
now it makes sense, thanks
thats where the confusion comes from
see <@!585868308419444749> when prasko asked this question, you answered yes, it's a guarantee the transaction failed
Nope
i don't know if you tested them: https://github.com/praskoson/distribution-tools
we would like to find the best way to solve this for the moment
Which is why we need to bump the tooling, like I suggested
so getting an 429 tells you nothing and there is no way to be sure if the transaction happened basically?
The problem is that the CLI makes several RPC calls, any of which could be rate-limited.  Just because an invocation returns 429 doesn't tell you which it was
before being sure if the transaction happened?
is there anything we can do other than manually check every transaction that returns 429?
great thanks <@!585868308419444749>
and about that speculation, i am not sure what that tells us and if there is a way to solve that
you get an error, you try again, not sure where the problem is :D
You want `getProgramAccounts`
How do your tools already have support?
I already speculated as to how that can happen. https://discord.com/channels/428295358100013066/517163444747894795/854068743792492616
or do i have to manage that state in program itself, aka which accounts are created for program?
<@!585868308419444749> do you know if i can find the accounts that program owns? how could i check that so  I don't create new account in case it exists
you can get a 429 error while transaction actually went trough
our tools have it, please try to understand the problem
Current SPL Token CLI doesn't have 429 retry support.  We'll release a new one with the libs bumped to support it in the next few days
is there a way to check the accounts that program owns with solana web3.js ?
hey <@!585868308419444749> if you could please let us know if there is a chance of someone looking into this today we would really appreciate it, a lot of people are now using our distribution tools and we made it so any transactions that get 429 keep retrying till it succeeds. The fact that it can return that error and transaction goes trough is a big problem and we want to warn everyone and change how it works if we get confirmation this is something that we can't do nothing about.
OK thanks
AFAIK the arweave bridge development was done nearly all in the open on <#517163444747894795> and <#738359173405736980> .  I'm not exactly sure how to direct your request
Look at add meow token pull req on solana token list and tell me what's wrong?
<@585868308419444749> I found the solar bridge, but its not quite what I need. Is there a team member I can speak to in privately as I'm not ready to release details on what I'm trying to build yet publicly.
GRANT SUGGESTION:- as more (browser) wallets come on-line, and as more (web) projects come on-line, there will be a *repetition* of work, where *every* project needs to integrate *every* wallet.... would it make sense to standardise this somehow and do the work once?
the amount of data you can pass in a transaction is very limited 1232 bytes? or something, so you may need to do a bunch of SC calls to set the whole thing, but you totally can. There is absolute 10MB max on account.
Also fine if "unknown" has a sane maximum
no. accounts are created with a fixed size.
but you could create the account dynamically, once you know the length of your string.
Can you store an unknown length string in an account?
You can probably figure out who's involved from the chatlog in <#738359173405736980> . The only name I remember off hand is <@!737632089037340823>
Is there any way to contact this person or see his methodology? I'm basically doing the same thing forr my dapp.
I'm not sure of the details.  I believe it's being handled by a grantee
Hmmm that's an interesting method. On a side note. You guys currently archive blocks onto arweave. Where do the AR payments come from? Are you converting SOL to AR somewhere? If so how?
We _do_ accept third-party proposals though
Yeah exactly, that's why I said, "no short path immediately comes to mind" 😉
But unless you guys enabled that at the blockchain level I dont see how a third party could do that as they would need to move the coins out of the account onto an interest bearing account, which would immediately "delete" it no?
Not today and no short path immediately comes to mind.  It'd be cool if someone worked that out though!
If I have an account that is rent exempt and holding lamports. Is there any method that I can earn interest on those lamports?
LMAO
Ok let me check something
spl-token-cli 2.0.11
What's the output of `spl-token --version` ?
is there a way I can deal with this? or should I treat it as an unconfirmed transaction?
The 429 may be coming from the transaction status polling in that case


///////////////////////////////////////////////////////////////////////////////////////////////

yeah totally understand.
It'll require a new transaction format and a bunch of supporting changes, so it's not trivial by any means
yeah that trick could save 1 or 2 accounts. anw, super looking forward to lifting that limitation. Gonna build more interesting trading transactions once that is lifted.
<@!750260892146597970> You can save a few accounts in the tx if you depend on certain sysvars, some of them support the `get` method that allows a program to query them at runtime instead of pass them via the tx
Months
Staking is only supported for SOL.  But the SPL stake pool program is a (complex) example of how one could map SOL staking rewards into an SPL Token
ah shit. Is that super far away?
Maybe in 1.8.x, but can't promise right now
hey guys, in which solana version are we going to see that limitation of 32 accounts removed?
What <@!585868308419444749> said covers the 1st transaction... it should have 2 instructions:
1. The instruction to create the account and specify how much data space to reserve
2. The instruction for the target program to initialize that data space. It may or may not contain other data to store

Then subsequent transactions sent to the program instructing it to "write" data to the account you specify. That is the preferred way. If you look at https://github.com/solana-labs/solana-program-library you should find examples of this
Hi, we're interested in creating our own SPL mint and staking in that mint. Is this possible or is staking only supported for SOL tokens?
I'm not sure I completely understand - I'm not talking about an outsider interacting with an instruction. I have an account I'm creating from a PDA to store some data, completely on chain. Do I still need  a separate instruction to initialize?
Sorry for bothering mate but is it possible to extract private key from keypair?
Your program should provide an initialize instruction that is executed immediately after the system program's `CreateAccount` instruction, in the same transaction.
Sorry for the noob question - once you create an account on chain, what's the preferred way to write data to it? Can someone point me to an example?
Thanks man ..that did work.
Try `solana-keygen recover prompt:?key=0/0` instead
what's the default commitment if we don't put any?
Any idea why using the solana-keygen recover command with seed phrase which I get from sollet.io not showing the same pub key as shown in the wallet
Information about what account and if it was a signer or writable issue is part of the transaction's program logs.  Have you checked the `logs` field in the `SimulatedTransactionResponse`? (assuming you are using web3.js)
Not really, Not having to use space in the tx or pass it explicitly to programs cleans is a big benefit through passing them to programs consolidates the account read locks to one instance.
really curious now what could be the case...
i have another subscription in another part where i am subscribing to another account that is requesting airdrop, and using confirmed gives back  response immediately.
very simple subscription to websocket api on account change ... not sure why i am having problems this should've worked out of box
`  useEffect(() => {
    if (selectedWallet) {
      // changes on game account data
      connection.onAccountChange(
        new PublicKey(configData.gameAccountPublicKey),
        (acc) => {
          if (acc) {
            getNewGameState();
          }
        },
        "confirmed"
      );
    }
  }, [selectedWallet]);`
i've tried to put`confirmed` `recent` `singleGossip` and stuff doesn't even return anymore.. if i remove any commitment back and keep default it takes 15s
i cannot do that currently and it would be really helpful..
for example, if i type use solana_sdk::{pubkey::Pubkey, signature::Signer}; inside visual studio code, i want to be able to go to the definition of signature::Signer
how can i make Visual Studio Code see the solana packages in my rust code?
would there ever be any reason to explicitly want to pass sysvar account?
Hi!
You'd be better off using `@solana/spl-token`
how can I construct an SPL token trasnfer in web3.js?
ok so the balance on program account is the minimum required for exemption i guess when i was deploying the program. fine.
yep
ok so program accounts are there forever then (rent)
You can't add SOL to a program account
this acount is program Id HStb4oioRhSZhcwokjJq37ayvheLRoh5crpLtCDRRS, it's executable. why can i not send sol to that, with above error?
damn it
ok
There's no generic solana CLI call
rpc yeah, but cli?
https://docs.solana.com/developing/clients/jsonrpc-api#example-34
devnet
i am trying to find out why is this failing..
`amel@DESKTOP-P6MTIP0:~/playground/solana-game$ solana balance 5hHStb4oioRhSZhcwokjJq37ayvheLRoh5crpLtCDRRS
0.56253504 SOL
amel@DESKTOP-P6MTIP0:~/playground/solana-game$ solana airdrop 1 5hHStb4oioRhSZhcwokjJq37ayvheLRoh5crpLtCDRRS
Requesting airdrop of 1 SOL
Error: Error processing Instruction 0: instruction changed the balance of a executable account`
trent which accounts program owns
comment in the PR in question
What does "check" mean?
how can I ping someone?
how to check program accounts via cli?
Alright no problem
Please ping on the actual pull requests, not here.  Thanks
Could someone help me with this? Our project name is DINO
I apologize for messaging here, hopefully you don't mind. We're creating a Dino themed nft/staking project and we're trying to get our pull request validated on 
 the token-list repo so our token icon can be linked to our token. We've been waiting a couple of weeks but so far nobody has reacted to our pull request :/.
Using `get` doesn't require you to pass the sysvsr account to your program
Yes, we probably can, I'll look into it
Hi, @here Is there any way to see data content of an app account using solana explorer?
It's the point. Thx for advising.
I've `impl Pack ...` for account data in a program. Is there a way to return an error from `pack_into_slice` other than `panic!`? I check for available space and want to return a custom error if not enough is there to serialize data to.
The sender signs the entire transaction, so you know the memo is from them
The way to do this is exactly as you have shown, add a separate memo instruction to the transaction
If sender can memo in instruction,  sender can know why, where, whom I sent.
You can’t combine them, but what’s the problem you’re trying to solve that makes you want to combine them?
I mean, I wanna to combine these two instructions to one instructions.
Is there a way to combine **transfering Token ** and **memo or comment** in one instruction ?
in the docs (https://docs.solana.com/developing/runtime-facilities/sysvars) it seems to recommend using `let clock = Clock::get()` for efficiency and simplicity but are there any downsides to this or benefits from using `Clock::from_account_info(&clock_sysvar_info)?`
Hmm.. I have no idea bout that. Maybe other can help u.
In the transaction object there are 2 props: messages and signatures, and the first entity in signatures is the transaction hash, like what is the best way to take transaciton hash i can see to be part only of that signatures array
Sorry for I can't understand what  you're saying... 😦 
where's array of signatures?
has anyone implemented asymmetric encryption of transaction data?
oh man, you are live safer! 1 random question in array of signatures, first record always gonna be transaction hash or there is a proper way to take it?
I got the point. use **getParsedConfirmedTransaction** method in connection class.
```
  const solanaWeb3 = require('@solana/web3.js');
  const MAINNET_URL = 'https://api.mainnet-beta.solana.com';

  const connection = new solanaWeb3.Connection(MAINNET_URL);

  const signature = '4noS62BTActqtnqcd6MN5vAssT2LL6PKSmdnvCNV9sQ5iLmNjZMFstUK74LmCQZwfcncX36yeBLxg5TK1rBHW9bs'; <-- your transaction signature
  const result = await connection.getParsedConfirmedTransaction(signature);

  console.log(result);
```
I can see there is some prop` {encoding: jsonParsed} `on the rpc is it possible to achieve same thing using the solana/web3.js
yo guys when I'm using `solana/web3.js` and more specific to get transaction by hash `connection.getTransaction(txHash)` i receive following output for **instructions**:
`[ { accounts: [ 0, 1 ], data: '3Bxs3zxH1DZVrsVy', programIdIndex: 2 } ]`
But when i get it from JSON rpc i got this output:

My question is how to get parsed from solana/web3.js as well
https://docs.solana.com/developing/clients/jsonrpc-api#getstakeactivation seems like there is more stuff in another json rpc call. Not sure why this isn't directly into StakeAccount
cool, thanks. it's not very clear either way, so probably more info should be surfaced
https://github.com/solana-labs/solana/issues/18002 created the issue, the "type" on the object is actually delegated so a bit odd, you can also see the cli saying: Delegated stake 0.5 SOL and Activating Stake: 0.5 SOL.
less frequently it's a bad signature
usually it's just because one or more accounts haven't been marked as writable
there's also likely to be more than one. But i suppose the runtime just stops once it hits the first bad signature?
I compared 'getConfirmedTransaction' method in RPC, and run code I sent, but I can't find differences.
What kind of information do u want exactly ?
considering the error has to do with a bad signature, seems like the runtime should report the error
if it could be native to solana that would be the best
i can add it as an issue on github, i just wasn't sure if it was even possible or if it was something that needed to be done by the programmer themselves
🙏
Hm, yeah that would be really good... maybe <@!453347985628200960> will know if that's possible once he's logged in
trying this now thanks a lot
so you can pass one more parameter after all that with simply `'confirmed'` do set the commitment
Oof yeah that can stink.  Can you check and see if you can reclaim the lamports from any unused or outstanding buffers? `solana program show --buffers` to show them, then `solana program close --buffers` to reclaim
I need to take the amount of sol which is contained in the transaction it self
I am actually making https://solstake.io derive an extra Status given activationEpoch and deactivationEpoch values, to make it able to make the distinction
It's a good question... since it's "activating" and not "active" it's not really delegated, which is why the explorer tells you that. But we could probably make that part clearer.  Issue please!
Some examples in the rust tests:
https://github.com/solana-labs/solana/blob/4f8528cd595710c0580cbc1580843d36255a281c/programs/secp256k1/src/lib.rs#L27-L58
<@!539801435571748868> Any update on this PR https://github.com/solana-labs/solana-program-library/pull/1544
When should we expect it's release?
Issue resolved. Reported in <#837340113067049050>
That happens unfortunately, can you try another mainnet endpoint like the serum ones? https://docs.solana.com/cluster/rpc-endpoints#mainnet-beta
Would it ever be possible for solana to report the public keys of the accounts causing the CPI error?
```
Translating error Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or wri
table account
```
thank you very much, i'll pay more attention to the token program, i must've skipped essential things, thank you!
That's a good question, maybe <@!439209823201132558> can help you there?
How bout getting amount of SOL from postbalance - prebalance ?
this is what i have for websocket
`        connection.onAccountChange(selectedWallet.publicKey, (acc) => {
          if (acc) {
            setBalance(acc.lamports);
            toast({
              title: "Success",
              description:
                "Federal reserve sent more money to " +
                selectedWallet?.publicKey +
                ", new balance " +
                acc.lamports,
              status: "success",
              isClosable: true,
            });
          }
        });`
do i set this up on connection object?
any example how can i do that with web3.js?
You may be using a confirmation level of "max" / "finalized" which waits 32 slots before confirming.  Try using "confirmed" for your commitment instead
Hi there! Yep, this is all possible, you may want to get some inspiration by reading the code for the token program, specifically the token holding accounts [1]. There, you can store an `owner` pubkey, and require that the owner account is provided to instructions in the program, like in the transfer instruction [2]

[1] https://github.com/solana-labs/solana-program-library/blob/52c4c27dfc4ed20ae8d04f0a20b9e04fbd9ec3a1/token/program/src/state.rs#L86
[2] https://github.com/solana-labs/solana-program-library/blob/52c4c27dfc4ed20ae8d04f0a20b9e04fbd9ec3a1/token/program/src/instruction.rs#L88
This is how i do it too but the response is different, in the rpc there is a prop parsed data and here is missing and its hard to understand what amount of SOL have been transfered
```
  const solanaWeb3 = require('@solana/web3.js');
  const MAINNET_URL = 'https://api.mainnet-beta.solana.com';

  const connection = new solanaWeb3.Connection(MAINNET_URL);

  const signature = '4noS62BTActqtnqcd6MN5vAssT2LL6PKSmdnvCNV9sQ5iLmNjZMFstUK74LmCQZwfcncX36yeBLxg5TK1rBHW9bs'; <-- your transaction signature
  const result = await connection.getTransaction(signature);

  console.log(result);
```
I hope it will help.
yo guys, how to get parsed details of transaction using `solana/web3.js` like the response from the RPC
not complaining just testing atm so
also 0.5 SOL for deployment atm $20.. not that cheap 🙂
so wasting money on mainnet is not good thing.. i deployed program on local, devnet and tesnet without issues, then when it came to mainnet i got 429 too many requests and got siphoned of half of solana for nothing. how can i debug or make sure that program is going to be deployed to mainnet without losing money?
Is this worth an issue?
The explorer is wrong for activating and deactivating stake account:
```
Stake Pubkey: 3xYa8izWaYd5QoPx6eYiw1DGQDU5v4mWvyYbpREX2Pf7
Balance: 0.50228288 SOL
Rent Exempt Reserve: 0.00228288 SOL
Delegated Stake: 0.5 SOL
Active Stake: 0 SOL
Activating Stake: 0.5 SOL
Stake activates starting from epoch: 200
Delegated Vote Account Address: 7MQjPjb6KgNFnBhZPM4HDhNWvPF77UkbWGgK8rb1kdYu
Stake Authority: 6TM6yq1RTR4fMkGD91HcbAzre9EsqdqmaQmcd3NDRrTW
Withdraw Authority: 6TM6yq1RTR4fMkGD91HcbAzre9EsqdqmaQmcd3NDRrTW```
https://explorer.solana.com/address/3xYa8izWaYd5QoPx6eYiw1DGQDU5v4mWvyYbpREX2Pf7?cluster=testnet
It shows Status: Not delegated
I found the answer. 
The answer is here. Sry for asking again 🙂
I'm trying to transfer my token to many accounts in minimum transaction.
I readed this docs.
https://docs.solana.com/developing/programming-model/transactions#multiple-instructions-in-a-single-transaction

And I have question. **How many instructions can be in a single transaction ?**
I tried 50 instructions in a single transaction but I don't know exactly the limit.

This is my last try: https://explorer.solana.com/tx/28RUg2Ro2riS9xZpms5miCgXSMXR8v1xnMFbCwZ4BYvzSwunnrbzDXLt2XRNHDDXeWcB4TmwpUAEEirCTQQMszpi
Any help would be appreciated 😃
I know how to create accounts which can store uint etc. But don't know how to create accounts which can store binary heap or similar data structures
I have implemented rust program for it, but don't know how to create layout of this account in typescript to create it, so that I can pass account address of this account to my program
How to create an account which can store binary heap inside it?
no SOL
Any idea on that error ` Error: failed to send transaction: Transaction simulation failed: Attempt to debit an account but found no record of a prior credit.`
I am getting the above error when I try to send transaction via mainnet-beta
Error: failed to send transaction: Node is unhealthy
in case running own node etc?
someone suggested to do my own rpc server, what does that mean? creating server that would poll constantly selected account info and create my own websocket with signalR for instance? isn't there easier possibility of setting response time for WS on node or something?
how can i fix this?
so i still dont understand why websockets send response evert 15s on devnet, and even when running solana-test-validator on local takes 10s for response, that doesn't really use the benefit 500ms block finality...
are there examples of using https://docs.solana.com/developing/runtime-facilities/programs#secp256k1-program
hello guys, I'm fetching transaction details but there is not prop as "VALUE" or amount of the sol that have been transfered in the transaction is that ok?
hello everyone. i'm researching Solana programs and trying to write a simple bank contract to test things out. i have a few questions on whether it's possible and/or how to achieve this:

1. customer sends an instruction to create an account with some initial deposit (or maybe it's possible to transfer to the program account and the program reacts to this somehow?),

2. program accepts the deposit and creates a new account for storage, dedicated to customer's particular account and allocates the deposit amount to this new account, which must be owned by the program but still belong/assigned to the customer,

3. further the customer account sends other instructions like GetBalance, Deposit, Withdraw, Transfer etc. and the program would serve his requests accordingly, for example if the customer wants to withdraw some amount, then program takes this amount from an account that it allocated for that customer and transfers it to the customer or whichever other account the customer has specified.

the main question is, is this possible at all in the current state of the implementation, or planned at all?
could you please point out the things that are wrong or could be done, but differently? perhaps there are docs that i'm missing, other than the docs.solana.com?

thank you very much!
Ah of course! Thank you - it's all clear now
Sollet or Solflare, etc
You should be able to transfer them from any supporting wallet
Plug it in and all my tokens are enumerated
Yep.  It'll just work so long as you aren't wrapping the token program in another program
Gotcha - I'm having trouble understanding it in practical terms - where do I go to do a custom SPL token transfer?

For Ethereum, I go to MyEtherWallet
The Solana ledger app supports SPL Token instructions
It should just work
Is there a ref doc somewhere I can use or sample implementation?
Thanks - what would it take for me to get my new token e.g. SKY - to work on the ledger?
<@357317342457233409> - we take a slightly different approach than ERC20.  ERC20 defines the interface for each token to implement, whereas with SPL Token the implementation is also common.
But I don't think this is the same for Solana tokens?
In Ethereum, all ERC20 tokens work out of the box on the ledger
oh man - this tool is over tops! 🙂 It is so mad how many cool dev tools you get out of the box when you just install the solana cli👌
Well, if I create an SPL token on Solana - I also want to integrate it into the ledger app
You're looking to customize the SPL Token program? How are you hoping to modify it?  (My next move will be an attempt to convince you to try a different path, such as building a different program that drives the  SPL Token program in some way.  Modifying SPL Token will cause your custom token to not interoperate with all the existing wallets and services that use SPL Token)
Thanks for the quick response. Will check that out 👌
check out `solana-keygen grind --help`
Hi everyone, I am trying to work out how to implement a desired program id during program deployment.

The docs @ https://docs.solana.com/cli/deploy-a-program indicate that you can deploy to a specific id with:

```
solana program deploy --program-id <KEYPAIR_FILEPATH> <PROGRAM_FILEPATH>
```

However, the question I am asking is how one might go about picking a particular public key for the key pair at <KEYPAIR_FILEPATH>.

I might be missing something here, but I am asking because it seems this sort of thing is possible considering that some of the programs that already on chain seem to have non-randomly generated ids, such as the following:
```
MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr - memo program
metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s - metaplex metadata program
TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA - token program
```

Does one do something such as creating a 'half-empty' key pair file and only populating the public key bit?
Is there somewhere with sample code for this?
What does it take to add a custom SPL token into the ledger?
`solana-test-validator` runs a completely stand-alone network on your local machine with only one validator.  It doesn't connect to the Solana testnet or mainnet at all.   You'd need to run `solana-validator` connected to testnet or mainnet to get the real transaction data  (cc: https://docs.solana.com/clusters#example-solana-validator-command-line-1)
I will look into it thanks
You'll want to use an SDK for the instruction/message serialization
nvm, I think I found https://docs.solana.com/offline-signing
<@!585868308419444749> are there docs on how to sign a tx?
Signing is done client side.  Keys should never be remote
is there explicit documentation on how to sign and send transaction using json rpc endpoints? I see sendTransaction method where you pass the hash as the param, but I don't see anything on how to sign a tx?
Thanks for the clarification. Additional question, this is only a TEST-validator which runs on testnet, right? Can I get main deployed-chain data through this server, or do I have to actually setup a true validator on mainnet to get the actual data? Data not necessarily needs to be real-time, just historical with delay is fine
> The `solana genesis-hash` gives an unfunded account.
genesis hash is just a hash and not an account so this is expected

> but when tx is sent, test-validators can work properly
Great, so the test validator is working

You could just use `solana-test-validator --quiet` or `solana-test-validator --log` to bypass the dashboard display.  Beyond that, like I said I'm not sure what's up on your Windows machine.  Linux and macOS are well supported
It's kind of fatal since I can't check the correct genesis-hash? The `solana genesis-hash` gives an unfunded account.  (not sure about the meaning of genesis-hash here though) but when tx is sent, test-validators can work properly. Any way to modify the source code to pass "Unable to connect to validator" error and use it locally?
The error is coming from: https://github.com/solana-labs/solana/blob/3a647c4bea0d077ecb95e940bd43d9874fa42c42/validator/src/admin_rpc_service.rs#L165
But it's *probably* not fatal, you just won't get the nice `solana-test-validator` status information as it's running
Yeah that looks like the issue, the admin rpc server is failing to start so that's why you're seeing those "Unable to connect to validator" errors.  The validator probably is working.  Maybe the filesystem you're running on doesn't support a named pipe.  You'll need to debug that failure, I don't use windows
Also this: `[2021-06-16T04:27:59.355678000Z WARN  solana_core::validator] encountered error removing accounts path: "test-ledger/accounts": No such file or directory (os error 2)`
oh windows.
`[2021-06-16T04:27:57.979253600Z WARN  solana_validator::admin_rpc_service] Unable to start admin rpc service: Os { code: 95, kind: Other, message: "Operation not supported" }`
Thought this was the issue, Any idea how to solve it? Will be much appreciated. Use WSL2 on windows10 as admin.
I thought so but that's the only ERROR in validator.log
also provide text instead of screenshots please
That message is fine
Any clue?
or run `solana-test-validator --log` to view the log on standard out
it looks like something crashed during startup.  You could look in the `Log:` file to see if you see any panics to debug further
Run solana-test-validator but get this error: anyone encounters this error before/knows how to solve it?
you are telling the program to transfer this tokens. using the instructions
this is the program for interact with the tokens
TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
the token program id
<@!214485183989022721> 
I read your code and I got the flow. Can u check ?
```
  1. Make 'transfer instruction'.
  2. Add 'transfer instruction' to 'transaction instruction'
  3. Send 'transaction instruction'
```
But how can I know tokenProgramId?
I was trying to transfer by js. But I can check the codes and convert to js version. Thx 🙂
is it possible to interact with the stack directly, pop items off of it, etc.. perhaps some form of assembly language
https://spl.solana.com/token#example-transferring-tokens-to-another-user
I don’t want to make more marketing but this is exactly what you need to do
You need to create an associated program instruction, and add to your transaction. Check this >> https://github.com/ajamaica/Solana.Swift/blob/master/Sources/Solana/Actions/sendSPLTokens/sendSPLTokens.swift
Is there **solana-program-library** docs?
https://github.com/solana-labs/solana-program-library

I want to transfer token using SPL. 
I can transfer SOL already, but not tokens yet.
I don’t find the use case but my idea is not limit developers and give options
Can’t wait for solana on my Apple TV
Or do you have to manually recover it
Will money stay in a buffer account forever?
* it works for macOS and tvOS too
* this is part of my Summer wallet, but I found out the clients for swift are sad 😞. So I fork and made my own
I am working on a swift client for solana. It supports swift package manager.

It is now on a full working state. Adding many tests by the hour.

I am looking for feedback, reviews and pull request. I will support this library going on and do the android version too.

https://github.com/ajamaica/Solana.Swift
worked second time on testnet... seems very unreliable.
testnet
testnet is broken as well? can't deploy program that is deployable on devnet
you can find hello world repo in solana on github
retrieve/traverse the data via web3.js is now updated with borsh ser/deser in hello world program, it's quite straight forward now
https://docs.solana.com/developing/test-validator for instance here under developing
you will unfortunately have to go through docs
Another question, what's the best way to retrieve/traverse the on-chain data? I saw https://docs.solana.com/developing/clients/jsonrpc-api, but in the example it seems to send a request to localhost, what's the localhost in this case, how to setup this server, anyway to use this RPC without having to setup server locally (i.e. is there a server already setup, if so what's the address?) ?
https://docs.solana.com/
their docs are pretty good
it is very simple program, and doing via solana-web3.js
hey. deployed the program to devnet without issues. trying to deploy on mainnet and getting this: `Server responded with 429 Too Many Requests.  Retrying after 500ms delay`
hi, completely newbie here, first time explore Solana, what's the quickest way to get a general overview of the system?
Can you look up your transaction on the explorer, the transaction details will show the log messages: https://explorer.solana.com/?cluster=devnet
Hello. I have a simple question. What’s the best way to get user token wallets? Currently I use  program accounts  querying the token program with memcmp with the public key. It works but takes a lot of time. Like 50seconds.

Is this the only way?
is there a changelog somewhere?
thanks!
429 changes :O? that was fast
awesome, it worked, thanks!
Try `RUST_LOG=solana=debug spl-token mint XXX 1000 YYY` to see those 5 log messages
In this case, the log messages aren't on devnet yet because the transaction simulation failed and therefore `spl-token` didn't submit the transaction
hey
quick question about that:
```
$ spl-token mint XXX 1000 YYY
Minting 1000 tokens
  Token: XXX
  Recipient: YYY
RPC response error -32002: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x4 [5 log messages]
```

I was actually expecting an error, but I want to double-check what went wrong.
how to get those log messages on the devnet?
this is not really helpful (https://docs.solana.com/developing/on-chain-programs/debugging#logging), as it mentions only logging on the local node
okay thanks for the direction and info
for a production thing you would have to go with the transaction, since it is possible to get account balances before and after (not sure about account data), it should be possible to debug. You also have access to the error code
roger that
For work in progress solana has the crate solana-program-test which makes working with a program easy. Also remove time wasted trying to go grab logs or whatever somewhere else
essentially both, but it's been particularly useful when working in prod
"debugging smart contracts for dApps." are you debugging a work in progress or debugging a live program?
sounds like on Solana i would target the transaction data
in EVM, emitting critical step events in the methods is how i've been tracking where things can break down once the EVM side when debugging smart contracts for dApps. i use it so i don't have to unpack transactions, ortry to download the Ethereum blockchain, or even have to consider running or paying for an archive node. you're making it clear that the behavior i've come to expect from EVM is not the same with Solana when it comes to logging
A log does not have to tell the truth, the transaction has to
Why use those rather than the transaction data itself?
or reliable
I don't think i understand, there is nothing to be found that is very interesting in logs
okay, so i'm used to using EVM topics as a failsafe method to use for source of truth in recovery scenarios if something ever goes wrong with a smart contract. is it possible to parse historical program logs to achieve the same prupose?
It is a string, not a great interface to rely on
Program logs are more like dev logging program side, so no really to be compared with EVM event logs
question regarding trying to aggregate events from Solana's chain. i'm having trouble finding anything in the docs about trying to aggregate and filter events/logs on Solana's transactions since genesis. i see in the solana binary that there's a `logs` option and i'm assuming there's a log facility in the chain VM side (like EVM topics on ethereum), but i can't find any direction on how i would interface with the chain to try to aggregate those objects/events. is there a logging facility in Solana like EVM topics? am i right in how i'm looking at the issue in the first place, or is there some other view i should have when trying to aggregate that data?
Also i see around those "naive" processor UTs
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L987-L1032
Those wouldn't support any cpi calls, would they?
so double testing writing test once, how beautiful
+ the bpf run if needed
I like ProgramTest because i get debuggability
If you can get away with using ProgramTest, all the better.  It's much faster than TestValidator
`solana feature status` will list the available features and their current activation state.  
devnet: `solana -ud feature status`
mainnet: `solana -um feature status`
But if I test the program itself, not sure why I would want the JSON RPC API
I see so TestValidator is more like the binary solana-test-validator i guess.
Sorry if this is silly:  how can I tell when this feature https://github.com/solana-labs/solana/pull/17358 (blake3 syscall) would be enabled on devnet, and eventually mainnet?
Yep.   TestValidator gives you the fully JSON RPC API, so it's more useful for system-level testing.  ProgramTest is designed more narrowly for rapid program unit tests
to test a program
Is there any reason someone would go for solana-validator crate `TestValidator` rather than solana-program-test `ProgramTest`?
thanks
perfect
Locks are held for the duration of a transactions execution
so my understanding of the solana runtime is that it locks access to accounts to prevent concurrent modification of an account by multiple different instructions at the same time, however im uncertain as to whether or not this lock is applied globally throughout an entire transaction even if that transaction may place multiple instructions, or if the lock if applied on a per-instruction basis.

For example lets say I have two programs (A, and B), and I want to create an instruction that calls program B, which then calls program A modifying an account, and then in the same transaction call program B again which calls program A again. In between the time these two instructions are executed, is the lock on the account owned by program A held the entire time, or is it released in between the two instructions? 

Essentially I'm wondering if its possible for someone to submit a different transaction that would get executed in between the two instructions modifying account A or if thats not possible
Sorry, there no way to find out
not the max size
sorry if i was unclear, i meant if we can print the current consumed frame size at any given point of execution
Great, I created a new issue:  https://github.com/solana-labs/solana/issues/17991
It hasn't changed in a long time, https://github.com/solana-labs/solana/blob/dbd4dc04b0349cd7235a65e9effa920f8c0c30b7/sdk/src/process_instruction.rs#L202
is there a way to dump the current stack frame size onchain
Hey <@!768486252168216647> best thing to do would be to file an issue, we can consolidate discussion there
I am working on private transactions and experimented with elliptic curve operations on chain. A single curve decompression and scalar multiplication seems to require 300k and 3.4M BPF instructions respectively (https://github.com/samkim-crypto/ristretto-bpf-count). I  played around with tweaking the algorithms by removing non-vital security mechanisms and also adding in offline precomputations to shave off instructions counts, but it seems like the numbers are just too big to run these operations on chain. I was wondering what it would take for me to propose certain elliptic curve operations to be provided as a syscall or how I could start the discussion.
Perfect 👌
<@!239813934360690690> I've filed the following issue to track it: https://github.com/solana-labs/solana/issues/17989
I am just wondering, if there are any of the SPL, that actually exposes the `instruction_data` to Javascript / Typescript?
Ok, yeah that does fix it, the following relocation is not supported:
`0000000000000408  0000000400000001 R_BPF_INSN_64          0000000000000cc7 ACCOUNT_CHARACTER_COUNTER`
I see. Yeah, this makes sense. Thank you!
Your oracle should be writing to accounts with known addresses, the calling program would then load those accounts for reading
And to get this data, frontend or other program calls the view function of this program
I have a cron app and this calls the solana program to store data every 1 hour or in specific interval
Correct.  Anything otherwise would introduce non-determinism into execution
Btw, is this solution works then?
Thank you in advance for your reply
I see. so that's why I asked about the oracle
Oh, you want to call OUT from a program to off chain? The short answer, and I'm open to reprimand from the core developers, is no.
Can I do http request inside solana program?
and want to call this api inside solana program
like I have an data provider through rest api
but calling the api from offchain
Well, not that one actually
Prg A calls Prg B?
Do you mean cross-program invocation?
Is there any oracle existing in solana network?
Thank you for your reply,  Well, I mean inside solana program to call the other apis
you can call from Rust or JS
You call a program by submitting a transaction which includes the instruction identifier that you want the program to execute
Can anybody help with this please?
Hmm, I still see the bad relocations, digging deeper
Should be it
Also change
https://github.com/Mystiik/MyField-Solana/blob/main/src/program-c/src/program/constant.h#L4
for
`#define ACCOUNT_CHARACTER_COUNTER {.x = {0x4E, 0x2F, 0x5C, 0x61, 0x0A, 0x8D, 0x0A, 0x7C, 0xA8, 0x7F, 0xAB, 0x69, 0xAB, 0x03, 0x7B, 0x0D, 0x52, 0x4C, 0x53, 0xE4, 0xA9, 0x97, 0xE8, 0x0E, 0xA8, 0x5A, 0x48, 0x8B, 0x96, 0xB8, 0xF1, 0x53}};`
After making that change I still see the bad relocations
The account cannot be changed at all, check out the runtime policy: https://docs.solana.com/developing/programming-model/runtime#policy
I would guess that you can't change data for that account. does this affect only data accounts ? or in case of regular account you can't transfer sol ?
up
Thank you in advance
Hi, how can I call third party api in solana program? I am new to solana
Well i found the pb:
At https://github.com/Mystiik/MyField-Solana/blob/main/src/program-c/src/program/1_character_counter_increment.c#L18
ACCOUNT_CHARACTER_COUNTER, is taken from constant.h.

Apparently this cause the error and transform the line in:
`const SolPubkey account_character_counter = ACCOUNT_CHARACTER_COUNTER;
  sol_assert(SolPubkey_same(account0->key, &account_character_counter));`
solved the ELF error
I'm able to recreate it, not sure yet why but the resulting ELF is using relocations we don't support.  In fact all the relocations it contains we don't support.  I'll take a look at 1_character_counter_increment
I'm not sure what your code is trying to do, but the simple answer is create your account at a different address, which isn't in use
<@453347985628200960> <@213083996689661953> so whats the solution for it?
Also it says in the log "already in use"
what does ``is_writable`` mean ?
("0" being the first member of the enum)
Program's usually throw program specific errors, in this case it looks like the system program is throwing this error: https://github.com/solana-labs/solana/blob/f558b9b6bf88c1fc56dcf93a6c12231cb8eef66d/sdk/program/src/system_instruction.rs#L15


///////////////////////////////////////////////////////////////////////////////////////////////

Yes, the governing tokens are external, the governance program doesn't create them, It takes deposits of theses existing tokens which are then used as voting weight. Council tokens are optional, the difference is eplained here (Community and Councils governing tokens) https://github.com/solana-labs/solana-program-library/tree/master/governance#community-and-councils-governing-tokens
Is it possible to change ownership of staked SOL without unstaking it first? Any validator that breaks the rules also forfeits a number of staked SOL, so this means that the system allows for change of ownership. Basically, the owner of the staked SOL has authorized the system (or the staking manager) to forfeit ownership as part of the staking process.

This question is really about the possibility of staking SOL and using it as collateral to our Zero Interest protocol at the same time. We want to be able to change ownership in case of liquidation without unstaking, in order to keep the Solana system secure.
thank you.  i googled around but can't find solana hex seed.  Are there a list of Solana constants somewhere?
That's not web3's job.  Use `ed25519-hd-key`
is there a way to do HD wallet using the web3 library? I see we can do it from the command line (https://docs.solana.com/wallet-guide/paper-wallet#hierarchical-derivation) but was looking for a way to do it programatically.
Tyvm
Sebastian would be the best to answer, I don't see him on Discord right now. I'll ping him with a link to this thread
Any idea about this?
yes, `&rent.minimum_balance(Account::LEN)` should work
Something like Rent::get()?.minimum_balance(Account::LEN);
It is possible to calculate it with sysvar I believe
`spl-token::state::{Account}, Account:LEN ` - it is how you can get LEN of account data needed, but I guess there is no way to calculate rent_exempt balance inside the program. I know only the way to do it via rpc call: `let token_account_balance = rpc_client.get_minimum_balance_for_rent_exemption(Token::LEN)?;`. So you will need to init this account on the client and pass to your program inside instruction accounts.  At least this way is used by Solana team in token-lending program, for example.
Okay, Thanks a lot!!
<@!486834292895252489> Maybe length of https://docs.rs/spl-token/3.1.1/spl_token/state/struct.Account.html ?
According to the latest tweet of RenBTC, yes, https://twitter.com/renprotocol/status/1405543305069449217
(Oh and that's from solana_sdk actually)
It has create_account only in the tests.
Can we send and receive btc on solana blockchain?
Do solana have something like wrapped btc like ethereum?
the space size should be in spl-token constants somewhere. Also, I guess spl-token should have create_account instruction that uses system_instruction::create_account inside.
I suppose `lamports` would be enough for rent-exempt of `space`, but what size is `space`?
<@!486834292895252489> I'm looking into the spl-token crate now and it seems I need to use the system program to initialize the receiving account first. How am I supposed to figure out the `lamports` and `space` fields in that `system_instruction::create_account` function when it comes to spl tokens? Is it some constant?
there are 300tps
Yes. I'm sure
you sure that's true ? in the bsc they say the same need for 16 cores but that's bs
Specs are here. https://docs.solana.com/running-validator/validator-reqs
You cannot
okay that's still dev stuff... bro do you know if i can run a shitty node with a 1 core computer ? there are dudes that can mine bitcoin with 1995 gameboys so why not ?
https://github.com/solana-labs/token-list
my pull requests for my tokens only took like a week max. i know the token-list has grown a fair bit since then, but some have been waiting for weeks
which token list ? can we win something just by posting here ?
pull request
PR ?
and while it's not affecting me, personally, are you guys just collecting PRs for the token-list? 🤣
the -32005 RPC error is baffling to me
this is why i wanna run my own node 😄
```
https://api.devnet.solana.com/ 413 (Request Entity Too Large)
```
I am seeing this error from time to time when hitting the public RPC endpoint. Specifically the requests that I am making are to the `getMultipleAccounts` endpoint and I've broken the calls down to <=20 accounts per request

Any further suggestions around this?
hello, i have 2 questions :

1 - what is the minimum minimum hardware just to dl and update the blockchain ? i don't care about rewards, i just don't want my app to rely on apis and that'd hurt my wallet to rent a 24core aws overlord for that

2 - how do i convert the blockchain data into workable json ?

thanks 🙂
ah, no-entrypoint
Does anyone know how to verify signatures on chain With the secp256k1 program? Any examples?
How can I mitigate `error: the `#[global_allocator]` in this crate conflicts with global allocator in: spl_token`
I think you need to read https://docs.solana.com/developing/programming-model/calling-between-programs
Will do, thanks
is this correct?
use spl_token; and then spl_token::processor::Processor::process_burn for example?
and now how do I use it?
that did it, thank you!
You can't have multiple entrypoints
`spl-token = {version = "3.0.1", features = ["no-entrypoint"]}`
spl-token is not recognizable inside cargo.toml
First one, you can use the same functions in your program
just like that?
[dependencies]
borsh = "0.7.1"
borsh-derive = "0.8.1"
solana-program = "=1.6.6"
spl-token = "3.1.1"
thank you!
Import https://docs.rs/spl-token/3.1.1/spl_token/ on your Cargo.toml
Was that a yes for the first question or for the second one? 😄
You'll need to import spl token instructions from spl toke crate. You can find it in the same file
Yes
what do i need to import/use?
how can I call spl_token_burn then?
You have to use these methods. Tokens in solana are defined as tokens minted by the `spl_token` program
Can I just use this methods in my rust program? Or do I need to re-write them?
Ah, I see, yeah, we could have better messaging there.  If an read-only or executable's lamport balance changes the runtime will throw this error.  Double check any modifications to account lamport balances
Thanks
Yeah u64 would be somewhere 2e19,10billion into 8 would be 1e18 . Hopefully the maths is correct
and create my own methods
or do i need to copy paste whatever it's in there?
is this callable?
yes, you can implement the same functions as here inside your program. https://github.com/solana-labs/solana-program-library/blob/6d52b4a4256d1fa02ce1fd778b002ccdb679c5d9/token-lending/program/src/processor.rs#L1915
Sweet! Thanks 🙂
I will try and repeat my question, hope you don't mind. Is there any method to be called in rust for creating a token/minting tokens/burning tokens etc.? I couldn't find any interface for this...
```
   Program HsrcaTixtVWdh9CWaUoSEv233g1ZNaTQPXHui7WNPQeD invoke [1]
    Program 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin invoke [2]
    Program 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin consumed 5119 of 168232 compute units
    Program 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin success
    Program HsrcaTixtVWdh9CWaUoSEv233g1ZNaTQPXHui7WNPQeD consumed 200000 of 200000 compute units
    Program HsrcaTixtVWdh9CWaUoSEv233g1ZNaTQPXHui7WNPQeD failed: instruction modified data of a read-only account
```
Yeh, this is from the program logs
Sorry, you can do it even in a simpler way. You can 1) create new SPL Token account owned by Bob and 2)transfer tokens then. Here is an example of invoking this instructions in token-lending program: https://github.com/solana-labs/solana-program-library/blob/6d52b4a4256d1fa02ce1fd778b002ccdb679c5d9/token-lending/program/src/processor.rs#L352
2 & 3 done with invoke() and the Token program?
Have you looked at the program logs?
You'll need to create three instructions: 1) system program create account with balance needed for rent exempt specified 2) SPL Token create account instruction with bob's pubkey as an owner 3) SPL Token transferInstruction to transfer tokens from Alice to Bob.
Note that I want to call these methods from rust
in solana I can't find anything for this
in solidity these are fairly simple to call
are there any interfaces in solana for transfer/mint/burn methods?
hey guys
In a program
In Rust inside a program, or in client's Rust code?
<@!486834292895252489> And in Rust, transferring tokens is done by copying the Account's data and adding/subtracting the balance/amount?
Alice can create an SPL token account owned by Bob via `createAccount(owner: BobPubkey)` and transfer tokens to it
hey, I want to make a merchant and banking service for everyday use to be implemented in somalia, anybody interested?
For an on-chain program, what's the correct sequence of transferring N amount of SPL tokens from one account to another?
a) Alice wants to send 10 FooTokens to Bob, Bob just being some address without an actual Token account
b) Alice wants to send 10 FooTokens to Bob, but wants to place the tokens in an escrow account, allowing Bob to "withdraw" from escrow.
it makes debugging kind of pain when you can't figure out what account isn't marked as writable
that's too bad
I don't think `InstructionError` can carry data
`    Program cBdzS93evriXhJkaQBEdPdU3aHzyWjuuqi3T4CyFzU4 failed: instruction modified data of a read-only account`
Would be useful to know the relevant accounts for these types of errors too. There's probably a bunch of error types where this pops up, an account is correctly signer or marked at writable and causes an error
you've saved me from a ton of headaches, thank you!
No.  Only the runtime can create accounts.  New account addresses must be specified in the transaction like any others
Yes thanks but this is a data bridge. I meant the ability to send tokens, like AR into a lending protocol earn yield and then come back into arweave.
<@!585868308419444749> thank you. btw, while you're here, could you tell me, is it possible to create new accounts inside a program and assign the program as its owner? i'm getting confused about it
But yeah, second code block here. https://docs.solana.com/developing/on-chain-programs/developing-rust#program-entrypoint
i'm trying to experiment via unit tests e.g. ```        
        let mut program_test = ProgramTest::new(
            "solana_acme_bank",
            program_id,
            processor!(process_instruction),
        );
```
It's not _incorrect_.  I have no idea what your caller looks like
so this is correct? ```pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
...
```
Hi - question about consensus - if leader includes tx with not enough fees, is the block simply invalid?
The type is correct, the variable name is just out of sync
I'd ask solong people
10B @ decimals=8 should fit in a u64 🤔
Each bip32 path component is a u32, ed25519 requires hardened paths though, so we only get 31bits => ~2B accounts per level.  bip39 supports something like 1B levels for some reason, but most of our tooling uses bip44, restricting to four levels, the lowest two reserved
in the examples i see mostly &[AccountInfo], could you point me to the latest samples on which i should base my research?
`accounts` in the sig should be `keyed_accounts`, or  vice versa
If anyone is in the UAE ( Dubai) and wants to work/learn/develop on solona, reach out to me
Fixed, nevermind
how can i check which data accounts ths program owns via explorer?
https://explorer.solana.com/tx/JAYq5Zm6qZmFXZBsDWyPfJxCQjVaJLH5u68ei57CFdQvmyDfnELq3jmBtJhsFprJkAF5Hhguc52iVxbJUXFsPKk
here is deployed program
https://explorer.solana.com/address/GEGaBhrJRoPpr4cYgETytgH3dLvfniBZoxtZZmXYJTXL
seems like something is broken on mainnet i get 429 error but all transactions are sccesful
Hello everyone, I'm messing around with the hello-world, when I modify the hello_world.ts file on vstudio and save, and then npm run start again, my changes do not take effect
Minting 10billion token with 8places is throwing Assert failed error on solong wallet.Is it related to SPL token program?
wat do?
how can i check deployment error log? all i get is my IP is doing too many requetst 429 and losing 0.5 sol per failed deploy
And can i use HashMap? Like this : use std::collections::HashMap;
hi! i deployed a serum-dex program on my local cluster and some transactions fail with "custom program error" - i don't see those transactions via "solana logs" nor anything specific in the solana debug output. what is the proper way to debug that problem or to see more details on why transactions fail?
There is something mentioned in the documentation, but i am unable to understand how to use it:
getrandom = { version = "0.2.2", features = ["custom"] }
https://docs.solana.com/developing/on-chain-programs/developing-rust
good question
how did it cost you sol, if node refused you?
in a smart contract? impossible.
you've seen this? <#738359173405736980>
is there a conception for signing messages?
so i failed deploying to mainnet twice due to 429 too manyrequests error.. program deploys to local, devnet, testnet with no issues. what can i do before deploying to mainnet in order to stop losing money (0.50 SOL per failed deployment)?
Hey, I use and study this example .https://github.com/project-serum/anchor/blob/master/examples/lockup/tests/lockup.js
I have some trouble, How to use beneficiary to find member address? or any find beneficiary's member address method?

Thank you for time, Solana is great.
Issue here:
https://github.com/project-serum/anchor/issues/403
To clarify I would like to use lending pools starting from Arweave, either AR or custom token, gain yield on the pool in Solana and then bring back into Arweave.
Is there any bridge between Solana and Arweave. Either here or in development? Since so many projects need decentralized storage, even Solana uses it, it would seem like a valuable tool to have?
How to generate random number in solana?
cool man! thank you so much!
I think it is almost infinite
All the accounts? Hmm..
 I dont know the max number of accounts in  one seed..
yes yes you are right, my point was can i get like array of the pubkeys of the seed, correct me if I'm wrong:
1. this seed is related to some user
2. this user can generate many accounts as he wants
3. can i get all of these accounts with the seed without using index
AS u can see Pikachoo's code, and my code has **index parameter **in the function.
U can change the index and get many keypairs as u want.
Lol cool!!! and is there a way to get all of the pubkeys for single seed
In the sollet, changing network to **Testnet** from **MainNet ** doesn't  change  your wallet address.
I haven't test. 
I think it will be return same secret key if mnemonic or seed isn't changed.
is derive path different for testnet and mainnet or is the same `m/44'/501'/2'/0'`
I think that code doesn't matter. Just check transactionId is invalid signature.
I think my code has many things to improve. 
If u can get seed from mnemonic, just use Pikachoo's answer.
If not, use mine 🙂
`    const fee = await connection.getTransaction(transactionId);
    const cost = fee?.meta?.fee;
    console.log("cost: " + cost);`

this gives me undefined.
yes and thank you so much, my bad to think mnemonic === seed
yes good we have examples 🙂 i'll take a look at both
lol same code pasted at the same time
U should generate seed from mnemonic phrase first.
I made same function using **bip39 **and  **ed25519-hd-key ** library

How bout try this ?
```
const solanaWeb3 = require('@solana/web3.js');
const ed25519 = require('ed25519-hd-key');
const bip39 = require('bip39');

class test {
    static async mnemonicToSeed(mnemonic) {
      if (!bip39.validateMnemonic(mnemonic)) {
        throw new Error('Invalid seed words');
      }

      const seed = await bip39.mnemonicToSeed(mnemonic);
  
      return Buffer.from(seed).toString('hex');
    }

    static async getKeyPairFromMnemonic(mnemonic, index) {
      const originalSeed = await this.mnemonicToSeed(mnemonic);
      const bufferedSeed = await Buffer.from(originalSeed, 'hex');
  
      const derivedSeed = ed25519.derivePath(`m/44'/501'/${index}'/0'`, bufferedSeed).key;
      const newKeyPair = solanaWeb3.Keypair.fromSeed(derivedSeed);
  
      return newKeyPair;
    }  
}
```
To do a mnemonic to account I do
```
import { Account } from "@solana/web3.js";
import { derivePath } from "ed25519-hd-key";
import nacl from "tweetnacl";

export function getAccountFromSeed(
    seed,
    walletIndex
): Account {
    const path44Change = `m/44'/501'/${walletIndex}'/0'`;
    const derivedSeed = derivePath(path44Change, seed).key;
    
    return new Account(nacl.sign.keyPair.fromSeed(derivedSeed).secretKey);
}
```
oh wow I was thinking the mnemonic is the seed
"Generate a keypair from a 32 byte seed."
this seed isn't the mnemonic phrase
this is not the way

the length of seed which i provide is 69 but i see it needs to be 32, any idea why is this happening
hey, I'm trying to `Keypair.fromSeed(seed)`, I have the 12 words mnemonic and I use them as 
`const seed = Buffer.from(mnemonic)`,
and then i do
`Keypair.fromSeed(seed)`
but it says bad seed size, any idea how to generate key pair when having 12 words
Hi guys, how do Smart Contracts on Solana look like? Is there a similarity with verified smart contracts on Ethereum?
And everything is congested just a couple of minutes ago
It's alright now.
chunk-2a953288.14238590.js:1 WebSocket is already in CLOSING or CLOSED state.
with of course some load issues sometimes
Define break, I have been using it and it seems alright
Is it because I'm in an isolated part of the Internet? Or is it normal for testnet?
It's been always loading and everything ends up with error. WSS breaks every 10 sec
It's nightmare for developers.
Hi I'm wondering if the devnet and testnet is already dead
how does keyed_accounts become what it is, is it derived from `accounts`?
```fn transfer_one_token_from_escrow(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
) -> ProgramResult {
    // User supplies the destination
    let alice_pubkey = keyed_accounts[1].unsigned_key();

    // Deterministically derive the escrow pubkey.
    let escrow_pubkey = create_program_address(&[&["escrow"]], program_id);

    // Create the transfer instruction
    let instruction = token_instruction::transfer(&escrow_pubkey, &alice_pubkey, 1);

    // The runtime deterministically derives the key from the currently
    // executing program ID and the supplied keywords.
    // If the derived address matches a key marked as signed in the instruction
    // then that key is accepted as signed.
    invoke_signed(&instruction, accounts, &[&["escrow"]])
}```
there's a slight confusion in the documentation: https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
https://github.com/solana-labs/solana/blob/master/web3.js/src/connection.ts#L3594-L3636 this guy is doing the reconnect, maybe there is an edge case where it doesn't anyway too much code in the way to guess, a functional test is required

Edit: Ok https://github.com/solana-labs/solana/pull/18037 should settle it
ok there is no test guaranteeing that 
https://github.com/solana-labs/solana/blob/master/web3.js/test/websocket.test.ts
Does this https://github.com/solana-labs/solana/pull/12093
Mean that we are protected against the race and on top of that the websocket is reopened once a subscription is made?
What is your app?
The Graph is really cool
Yes 🙂 We are working plenty with graphQL too
Hey there! You mean to provide analytical functionality right? Am tidying up a graphQL webapp here
Hi! I parsed curveParameters from a ConstantPrice pool and it looks like the price is an integer without the tokens decimals in contrast to the other amounts that have to be interpreted as BN amounts (integer that also represents fractions)  

Can someone clarify?

Pool: AdsB59Xz1AzSm7h7ZChBYe1rG18irJSyHXhrSw4oYwC6
We are building a chain-agnostic defi data platform and would love to be able to query Solana via getBlock. Would be great if you can pressure them a bit! I'm doing that, but you got bigger guns 🦾
Hey are you guys in contact with https://getblock.io/nodes ?

They are a node-as-a-service provider and have ETH, BSC, POLY, BTC ++++, but still lacking Solana
for the governance program (https://github.com/solana-labs/solana-program-library/tree/master/governance) is it possible to use existing token mints as the voting token?

it would also be good to define what a community token mint is, and what a council token mint is here https://github.com/solana-labs/solana-program-library/tree/master/governance#realm-account

when i read "community token mint" i think of existing token mints that may be created outside of, or before the governance program was released
Is there an easy way to understand how much more efficient a native program would be to a bpf program that is Jit compiled to x86? 

I’m just wondering if some execution efficiency is lost in translation (in terms of microsecs to execute instruction)
No that has nothing to do with Serum.  It's an ancient demo program
Hi, could I check if `programs/exchange` is deprecated or still a native program that is ready for use? Is it in fact used by the Serum DEX, or not? If so, does it make the DEX more efficient somehow? Does this mean that calls to the Serum DEX has CPI depth at least 2?

Edit: weirdly enough, its not in the explorer. So I guess its not deployed.
Hello everyone is there an api to get the past transactions from a program-owned account?
All it did is bump the solana crates to a version of `solana-client` that has an exponential backoff on 429
<@!585868308419444749> can you please let me know what the changes are in v2.0.12 about the 429 error?
How would you do this with a PDA since afaik it is not a SecretKey <:PES_SusThink:672161498080215050>
you need to provide secret and public key in `myAccount` variable, or just generate a new keypair by `const myAccount = Keypair.generate()` (add `Keypair` to an import from solana/web3.js).  You'll need some SOL on this new Account, so make an airdrop by `solana airdrop <MyAccount Public key>` via solana cli or  by `await connection.requestAirdrop(myAddress, AMOUNT);`
You can use bignumber.js when working with Decimals
https://github.com/solana-labs/solana-program-library/blob/master/token-lending/program/src/math/decimal.rs
is there a javascript port of the decimal module in the lending program?
the transaction limit of 1232 bytes makes this real estate precious... maybe i'm miss-understanding, but for a block (if we know upfront what accounts are marked writable) arn't ALL accounts not in that set readable for the block?
Is there an alternative?
I need the ed25519dalek
what should i do if i get https://docs.rs/getrandom/#unsupported-targets\
So far, I'm wondering how to use the createMint method from the JS SDK spl-token library. I don't know if I'm going in the right direction but there seems to be a lack of documentation: 

`import { Signer, Connection, PublicKey } from "@solana/web3.js";
import { Token, TOKEN_PROGRAM_ID } from "@solana/spl-token";

const myAccount: Signer = { publicKey: new PublicKey("usb://ledger"), secretKey: };

const connection = new Connection(
  "https://api.devnet.solana.com",
  "singleGossip"
);

// ...
// <Some logs to be sure connection established and proper account used>
// ...

const token = await Token.createMint(
  connection,
  myAccount,
  myAccount.publicKey,
  null,
  8,
  TOKEN_PROGRAM_ID
);`
Guys, I am trying to Mint an NFT using Metaplex by following instructions on https://www.notion.so/Metaplex-Developer-Guide-afefbc19841744c28587ab948a08cfac
it works with this setup
as you can see connection uses single gossip commitment, and also subscription to websocket same
example:
`  const connection = useMemo(
    () => new Connection(network, "singleGossip"),
    [network]
  );`

`  useEffect(() => {
    if (selectedWallet) {
      // changes on game account data
      connection.onAccountChange(
        new PublicKey(configData.gameAccountPublicKey),
        (acc) => {
          if (acc) {
            console.log("checking confirmed");
            getNewGameState();
          }
        },
        "singleGossip"
      );
    }
  }, [selectedWallet]);`
connection object has to have same commitment as whatever else you are using for instance rpc or wss
ok. finnaly made it after whole day.


///////////////////////////////////////////////////////////////////////////////////////////////

Not really sure why honestly.  It looks like a JS bundling problem or dynamic typing. I suggest building the code back up again from a reduced version that actually works.
```(node:68923) UnhandledPromiseRejectionWarning: TypeError: Found non-callable @@iterator
```
<@!445425471027544095> can you check my error ? :))
here's the hello world of the transfer code i'm currently using:
```const token = new token3.Token(
    connection,
    TOKEN_ID,
    TOKEN_PROGRAM_ID,
    payerAccount,
)
token.transfer(
    new web3.PublicKey("FJjr68PHdPNeYAZw13q1QSi5RpBQb6Jte2G3RTn6eQbH"),
    new web3.PublicKey("4Q7Z9px9NsnuakUbXaCB1UAtWKE5ikBS7FokahnexkWC"),     
    payerAccount,                                                           
    [payerAccount],                                                         
    10000000,                                                               
);
```
I don't think we have a JS "hello-world" example of using the memo program.  This has come up before though, try reading the discussion around here: https://discord.com/channels/428295358100013066/517163444747894795/847635343981019206
or with  https://www.npmjs.com/package/@solana/spl-token
thank you <@!445425471027544095>.  i'm trying to wrap my head around how to use it.  is there a hello world type example of it?  the memo program is good but im trying to figure out how to integrate it into the token transfer process (https://spl.solana.com/token#example-transferring-tokens-to-another-user).
isn't this the correct way ? :))
<@!585868308419444749> ```    const connection = new Connection("https://api.devnet.solana.com")```
I dunno anything about JS, but probably some problem with how `connection` is instantiated
```js
    const createTransaction = SystemProgram.createAccount({
        fromPubkey: owner.publicKey,
        newAccountPubkey: uploadAccount.publicKey,
        lamports: rentExemption,
        space: numBytes,
        programId: programId,
    })

    const transaction2 = new Transaction().add(createTransaction)

    await sendAndConfirmTransaction(
        'createAccount',
        connection,
        transaction2,
        owner,
        uploadAccount,
        {
            confirmations: 1,
            skipPreflight: true,
        },
    )```
Anyone know why ?
(node:68458) UnhandledPromiseRejectionWarning: TypeError: connection.sendTransaction is not a function
yep, https://spl.solana.com/memo
is there a way to add a short message/memo when transfer SOL or tokens to allow the sender to say why they are transferring them to the receiver?
ok!
Always `master` (the default).  Our release process is:
1. Everything lands on the `master` branch
2. If appropriate, we'll backport to release branches such as v1.7 or v1.6
Hi, I was chatting to mvines yesterday and he suggested I add a function to solana and submit pull request. I'm ok with the code part I think, but I'm a git useless. I'm running 1.6.10 of solana. Whats a good branch to checkout please ?
hope it will be reached correctly by anchor on windows
okay I'll run it on WSL
Neither of the validator bins are supported on Windows.  You can use WSL (or fix them for us! 🙏)
https://i.imgur.com/cKZ24eH.png
I just tried reinstalling 1.7.2 using the solana-install thing from the docs
and the command doesn't work of course
the executable isn't in the bin folder, it's not a path issue
the solana-test-validator executable doesn't seem to be included in my solana dev tools install
Since that command sends a bunch of different TX, I'm not sure which one that is to go hunting up the instruction error code
You should be able to see them if you set `RUST_LOG=info,solana_client=debug`
ill come back once i know which piece of program is causeing a issue
didn't know i can recover this nice.
since i understand. i will try to remove pieces of code and get lamports from this intermediarey programs aka not losing money
ok now i know what i can do
can i check logs for this : `Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1`
`To resume a deploy, pass the recovered keypair as
the [PROGRAM_ADDRESS_SIGNER] argument to `solana deploy` or
as the [BUFFER_SIGNER] to `solana program deploy` or `solana write-buffer'.
Or to recover the account's lamports, pass it as the
[BUFFER_ACCOUNT_ADDRESS] argument to `solana program close`.
===========================================================================
Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1`
What's the full output? (redact the seed phrase)
so now i am wondering, how to debug of  why the deployment failed, are there any logs anywhere?

trent it failed deploy via CLI also, so i get this to resume deployment... not sure whats the point of resuming when i don't even know why it fails in the first place..
thank you
Not many of the data structures have a high-level description due to their implementation being in flux
There's an architectural overview here. https://docs.solana.com/cluster/overview
I have similar questions. How does Solana VM work? What is the architecture? What is the anatomy of a block? etc. I can't find any documentation on this kind of stuff. Any ideas?
maybe a dumb question and I guess anyone here can answer. what is stored in a block? For ethereum, it contains state root, tx root, etc. I am not sure about solana
thanks trent. i'll be back.
Aside from needing the deploy to have completed successfully first 🙂
You would have to write your own CLI.  There's no reason to do that though.  Deploy is totally independent of interacting with a program
thank you lemme try. i already burnt 2 solana with failed deployments, worked on all other environments. and once i use cli's `solana deploy` i will then have to still use web3.js to attach data account to the program that i want to use, can't do that via CLI yeah?
If the wallet you want to use is a keypair file, then yes a path
is that SIGNER path to keypair or some seed or mnemonic or?
Default wallet is set with `solana config set --keypair SIGNER`, where SIGNER is some wallet spec
yes i will use CLI, not web3.js, quit, finish. forget about it.
So you're abandoning whatever happened with your web3.js deploys, right?
so all in all i just want to be be able to deploy with solana deploy wihtout putting path to keypair that will be used as payer. how do i do that, aka config default payer keypair under ubuntu?
Ok that should have the 429 handling
`solana --version
solana-cli 1.7.1 (src:cd6e1d92; feat:3097519246)`
jk
Lol
`solana --version
solana-cli latest (src:cd6e1d92; feat:3097519246)`
Latest is not a version
Please stay on one line of thought.  I really don't have time to follow a schizophrenic around ATM 😅
i will use CLI as you said web3.js is unrelieable
even when i recover via mnemonic into /id.json
So you're not trying to resume a web3.js deploy?
so i guess i have to give a keypair path, can't do without it
That will  use the upgradeable loader
is the command then i get `Recover the intermediate account's ephemeral keypair file with
`solana-keygen recover` and the following 12-word seed phrase:
=====================================================================
drop vacuum gaze retire pig barrel cigar dignity oval drip label mask
=====================================================================
To resume a deploy, pass the recovered keypair as
the [PROGRAM_ADDRESS_SIGNER] argument to `solana deploy` or
as the [BUFFER_SIGNER] to `solana program deploy` or `solana write-buffer'.
Or to recover the account's lamports, pass it as the
[BUFFER_ACCOUNT_ADDRESS] argument to `solana program close`.`
`solana program deploy /home/amel/playground/solana-game/./programsimple/dist/world_of_warcraft_solana.so`
😄
i have no idea what that is
You're using the upgradeable loader?
where i have funds. how to set main keypair so i don't have to always include it in path
yes i have my keypair
Buffer account?
"main account"?
how do i set my main account for deployment via CLI? it's constantly complaining to recover intermediate account
Not with web3, AFAIK
ok but is there a way to get more log of what could be wrong while deploying? as tehere is no way to debug
Uhm... AFAIK the web3.js load method is unreliable.  Can you use the CLI instead?
There's some effort toward providing an RPC endpoint that's deploy-optimized, with a reduced method set and increased rate-limits
"@solana/web3.js": "^1.15.0",
lemme check what's the latest version of that if it matters
but i am using web3.js to load program
i have latest cli
erm
What version are your CLI tools?  More recent ones should be respecting the 429s, though there's a possibility they still need more tuning to handle blockhash expiration in the face of rate limiting.
okay thank you so much ^#^
hi, any coder that can tell if this syntax is correct ? (javascript/jsx/react) https://i.imgur.com/7xPFCMm.jpg
"...this"
Hi all,
I want to be notified when SOL sent from someone to my wallet address.
I'm trying to do it with `onAccountChange()` in solana web3.
Like this
```
const connection = new Connection('https://api.devnet.solana.com', 'confirmed');
connection.onAccountChange(myPublicKey, async (accountInfo, context) => {
  const block = await connection.getBlock(context.slot);
  ...
}, 'confirmed');
```
But i got this error at a fairly high frequency at getBlock()
```
Error: failed to get confirmed block: Block not available for slot 63117065
```
Why this error occurs? Could you help me please?
then i don't think you're passing in a proper token account address
mhm resp["result"]["value"]["data"][0] is an empty string for me
i'll try a push and update to make this easier soon....
here is an example:
<https://github.com/michaelhly/solana-py/blob/9f22fbb1403b8de4ef713dd73e3c6e2f73cbda0c/tests/integration/test_token_client.py#L73>
yeah this is currently not exposed well, but you can just use this layout: <https://github.com/michaelhly/solana-py/blob/500f089a8cdc6245db84077a48486ef45fa62235/spl/token/_layouts.py#L85>
you have an example how to deserialize?
thank you!!
and deserialize the data..
for now you have to use https://michaelhly.github.io/solana-py/api.html#solana.rpc.api.Client.get_account_info <@!689907714524315786>
what is the difference between a 1.0 and 2.0 Token account..
hmm i actually don't know what a `v2.0 Token account` is
https://github.com/michaelhly/solana-py/issues/75

probably a bit too impatient haha
ah. could you create an issue on github?
Hi all,
I am trying to use this python wrapper (https://github.com/michaelhly/solana-py) to query information about my solana wallet using the endpoint
"https://solana-api.projectserum.com"

The response when querying the account balance is:
{'jsonrpc': '2.0',
'error': {'code': -32602,
'message': 'Invalid param: not a v2.0 Token account'},
'id': 20}

What is my mistake here?
cargo build runs without error
getting this error when runnig cargo-bpf
```error[E0432]: unresolved import `std::panic::catch_unwind`
```
How do you handle migrations?
Lets say that I added a field to my accounts of my program called `is_archived` of type `bool` what do you do with the old accounts that didn't have this field?
thanks, i will check it out
you'll need an oracle, like chainlink.
was there any issue found?
I see that https://swap.projectserum.com/ has been deprecated
is https://github.com/solana-labs/solana-program-library/tree/master/token-swap safe to use?
Hey all, may be a dumb question, but how would I go about getting offchain data to use in a smart contract? For example, a smart contract executing some instructions based on the outcome of an esports game?
I'm still working on it and have yet to mark it as a "Template". All disclaimers apply 🙂
It does make sense. While still a WIP I am creating a template for CLI replete with sample program that manages account data for the executing program:  https://github.com/hashblock/solana-cli-program-template

It was inspired by <@445425471027544095> CLI template: https://github.com/mvines/solana-cli-template
Hi guys. I am trying to use serum client JS swap API and I am testing on devnet. Is there any restriction to test swap approach on devnet ? seems like the serum client JS swap API uses mainnet addresses. Thanks
btw, could please point me to a decent example of how to manage account's state inside the program? maybe some simple example?
does it make any sense what i'm saying?
now i see that the program is just the business logic, and i have to feed it existing accounts, and it's supposed to work with some 3rd party runtime that manages these accounts externally, and via instruction calls
as to the 3rd. i'm pretty sure it is my misperception of the program, because initially i thought that all the logic should be boxed into the program, and let it create and dispose of the accounts it uses
so in addition to the `payer`, i create 2 accounts in the test and set the program_id as its owner, then i pass these accounts along with the instruction and the program is successfully debiting and crediting funds
```    #[tokio::test]
    async fn test_open_account() -> Result<(), ProgramError> {
        solana_logger::setup();

        let program_id = program_id();
        let customer_account = Keypair::new();
        let bank_account = Pubkey::new_unique();

        let mut program_test = ProgramTest::new(
            "solana_acme_bank",
            program_id,
            processor!(process_instruction),
        );

        // customer account
        program_test.add_account(
            customer_account.pubkey(),
            Account {
                lamports: 100000,
                owner: program_id,
                ..Account::default()
            },
        );

        // allocated bank account
        program_test.add_account(
            bank_account,
            Account {
                lamports: 100000,
                owner: program_id,
                ..Account::default()
            },
        );

        let (mut banks_client, payer, recent_blockhash) = program_test.start().await;

        let mut tx = Transaction::new_with_payer(
            &[instruction::open_account(
                &customer_account.pubkey(),
                &bank_account,
                5000,
            )],
            Some(&payer.pubkey()),
        );

        tx.sign(&[&payer, &customer_account], recent_blockhash);
        banks_client.process_transaction(tx).await.unwrap();

        Ok(())
    }
```
at least some progress
i've just made this to work
1. If the account is the default loaded from solana config... yes. In testing I use this to fund other wallets however... Just FYI
2. It should work, yes
3. Not sure... try it and enlighten us 🙂
is it possible to make program eligible to withdraw funds from some wallet (not owned by the program) and transfer funds to some owned account?
for example, use `payer` obtained from ProgramTest as a base wallet, then add 2 accounts owned by the program, credit first account by the payer wallet, pass both and let the program transfer funds between these 2 accounts?
1. does the account returned by ProgramTest qualifies as the default wallet you mention?
2. if i want to allow the program to debit one account and credit another, do i have to make 2 dedicated accounts for that specifically?
So, your code is a bit tough to follow here but my MO is to:
1. Create a wallet account with enough lamports to fund... (for testing, I transfer lamports from the default wallet found in solana config)
2. An account owned by the program - it is this/these accounts that the program read/writes lamports to and the transaction is signed by the account in step 1
the program length is 43904 . is that too large for mainnet?
is it currently possible to have multiple accounts sign an instruction via `invoke_signed`
anyone?
anatoly, bartosz?
someone from the team could give some suggestion?
the only solution for me now is to remove pieces of program, piece by piece and see and try to deploy until it works, but that costs shit tons of money as even empty program takes 0.3 SOL to deploy..
what would be the efficient debuging for deployment on mainnet? are there any docs of limitation of program size etc on mainnet, or can i read some in depth logs which would give more info than 429 too many requests when deploying to mainnet? i tried to deploy empty lib.rs with msg only and it deployed to mainnet, so I guess something is not ok with the size of my program on mainnet (deploys without issues on local, devnet, testnet). i am using latest solana sdk for rust, 1.7.1 . I really need to deploy this to mainnet. strugling few days now, the error doesn't help at all. program byte length: 43904
the payer is sent as a signer, and also signs the transaction but the program is still unable to spend its lamports
how to make a program transfer X amount to this `bank_account`?
oh nope, i still get the ExternalAccountLamportSpend but that is another story
i've wasted 2 days to find a workaround, thanks a lot!
you know, in the test environment there could be a warning if the added account is empty and gets instapurged
thanks
```                lamports: 1000000,
``` and it passed, holy moly
A few things: The `bank_account` needs lamports to exist
```        banks_client.process_transaction(tx).await.unwrap();
```
<@456226577798135808>  What is at `src/processor.rs:145:5`?
what am i horribly missing?
and the instruction in use: ```pub fn open_account(
    customer_account: &Pubkey,
    bank_account: &Pubkey,
    initial_deposit: u64,
) -> Instruction {
    Instruction::new_with_bincode(
        program_id(),
        &BankInstruction::OpenAccount(initial_deposit),
        vec![
            AccountMeta::new(*customer_account, true),
            AccountMeta::new(*bank_account, false),
        ],
    )
}```
these two lines are taken from the examples: ```            // Withdraw five lamports from the source
            **payer_account.try_borrow_mut_lamports()? -= initial_deposit;

            // Deposit five lamports into the destination
            **bank_account.try_borrow_mut_lamports()? += initial_deposit;```
sorry for the spam
```    Finished test [unoptimized + debuginfo] target(s) in 0.09s
     Running unittests (target/debug/deps/bpf_acme_bank-54670ca8570efe38)
[2021-06-18T09:16:54.985722277Z INFO  solana_program_test] "solana_acme_bank" program loaded as native code
program_id = AcmeBank11111111111111111111111111111111111
initial_deposit = 1000
payer_account = AccountInfo { key: 8Tu6xPMKu3sHfzQ41JPWLhvBX75bzpZSFZLdWGhd2fvd owner: 11111111111111111111111111111111 is_signer: true is_writable: true executable: false rent_epoch: 0 lamports: 999999999995000 data.len: 0  }
bank_account = AccountInfo { key: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM owner: 11111111111111111111111111111111 is_signer: false is_writable: true executable: false rent_epoch: 0 lamports: 0 data.len: 0  }

called `Result::unwrap()` on an `Err` value: TransactionError(InstructionError(0, ExternalAccountLamportSpend))
thread 'processor::test::test_create_account' panicked at 'called `Result::unwrap()` on an `Err` value: TransactionError(InstructionError(0, ExternalAccountLamportSpend))', src/processor.rs:145:5```
```entrypoint!(process_instruction);
pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    solana_logger::setup();
    let account_info_iter = &mut accounts.iter();

    match bincode::deserialize::<BankInstruction>(instruction_data).unwrap() {
        BankInstruction::OpenAccount(initial_deposit) => {
            let payer_account = next_account_info(account_info_iter)?;
            let bank_account = next_account_info(account_info_iter)?;

            if !payer_account.is_signer {
                return Err(ProgramError::MissingRequiredSignature);
            }

            eprintln!("program_id = {:#?}", program_id);
            eprintln!("initial_deposit = {:#?}", initial_deposit);
            eprintln!("payer_account = {:#?}", payer_account);
            eprintln!("bank_account = {:#?}", bank_account);

            // if *bank_account.owner != program_id() {
            //     return Err(ProgramError::IncorrectProgramId);
            // }

            // Withdraw five lamports from the source
            **payer_account.try_borrow_mut_lamports()? -= initial_deposit;

            // Deposit five lamports into the destination
            **bank_account.try_borrow_mut_lamports()? += initial_deposit;

            // BankProcessor::process_open_account(payer_account, bank_account, initial_deposit)?
        }
        BankInstruction::CloseAccount => {}
        BankInstruction::Deposit(_amount) => {}
        BankInstruction::Withdraw(_amount) => {}
        BankInstruction::Transfer(_amount) => {}
    }

    Ok(())
}```
in the processor function i print the received data and both accounts are seemed to be owned by the system program
```    #[tokio::test]
    async fn test_open_account() -> Result<(), ProgramError> {
        solana_logger::setup();

        let program_id = program_id();
        let bank_account = Pubkey::new_unique();

        let mut program_test = ProgramTest::new(
            "solana_acme_bank",
            program_id,
            processor!(process_instruction),
        );

        // allocated bank account
        program_test.add_account(
            bank_account,
            Account {
                lamports: 0,
                owner: program_id,
                ..Account::default()
            },
        );

        let (mut banks_client, payer, recent_blockhash) = program_test.start().await;

        let mut tx = Transaction::new_with_payer(
            &[instruction::open_account(
                &payer.pubkey(),
                &bank_account,
                1000,
            )],
            Some(&payer.pubkey()),
        );

        tx.sign(&[&payer], recent_blockhash);
        banks_client.process_transaction(tx).await.unwrap();

        Ok(())
    }
```
hey, could you help me resolve something. i'm trying to process an instruction e.g. OpenAccount(initial_deposit), via unit test, that sends 2 accounts: [payer, bank_account], i'm trying to debit the payer and transfer that amount to the other account. i'm stuck with the ExternalAccountLamportSpend and i can't set an owner of this second account (bank_account) to the program_id
Thanks for the explanation, very clear !
in solidity for example there is the "msg" variable or the "block" which are available everywhere
are there any global variables in solana that hold information about the SOL blockchain?
Hey, a program can execute actions only via instructions, it can't watch for System program accounts and react to its changes. You can implement a transfer instruction inside your program which will do the same as SystemProgram.transfer plus your actions. But every account that wants to send SOL to your program account will have to use this transfer instruction.

Another way to get the same result is an offchain bot that will watch the state of your program SOL account and invoke instructions when it changes.
only the spl-token which is command line and doesn't really help
i'm having the same question... it's difficult to create a ERC20 token like by smart contract in solana. No documentation whatsoever...
Hey ! I'm trying to create a program that performs actions when receiving some SOL. I tried to send some SOL to the program account via a transfer but the program on-chain isn't invoked when his account receives some SOL. How can I manage to do this ?
sure, will review tomorrow
Thanks!!
Correct.  https://docs.solana.com/cluster/rpc-endpoints#mainnet-beta
means both https://api.mainnet-beta.solana.com and https://solana-api.projectserum.com are same networks?
if you want to deploy to mainnet, yes
Can we deploy our program on https://solana-api.projectserum.com this network too?
how can i fix price for my spl token.
The feature proposal program contains an example of how new SPL Tokens can be minted from another program: https://github.com/solana-labs/solana-program-library/blob/master/feature-proposal/program/src/processor.rs#L115
this is through cli.. right.. how can i create it by smart-contract.
Cool.  So until ERC20, you don't need to provide an implementation for SPL Token. Instead you can use the implementation that's already deployed: https://spl.solana.com/token#example-creating-your-own-fungible-token
is there any other way..
I want to make erc-20 like token using rust language in solana
Is there a reason you can't use the SPL Token that's already deployed on mainnet at `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`?
Hi. I am trying to make spl token using rust language. I had successfully completed the build and compile things. I had also got an program id.  now how can i get token address and how can i run it. Is there any script for this. If yes please mention.. it will be very helpful..
thanks
well I guess thats my sign to wrap up for the day
Dunno RPCPool runs it for us now
its possible i got banned
how long does the ip ban last?
i tried both
503 was for devnet
Shouldn't be returning 503 _and_ timing out though 🤔
Maybe you got IP banned?
connection timed out
35.233.150.183:9900
https://api.devnet.solana.com is fine though
no dice
i tried with api.devnet as well
I get 503 hitting https://devnet.solana.com
You still running the old endpoint?
503 service unvailable
I get rpc errors
strange
Yes.
```
$ solana -ud airdrop 1
Requesting airdrop of 1 SOL

Signature: 2PZBV2rhhbyPNLzkmUAPfffnTL1mnsWtrM9betp273eEQ83odnDcZCGFg9r43XYWUVEDQrSQw8BMe1ydGRbXKR1u
```
Is the devnet airdrop functioning?
Okay, Thanks!!
It's well optimized though.  You can't write crap code and expect us to make the chain faster for you
Serum's event queues are 1MB, they do fine
If anyone else know about it please explain
Or we can do something so that we don't need to fetch data each time for every program
Sorry I don't have time to sit around speculating
As solana programs are stateless, so for my DEX isn't it inefficient to fetch and then pack data for every program call, for my add order, cancel or execute order?
<@585868308419444749> if I make a DEX and for every add, cancel or execute order it will need to fetch 100KB of orderbook data and then it will do some computations on that orderbook data, so in this case TPS is much less than 65k, and if per second my DEX is making 1k request to my DEX program, than most probably solana will not be able to handle that. How to solve this problem?
Yes
Means solana will support more TPS in future?
Better than a quarter of the engineering team is fully dedicated to optimization
Then we'll continue optimizing
<@585868308419444749> what will happen if someone make a DEX on solana and it will request or need more than 65k TPS?
oh
https://docs.solana.com/developing/programming-model/transactions the is the concept of message account array here, which suggest it will but not clearly states
Go get a drink. https://github.com/solana-labs/solana/blob/9abfa65920b1c34c01e17f19ffbcad6e96b0c002/sdk/program/src/message.rs#L89
_Up to_ 65k TPS.  The benchmark was run with system transfers
When you pass more than once an account meta to the transaction it gets smartly serialized once and indexed, is that right?
<@585868308419444749> any thoughts on this
thanks, yes i did serialized_size on tx
i stupidly sent you the wrong link
This one https://github.com/solana-labs/solana/blob/9abfa65920b1c34c01e17f19ffbcad6e96b0c002/sdk/src/transaction.rs#L706
Is that right that MTU is 1500 bytes and that transaction should fit in that MTU, there isn't any other overhead than the transaction itself?
https://github.com/solana-labs/solana/blob/9abfa65920b1c34c01e17f19ffbcad6e96b0c002/sdk/src/transaction.rs#L683
Is this the size I should be looking at? `serialized_size(&tx)`
<@563035598743535646> any thoughts on this
Currently solana can process around 65k tps, what does that mean? Isn't transaction per second change if my transactions are using more computing and more data fetch from accounts?
<@224643918539653120> hello, sorry to bother you but can you go check my PR on GitHub Solana ecosystem repository please
ah thanks i didnt see that part. tyvm
was wondering if this is the expected output for the web3 library
the CLI interface gives back the expected result `spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM`  when called twice
when i call `token.createAccount` twice my understanding is that it should return the same address.  however in the above code snippet i get back two different addresses.
```const token = new token3.Token(
    connection,
    TOKEN_ID,        
    TOKEN_PROGRAM_ID,
    payerAccount,
);

(async() => {
    let token_account_1 = await token.createAccount(
        address_keypair.publicKey,
    );
    console.log('newAccount_1', token_account_1.toBase58());

    let token_account_2 = await token.createAccount(
        address_keypair.publicKey,
    );
    console.log('newAccount_2', token_account_2.toBase58());
})();```
got it. thank you v much!
Ah got it.  So a couple options.  You could create a Github Issue at https://github.com/solana-labs/solana to request the feature and maybe we'll add it sometime soon when somebody has time.  If you can't wait for that, you can write it yourself and send a Github Pull Request (PR) for the implementation.  The code is fully open source and anybody can contribute
wanted the link to add a feature request
i prob misunderstood PR. thought it was like  feature request
There's no PR for this currently.  Sorry maybe I don't quite understand what you're asking for?
but thanks for response. hmm... this is actually big use case for me right now: subscribe to an account changes from rust rpc. Lazy.. do you have the PR link please ?? thanks!
ok... i run it all local so that might work. But im confident it wont 🤪
medium mess 🙂
From your Rust project, you could clone the main solana repo in a parallel directory and then use this script [1] in your Rust project to point at your local clone of the main solana repo.  Then edit away.  

[1] https://github.com/solana-labs/solana-program-library/blob/master/patch.crates-io.sh
as someone who hasnt forked it before, but can see the pattern for subscriptions at a high level
ok. thanks! if i wanted a workaround short term how much of a mess will i get in to if i attempt to fork and impl myself pls?
Sending a PR to add an implementation for it would be graciously accepted 🙂
It should be mostly a copy/paste from the other subscription implementations
thanks mvines. any workaround?
I think we're missing account subscriptions from the Rust pubsub client currently
i have tried, various ways, honest
to simplify: can i subsribe to account changes from a rust client?
Allright, thanks
I don't know of a program that currently does this for SPL Tokens so you'd need to write your own
Thanks. But this is only for the token vesting. What we want to do is to allow user to stake and lock their tokens for some amount of time and receive some APY in return. Something similar to Ferrum Network on Ethereum, if you are familiar with that.
This may only be partially related, but here's a community built vesting program for SPL Tokens described at https://spl.solana.com/token#token-vesting-contract
Hello guys, I just started programming on Solana with my team. We already minted our tokens, so the next step would be to create some kind of staking opportunity for our community to allow them to stake these tokens while we are developing. Do you have some kind of guide on how to do that? Thanks a lot.
not the owner
is there a way to get the creator of a certain token ?
Yes using cross-program invocations to the loader.  But, you will want to populate the buffer account with program data separately.  Aka, side load the program data and then within a program you can upgrade/finalize the program.
the account I want to subscribe to is the bids/asks in serum dex so I can dynamically start listening to orderbook updates when a new order for a new market is placed
any help greatly appreciated, thanks!
as far as I can tell
in the pubsub_client.rs Rust file  there is only logs_subscribe and slot_subscribe and signature_subscribe
eg https://docs.solana.com/developing/clients/jsonrpc-api#accountsubscribe
but log subscribe is not sufficent (I think) is there a way to subscribe to an account, in the same way there is in the javascript RPC client?
I have used PubsubClient to subscribe with ```PubsubClient::logs_subscribe(```
in my rust server I want to dynamically subscribe to all changes to an account.
Hi all, hope everyone is still well!
Thanks a lot!!
They should be equivalent. All differences are listed here https://docs.solana.com/clusters
<@486834292895252489> is there any speed difference on devnet and main network? Or my program takes same time to run on both the networks
Thank Uhh
I guess yes, should be the same config. I've just checked SOL transfer transactions, they have the same fees
What is the Solana's hexSeed constant used for keypairs? I'm using ed25519-hd-key to generate addresses (https://github.com/alepop/ed25519-hd-key) based on the question above.  I googled around a bunch for the hexSeed for Solana but nothing is coming up.
<@!486834292895252489> <@!585868308419444749> any thoughts on this?
Is there js documentation about Wallet Integration ?
https://explorer.solana.com/address/kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6
What is kin spl?
Is there any difference on transaction fees between solana devnet network and main network if I do same transaction on both networks?
for the naming service: how do you know that a certain class pubkey is for twitter-handles vs domain name vs any other class?
"the creation of new classes is permissionless" - how do you create a class? is it just a new keypair the class administrator creates?


///////////////////////////////////////////////////////////////////////////////////////////////

Thank you for your service
update:
Program addresses (obtained via `create_program_address`) must fall off the curve so that no valid private key exists.  The seeds and program id you provided must result in a point on the curve.  You can modify the seeds or use `try_find_program_address` which will find a "bump seed" that when added to your seeds/program id will result in a valid off-curve address.
Ahah noted !
There's only one _staked_ validator on devnet.  There are several RPC nodes to handle all you apes beating on it 🙂
As the devnet is only one validatoor if i understood correctly
I'm gonna give RPCPool guys access to <#749059399875690557> so they can announce in the future
Ohw alright ! Just to be sure, as their is many validator on testnet and mainnet, this kind of latency can't exist ?
Secrets 🤫
Ah cool, thanks for that.  Where would I check that for next time?
<@!693486673606082580> <@!239813934360690690> <@!584788446443208704> <@!539801435571748868> looks like the devnet RPC backends were being upgraded is all
Hi guys. What function can be used to get signatures in json rpc api? 
I am going to sign the transaction before 'sendTransaction'
I think I fixed it haha one second. Once I removed the "wallet" from the signers it went through. Seems like it is all good now.
ah, that's good to know. How are you using multiple signers? AFAIK sol-wallet-adapter only supports one signer at a time
Sure:

Using nuxt-js/vue, phantom wallet in the browser.
"@project-serum/anchor": "^0.9.0",
"@project-serum/borsh": "^0.1.0",
"@project-serum/serum": "^0.13.24",
 "@project-serum/sol-wallet-adapter": "^0.2.4",
    "@solana/web3.js": "^1.18.0",


It seems to be an issue with multiple signers?
Right now we are using Ethereum Besu, and was worried there wasn’t an equivalent for Solana
Thanks ser, I am trying to convince my company to use Solana for our blockchain projects
can you provide more context around your JS dev env? which bundler are you using? is this in the browser?
you can reset the ledger with this option too
Yup, it persists to disk
```
$ solana-test-validator --help
solana-test-validator 1.6.11 (src:0e3131f2; feat:1082270801)

    -r, --reset         Reset the ledger to genesis if it exists. By default the validator will resume an existing
                        ledger (if present)
```
Anyone have the fix for this? I see it has been discussed before:
Translating error TypeError: unexpected type, use Uint8Array
Does it save state too?
Yes, it runs locally. You can host it if you want too
merhaba türk var mı arkadaşlar
Is this running on local? Can it be hosted so it can accept external connections?
Yes, you can use `solana-test-validator`
Is there a way to spin up a private Solana chain for development?
Both of those are synchronous functions so I think it should be safe
Wasn't expecting that
Wow testnet has 10x more tps than devnet 😮
as the problem gone i havent tried
The problem was only on devnet or on testnet too ?
Hello, I am not sure if this is the right place for this. Let me know if it isn't.
I am attempting to setup a validator node on Linux. I am going through the steps outlined on https://docs.solana.com/cli/transfer-tokens and I am a little confused.

I am having trouble with the "Send and Receive Tokens" step. 

It looks like the pubkey generated from the seed phrase does not match the actual pubkey I have for the same seed phrase.

As a test I did this:

>solana-keygen new --no-outfile
Generating a new keypair

For added security, enter a BIP39 passphrase

NOTE! This passphrase improves security of the recovery seed phrase NOT the
keypair file itself, which is stored as insecure plain text

BIP39 Passphrase (empty for none):

===========================================================================
pubkey: 487saBJuNdXdYi8w6AHwZ1S2zt4GE8MNRqcsWu3pAgPC
===========================================================================
Save this seed phrase and your BIP39 passphrase to recover your new keypair:
tomorrow earn medal island report hat twin ceiling steak lonely satoshi wet
===========================================================================


Then when I did this:
solana-keygen verify 487saBJuNdXdYi8w6AHwZ1S2zt4GE8MNRqcsWu3pAgPC prompt://

and entered the seed phrase from above, I get this message:
Verification for public key: 487saBJuNdXdYi8w6AHwZ1S2zt4GE8MNRqcsWu3pAgPC: Failed


I first noticed this when trying the  transfer command: 
solana transfer --from prompt:// FSWmEJDBgVBnmFn74RHSJrbWr9qtdYeWrvQFmwSzVbdB 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com/ --fee-payer prompt://


using the seed phrase from the wallet that I know has SOL (on devnet), it kept coming back with a different public key saying that there were insufficient funds.
hey guys, when I call Pubkey::create_program_address(), I have the following error: 
```
Program log: panicked at 'called `Result::unwrap()` on an `Err` value: InvalidSeeds', src/processor.rs:69:80
```

the error is pretty explicit, that being said, is there a rule for seeds ? a required length or something that is needed for it to work ?
works now, thanks!
Thank You 🤝
<@!239813934360690690> <@!693486673606082580> nodes look overwhelmed then 😕
that would be *a lot* of additional traffic into the servers
I have to fix that up, should be done in the next couple of days
hi. While i am trying to install spl-stake-pool through "cargo install spl-stake-pool-cli" i am getting this error. Is anyone having idea about this error
yea

Same now
getting another error now: Subscription refused. Node subscription limit reached
hey, I was on the old anchor binary, updated and it works, thanks for the follow up
why using a websocket when we could send a transaction then check it's status like every 5-20ms ?
sounds like the websockets might be acting up on devnet if airdrop / CLI is working quickly, but `sendAndConfirm` is slow, maybe <@!804350183105363980> will have an idea when he's around
i'm using 1.18 as well
just updated my solanaweb3 librairie to 1.18 (from 1.14),  still 30sec waiting time for sendAndConfirm function
not sendAndConfirm.. tho
I can confirm, airdrop is working lighting fast
I wonder if there's something off with the websocket side to get confirmations 🤔
weird, transfers and all that are working extremely quickly for me
yeah, same with me:

` Error: Transaction was not confirmed in 60.01 seconds. It is unknown if it succeeded or failed. Check signature 3xRCcad5Ctzd7evuwDFm7aAJsX8MrxE7vRi2SrYktuC9YCt9VT1bYSE8FZHsLEgf5jC55m6RSrSybqhJtVLeJhJv using the Solana Explorer or CLI tools.
`
they succeded on api.devnet tho

here are my last 2 tries
for example
UypH8GYpJckHoFdqpBVGVbLvrvvW23gHtDpCP3kkCGDU4cvRyZ66kgpmWPPKFnq2jjJTVCV8mef6bzpruhxuwLF
very strange... do you have any signatures that we can check?
that was perfectly working yesterday, nothing as changed in my side since
yep
Hm, are you connecting to https://api.devnet.solana.com as pikachoo recommended?
Still taking > 30s for me, im using solanaweb3 and im sending a transaction to a program
If you deployed the program, you haven't created a token, but rather deployed a separate token program, which we don't typically recommend since it won't be interoperable with other tokens.  You can check out https://spl.solana.com/token#example-creating-your-own-fungible-token for how to create your own token on the existing token program
<@!693486673606082580> <@!584788446443208704> <@!239813934360690690> I just tried an airdrop and it confirmed really quickly, have you tried recently? the node may have stabilized
Hi there, what have you been trying?  Note that if you just want to create your own token, you shouldn't redeploy the spl token program, and instead create a mint on the existing spl token program
Hey! I had took the code from solan-program-library from github, and got program id after deploying on devnet, What should I do now? How can I check my token address?
thanks
update web3js or whatever you are using that uses the old endpoint
api.devnet.solana.com
Error: RPC request error: cluster version query failed: HTTP status server error (503 Service Unavailable) for url (https://devnet.solana.com/)
i think so ye
hi, is there an issue with the devnet at the moment?
Same
Hi guys, do you receive this issue when trying to execute sendAndConfirmTransaction()

`
Error: Transaction was not confirmed in 60.00 seconds. It is unknown if it succeeded or failed. Check signature 5XXMxMsnnU8i9oWAQT36NDDGneEoD8xtH5r7SBiaikmqfec8c2ErjdVmBtVLPFSH5UE7ozjmh6BL9YVJL5XGvSqe using the Solana Explorer or CLI tools.
`
Hi. I am trying to deploy spl token using rust language program, and i am getting confused. Can any one explain what is the process to do that?
<@!466984915376799748> https://github.com/solana-labs/break/blob/master/server/src/tpu_proxy.ts#L152 should we not potentially mutate the array we are iterating on L91?
Maybe L91 should be `this.sockets.slice().forEach`
Anyway, it's a minor point. I think I'll focus more on my usecases / my language rather than worrying about how things are done in Rust; at least in this case. Thanks for the explanation.
Depends on how the array is defined. In my case it'll be statically sized, e.g. an AccountInfo accounts[5], so the compiler can catch it.
The latter also panics if the array is too small, rather than  returning an error.  Which is the whole point of the helper
I want to introduce something like `next_keyed_account` to my C++ SDK. Ideally I'd like to keep things as similar as possible and at least in C++ I see no difference between next_account() and account[2]. The latter is easy to get wrong (e.g. in a copy/paste error) during maintenance.
It's not about the first time, it's about maintenance
I know that. My question is: why would it be easier to keep the indexes correct when accessing the accounts, than to keep the order correct? Is there anything the Rust compiler helps with?
if you dont want to deal with that kind of validation and checking you can use anchor, it abstracts most of that away
you should be providing your accounts in a certain order and verifying that they are correct.
Hmm, well perhaps it's my lack of Rust-knowledge, but couldn't you just as easily get the index wrong?
Relying on the call ordering is a footgun.   So the new interface takes the index as well
Guaranteed wave function collapse
why was `next_keyed_account` deprecated: https://github.com/solana-labs/solana/blob/3a4176aa3eb0461d59bcbb8b9c94a8d033e6c002/sdk/src/keyed_account.rs#L211 ?
thanks
found it, just stupidity. As soon as I make my stupidity public, i find my mistake
ah okay that makes sense
They all work on a tuple... `(Pubkey, Account).into_account_info()`
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L339-L344
I am confused with process_set_authority,
I have a token account, the owner is signing the transaction to do a AccountOwner change, the new owner is someone else, but it fails with `NotEnoughSigners`
i was able to do:

```rust
        let (lamports, data, owner, executable, rent_epoch) = serum_market_account.get();
        let serum_market = AccountInfo::new(
            &liq_data.leveraged_farm_account.serum_market, false, false, lamports, data, owner, executable, rent_epoch,
        );
```

but importing the trait should add a method that does does this for you though right?
right, theres the `get` method but its not clear how to go from that to an `AccountInfo` type, and importing the traits doesn't seem to add any methods to `Account` which allow for the conversion
None of the signatures take only an `Account` as input
how would I use this? 

if `serum_market_account` is type `Account` this doesnt work:

`serum_market_account.into_account_info();`


as it just gives me this error:

```
no method named `into_account_info` found for struct `solana_sdk::account::Account` in the current scope
method not found in `solana_sdk::account::Account`
```

I've imported that trait with

`use solana_sdk::account_info::IntoAccountInfo;`
1. How do I create a transaction as per usual? In the `transaction.ts` - https://github.com/solana-labs/solana-web3.js/blob/ce5b8b6/src/transaction.ts#L169, there are four params for `TransactionCtorFields`. But I searched the document and cannot find info for feePayer, etc.
3. Can I use the `sign` method in the Transaction class to sign the serialized message buffer mentioned in step 2?
Several. https://docs.rs/solana-sdk/1.7.3/solana_sdk/account_info/trait.IntoAccountInfo.html
so im attempting to query programs using the rpc client, and some of the program functions that deserialize data expect `AccountInfo` types, however the rpc client method `get_account` does appear to return an `AccountInfo` type, just an `Account` type, is there anyway to convert this into an `AccountInfo` type
<@!585868308419444749> Thank you. That was it.
Sounds like you need to specify a larger `--limit-ledger-size`.  By default it only keeps a few minutes worth of ledger history
No, the fee is determined exclusively by the blockhash that the transaction is signed with
the test validator by default only keeps history for a couple minutes, so that’s maybe why the transaction aren’t showing up
hi guys, can we set manually fee of the transaction, when composing transaction?
Ah, got it.  So yes, you can run a local  explorer aimed the RPC url of the solana-test-validator.  Since the url is http://localhost:8899, it can’t be used from https://explorer.Solana.com directly
Thanks for the reply. I am using a local network created using `solana-test-validator `. Unrelated question - do we have a UI like `explorer.solana.com` for local network?
Not sure what’s going on.  Do you see the transactions show up in explorer.solana.com for the network you’re using? (probably devnet)
no i want to  create stable coin for another currency
Yep.  USDC and USDT are already enabled
can i create stable coin on solana?
Please just ask your question, and somebody will hopefully be able to answer it
I am running the `example-helloworld` code and have sent "hello" to the `greetedAddress` a few times. Now I am trying to fetch a list of all those transactions. But `const signatures = await connection.getConfirmedSignaturesForAddress2(greetedPubkey);` returns an empty array. Any ideas?
anybody help me?
😉😁👍
Glad you got over the hurdle regardless
Possible 😉
No I didn't change anything. But I guess I wasn't clear when I first asked
* Create a transaction as per usual
* Get the serialized message buffer with https://solana-labs.github.io/solana-web3.js/classes/transaction.html#serializemessage
* Gather offline signatures however you like
* Attach them to the transaction with https://solana-labs.github.io/solana-web3.js/classes/transaction.html#addsignature
Got it.  Yes that's allowed.  Sounds like you changed your data ownership since first asking the question?
Hello, a noob question here: how do I sign a transaction offline using javascript? Skim through the doc and cannot find it.
I want this to be atomic operation and hence I am invoking A inside B to ensure B fails if A fails
isn't it same as calling A directly to modify the account data?
Not directly. B can issue an instruction to A which will modify the account data owned by A. In my case, the signer required to issue instructions to A and B are same and hence it works - I think this is acceptable behaviour no?
Program B should never be able to modify accounts owned by Program A though
I don't think it's a security issue. I looked into cross-program invocation documentation and it clearly says you can do this. https://docs.solana.com/developing/programming-model/calling-between-programs
I'm currently working on a project for fun and I would like to know if anyone wants to collaborate with me on it, (if you want to DM me). My project uses React.js and I aim to add Solana to it.
https://docs.solana.com/offline-signing#commands-supporting-offline-signing Does this mean deploy cannot be done with multisig directly from solana cli?
That's very helpful, I appreciate it! I've been struggling a bit to figure out which pieces of this app should be on-chain and which should be handled by the client.
It seems to me like the client might want to create the associated token account and use it instead of some random token account.  An on-chain program probably wouldn't care about the exact token account address that's used, instead the token account authorities are what it'd be interested in.  But maybe I'm lacking imagination and missing a use case 🙂
hmm, not sure why you'd need to call `get_associated_token_address()` on-chain actually.
Ok, so I should be handling that in the client. What is an example when you would ever use the `get_associated_token_address` function on-chain then?
The transaction creator should provide the required account inputs for `create_associated_token_account`.  You can't create an `AccountInfo` from thin air within a program, they are always passed in from the runtime to your program entrypoint based on the accounts provided by the user
Are there any examples for how to create an associated token account on-chain? 

What I'm doing:
```rust
        let create_associated_account_ix = create_associated_token_account(
            initializer.key,
            initializer.key,
            &event_info.mint_account
        );

        let associated_token_address = get_associated_token_address(initializer.key, &event_info.mint_account);

        invoke(
            &create_associated_account_ix,
            &[
                initializer.clone(),
                associated_token_address.into_account_info(),
                initializer.clone(),
                &event_info.mint_account,
                SYSTEM_ID,
                TOKEN_ID,
                rent,
            ]
        );
```

The problem is that `associated_token_address` is a `Pubkey` and I'm not sure how to turn that into an `AccountInfo`type. I know I can construct a new `AccountInfo` with https://docs.rs/solana-program/1.7.3/solana_program/account_info/struct.AccountInfo.html#method.new but am not sure what to put for `lamports` and `rent_epoch`.
The docs explain the parameters. See the constructor section. Data serialization depends on the api defined by the program you're interacting with.
Can anyone share what the keys and data params for transaction instructions on web3 api should look like? I'm working from https://solana-labs.github.io/solana-web3.js/classes/transactioninstruction.html and the parameter examples are non-existent
how to deserialize in js ?
I have a struct. And getting the data using getAccountInfo
nvm, got it figured it out
When deploying with `solana program deploy dist/program/helloworld.so` i'm getting `Error: RPC request error: cluster version query failed: HTTP status server error (503 Service Unavailable) for url (https://devnet.solana.com/)` error.
<@!832663576325128282> i dont have an answer for you but you might want to take a look at this project - https://github.com/paul-schaaf/spl-token-ui


///////////////////////////////////////////////////////////////////////////////////////////////

and if it fails... what's the alternative for printing some debug information inside the tests?
<@!445425471027544095> do you also know why putting a simple line like "msg!("{}", "teststring")" here https://github.com/solana-labs/example-helloworld/blob/master/src/program-rust/tests/lib.rs#L46 makes the test fail with "thread 'test_helloworld' panicked at 'Invoke context not set!'," ?
been struggling all day to find out why
thank you a lot for this
pfuuu, at least now I know why it keeps failing
Like I said, the implementation of that function uses global data
<@832663576325128282> - generally assume your program is executing on a CPU with no operating system.
is pubkey::new_unique() considered global data?
Nope, but there are alternatives:
- time: use the Clock sysvar
- all addresses should be passed into the program by the caller
then it's not clear what is allowed and what's not
so there is no way of calling SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(); or Pubkey::new_unique?
Can’t get at the system time either, that would be non-deterministic since it would vary across all validators that execute your program
hmmm
The implementation of that function uses global data.  Programs cannot use global data
introducing something like "SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs();" also makes it fail
i'm trying to wrap my head around it, but can't understand why it keeps failing
does anyone know why introducing a simple line like "Pubkey::new_unique()" inside https://github.com/solana-labs/example-helloworld/blob/master/src/program-rust/src/lib.rs#L22 will make the program fail?
thank you!
<@!832663576325128282> So there are two locations (I should really generalize to a separate file shared betwen CLI and Program) that map the memory space. One in `src/utils/account_state.rs` (used by CLI and integration test) and the other in `program/src/account_state.rs`. They should match layouts.
our program which expects the clock sysvar to be mutable, a mistake on our part, has suddenly started failing now
like until today it used to be fine but now it always gets sent as readable only
yea so from the frontend we try to send the clock sysvar as mutable
but it doesnt seem to work
Are you seeing unexpected behavior?
did something change with the solana runtime recently related to the clock sysvar?
So if you are going to change that in the program you also need to change it here: https://github.com/hashblock/solana-cli-program-template/blob/main/tests/common/mod.rs#L60 and here https://github.com/hashblock/solana-cli-program-template/blob/844bce473f5a0e30fc9a77d910491b19f57ad769/src/main.rs#L44
<@!832663576325128282> Accounts can be created with up to 10 Mb of storage, just remember that storage has a cost in rent. You can use `solana rent XXXX` from the command line, where `XXXX` is number of bytes you are allocating, to get the rent costs.
thanks for the reply. What's the maximum number that i can use here? https://github.com/hashblock/solana-cli-program-template/blob/main/program/src/account_state.rs#L20
hi, is there an example of how to calculate time based on epoch/block etc? Say an event is happening and I record it in an account, how can I calculate later on how many minutes have passed?
If there is anyone up in here that is comfortable with babylon js / other 3D web programming tools that thinks they might be down to get involved in a metaplex/solana/arweave project pretty please drop me a dm⛏️
An arbitrary size for demonstration only.
<@!814228493302497301> hey, how did you come up with 1019 here? https://github.com/hashblock/solana-cli-program-template/blob/main/program/src/account_state.rs#L18
We need Experienced Solana developer for new dApp
Hello
Thx for answer. I will try much more.
The token owner must be a funded system account and specified as the fee-payer to reduce the signature count
thanks anyway
instruction had writable, rather than isWritable for some
noooo... major typo... do'h
indexes 6 & 7     len = 9...   so no
Is it the last account in the `&[AccountInfo]` structure in the program that is not writeable?
any help appreciated!
Hi, I have a wierd one I'm struggling with. I have a transaction I send to my own program. When I debug the JS instruction I can see all the keys have been marked as writable... however when I read the account_info in my program some of them are not writable.  Sound familiar to anyone ?
In the transfering token from A to B, can C pay only 0.000005 SOL for the transaction?
I tried this but C pay 0.00001 SOL (0.000005 * 2).
This is my try. https://explorer.solana.com/tx/2mqEcAmyCNJiWkPvuE9Tjvs8QcYbKWRvVd9ncNzdfPcQRk7vBR4Lpd9qhaFeckMcBT33vQ3bZk2ifHdRSjysD2q1

I want a result like this.
```
There are A, B, C. A has only Token, but doesn't have SOL.

1. A transfer Token to B without paying transaction fee.
2. C pay for the transaction fee (0.000005 SOL).
```
Can I reduce it to 0.000005 SOL?
I don't know if all your `type::` structs are going to 1 account's data or .... ?
But I hear 'ya on the documentation aspect of it. We got there through trial/error and analyzing the sample program library
My interpretation is the functions are called with a reference to the accounts data array... how you store or what you store is up to you.
but it's hard to understand how to properly implement pack_into_slice and unpack_from_slice without some explanations in the code or some documentation to explain what you need to achieve there
yes, i saw
and the required functions when implementing the `Pack` trait are demonstrated in `account_state.rs` in the template repo
well, 'how' to use is exemplified in the process functions (Initialize, Mint, Transfer, Burn) in the template repo. To use it for your program's account data you have to `impl Pack for XXXX` (in your case whatever structure you want to store in state)
#[derive(BorshSerialize, BorshDeserialize, PartialEq, Debug)]
pub struct FutureContract {
  pub locked_token_contract_address: Pubkey, // the contract address of the token that's going to be locked in the future
  pub future_expiration: u16, // when is the future set to expire (in days)
  pub future_creation_date: u64, // creation date of the future as a unix timestamp
  pub future_contract_address: Pubkey // the contract address of the future
}

#[derive(BorshSerialize, BorshDeserialize, PartialEq, Debug)]
pub struct DataAccount {
  // locked token contract address to all its associated futures
  pub tokens: BTreeMap<Pubkey, Vec<Pubkey>>,
  // future contract address to future contract data
  pub futures: BTreeMap<Pubkey, FutureContract>
}
for a struct that looks like DataAccount, i don't really know how to implement pack_into_slice and unpack_from_slice methods
and is there any official documentation on https://docs.rs/solana-program/1.6.4/solana_program/program_pack/index.html and examples on how to use it?
I saw somewhere that the solana guys have a `try_from_slice_unchecked` or something like that which does not require the extra 4 bytes in my example.
I structured the example by simplifying what we have in our program
So, it is really simple if you look at it this way:
1. Program account state (an accounts data) is a linear array of bytes. The `array_ref` stuff "chunks" up portions of that data into blocks that are significant to the program and can now be addressed by their respective offsets in the linear array
2. Special note on the BTreeMap area... the leading 4 bytes is to store the resulting `try_to_vec` so when unpacking, Borsh doesn't throw an error.
did you copy these from somewhere/
Pack/Unpack look really friendly to use, however their implementation is pretty scarry: https://github.com/hashblock/solana-cli-program-template/blob/main/program/src/account_state.rs#L66-L112
https://github.com/hashblock/solana-cli-program-template/blob/main/program/src/processor.rs#L97 is this basically saying: change account_data to be a serialization of account_state?
but the serialization part kills me
i'm ok with deseralization in processor, modifying the data
<@!814228493302497301> can i read somewhere how this serialization/deseralization in solana works?
it would be amazing
Maybe <@513742723111714817> or one of the other core developers may help when the arrive
but it's random
the test
are you refering to the test or the processor?
i can't see anything on L46
L46?
<@!832663576325128282> I am seeing that your `encoded_data` is being munged after you call L46 in the test
Is there a concept for signing messages - arbitrary data, similar like to ethereum
yep, i'm stumped as well
<@!832663576325128282> I'm stumped. I'm not as familiar with testing using `ProgramTest` as I am with `solana-test-validator`...
There is a limit to stack depth for BPF/on-chain programs
what does this mean?
running 1 test
[2021-06-24T10:33:02.069881000Z DEBUG solana_rbpf::vm] BPF instructions executed (interp): 4451
[2021-06-24T10:33:02.069944000Z DEBUG solana_rbpf::vm] Max frame depth reached: 16
test test_futurecontract ... FAILED
this is weird..
ex: let key = Pubkey::new_unique();  or SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs() fails, but let key = account.key.clone() succeds
actually something else seems to be the issue. Anytime you're doing some operations, it fails.
I think this might explain it ... does https://api.mainnet-beta.solana.com expose a subset of what is available via the JSON RPC API? https://discord.com/channels/428295358100013066/560503042458517505/814008087849074728
any data that needs to be stored bigger than u16 fails
it still fails
to make it simple, you can just put a simple:     let key = Pubkey::new_unique(); inside the processor
I have the same question as <@!106122813814890496> can anyone help with the location of Transaction > Message > AccountKeys should be returned from getConfirmedTransaction?

https://discord.com/channels/428295358100013066/517163444747894795/834871236261445653

https://discord.com/channels/428295358100013066/517163444747894795/835185980583051335

https://discord.com/channels/428295358100013066/517163444747894795/834863608722489355
thank you!
I am bringing it down locally to check... 1 sec
this will fail
here: https://github.com/ctindogaru/solana-example/blob/master/src/program-rust/tests/lib.rs#L56
inside the processor is fine
it's inside the test where it doesn't work
Also, I don't see a `msg!` in your `process` function. If you temporarily comment out L37 and L44 and just add a `msg!` as the first instruction does it work for `msg!`?
at least this is what it looks like it
test fails because of the msg line in the test and also because of       future_creation_date: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs()
in the processor
L37
the test fails even with that line commented
i don't get it...
so, in your processor you are trying to deserialize data into a struct from the account state which was not initialized to hold anything as you have commented it out. https://github.com/ctindogaru/solana-example/blob/master/src/program-rust/src/processor.rs#L37
If you are sending the serialized `DataAccount` as part of the transaction, that would be in the `input: &[u8]`
the program is fairly simple
thank you for looking into it
because there are 2 different issue: the msg! one inside the tests and also the struct being to big (although it only has a u64 member)
but as soon as you uncomment them, it won't work anymore
and it will work
and also https://github.com/ctindogaru/solana-example/blob/master/src/program-rust/src/processor.rs#L44-L47
you need to comment this line https://github.com/ctindogaru/solana-example/blob/master/src/program-rust/tests/lib.rs#L56
https://github.com/ctindogaru/solana-example
one second
<@!832663576325128282> is your program on GitHub that can be looked at?
I doubt `u64` is an issue, there is something else going on
so that's why i'm thinking that the size is the rpoblem...
i've changed pub future_creation_date: u64 to pub future_creation_date: u16 or pub future_creation_date: String and it works
and it still doesn't work
now it's just #[derive(BorshSerialize, BorshDeserialize, PartialEq, Debug)]
pub struct DoingTestData {
  // pub locked_token_contract_address: Pubkey, // the contract address of the token that's going to be locked in the future
  // pub future_expiration: u16, // when is the future set to expire (in days)
  pub future_creation_date: u64, // creation date of the future as a unix timestamp
  // pub future_contract_address: Pubkey 
}
What does your `FutureContract` struct look like?
I just ran a test locally for an account that is allocated with 4 K for state storage and I'm using a BTreeMap with `msg!` littered throughout with no issue on 1.7.3 `solana-test-validator`.... something else seems fishy
the build is succesfull yes
1.7.3
Also, what version of Solana are you running?
the program doesn't support any data bigger than 1-2 bytes?
it fails
if i'm chaing the u16 to u64
So as far as the `msg` error, never seen that error. Some of the core developers jump on early and they may help direct you.
You can allocate up to 10 Mb per program owned account so what you've described above shouldn't be an issue:
Do you get a successful build if you go to the root of your program and do a `cargo build-bpf`?
if i skim the struct to just have one u16 field, it works
omg, i think this is the problem
i cannot see any other issues
is this more data that solana can handle?
but succeeds if i comment it
the test fails when i have this struct declaration
let new_future = types::FutureContract {
      locked_token_contract_address: Pubkey::new_unique(),
      future_expiration: 25,
      future_creation_date: 321,
      future_contract_address: Pubkey::new_unique()
    };
i'm trying to create a struct like this in my entrypoint
another question:
Just to be sure for 1b: 1,232 bytes is for both the data and any keys (signers, accounts, etc) you need in your program.
I don't have any experience yet with IPFS as there are no mature Rust client crates I've found that are available yet. For the short term we are just capturing the URI of the content in a string
For the question 4, it will depend on how you structure your program. If you, for example, are keeping dates and trending information in a single supporting account (like a registry) it would be fairly simple to interrogate that accounts data structure without even submitting a transaction
https://github.com/solana-labs/example-helloworld/blob/master/src/program-rust/tests/lib.rs this type of test
Should not have to, are you unit testing or doing a full test with either `solana-test-validator` or `devnet` or...?
do i need to do anything special to use msg!?
thank you so much!

1a: what do you define as an account - I single user/consumer of the product? If so I guess that's okay, it's hard to write 10MB of JSON content when it's just likes/comments/video entries
1b: I just tried to see how much unicode text exactly this would be, it's a lot. so this should also be acceptable
3a: thank you, it's easy to get lost, so appreciate you confirming that

A few more questions come to mind:

4: How is the read speed of solana e.g. "get latest 100 videos" or "get top 100 trending videos" - how would this be performed in solana? And how fast would it be to the end user?

5: do you think read/download speed first-time-to-byte of IPFS is fast enough? e.g. compared to viewing a video on YouTube?

Thanks again!!!
println! works just fine, but it doesn't output anything
msg! is the one causing the test to panic
yes
Does your test work if you comment out the `msg!`?
msg! doesn't seem to work
is there an alternative for msg! inside the tests?
this is the error: thread 'test_futurecontract' panicked at 'Invoke context not set!',
I am not able to.... i'm having:     msg!("{}", "test"); in the test and the compiler keeps panicking
Probably good if you understood a few constraints when planning for content in such an endeavor:
To your question number 1
a. Each account has a maximum of 10 Mb storage
b. Each transaction has a data transmit limit of 1232 bytes. There are examples of how this can be "chunked" up in pieces https://github.com/mcf-rocks/solana-upload
To your 2:
a. You mean for posting content versus consuming... or?
To your 3:
a. Sounds good but I am biased as we were looking at the same choice (IPFS/Filecoin) for content we want to manage off the Solana chain
Finally... Solana is certainly fast 🙂
Hey everyone - new here. I'm building a YouTube competitor that is built on Solana. I'm in the research phase ATM. Have a couple questions:

1) do you think solana is the best blockchain to use to store metadata (video title, desc, views, comments, likes)? I think so, but would appreciate your honest opinion.

2) how is the best way to remove/prohibit bad guys (terrorists/illegal content)? platform needs to be free but also still allow anyone to use it safely

3) I'm most likely to preprocess the MP4 inside the browser using WASM build of FFMPEG, then upload the outputs to IPFS. Is this the best method? Or is there other technologies/projects I should be looking at?

Overall the product experience needs to be as good or better than YT to be worthwhile so it's important it's fast. Look forward to hearing everyones thoughts! Thanks!
hey
quick (and possibly stupid) question: is it ok to use `RC<Type>`  in Solana development?
I want a result like this.
```
There are A, B, C. A has only Token, but doesn't have SOL.

1. A transfer Token to B without paying transaction fee.
2. C pay for the transaction fee (0.000005 SOL).
```
Is it possible?
In the transfering token from A to B, can C pay only **0.000005 SOL** for the transaction?
I tried this but C pay **0.00001 SOL** (0.000005 * 2). Can I reduce it to **0.000005 SOL**?
This is my try. https://explorer.solana.com/tx/2mqEcAmyCNJiWkPvuE9Tjvs8QcYbKWRvVd9ncNzdfPcQRk7vBR4Lpd9qhaFeckMcBT33vQ3bZk2ifHdRSjysD2q1
because yes, you can use msg! with `ProgramTest`
did you try to format different types? I think it does that if you format multiple types in one message
msg! doesn't work and the compiler panics..
can i use something from solana-program-test to display some messages when running the tests?
how can i print something inside a test?
Hello everyone!
market.placeOrder in serum
can I pass WalletAdapter instead of Account ?
ah makes sense
Not a super strong reason but we'd then need a different thing for macOS builds
Seems like the program wasn't deployed fully somehow, do you have an explorer link to the program account?
I understand, do you have any idea why after deploying program programatically, i can see BpfLoader return true, I'm trying to send instruction for creating system account to the newly deployed program but i get as a response:

`
 Error: failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions
`
it's created as convenience and used by `solana program deploy` if present.  It's optional though
what is the role of the program-keypair.json generated file after the build?
i think i've asked this before but cant remember what the response was. is there any particular reason solana validators dont use `io_uring` implementations like https://github.com/spacejam/rio or https://github.com/tokio-rs/io-uring ?
I am trying to find what is the best way to dig for a custom ProgramError code through getTransaction with a jsonParsed,
https://docs.solana.com/developing/clients/jsonrpc-api#inner-instructions-structure
When an error occurs, how to easily map to the error in meta.err TransactionError.
Is the process?:
- grab index of instruction causing error
- find instruction matching error index, take last inner instruction to find the programID => map to custom error
otherwise in a synchronous context callbacks would never fire
Mmmmh, can't the callback fire while the first function is still running?
great, thanks
the "Confirmed" in getConfirmedTransaction refers to the finalized commitment level, and not the confirmed commitment level.  This confusion is precisely why we want to rename that method to  `getTransaction`
Is is confirmed as in reached the provided level of commitment?
https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedtransaction i know this is being deprecated but what does that mean by confirmed? Because the commitment is an argument to this method
`rm` ?
is there any CLI command to remove current cli pubkey and delete it in general
Yes, but nothing that's written yet, can't really dive too deep into specifics. Going to think of workarounds. Thanks anyway
"user A does something that interacts with user B" this is a specific program isn't it?
in the account data of the user being notified, to allow easy query of notifications
How do you find this notification state?
ideally, I wanted only 1tx.
user A does something that interacts with user B
program processes instructions, then calls second program that would handle and store the notification state
later, user B logs in, and calls getAccountInfo(s), and retrieves the state of said notifications.

If I had access to tx hash, I could store that hash in the notification state account, and easily retrieve it
an example of that is the token program.
User send token, token program add amount to the destination token account, removes token from the source account
so if you have some sort of state, just use a state account that each tx writes to
program cannot read transactions, they only read accounts
Who is triggering tx #2 to read tx #1?
By offline I meant that it would all work on-chain.
User A does something on his account, user B does something else that interacts with user A, I'm trying to structure a way to be able to list/query these notifications between accounts. First thought was to create a secondary account to list and store tx hashes that are interactions. These interactions would be handled all by on-chain programs, so no need to execute a second tx to save the first tx hash
Hello , we are planning to do an ICO , our dapp will use to use Solana, how you suggest to do the ICO ? Can we raise money on ERC20 and than convert the tokens to Solana ? Need help
I don't get the offline part, if you save the hash when the tx is made, you have the tx
This seem backward, do you want this mechanism to work for a specific program?
I could achieve this indirectly with the account public key instead, but it seems wasteful (write account key -> getSignaturesForAddress -> getTransaction)
is there a way to get a callback when the balance of an address changes or when a transaction goes through? Sort of like `connection.onLogs` but for like `connection.onTransaction`?
Trying to structure a notification mechanism that would work offline, i.e. save the notification object (the transaction hash) in some account, and retrieve it later
Oo why would you do that? sending the transaction itself returns the hash
During the execution of a program instruction, is there any way to find the current instruction hash (first signature)? It would be handy, I could save it in some account data, and later retrieve it with a getAccountInfo followed by a getTransaction
I announced my hackathon saltiness, steaking.io has an honorable mention while they have nothing public yet and clearly state they would be proposing their own validators, also closed source. https://solstake.io is open source since day 1, open beta since day one and clearly built around fairly securing the blockchain by picking a validator given fair criterias, not our own validators...
Different kind of “seeds” are being used here.  In this case, you are passing “seed” values into the program for it to verify a program-derived address.  Those program inputs seem like they’re wrong, or the program itself has a bug. In either case there’s a mismatch between the program inputs and execution.  Hard to be more specific without more details though
What does FEC rate K:M in this article represent? https://docs.solana.com/cluster/turbine-block-propagation#calculating-the-required-fec-rate
Hey, I've got a question. I am working on some rust tests and I am getting this error `Program failed to complete: Could not create program address with signer seeds: Provided seeds do not result in a valid address`. The error message makes sense. Obviously my seeds are wrong. But here is my problem, I'm only using new keypairs in my test. It was my understanding that a new keypair doesn't have any seeds. Is that right?
hi guys, have you hit the following error:

`Error: failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions`

I'm deploying contract manually using bytecode, but right after the transaction for deploy is completed, I'm trying to broadcast 1 more transaction to the contract but receiving this ^^ output

If is deployed trough the CLI everything works fine, but i'll need to have it on the clientside and i'll need the bytecode for that part
Yes agree with you recording both values should solve the problem ... thanks a lot 👍
It's true that multiple sequential slots may have the same timestamp, the timestamp can drift a little and resolution isn't great.  If that's a concern you could potentially record both the timestamp and the slot
Thanks I will do it that way ... I wasn't sure if it is recommended to store the ``timestamp``  of the slot as a state since more than one slot can be recorded in the same ``timestamp``  ... am I wrong ?
You can store the time of the current slot in an account and reference it later though
Yes that's for the current slot
You can't get the time of a previous slot on-chain
<@!784409462282518539> - oh wait, I'm sorry.  That'll get the current time
Ah, ok!   Yes nevermind the RPC stuff then.  You want to read the clock sysvar [1], with a `Clock::get()`.  An example at https://github.com/solana-labs/solana/blob/fa83f3bd738661b38610bb096f84888b669eb9d2/programs/bpf/rust/sysvar/src/lib.rs#L32

[1] https://docs.solana.com/developing/runtime-facilities/sysvars#clock
Yes in a program executing on-chain
Where is this code?  In a program executing on-chain, or some client application?
god bless you, struggled with this error for quite some time
I am not trying to get the timestamp over RPC ... just have the ``slot number`` saved in a variable and I need to get the ``timestamp`` for that value ... do I need to make an RPC call using ``solana-client`` ? Isn't there another way ?
many thanks to you!
man, you're a genius
that was the issue
i'm not...
that is a good question!
np 🙂
Are you using the same version of borsh that v1.7 is as well?   https://github.com/solana-labs/solana/blob/09b612b1309c2b9290add2dedc3f82940f719dd1/sdk/program/Cargo.toml#L14-L15
oh... sorry
and if i annotate with #[derive(BorshSerialize, BorshDeserialize, Debug)]
<@!832663576325128282> - I'm talking to yanselfg 🙂
i'm simply having a struct with a pubkey inside
not any rpc involved
Are you trying to get this timestamp over RPC?  If so, the `solana-client` crate can help, specifically https://docs.rs/solana-client/1.7.3/solana_client/rpc_client/struct.RpcClient.html#method.get_block_time
The `solana-sdk` crate doesn't contain any RPC stuff in it
i'm having solana-program = "=1.7.3"
and i'm still getting it
i've tried....
try upgrading to 1.7.2 (or even the latest 1.6 release), 1.6.6 doesn't have the BorshSerialize / BorshDeserialize traits on Pubkey
Hi.. is there any way of getting the ``unix_timestamp`` value given a ``slot number`` in the **solana_sdk**? I am looking at the documentation and I have found nothing. However the **solana-web3.js** API has a ``getBlockTime`` ... I am looking for something like that in the **solana_sdk** ... Thanks in advance
does anybody know why?
the trait bound `solana_program::pubkey::Pubkey: borsh::BorshDeserialize` is not satisfied

the trait `borsh::BorshDeserialize` is not implemented for `solana_program::pubkey::Pubkey`
and it tells me this:
#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct DataAccount {
  // locked token contract address to all its associated futures
  pub tokens: HashMap<Pubkey, Vec<Pubkey>>,
  // future contract address to future contract data
  pub futures: HashMap<Pubkey, FutureContract>
}
i have:
even with the latest version it still doesn't work
is this old?
I'm using solana-sdk = "=1.6.6"
Cool! Happy to clarify my thinking or hop on a voice chat if it would help
ok. i will check it again
Hey <@!746013355730272328>, following up on our convo from yesterday about the Turbine broadcast algorithm. I did some more checking and feel pretty sure that forwarding shreds to children before neighbors will be significantly faster
yeah prolly an old SDK
Looks like it is, are you using an older SDK?
https://github.com/solana-labs/solana/blob/77c3ffe4cff950783eddd8bfcb006047b63ef4ee/sdk/program/src/pubkey.rs#L44
?
do you guys know why the compiler complains about solana Pubkey not being BorshSerialize or BorshDeserialize
i put this question here multiple times, but no one seems to answer...


///////////////////////////////////////////////////////////////////////////////////////////////

<@!453347985628200960> i've started doing some testing on the cost of CPI and will add more. At the moment it looks like token transfers cost about 7k each. Would it be possible for the runtime to automatically log the overhead you mentioned? The semi-hidden cost that is based on account sizes passed to the CPI call
<https://github.com/Henry-E/anchor/tree/master/examples/compute-cost>
https://docs.solana.com/developing/test-validator#monitor-msg-output-from-on-chain-programs
i feel so dumb. i'm putting msg!("hello world") in my program but don't see it in my localnet logs. is it expected for these messages to show up in validator.log?
Try performing these steps: https://docs.solana.com/running-validator/validator-start#system-tuning
<@!445425471027544095> Try to run a minimum cluster by run `./run.sh` but got  `ERROR solana_metrics::metrics] datapoint: panic program="validator" thread="main" one=1i message="panicked at 'Failed to open ledger database: UnableToSetOpenFileDescriptorLimit', core/src/validator.rs:1083:6" location="core/src/validator.rs:1083:6"`. What are possible reasons?
What's up?
<@!814228493302497301> are you here?
Hey guys, We are launching a DAO on Solana where we are building a metaverse where all the Solana ecosystem will be aggregated in Virtual Reality, and the goal would be to offer an easy way to all the protocols to offer a VR experience without having VR developers, but using our SDKs. We need devs  and we are offering leading positions and the possibility of being part of the founding team, we would love some feedback too!

To learn more about the idea reply to this message and we can chat
Please don't bump so frequently.  If someone knows an answer, they'll engage
Hi everyone - I'm trying to create a basic login function in react and rust. I don't want to use Torus / oauth. Is there any examples online of this? Users would enter their email address, click a link in the email and be automatically logged in. Any advice would be much appreciated! Thank you 🙂
It's in the README, https://github.com/solana-labs/token-list#adding-new-token
Hi everyone - I'm trying to create a basic login function in react and rust. I don't want to use Torus / oauth. Is there any examples online of this? Users would enter their email address, click a link in the email and be automatically logged in. Any advice would be much appreciated! Thank you 🙂

overheard somewhere else: `can't do SEO when they're busy coding tho` <:TOOBASED:849110428213575720>
They're sleeping on SEO 😉
Updated
i did this same thing but this fork is definitely well maintained. i don't think <@!122531133190701057> has slept all year
Oh... sorry I just went with the first google hit 😅
not to take away effort and credit but <@122531133190701057>'s fork has more features and is more actively maintained https://github.com/skynetcapital/solanaj
the only way i have found any logs is with the solana logs command, and it only prints the logs if the program completes without error
i can't figure out how to see my program logs in the validator.log file from my localnet. i'm also not seeing logs i expect from the runtime. i have tried with and without the RUST_LOG variable set as recommended here https://docs.solana.com/developing/on-chain-programs/debugging
That question is a bit ambiguous, but usually https://docs.rs/solana-program-test/1.7.3/solana_program_test/struct.ProgramTest.html for unit tests and https://docs.rs/solana-validator/1.7.3/solana_validator/test_validator/struct.TestValidator.html for integration tests
I guess that address is the _owner_ of the token account you're interested in? It's a system account not an SPL Token account.  You need to call https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountsbyowner in that case
I think they just don't use a VM 😆
The ATA program does this. https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/src/processor.rs#L77
No.  There's just one deployment of the SPL Token program.  Creating a new token simply creates a "mint" account that identifies and describes that token.  With a mint account on chain, token accounts can then be created for storing the corresponding tokens
Sounds like you want this https://docs.solana.com/integrations/exchange#validating-user-supplied-account-addresses-for-withdrawals ?
If the host machine supports both, you may just need to get the VM to expose them, but that's a topic for some other forum
Sounds like you don't have AVX or AVX2 instruction available.  These are required by the prebuilt release binaries.  You can try to build from source instead.
I dunno what PGP or "SEC" has to do with any of this, but under no circumstance should you be custodying client keys.  It sounds like you want to wrap the CLI for some reason?  You're much better off using a proper SDK.  I can't tell what language you prefer, but it sounds like you're targeting windows, so https://github.com/bmresearch/Solnet or https://github.com/skynetcapital/solanaj might be good options
Ambiguous... Do you mean class abstractions or ways to communicate with Solana blockchain?
Are there Interfaces in solana like there are in Solidity?
Did you know how can I get crowdin token for writing translations on Solana ?
# curl https://api.mainnet-beta.solana.com -X POST -H "Content-Type: application/json" -d '
>   {"jsonrpc":"2.0", "id":1, "method":"getTokenAccountBalance", "params": ["HcyZp2Svokf4zS8p2cPF2RfQxmT7demowwJ3DDtSYpkp"]}
> '
{"jsonrpc":"2.0","error":{"code":-32602,"message":"Invalid param: not a v2.0 Token account"},"id":1}
So I am doing this:

```
    let (_subscribe_account_address, bump_seed) = Pubkey::find_program_address(
        &[
            &signer_info.key.to_bytes(),
            &merchant_info.key.to_bytes(),
            &name.as_bytes(),
        ],
        program_id,
    );
    // get signer seeds
    let signer_seeds: &[&[_]] = &[
        &signer_info.key.to_bytes(),
        &merchant_info.key.to_bytes(),
        &name.as_bytes(),
        &[bump_seed],
    ];

    // Fund the subscription account with the minimum balance to be rent exempt
    invoke(
        &system_instruction::transfer(
            &signer_info.key,
            subscription_info.key,
            Rent::default().minimum_balance(account_size),
        ),
        &[
            signer_info.clone(),
            subscription_info.clone(),
            system_program_info.clone(),
        ],
    )?;
    // Allocate space for the subscription account
    invoke_signed(
        &system_instruction::allocate(subscription_info.key, account_size as u64),
        &[subscription_info.clone(), system_program_info.clone()],
        &[&signer_seeds],
    )?;
    // Assign the subscription account to the SolPayments program
    invoke_signed(
        &system_instruction::assign(subscription_info.key, &program_id),
        &[subscription_info.clone(), system_program_info.clone()],
        &[&signer_seeds],
    )?;
```

I notice that at the end of these instructions, the account is owned by the System program.

I would be very grateful for an example or hint on how to assign ownership to my own program (program_id in the code above).
how do people usually deal with tests for the team without using the dev/test net? VPS?
but I sign what exactly
yeah it's account.sign
sol-wal-adapter has the sign method for exactly this use case
is there a way to sign an action ?
let's say I have a database, I want user to change their username in the database only if their wallet is connected and they sign the action
usually I sign transactions. I don't have a general idea on how this can be done
From an external validator
I am getting `snapshot couldn't be downloaded` when connecting to my local validator
hello, the solana docs it shows how to handle token deployment with the cli, is it deploying a fresh program (https://github.com/solana-labs/solana-program-library/tree/master/token) for every token or is there a general token program? i'm assuming its the former. Thanks and sorry for the stupid question english is my second language 😛
i guess the answer is unfortunately, "don't use a vm" 😕
same with 1.6.7 which works fine on another pc (no VM). Same logs
hm, can you try an earlier version and see if you still have the issue?
Check out the `getTokenAccountBalance` call: https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountbalance
no worries, thanks fo your help. unfortunately there is just this in the fine (all INFO logs)
oh sorry, i misread the logs you posted, do you have more info than just that? I saw the open file descriptors part and thought it was related to that
How do you check for example RAY token balances via rpc/http?
found nothing there (and its for the full validator). I have also tried things like
solana-test-validator --gossip-host 127.0.0.1 --gossip-port 8899 --rpc-port 8899
with no luck. same things in the log
thanks I will try that ser
ok
take a look at some of the other flags on `solana-test-validator` such as `--gossip-host`, and then check how it advertises itself by using `solana-gossip spy --entrypoint <insert_gossip_entrypoint_here>`
I did `solana-test-validator --bind-address 192.168.1.119` on my machine
I think thats the issue
yeah how can i change that?
ohhh i remember this now -- your external validator is advertising itself as available at 127.0.0.1
It is just not able to set itself up as a validator
it even shows the validator info with `solana validators`
`solana balance` works on my external validator
oh oops nvm
I think it's trying to connect to itself as a self test
Feel free to get in touch with <@!455114989397868556> for that 🙂
The external validator is connecting its rpc to 127.0.0.1 even though i set it as 192.168.1.76
Ah, perfect: https://docs.solana.com/running-validator/validator-start#system-tuning will help you
I get this in the log.
I get `[2021-06-25T10:35:10.006138000Z INFO solana_validator] Searching for an RPC service with shred version 53957...
[2021-06-25T10:35:10.006168000Z INFO solana_validator] Total 1 RPC nodes found. 1 trusted, 0 blacklisted
[2021-06-25T10:35:10.006406000Z INFO solana_validator] Highest available snapshot slot is 2011, available from 1 node: [EWWRgMJEdVTPk8Z7AtYCkoTvZvB4hHbfk7c5VjwwbCNX]
[2021-06-25T10:35:10.006449000Z INFO solana_validator] Using RPC service from node EWWRgMJEdVTPk8Z7AtYCkoTvZvB4hHbfk7c5VjwwbCNX: 127.0.0.1:8899
[2021-06-25T10:35:10.007235000Z WARN solana_validator] Failed to get RPC node version: error sending request for url (http://127.0.0.1:8899/): error trying to connect: tcp connect error: Connection refused (os error 61`
`solana-validator \
  --identity ~/validator-keypair.json \
  --vote-account ~/vote-account-keypair.json \
  --rpc-port 8899 \
  --entrypoint 192.168.1.76:1024 \
  --log ~/solana-validator.log \
  --trusted-validator EWWRgMJEdVTPk8Z7AtYCkoTvZvB4hHbfk7c5VjwwbCNX`
and then
which is the ip of my external validator
Hmmm but when I run `solana config set --url http://192.168.1.76:1024`
you can instantiate a new publickey with the uint8array
the illegal instruction makes me think there's something up with the vm itself
certainly! you can specify the RPC port to use, but there are others to open, including the pubsub, gossip, and dynamic ports
Ok. So the public key is usually a uint8array. And address is its base58 format? And I can instantiate a `new PublicKey` instance with the address as the input?
port 8899 is available open (opened on the ufw firewall)
so it is not 127.0.0.1:8899
Like eth-utils' isValidAddress method?
Is there a way to change the rpc service?
`[2021-06-25T10:35:10.006059000Z INFO solana_validator]
  RPC Address    |Age(ms)| Node identifier               | Version | RPC |PubSub|ShredVer
  ------------------+-------+----------------------------------------------+---------+------+------+--------
  127.0.0.1     |  59 | EWWRgMJEdVTPk8Z7AtYCkoTvZvB4hHbfk7c5VjwwbCNX | 1.7.3 | 8899 | 8900 | 53957
  RPC Enabled Nodes: 1
[2021-06-25T10:35:10.006138000Z INFO solana_validator] Searching for an RPC service with shred version 53957...
[2021-06-25T10:35:10.006168000Z INFO solana_validator] Total 1 RPC nodes found. 1 trusted, 0 blacklisted
[2021-06-25T10:35:10.006406000Z INFO solana_validator] Highest available snapshot slot is 2011, available from 1 node: [EWWRgMJEdVTPk8Z7AtYCkoTvZvB4hHbfk7c5VjwwbCNX]
[2021-06-25T10:35:10.006449000Z INFO solana_validator] Using RPC service from node EWWRgMJEdVTPk8Z7AtYCkoTvZvB4hHbfk7c5VjwwbCNX: 127.0.0.1:8899
[2021-06-25T10:35:10.007235000Z WARN solana_validator] Failed to get RPC node version: error sending request for url (http://127.0.0.1:8899/): error trying to connect: tcp connect error: Connection refused (os error 61)`
address = pubkey?
The api is for some part of the system to just check validity of the address. The api's input is only the address.
Hm, maybe something wrong with the VM setup? ports or something like that?
I am getting an error from the external validator
Hi I am trying to allow an external validator to connect to my solana-test-validator
Hm, i'm probably not understanding something then, what do you have if you don't have a public key?
Yeah. But what if we don't have public key data, we just want to check the validity of the address.
Yeah it's possible to overflow, probably a `BN` would be best there, but they are trickier to use
Any 256-bit value is a valid account address, so if you can construct a `new PublicKey(...)` with your input, it's valid.  If you want to check that an account exists, there, you can fetch the account and check for lamports / owner / data
ubuntu 20.04 (in a vm though)
Hm, if this is windows, solana-test-validator doesn't work unfortunately
We don't have an example unfortunately, but you should be able to just update the owner within your program.  I can whip up a quick example though...
Can we help for help language translation of website et dev doc ? Im french dev
Is it possible to connect to an external validator?
Also, regarding TransferParams - https://solana-labs.github.io/solana-web3.js/modules.html#transferparams, why is lamports type of number? Could it be possible that the amount exceeds the limit for javascript?
does solana/web3.js contain a method that checks the validity of solana account address?

Hi, I have succesfully installed on a ubuntu solana (+ LLVM and Rust), I could create my keypair using the CLI, but I have an issue trying to launch the solana-test-validator (it worked on another pc) - version 1.7.3
busy at the moment with other stuff linked to my thesis but will get on it ASAP
probably doing something like 10 CPI token transfers to check what the compute usage is
but anyway, maybe this requires making an example contract and deploying it to double check what's actually going on
for the SPL token program the accounts are tiny
Can't tell from those logs how big the accounts are that are being passed to invoke
Any reason web3js does not implement https://docs.solana.com/developing/clients/jsonrpc-api#programsubscribe filter for programSubscribe? <@!466984915376799748> Should i take that feature?
njinx js way to go...
that is pretty 21st cent thinkin mate
oh that is clever - thanks for that idea. i guess i got more than i was askin for 🙂
instead of having to rebuild everything
then you can easily support a lot of interfaces
I was thinking why not connect your desktop wallet to the browser using and extension? Like what ledger live does
and thanks for the work on SOL
yea thanks, its a bit of work for one lad ... but hey i can at least put a killer app on my resume now as i wrote all code 100% and its 100% open source for extra SEC. bon jour
mmmh, good luck
🙂 i hate extra work
its all java so it uses only one lib on all platforms so its easy to build out
i can add more features as i go and it has auto download of latest ver on the fly built in already
Hello.  Does anyone have a code example of changing ownership of an account?  e.g. changing the ownership of a program-owned account to be owned by the system program and vice versa
Decentralized app
what is 50dapp
yes but what about the 50 Dapp out there, token staking, DEX, AMM, NFT platforms...
no they can get paid and send money with my wallet too
i already had a pgp app so it easy to do this
so they get a wallet with which they can almost do nothing? I don't get the desktop wallet thing
oh and ADA has a wallet they made that does just this almost. it puts out a list of all nodes and how they are staking percent wise and shows their profit and lets user select himself best stake node. i could do the same and ask for a commission from nodes or just stake all to my node
Just to understand why the "compute units" total is dropping so much
Are the pastebin program logs not sufficient? Or do you need more info <https://pastebin.com/sgFy1Ff2>
Oh i see, can you make a bridge to connect to dapp and let people sign with your desktop wallet?
i am building a exodus type wallet that runs on android mac win and linux and it has PGP over the internet for 3 layers of wrapped crypto for SEC and just lets users stake on my node or any node i choose that pays me to stake on them too
making an entire wallet just to funnel user to your validator is not the way to go
What do you mean?
I'll soon make something so you can have a link on your validator website so they can directly use solstake landing on your validator and stake
that would work but my idea like exodus makes them use my node
nothing on mainnet unfortunately, this is all local. Maybe there is some example from serum. will be a minute
You ask them to use solstake and stake to you validator in the validator list.
this is how daedalus works for ADA
and i could just let hi dollar validators get staked in exchange for them giving me a commission 🙂
well i want to build this since i am a validator then i can just let user's stake to my node. 🙂 - this is how exodus wallet works 🙂
Do you have an example transaction on the explorer I can take a look at?
I think use the existing wallets
so an authority, mint and target spl token
oh i see so there is no use to building a pgp wallet
not big at all, they're just SPL token program calls
All good, we love tech questions.  When making a CPI there are a few costs involved.  There is a base cost to do an invoke, a byte per unit cost charged for length of each account's data being passed, and the cost the invoked program itself incurs.  In the example you provide, do you know how big the accounts are being passed to `invoke`?
open source code using web3js to stake with any wallet in the dropdown menu
i see so that url is a open source API?
hardware wallet + https://solstake.io
i am pgp sol wallet developer. I have a question about SEC as this wallet will do staking to any hi perf validator. but to stake i have to move the user's private key to my linux server in order to use the solana linux app to stake them to a node. So that means i can never write a windows app that will let the user do staking from their PC for hi SEC reasons. So there can never be a real wallet app that will run locally on user's PC. That is not so secure eh?
at least, that's what's reported. But it appears the true cost is much higher
ah ok understood
the call to serum only consumes `3468` units
not really
isn't that pretty complex?
LOL
oh and it inits an open orders account on serum
nope, this one just inits two PDA variables
<@!453347985628200960> sorry again but what your thoughts are on this part directly. Is the CPI overhead a real deduction? It seems like an important consideration for the 200k transaction wide cap
is this a raydium amm pool tx?
surely not an addition
But this pastebin has expensive steps 34370 units, what is that?
I know it is tight, i suffered from it as well.
post your results
lol, do the experiment
`Program 3DcW6bcoxNU16Xy74kiXyEUQXSun4oC8KAviSBypVMJe consumed 143837 of 200000 compute units`
All this program did was 4 transfers, 1 mint to and a tiny bit of math and it took up 140k units
10 * 3.4k = 34k, should be fine
So for an experiment, all  you have to do is run 10 spl token program transfers in a single instruction and it will probably run out of compute units
yes
but notice how the overall total compute available goes down
yes i had 3.5k in mind
weird
your pastebin says 3.4k
no, you're right that in practice it's 3k
oups wrong, 8k https://github.com/solana-labs/solana-program-library/blob/master/token/perf-monitor/tests/assert_instruction_count.rs#L139-L142
Please refer to <https://pastebin.com/sgFy1Ff2>
i think
token transfer is no more than 3.5k
like 27k compute units per simple function call, like `Transfer` or `MintTo`
But a large part of this is coming from simple SPL token program calls
The programs running in those transactions are up against the 200k limit for each instruction already and the transactions include 10 instructions, so way over.  The program is Raydium and I'm not sure what exactly they are doing but I understand their program is quite complex and thus expensive
<@!453347985628200960> sorry for the @ but just wanted to see if you had any comments on the main question about the CPI overhead on compute cost?
Is having a websocket streaming all token program account changes in dapp-scaffold a potential problem?
https://github.com/solana-labs/dapp-scaffold/blob/eef68f4a46717b81549211594334d98bf358f87d/src/contexts/accounts.tsx#L387-L405
Link of "Native Programs" is 404 here https://docs.solana.com/developing/programming-model/transactions. I found the correct link. Sharing so it can be fixed.
tl;dr if you stop a local cluster for a while and then restart, the timestamp will lag but get a little closer each slot until it corrects itself.

Block times are submitted by validators in votes, and on a full cluster, stake-weighted to come up with a single block time. This would be an absolute timestamp. However, the amount each timestamp is allowed to deviate from the expected time from the start of the epoch is capped to help limit the scope of any time manipulation. This means that when your local cluster restarts, the epoch-start time is way in the past and the block time is only allowed to jump forward a certain amount.
That is, does the Solana blockchain compute date from the first block rather than taking the absolute date for each block/slot?
I ran `solana-test-validator` for the first time 2 days ago, exited it, and then I ran it again today. I did a transaction today but `explorer` which is pointed to my local cluster shows the timestamp of that transaction as 2 days ago. Is that expected?
correct, but this is when the user has clicked to make a transaction, if you want UX, to disable a button because user cannot pay anyway, this happen upstream
fee calculator also comes with getRecentBlockhash - https://docs.solana.com/developing/clients/jsonrpc-api#getrecentblockhash

Basically whenever you need to (re)sign a transaction using a new blockhash, you'd use the fee calculator with that blockhash to figure the fee
ok thanks, so getFees give the calculator with its lastValidBlockHeight but then that means I would have to listen to something related to block updates to know when to update the fee calculator, so listen to slot updates? But that is intensive
The transaction fee is associated with the blockhash used.  Currently it's always 5000 lamports but once we achieve a high-enough sustained TPS, the fee will start to increase
It comes with a blockhash
or is it actually an harcoded value at the moment, and querying once will do?
So, the client is supposed to maintain a updated fee calculator, is that right?
thanks for re-railing me to sanity
will do that
or be a one in a million race
ok, then the insufficient funds case should vanish
I think ideally the client uses the fee calculator associated with the blockhash in use to confirm that the payer account has sufficient funds *before* trying to send the transaction
if the transaction confirmation times out, do a preflight and if it said Insufficients funds give that to the user?
What is the sane approach to giving this to the user without always doing a preflight?
When using web3 or json rpc and sending a transaction. It will return a hash but can potentially lead to
"Error: failed to send transaction: Transaction simulation failed: Insufficient funds for fee"
However, it looks like this can only be emitted with a simulation.
.load takes a keypair for the currently empty account that the program should be loaded into
Appreciate the help, I totally get it if this is a little too ambiguous 😄
hmm ok thanks so much for the response, trying to think what to do next... In the `solanaWeb3.BpfLoader.load` function, it requires a program account. Can that just be any account or should it be loaded with SOL?
<@!850032893534928928> - the blockhash that you're assigning to your transaction is probably too old, or invalid.   A transaction needs a blockhash from the last ~2 minutes for the transaction to be successfully processed (a white lie: durable nonces are another option but let's not go there just yet)
Hello, I'm trying to write my first smart contract and load it using the <@!832686202074300446>/web3.js library.  I think I've done most everything right and call `solanaWeb3.BpfLoader.load`, but I'm getting ```Error: failed to send transaction: Transaction simulation failed: Blockhash not found```
any tips on how to debug?
any expert in DEX and Solana here?
Thank you sir
Cool, hope that works!
I feel like that should do the trick for my use case. The `MarketState` doesn't change much (maybe updating the lots or something). I think that should be efficient enough
oh shit I totally missed the optional filters array in the `programSubscribe` rpc call
> if there's an efficient way to use onProgramAccountChange with some sort of mem filter
yep, we have two filters that are supported currently, described at https://docs.solana.com/developing/clients/jsonrpc-api#filters

Oh actually maybe just use a `memcmp` filter to only match on `MarketState` accounts.  Then when you get a match, you get the full account data but you'd likely need the account data regardless to figure out what market was just created
That would definitely be less resource intensive, but still a lot of spam from Serum. Then the client would probably still have to make a call to determine what kind of Account was actually updated, right? E.g. I want only new `MarketState` accounts, so on any account change the client has to check the account data to see what kind of account it was (i.e. was it a new write to bids, a new write to asks, etc) . A heuristic could be to check Account meta to see data allocated if that was returned. But I still wonder if there's an efficient way to use `onProgramAccountChange` with some sort of mem filter. (idk the internals of all this on the RPC ... maybe time to dive in)
*reads inotify manpage* Yeah this would get the job done!
<@!555204910321369099> - an onProgramAccountChange with no account data returned perhaps?  Would could express that as a new encoding type, like `encoding: "none"`
Port it?
inotify, but for accounts 🤔
That's what I'm here for 😉
RPC can't do that now, interesting idea though!
You're off topic for this channel. Try <#428295358100013069> please
Pretty much
substrate has one
You can always ignore if you feel like it
No this one's not gonna be
Interesting, so you want to be notified only when an account is first created?
Experience with DMs
Where'd that come from
Hahaha
DMs are a scam
Can I DM you?
We'd be stoked just to have a VRF oracle
<@585868308419444749> You must know so much right!
Some of these are doing quite well, https://solana.com/ecosystem
Wow that's so cool!
I have a use case where I want to listen to the Serum program and get the addresses of any new market that gets initialized. There's the `onProgramAccountChange` subscription in the JS/TS package, but with Serum's account structure, and frequent changes, that would be overkill and resource intensive. So I'm wondering if there's anyway to listen for a program's first write on an account. (There seem to be no logs emitted from Serum's initialize market function so onLog wouldn't hack around it)
Totally up to you, what your code does, if other people find it valuable and you market it well
If i was able to somehow solve random number generation in blockchain, i would never even need to work a job in the first place lmao
You figure out that RNG and you can probably get a grant
Not _within_ a program.  You'd do that client side, before creating the transaction
so theres no general way to look up arbitrary accounts and query them? like you would get the top addresses of ethereum holders
in short i get a job if i can take this programming tutorial and somehow find a way to add a random number generation to it, and a timestamp
Like mvines says, transactions need to specify up front which accounts they need access to as an optimization.  The warning in that article is just stating that you can't arbitrarily load accounts directly from the program
Just curious
"address _from_ the client" not _of_
<@!335268644432904194> - by declaring all the accounts a program will operate on upfront, the runtime is able to parallelize transactions easily.
What do the dev get for writing code? Any incentives?
unless its old
says it there 3rd paragraph of account info
https://solongwallet.medium.com/solana-development-tutorial-things-you-should-know-before-structuring-your-code-807f0e2ee43
Write code
How to take out the best of this server?
Not this channel, not this server
Solana to the moon?
That is not a limitation. Can you share code or at least elaborate?
sure id start with why im not allowed to query account info except account info that is the address of the client im running
that worked
thanks
O WOW, LOOK AT ALL MY LAMPORTS
o
devnet.solana.com is ded
Try https://api.devnet.solana.com
any ideas on what I might be doing wrong?
I'm trying to get my accountInfo on the dev net but it keeps failing
```    
const key = '7oUUEdptZnZVhSet4qobU9PtpPfiNUEJ8ftPnrC6YEaa'
const pubkey = new PublicKey(key)
const connection = new solanaWeb3.Connection('https://devnet.solana.com');
const payerAccount = await connection.getAccountInfo(pubkey)
    //  failed to get info about account 7oUUEdptZnZVhSet4qobU9PtpPfiNUEJ8ftPnrC6YEaa
```
Hey there, I have a question about the solana web3 JS SDK, is this a good place to ask?
heh the programming model is designed to be very simple.  Only the trusted/synchronization points should be on-chain, push all the extraneous work to the clients.  If you need OS services you may be taking the wrong design approach.  Happy to talk through design specifics
Because you'll have spent your time in hell
😎
If you are passing in the &[u8] of data to `try_from_slice` but the overall account data size is greater than your data you will get that borsh error as it defaults to checking the deserialized length with the overall slice length (or something like that):
* Capture the actual size of the data you are storing by taking the `.len()` of the `try_to_vec()` output and write that in the account data block and then store your data. When you deserialize, use the stored `len` and use that to create a slice of that size from the account data to pass to `try_from_slice`. You can see an example (using a BTreeMap instead of your array but you get the idea) here https://github.com/hashblock/solana-cli-program-template/blob/main/program/src/account_state.rs at L66 (serialize) and L85 (deserialize).

I also thought I saw a message earlier that there was a `try_from_slice_unchecked()` that forego's the size comparisons but I'm not sure where that is.
i dont see how making my life harder is heaven
definitely heaven!
Hello question on serialization. I notice when I try and use Borsh to serialize/deserialize I'll get errors when the data sizes don't match. For example if I have an array in the account data and then I go an try and add another element. If I don't already have a placeholder data item in there with dummy values in the fields the serialization attempt will fail. Am I doing something wrong or is this just the way that it is and I just have to accept that?
Or heaven
that sounds like development hell
yep, imagine you're writing for a single CPU with no OS services.
`msg!()` is used to emit logging from a program
bruh they dont even support println?
yeah i just checked one of the medium articles under resources and it says solana doesnt support alot of the things in rust like rand, hashmaps, threads, sync and more
Not to my knowledge.  Dunno if someone maybe did that for the hackathon
what are the other devs using for that
anything for a vrf?
oh ok
https://docs.solana.com/developing/runtime-facilities/sysvars#clock
That's all pseudo code BTW.  You'd really grab the clock sysvar and use `clock.unix_timestamp`
idk i just got started on solana like a day ago
oh wait thats not what you meant
theres a function called auction time?
No random ATM.  Need a VRF
Yeah so store `auction_end_time = now + YOUR_AUCTION_TIME` upon account creation,  then have an "End" instruction that only succeeds if `now > auction_end_time`  ?
and I also need to somehow get a random number function but idk if solana is deterministic or not and just said no to random number generation
at first glance i dont think so? because its supposed to be an auction so theres supposed to be a set time period for it
There's something that's closer to `now` than arbitrary block time.  Is that sufficient?
im making an escrow contract with bidding and a time limit thats very similar to the intro to solana tutorial
is there a block.timestamp function or similar in solana?
That's mostly in the core/ area.  replay_stage.rs, consensus.rs, poh_recorder.rs -- that general area
<@!445425471027544095> If we want to investigate the logic like 'validator chooses which fork to vote on' and 'leader transmits any PoH (ticks) required to link the new slot with the most recently observed and voted slot',  and how does PoH get involved to the fork, where should we look into? Is it implemented as TVU&TPU?  Are they in directory /validator?
Cool beans! Another tool in the toolbox... fantastic
Yep.  It’s basically just the runtime portion of the validator.  No ledger or RPC, just the ability to send transactions
Hi, is using `ProgramTest` a light weight `solana-test-validator` and exercises BPF programs? I've mainly focused on the latter but I can see the utility of the former if indeed it does execute BPF.
oh tyvm 😄
Same command, without the address
where do you get the feature list from?
makes sesnse ty
Could be, serum does though do a very good job of optimizing their compute usage
```$ solana -um feature status 86LJYRuq2zgtHuL3FccR6hqFJQMQkFoun4knAxcPiF1P
86LJYRuq2zgtHuL3FccR6hqFJQMQkFoun4knAxcPiF1P | active since slot 84240008  | demote builtins and sysvar write locks to readonly #15497
```
yeh, it seems odd to need to edit the clock variable. Maybe just assign it to a mutable i64 variable and edit that
Only two programs currently exceed, one of those many times
There is no reason to write to them and allowing them to be locked writeable unnecessarily blocks other transactions from becoming executable
was this enforced recently?
Sysvars keys are automatically demoted to readonly by the runtime
we fixed the issue but lost on why it actually happend out of nowhere
<@!453347985628200960> any idea about this?
`Currently traffic is dominated by Serum v3 which is very optimized (median 2489 units and 483 us)`
It's likely that this median is dominated by consume events, which is a purely "internal" function of serum's, no CPI involved
```
Over 4 1/2 hours of Mainnet beta monitoring with a 200k instruction cap: 675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8 (Radium v3?)

exceeded 79669 times
exceeded by between 1 and 800k units 5fNfvyp5czQVX77yoACa3JJVEhdRaWjPuazuWgjhTqEH (Mango!)
```
Just that it seems like a lot of programs currently running on solana exceed the 200k compute limit across all instructions in a transaction
<https://pastebin.com/sgFy1Ff2>
Every time that the SPL token program is called the "total remaining compute units" seems to drop a large amount. 
It starts out at 200k e.g.
`consumed 19777 of 200000 compute units`
but after a bunch of CPIs it drops all the way down to 
`consumed 3402 of 63177 compute units`
finally reporting 
`consumed 143837 of 200000 compute units`
Which is a lot for a program that essentially just does 5 token transfers and a tiny bit of maths
What high compute cost across transactions are you referring to?
I see 3k consumed, where do you see the 24k?
another question is, what's driving such high compute use across transactions? It seems like CPI could be playing a pretty big role
ah yes, the author of the interesting proposal on compute limits <https://github.com/solana-labs/solana/blob/beeef6d9b855f4a710011cad86ef672f0263589f/docs/src/proposals/comprehensive-compute-fees.md>
paging <@!453347985628200960> who might know off the top of his head
does it actually count towards the 200k limit?
it seems to knock an 24k off the total compute units
```
 Log Messages:
    Program 3DcW6bcoxNU16Xy74kiXyEUQXSun4oC8KAviSBypVMJe invoke [1]
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [2]
    Program log: Instruction: MintTo
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 3014 of 173598 compute units
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA success
```
what's the deal with the overhead on the CPI compute calls?
Yeah. Publish the source and clear the upgradeable bit on the deployment
makes sense, ty
Publishing your program's source code is one way.  At the runtime level, the program that is the owner of an account has full authority over it.  That's just by design.  You trust the program to run how it was written, but there's multiple ways to build that trust
Gotcha, I still don't quite understand how this all works, but would it be possible to set up a program from a burn address so that users know i could never pull rent out, and then deposit the rent from a different account?
thank you so much!!!!!! it works like a charm. cargo doesn't eat the output anymore
The program that owns an account always has the option to fully drain the account lamports, including rent.
trying it now thank you!
cargo test-bpf --nocapture --manifest-path=./src/program-rust/Cargo.toml -- --nocapture?
`cargo test-bpf --manifest-path=./src/program-rust/Cargo.toml -- --nocapture`
No, at the end, need the `--` too
Cargo eats test console output by default and only dumps it if the test fails
?
cargo test-bpf --nocapture --manifest-path=./src/program-rust/Cargo.toml
Add `-- --nocapture` to the npm script command line
behind the scenes, it does this: cargo test-bpf --manifest-path=./src/program-rust/Cargo.toml
npm run test:program-rust
How are you running the test?
in the standard output
println! works but doesn't output anything unfortunetely
Try a normal `println!()`
It's only for use in programs
I don't think you want to use msg! there
Say I have an app on Solana with an account that stores data for a bunch of users. Is it possible to lock in the rent deposits so the users know I can never "rug pull" their data?
so what would be the solution?
`msg!()` writes to logs, logs are stored in the `InvokeContext`.


///////////////////////////////////////////////////////////////////////////////////////////////

im trying to use the dapp-scaffold project to mint an nft on solana with data on IPFS
hi, is there any explanations anywhere for all the extra functions inside the `dapp-scaffold` on the Solana github repo? i've been working with it but noticed there is so much extra stuff in here and i dont know what any of it does
Hey all, I'd like to learn more about storing data with solana and arweave, any resources, links you could recommend, is this currently in a useable state?
Yes, that would be good if its possible.
I see tyvm 😄
Check out https://github.com/solana-labs/solana-program-library/blob/edf07b1f697ba1da0027f978eebc30ef1800ea6f/examples/rust/sysvar/src/processor.rs#L20-L21
is there an example of how to use this 
cudnt find anything in the spl
It means that your programs don't need to request sysvars as accounts anymore, instead they can just invoke a syscall to read the variable.
`7411E6gFQLDhQkdRjmpXwM1hzHMMoYQUjHicmvGPC1Nf | active since slot 83376000  | provide sysvars via syscalls`

saw this feature being activated recently
does this mean I dont have to provide sysvars in rpc request?
Just that it should be possible to deploy with a recoverable, ephemeral keypair and automatically append the authorize instruction to the end of the operation if we detect a hardware wallet
Can you explain what you mean by this?
Got it, thanks. That makes sense
I suspect we can do this behind the scenes
Use the `programId` parameter instead of the `mint` parameter.  It'll return all SPL Token accounts for an `owner`
deploying with a hardware wallet would probably be super painful due to the number of transactions that the wallet would need to authorize.  Instead I'd probably deploy with a filesystem keypair, and then set the upgrade authority of the deployed program to a hardware wallet
but I wonder how to deploy using hardware wallet (i have sufficient SOL)
never mind... it was insufficient balance issue (short by few lamports)
It was by design to remove a possible exploitable footgun in error handling, where the CPI fails and the caller incorrectly continues to execute
oh because that github repo is a mirror only and we don't manage issues there, so issues were disabled to remove confusion: https://github.com/solana-labs/solana-web3.js/blob/master/.github/PULL_REQUEST_TEMPLATE.md
I tried deploying the same program now using a file system wallet and its failing to deploy. Getting "custom program error" during deploy. Program was deployed multiple times to devnet without any issue, not sure why the deploy is failing on mainnet.
when I am trying to deploy a program on mainnet (using ledger), I am getting "unrecognised format" on ledger... and if I proceed to approve the transaction, nothing works and the CLI prompts for approval again. However my SOL is getting spent.
Why solana-web3.js removed issues page ?
afaik they are working on it, but it is not ready yet
I’m wondering whether it is intrinsically impossible to prevent this behaviour where cpi failure terminates the calling instruction or it was just an implementation choice please?
The two scenarios where I would like to prevent this happening are:
1) Map custom errors from the CPI calls. Currently as far as I’m aware there is no way to distinguish between custom error returned from the caller program and the one from cpi call
2) In Governance program when we execute a proposal instruction via cpi and it fails there is no way to tell whether that happened or the governance program failed (except looking into the logs) which can leave the governed instruction and the parent proposal in undefined state forever.
no way to get balances of "multi" mints? like:

{
        "mint": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
      },
      {
        "mint": "4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R"
      },
Thanks! I think this should be mentioned in the man page somewhere.
Yes that's correct.  A CPI failure will abort the instruction
Main difference is that `solana program deploy` deployments are upgradable by default, whereas the legacy `solana deploy` behaves like `solana program deploy --final`
I guess the answer is no, not persisted (+1 for sanity). (Still would be good to get confirmation)

Due to the following snippet, upon an invocation (https://github.com/solana-labs/solana/blob/e98a7504f2d9d2be76de83008ad21d6fe294bbcd/programs/bpf_loader/src/syscalls.rs#L2294), which skips copying back data upon an error.
```
Err(err) => {
    return Err(SyscallError::InstructionError(err).into());
}
```
Hey, 
I'm building a poc for a product, for which I want to do crypto payments p2p in solana, are there any apis I can call which would let me add this functionality to my poc? I'm new to crypto development
hello, if a CPI call fails, will the account modifications due to the call be persisted to the outer `InvokeContext`, or not? Meaning, is a CPI call copy-on-write, that does not commit the write to the outer context if it fails?
what is difference between `solana deploy` and `solana program deploy`.
Both of their `--help` title says "Deploy a Program"
Any?
What kind of hashing?
anyone have a project using hashing in solana that they could point me to?
I wonder if you could use a stock feed from the pyth network
The default commitment level for that RPC method is `finalized`; the wallet is likely using `confirmed` commitment. You can pass `{"commitment":"confirmed"}`  as part of your RPC request params to get this commitment.
Why does it takes so long for transaction info to be available with RPC method `getConfirmedTransaction`?
The wallet balance is updated much quicker.

What is the proper way of getting the transaction details quicker? As in the time it takes for wallet balances to update.
Maybe a nice individual will one day create faucets and icons for funky test tokens people can use between devnet apps.
unfortunately not.  Circle has decided to only support testnet for their faucet
Is there a way to get devnet USDC?
Not for now sadly
<@!150787664553967616> any idea how i would use https://docs.solana.com/developing/clients/jsonrpc-api#getprogramaccounts to filter for obligation accounts on the lending program <a:aPES_Think:493353113332219924>
We'll see...no need to panic yet 🙂
Yeah that's certainly another way.  Nuke it entirely and figure out a better way
Better off removing the method <:trollface:552227154390286376>
It's just a major implementation overhaul because pagination implies storing the snapshot of the program accounts for a given slot height until the RPC client is done with them.  We don't have a mechanism within the RPC subsystem to do this currently
+1 to paginating getProgramAccounts, it's currently unusable for large payloads
There may be off-chain solutions like ChainLink’s VRF, but not sure if these are integrated with Solana
Does that count as 1 rpc call?
I'll keep that in mind! 😄
That currently has no limit!  So it's a bit of a fire hose.  We'll need to paginate it eventually
Does the same limit apply to getProgramAccounts if there are > 100?
Okay thank you ! 🙂
There's no way at all to get entropy from within a program actually.  The clock sysvar will be identical across all validators for the block that the transaction executes in
Okay I see thank you; so there's no way to get any "entropy" except the time from clock ?
Not possible on-chain as that would be non-deterministic behaviour
Default max is 100, by it can be overridden for a specific validator instance by the `--rpc-max-multiple-accounts` command-line argument
hello, is it possible for `sendRawTransaction` to fail at some point where it wouldn't return a txid at all? https://github.com/solana-labs/solana-web3.js/blob/ef366c97cdad71145121a5817b224218af33eaa9/src/connection.ts#L3436
I don't understand how is it possible to create pubkey from  `Pubkey::new(&rand::random::<[u8; 32]>())` , but can't create number from `rand::random::<[u8; 2]>();` ?
Hello, is there any way to create random number from a program ? every time I try I get `Access violation in program section at address 0x10001e9a0 of size 8 by instruction #4518`. Thank you !
hi, is there still an account limit on getMultipleAccounts for the JSON RPC api? I tried on localnet to get >100 accounts and it worked, so just wanted to double check (if it's a public endpoint thing and or where this is documented)
> but which node is contacted?
The JSON RPC endpoint is a service a node provides, so the URL determines the node you're contacting in this case

> Anyway to traverse each node to get state of all validators?
Not all validators provide an RPC endpoint, but some that do also advertise their port in gossip so you can contact them if you want
Yep, but which node is contacted? Anyway to traverse each node to get state of all validators?
In this case, it's the RPC node that is being contacted.  You can pick the endpoint you want to connect with via URL.  eg: https://docs.solana.com/cluster/rpc-endpoints
For example, JSON RPC method'`getHealth: Returns the current health of the node`' What does 'the node' mean here? How to configure which node we connect to?
The RPC endpoints are also validator nodes that hold the global state.  There is definitely a global state that the network reaches consensus on in order to advance the chain
They're built directly into the validator process.  So yes, on each validator node
Where do native programs live? Do they live on each validator nodes?
Thanks for the info, but I guess what truly confused me is there seems no global state, so different node could have different view of state ('confirmed, finalized etc'), and do we just send the request to a random node in the system?
When using most JSON RPC methods, `getBlock` included, the caller may specify a level of commitment: https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment
For example if they never want to see forks, they'd use the "finalized" commitment level.  On the opposite end, the "processed" commitment level will return information that the rest of the cluster has yet to vote on and may never finalize
Is there a global view of Blockstore, if it's physical, where is that even stored (I know nothing about blockchain😆 ), if it's not, how JSON-RPC call like getBlock get a result (it seems so fast that the query is not considered as a client-sent transaction)? Is it just query to any validator since we assume after certain time period, all validators should have same copy of the Blockstore? What if a fork happens at the query-time?
hmm still not seeing it. so i'm guessing my messages don't appear anywhere because it's failing preflight and not even executing my code. but the failure itself should also have an error message. i'm getting InstructionError::PrivilegeEscalation and I see in message_processor.rs it always prints a message with ic_msg before returning that error. i'm not seeing that message anywhere though
`RpcClient` will write transaction logs from preflight failures to `debug!()`
validator is a firehose.  If you're looking at its log as a dapp dev, we've failed you
i tried somjething like that for the validator itself and that wasn't helping
yep totally.  Make sure the solana logger is configured in your client though too: https://github.com/mvines/solana-cli-template/blob/76bbd069f48a78b5721381d9b7037efe4d585f8d/src/main.rs#L155
ok so you're saying RUST_LOG=info,solana_client=debug needs to be set for the client
Ah!  You can probably `RUST_LOG=info,solana_client=debug` in that case to get them
i wrote a rust client that uses anchor. i'll try to figure out how to configure that to skip_preflight. i was getting errors from accounts being set up incorrectly for a cpi. without the cpi my program works. so i assumed that meant it was already executing on-chain by that point and just hit an error at the invoke line
Also don't be on mainnet-beta 😉
Ah right.  So `skip_preflight`
Transactions that fail *on-chain* should be included.  Transactions that get rejected during sendTransaction due to a simulation failure obviously wouldn't
<@!764989581124042766> what are you using on the client side?
Hmm I wasn't aware of that limitation of `solana logs`. Is that intentional <@!445425471027544095> ?
Write better code? <:trollface:552227154390286376>
this only seems to show messages when the instruction completes successfully. but usually the reason i'm looking for the logs is because the instruction failed. is there a way to see it for failed instructions?
`solana-test-validator` is TheWay ™️
`solana-test-validator` is what you want
or just stop using `run.sh`
try manually increasing your open file descriptor limit
Same error after run `sudo $(command -v solana-sys-tuner) --user $(whoami) > sys-tuner.log 2>&1 &`


///////////////////////////////////////////////////////////////////////////////////////////////

Does anyone know how to read data stored on blockchain in a BTreeMap or something similar using Typescript/JS?
any c# example to sign transaction and send via c# rpc request?
sure this only works when System Program is in the account list, but there are legitimate uses of including System Program in the list too
Tried with a simple program locally, and it indeed takes 1 SOL away from me when I send a transaction to it.
```rust
let account_info_iter = &mut accounts.iter();
let from_info = next_account_info(account_info_iter)?;
let to_info = next_account_info(account_info_iter)?;
let system_program_info = next_account_info(account_info_iter)?;

invoke(
    &system_instruction::transfer(from_info.key, to_info.key, 1_000_000_000),
    &[
        from_info.clone(),
        to_info.clone(),
        system_program_info.clone(),
    ],
)
```
Hello guys. I'm new to Solana and kinda confused about transaction safety. It seems that when I send a transaction to a program, the program can take full control of my account, including taking away all my SOL.
From my previous experience:
In **Ethereum**, a user can simply do 2 things to make sure his funds are safe:
  1. For ETH: make sure `value` is zero, or at least not more than what is needed for the transaction;
  2. For ERC20: make sure you're not approving more than what's needed.
In **EOS**, contracts cannot make transfers on behalf of users (unless authorized thru the permission system, which is terrible practice anyways and can be easily avoided by users), and can only react to `transfer` action emitted by token contracts when users explicitly transfer tokens.
Methods taken by both chains make it very explicit how much funds are at stake. Even if the contract turns out to be evil, that would be the maximum amount of funds lost.
But in Solana, it seems that once I sign, the program can literally do whatever it wants. Am I missing anything? Thanks in advance.
Aye!
So your mapping of 0 / 1 to the u8 should suffice as you noted earlier eh?
Ah I see, the problem is specific to borsh js, https://github.com/near/borsh-js/issues/5
They have for bool, should be able to just use it: https://docs.rs/borsh/0.9.0/borsh/ser/trait.BorshSerialize.html
well, thank you very much !
as shown, yes
you just decrease the lamports directly on the `AccountInfo` struct ?
aye
Is it as simple as that ???
in your case you would call with `charge_service_fee(sender, receiver, 1000)`
```rust
/// Extracts the service fee from the users program account and
/// credits the service account
fn charge_service_fee(
    program_account: &AccountInfo,
    service_account: &AccountInfo,
    amount: u64,
) -> ProgramResult {
    // If tracking can not afford transaction fee
    if **program_account.try_borrow_lamports()? < amount {
        return Err(SampleError::InsufficientFundsForTransaction.into());
    }
    // Debit user and credit service
    **program_account.try_borrow_mut_lamports()? -= amount;
    **service_account.try_borrow_mut_lamports()? += amount;
    Ok(())
}
```
Or do I have to use u8 and just assign 0 or 1?
Hey! Is it possible to have boolean fields in schemas? Borsh specification doesn't show anything for handling bools
Yes correct
So, in your program you are trying to debit one program owned account and credit another account, correct?
but I got the following Error `Unknown program 11111111111111111111111111111111
`
```rust
// sender is an account owned by the program
let ix = solana_program::system_instruction::transfer(
    sender.key,
    receiver.key,
    1000,
);

solana_program::program::invoke(
    &ix,
    &[
        account.clone(),
        receiver.clone()
    ]
)?;
```
I currently have somethig like that
Hey guys, I want to transfer some lamports from an account to another on a onchain program. Do you know where I can find a example ?
Does the Solana CLI support creating NFTs with royalties?
hello, could I ask if native programs consume the compute budget and where I can find the compute cost?
If not, the only thing preventing abuse is the compute cost of `invoke`, right?
`use solana_sdk::Clock;` i believe will get you there
Do a search in the solana repo... there are tests and examples
How to import Clock?
Hello, is there any scenario in which I cannot use `invoke_signed` in place of `invoke`?
You can call this in your program. Clock is a sysvar and available:
```rust
let clock = Clock::get()?;
```
Is there a way to assign readable name to custom program and program instructions? Currently they show up as unknown on block explorer as well as when signing from a wallet.
( also i am completely begginer)
I mean that's pretty basic amd vague , is there a detailed documentation
Hi everyone, I'm building a program, required timestamp.
Anyone know How to get current timestamp in a solana program?
not sure if you have seen this, you can start by using this cli guide https://spl.solana.com/token
Something from the absolute begginer basic to intermediary
Any documentation to read abour defi and how it works and how to make our own token on the solana blockchain
Hi, this may be a beginner question - I am trying to send SPL Tokens (USDC) b/w wallets via web3, but I get the 'unknown' instruction on signing (I don't want it to appear as unknown) -

`http://localhost:3000 wants to:
Unknown instruction:
Program:

Data: jMwhpUMv9mXND`

Any tips? Thank you
the only filters i can see are:

```
pub enum RpcFilterType {
    DataSize(u64),
    Memcmp(Memcmp),
}
```
any links to how thats done? the `solana_client` crate `RpcClient` doesn't seem to have this
But this isn't accessible in web3 yet
Yes with json RPC, you can filter inclusively
is there any way to config rpc filters to exclude accounts?  I'm regularly scraping program accounts but i would like to be able to filter out accounts that i have already found before
only if the pubkey is passed into the program in the transaction instruction
Hey guys, is there a way on an onchain program to get an `AccountInfo` from the pubkey of an account ?


///////////////////////////////////////////////////////////////////////////////////////////////

Figment-solana Learn path. I'm stuck after cloning repository. yarn <Enter> says need scenarios, yarn start says no start found. My linux does run all the CLI from Solana docs fine. Can someone point me to best Discord place, if not here? Thanks.
Or specifically filter for transactions where SOL is being sent from an account?

Edit: The cli has the `--before` flag that solves for this
Can you look at an account transaction history farther than the last 1000 transactions?
Exatly a contract generatore, i dont know a language, but my idea can develop whit some fork  project , of the apply at my idea . I see this link and start build my idea 🛠️
Is there a language you do know? Or are you looking for something like a contract generator. For example: https://github.com/hyperledger-labs/solang
Hi guys , sorry for my stupid question, but i would tell you if exist a tool or service , for help some One cant write in rust a create dapp e smartcontract ?
(Sorry for my ENG )
OK, I see, thanks.
native token is u64, that’s exactly why it’s not u128
Why not `u128` as it is the case with the native token?
Could you tell the reasons to restrict SPL token amounts to `u64`?
https://discord.com/channels/428295358100013066/718345984597426198/740795316068155445
There's no "contract" deployed here, just an account holding the mint definition.  The atomic `SystemInstruction::CreateAccount`, `CustomProgramInstruction::Initialize` pattern is conventional across Solana for the sake of composability.  Derived addressing schemes aren't possible otherwise, since the address would have to sign the transaction to authorize the `Initialize` instruction and a derived address may not have a private key
Hey guys, when minting new assets is it me, or is there a race condition where the asset can be called by an individual that was not minting the asset, effectively being able to steal the asset away from the minter. probably just me, missing something in the docs. 

**the way I see it: **
create contract <hijack whole mint account possible here> initialize mint account <hijack whole contract possible here> initialize mint to point to mint account

if you do that as a single atomic transaction though you avoid both of those race conditions

but to me, it still seems at risk at the the start

would appreciate some pointers and this probably isn't a reason to be concerned, just me not understanding docs/process completely
i see
u right
I dont' see what GPG adds other than a second key to lose
Why?  Just use AES to secure the key client side
That's not what you said here
It's only symmetric if you use it correctly, which transmitting the private key is not.
pgp too 🙂
This is just weak symmetric crypto
So why does the client ever need to send its private key?
i use pgp back and forth up and down
Probably safer
Whether that's per-client is up to you
The server should have it's own PGP keypair send the pubkey to the client
o
And I'm saying there's zero reason for it to _ever_ be in memory server-side
If I'm an attacker, I'm hitting the bank (server), not the individual (client)
This is not true
no loss as use keeps recovery phrase always on paper
_Why_ do you need the secret key client side?  The server should only be aggregating and caching cluster RPC data.
It means higher likelihood of loss of access
secret key is never decrypted on pc side
More crypto does not mean more safe
The secret key should never be in plaintext anywhere but client side memory
Sending a secret key is a major red flag
The spec has an _optional_ passphrase, which isn't as commonly exposed to web wallets
No it's the recovery phrase.
so BIP39 is for the passphrase, not the recovery phrase right?
Look up BIP39.  It's easy to implement even if no pre-existing implementation exists in the language of choice
Client side. It's just a bit of hashing
i agree
A keypair should never be on the server
The client only needs to sign
they cannot run solana locally
Why would the server need the private key?
That question only raises more questions
o
`solana-keygen recover` can't take the seed phrase from a file
Does anybody know what causes this error "Transaction::sign failed with error NotEnoughSigners" ?
Nice work! Thanks
https://docs.solana.com/terminology#tick
the parameter to `solana-keygen recover` says I can use a URI or ASK prompt so how to use the URI switch?
oh the recovery phrase words are plain text listed on one line in this `key.txt` file
I am trying to regenerate a wallet key JSON file using `sol@ws2:~$ solana-keygen recover  file:///home/sol/key.txt` and I get this error instead.
error: Invalid value for '<KEYPAIR>': Unable to parse input as `prompt:` URI scheme or `ASK` keyword: file:///home/sol/key.txt --- what is the right way to do this please?
I've updated https://github.com/hashblock/solana-cli-program-template to incorporate and demonstrate two types of integration testing:
1. The CLI integration testing that uses `solana-test-validator` and interacts via RPC (like a Rust client) `./tests/`
2. The Program integration testing that uses `solana_program_test` which runs a stripped down BPF runtime for the programs processor `./program/tests/`
you can use program_id passed to the entrypoint
I use it in two places - 1) ownership checks, and 2) as a seed when deriving program addresses
I think methodology need to be laid out somewhere so people don't veer off path
Does that kind of make sense?
https://github.com/solana-labs/solana-program-library/blob/master/token-swap/program/src/processor.rs#L1153-L1154 those are UTs that require very convoluted setup since you need to stub the token program and other things.

This other example is following a more recent methodology, leveraging ProgramTest, which stubs things for you, but also includes most programs by default (spl token,...):
https://github.com/solana-labs/solana-program-library/blob/master/binary-oracle-pair/program/tests/tests.rs
The absolute advantage of `ProgramTest` is that with `cargo test` they are integration tests which run natively on your PC and can be debugged
the same test with `cargo build-bpf` runs in the bpf vm, so like the real end product, using the compiled output of your program
so tokio::test are integration tests are the ones with #[cfg(test)] are unit tests?
your program should not be using id()
no, it is id() but where are you using it?
Ah ok, I thought it was consumed by the id() macro. you are saying the value of id() is provided by the runtime and is unrelated to declare_id! ?
the id is used for consumers, this is not directly used by your program. So I would say because it is for consumers it is for unique deployment of a program. Maybe you don't need to set it at all in your case?
This does not remove the need for small UT for underlying components
I would say `ProgramTest` with #[tokio::test] because the tests become integration tests of your program
Hey all, what is the canonical way to deploy the same program twice to the same network? Specifically how does one parameterise this line?

`solana_program::declare_id!("...");`

Hard-code a value, deploy, then hard-code a different value and deploy again?
hi guys. I can see that there are 2 methods of writing unit tests: one is writing them in the same file where the implementation lives, at the bottom (doing something like #[cfg(test)]
mod tests {}) and the other one is in a separate tests directory by using #[tokio::test]. What is the recommended way of doing it and what's the difference between them?
if a transaction fails, then is resent with the same blockhash and data. Will it be dropped or will it be processed?
can you post the script for pooling, you can do it on dm if you want, please
i just checked every 500ms since i'm querying against a local node
That's cool, per what time pooling was done? To check if program account is executable
side question kinda related. what's a tick? apparently there are 64 ticks per slot
i haven't compared the two. the js deploy is just for an automated unit test so the speed wasn't an issue
Have you tried deploy from the CLI, looks like the deploy from the loader is slower, have you noticed something like this?
yes
Do you use BpfLoader.load() for deploy?
it takes a while for the transactions to confirm. i worked around this by just polling the program account info until "executable" is true, instead of waiting a set amount of time
Hi. While trying transactions or some other commands i am getting this error " Error: RPC request error: cluster version query failed: error sending request for url (https://api.devnet.solana.com/): error trying to connect: unexpected EOF"   very frequently. I couldn't understand why. First i thought it was because of my internet connection. So i changed my internet connection. Even though  after changing it i am facing this error very frequently. Can anyone help me in this?
yes, I have bissunes logic which allow users to deploy the contract, so yes I'm using the js
Are you using the javascript thing?
I use the cli for deployment
Also some side Q, I've been deploying program, programatically using BpfLoader.load(), but right after return true (response from BpfLoader.load()) and I try to send instructions I receive program do not support instructions I manage to work around this by adding 20 sec interval after loading the program and sending intructions but it's not a cool work around, do you have any suggestions
I see, thank you so much!! ❤️
https://github.com/rooware-io/solstake/blob/main/src/components/CreateStakeAccount.tsx#L56-L60
How can I get stakePubkey with basePubkey? https://solana-labs.github.io/solana-web3.js/modules.html#createstakeaccountwithseedparams
signing is a client side process
not for signing, except for signing a transaction using `Transaction`
web3 is to talk to the blockchain
no
Something in the <@832686202074300446>/web3.js?
https://github.com/project-serum/sol-wallet-adapter/blob/master/src/index.ts#L167
Sollet implements it, phantom not yet
guys, is there a concept for signing messages like in ethereum
Target slot time is 400ms, we're maybe averaging 600ms these days. It's an area of ongoing improvement in the core software
```// The default tick rate that the cluster attempts to achieve.  Note that the actual tick
// rate at any given time should be expected to drift
pub const DEFAULT_TICKS_PER_SECOND: u64 = 160;```

how much should we expect the rate to drift?
same for logsSubscribe
For getParsedTokenAccountsByOwner the filter is built through _args
This seems wrong, nothing else is passing a 4th arg like that
Nice, i think we will also need a test for this.
PR up https://github.com/solana-labs/solana/pull/18257 (as noted I haven't tested this for an actual RPC call, just stepped through the code and made what I thought were the necessary changes). Bouta log, but feel free to leave any comments and I can get to them tomorrow morning
It's just a system account with a balance larger than 0.
How can i set my account funded?
Honestly, I don't know what is funded system account exactly.
I actually found it was missing friday
I need this too
I see thanks!
The rent parameters in `solana-test-validator` are identical to mainnet as well, so you can try everything out locally first without needing to worry about actually spending anything
Oh ok
the entire ELF is loaded on chain
size of a program is just the size of the .so after it's built
Yeah and size of program
size for a stake account?
Can I calculate size by command line as well?
>  having to use a separate account does hurt user experience.
The front-end app could do this automatically on behalf of the user too.  It would just cost another signature in the transaction
You can run `solana rent` to determine the rent-exempt balance required for accounts of different sizes, maybe this helps?
Definitely.  Web3 sometimes trails behind the new features in the JSON RPC API
https://github.com/solana-labs/solana/issues/18256
Would a PR for this be accepted? I'm still wondering if there's a reason this hasn't been exposed in the web3 package
is there an online Solana rent & rent-exempt staking calculator or visualizer? thanks!
If am I not wrong as long as you don't pass the user account to the program explicitly it restricts drastically what one can do.
For instance when doing a token transfer you need to pass the "authority" like mvines said, which in regular wallet usage is directly the user. If i sign a transaction and the user account is not provided then the program cannot "steal" the tokens, since it has no mean of providing an authority to transfer them.
ok
it presents the file architecture and the why
ah okay. Yeah I found this earlier and was starting to go through it, but knowing the files architecture ahead of time helps a lot 🤣  thanks though
I could explain but everything, but it is very well presented in https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/
This tutorial guides you and reveals all the bare essential to write solana programs
I am using `connect.getConfirmedTransaction` and I am trying to map `postTokenBalances` with `accountKeys`
With the json RPC it is straightforward but with web3js the transaction part is a `Transaction`, how would one get the accountKeys? It seems like `transaction.compileMessage` changes the order and accountKeys does not correspond anymore
This transaction.sign is not a function is weird. Cant find much on the topic.
I see. Thanks for the reply. I guess the security assumption here on Solana is just vastly different from other chains.
I did consider the mitigations:
  1. with the [lack of](https://github.com/solana-labs/solana/issues/12232) source code verification it's very difficult to "trust" a program, especially when they're upgradeable;
  2. having to use a separate account does hurt user experience.
But I get it. It's the best we can do right now with what we have. Thanks again for the reply!
i.e. EVM has its own stack rules for contracts
also does solana have any extra limitations/considerations to the rust ownership model
Hi, I'm a solidity dev trying to get into solana more to understand things. I've spent a week or so familiarizing myself with the basics of rust, and reading up on Solana more generally. Now I'm going through https://github.com/solana-labs/solana-program-library but a little confused on the src structure. Is someone able to explain to me what each of these generally are? https://github.com/solana-labs/solana-program-library/tree/master/token/program/src
You raise an interesting point.  Once you sign an instruction that grants access to the system program, it’s true that the target problem could abuse you.  The two main mitigations that I see are:
1. Don’t sign if you don’t trust it
2. If 1 doesn’t work, create an ephemeral account that only grants the program access to the maximum amount that you’re willing to risk — essentially this is the delegate pattern
---------- Job Posting -----------

Do you Love NFTs and Games? Read more!

Hello All!

Stardust is a software platform for games in the metaverse. A complete dashboard + API to allow any developer to easily build NFTs into their game. Player management, fiat payment integrations, and more.

We're hiring a Rust engineer with a love for building on Solana! If you love gaming, Rust, blockchain, Solana, and want to be part of a fast-paced, remote first, and rewarding environment - send me your resume / github / anything you'd love to add! We're a well funded team of 7 full-time, looking to add more.

DMs open 🙂
Those are the filter params, use memcmp to pick the right data
and data size to look only at a certain type of accounts
Hey guys.  My on-chain program binary is a fair bit larger than when I started writing it and the program executable data account is no longer large enough. Is it possible for me to close that account, recover the Sol, and make a new one?
> Error: Deploying program failed: Error processing Instruction 0: account data too small for instruction
How come `Connection._rpcRequest` is a private/internal method? TypeScript complains about using it and some RPC functionality is not fully exposed with web3.js (e.g. many methods do not include the RPC filter option)
Weird. Might be some framework incompatibility.  That's beyond my JS knowledge unfortunately
Actually, it's the latest:
`@solana/web3.js@1.19.0`
Or just check the installed version vs. the latest release?
I used npm install - guess i will try the one directly from Github.
Sounds like maybe you have a very old web3.js?
Anyone ever come across this error:

`TypeError: transaction.sign is not a function
    at Connection.sendTransaction (/home/tipping/solbot/node_modules/@solana/web3.js/src/connection.ts:3466:21)
    at process._tickCallback (internal/process/next_tick.js:68:7)`


///////////////////////////////////////////////////////////////////////////////////////////////

how can I get the keypair from seed pharase of an account generated from solana cli?
where to download genesis.bin
?
who can help
Unable to open "/root/ledger/genesis.bin
Also how did you define the connection? Because it doesn’t exist for me XD
Yeah I keep having that issue where I can’t import stuff. It’s seems to be that for a lot of stuff
Yes, there is the channel <#842128118655221760>
I was not able to import KeyPair, but I have no idea why. I am using Account while I don't figure it out! 🙂
is there any specific "rust only" channel? this channel get crowded by client based (js) script, not the core code itself. i can't see much conversation related with "rust" code.
Thanks
The release binaries require it, yes. You can build from source as I already suggested
Must the cpu have avx2, mine is showing only `avx`?
I will try that
Sounds like your CPU doesn't have AVX/AVX2 support.  You'll need to build from source on the target system
I install using the curl command from official docs, not building from source
I have also tried on solana v 1.6.11
1 have 1.6.6
what version do you have installed of the solana CLI tools?
Running `solana-test-validator --log ` gives this  message
https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=50d1dbb45c5cccb28271f80ef94c9ce5
There is no error, this is the output of running solana-test-validator
```
 
Ledger location: test-ledger
Log: test-ledger/validator.log
⠁ Initializing...
Illegal instruction

```
Are you trying to get the tokens account for an account?
Can you provide the full error message or was that it?
Despite having correct configuration, running solana local node using `solana-test-validator` causes the solana chain to exit with the message `Illegal instruction`, what does that even mean? Can anyone help me solve this issue?
Thank You So Much!
Also, using the cli, how can I see another account's token-account addresses?
How do I inspect a program's data, using the cli?
Hey everyone I'm hoping someone can help me out, I'm trying to get a token account for a user, and in a way that gets me the pubkey for that token account. Right now I'm only able to get the balance:
```rust
/// Check for account
fn check_for_account(
    rpc_client: &RpcClient,
    key: &Pubkey,
    commitment_config: CommitmentConfig,
) -> Option<Account> {
    rpc_client
        .get_account_with_commitment(key, commitment_config)
        .unwrap()
        .value
}
```

Account has a field `lamports` you can then review
Please help me
Is there any function to fetch balance of a taken account?
I am connecting to devnet
After running `solana-test-validator --log` I get `Illegal instruction` and the validator exits. What am I missing?
How to check token account balance in rust?
can someone help me? my problem is still not solved
Hello everyone, i would like to ask you the following. Is it possible on Solana to pay the Rent of address X an other address Y? Thanks
Awesome thanks, and should I define the pubkeys like ```let mintPubKey = new spl_token.PublicKey("pubkeyhere");```
```
    /// Refresh an obligation's accrued interest and collateral and liquidity prices. Requires
    /// refreshed reserves, as all obligation collateral deposit reserves in order, followed by all
    /// liquidity borrow reserves in order.
    ///
    /// Accounts expected by this instruction:
    ///
    ///   0. `[writable]` Obligation account.
    ///   1. `[]` Clock sysvar.
    ///   .. `[]` Collateral deposit reserve accounts - refreshed, all, in order.
    ///   .. `[]` Liquidity borrow reserve accounts - refreshed, all, in order.
```
Heads up to the dev who wrote the token-lending-program, whats the 2nd and 3rd? is it index 2 and 3 or its literally ..?
Could you please help me to solve it

I'm transferring tokens using PDA, but getting this error
Has anyone encountered this error? Added an ix, the interface that worked normally before reported this error, and the export log introduced on the debug page did not have more log information.
>>>
Program failed to complete: Access violation in stack frame 1 at address 0x2000015f8 of size 8 by instruction #10422
The problem was in the Cargo.toml file - the dependencies were all pointing to their corresponding files. I specified versions instead and it worked. There were other problems with the example ...
airdrop down again?
`solana airdrop 1 4F5ksgghhMeD83Agjf9knypguSoW87nLba75HJbBJwBW --url https://api.devnet.solana.com
Requesting airdrop of 1 SOL from 65.21.40.30:9900
Error: connection timed out`
Hey all, I am developing a "revenue sharing" program and I need to do some calculations with token amounts using 2 decimal places.  For example, if I have 2500 tokens (250000 u64) and I need to calculate 30% of this value as u64, what is the best practice?
1) Can I just convert the numbers to f64, do the calculation, truncate the result and convert it back to u64?
2) Or do I need to use the spl-math program?
Hey, basic question. I want in an iOS app to generate the 24 word seed phrase. Can an iOS app use the Command-Line commands? So the ‘solana-keygen new’ command. Or is this not how it works?
👋 Good morning guys. I have a question in **web3.js**

Is there a way to retrieve transactions of an address in a DEX? 

I know there's `getConfirmedSignatureAddress` 

but that would still require me to do `getConfirmedTransaction` 

which is going to require multiple JSON RPC calls.

Any help or advice would be greatly appreciated. thanks!
Does someone know how can I get token account info in Rust? 
Can I just access the account info unpacking the data stored in it?
To get account info related to a token, you need to have an instance of  Token using proper mint public key. Something like this
```
const connection = new Connection("http://localhost:8899", 'singleGossip');
const token = new Token(connection, mintPubKey, TOKEN_PROGRAM_ID, null);
const accountInfo = await token.getAccountInfo(acctPubKey);
```
I've been going over raydium txns and this one staking txn looks different from the 100s of others I've seen in that it has neither internal instructions nor pre/post token balances in the meta section. I'm curious as to what makes it different?
https://explorer.solana.com/tx/3SxiFEM2Wy2ov1r654XV81bA3BQwmQtZkj36Z94U7h3SUMiALCJTh1hu4NhLPHCUeFyz9LrjgbV9oV62MP35aBis
Hi <@!501570363566587905> , thanks for this info from more than a month ago. I tried running the cashiers-check example as is, and I am getting this exact same error. I tried it on both my local testnet and devnet, same results.
hey guys, are Solana blockhashes random?
`C:\Users\thegod>solana-tokens spl-token-balances --input-csv boost1.csv --mint BpWXPu81bKDt1ihJcTjrphqD2uxRvgBpYs3deGxnvhSk
Error: IoError(Custom { kind: Other, error: Error(Io(Os { code: 2, kind: NotFound, message: "The system cannot find the file specified." })) })`

can anyone tell me what is the problem? is it the wrong data location or the wrong file format?
Hello! Here: https://github.com/solana-labs/solana/blob/ed9cbd50f039afa9fbe9865a7099fefc03a778fd/runtime/src/system_instruction_processor.rs#L172 is it forbidden to transfer from account that carries a data. Could you please explain why is that?
Might want to look at metaplex before you get too far down that road…
same thing when creating a keypair with web3
```const  spl_token = require("@solana/spl-token");   ``` why when I use this with javascript I cant call some of the methods. example it says spl_token.Token.getAccountInfo does not exist
What would be the recommended way to decode and pack ```swap_curve.calculator```? Residing within an Initialize instruction in token swap
Yes, similar to how explorer.solana shows them
So you could see what instructions were invoked in your program
Oh nice
According to the docs, yes.
Sort of a question on your question lol. But with the getTransaction are you able to see the log data?
Specifically, I’m wondering about transaction log output lifetime for a getTransaction call. I can’t imagine all validators keep full history??
Awesome I’ll try that
Use the getAccount method in that library with the ATA address for the token
Well how lol. I’m trying to get the balance using wallet key and mint. Not sol balance
Anyone know how long transactions are available from the JavaScript getTransaction method?
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js
Use the token.js library to grab it.
Ok so once I have that account how do I get the balance in that token? when I get the balance its just zero because its looking for sol
Hello, we are developing NFT-heavy game (TCG) and encountered a problem. User is able to create some NFTs (cards) and store their (game specific) metadata. Our program has a way to get such metadata for given NFT by it's mint account key. It works just fine, but at some point we want to show player a list of all his NFTs of this type in his client (based on solana/web3.js). The problem is each NFT has it's own mint account, and there is a huge amount of possible NFT types. 
The only way to find all user's NFTs is to iterate all known NFT types with web3.js Connection.getTokenAccountsByOwner. But it seems an awful method on big enough amounts of NFTs. Any advice?
maybe thats the problem
XD
Lol looks like I have version @solana/spl-token@0.0.11 and the newest is 0.1.5
I'm using the dapp-scafold
Does anyone have a wallet adapter for Sollet Chrome Extension?
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L2237
Might want to check the version of spl-token that you have
or not now I get ```spl_token.Token.getAssociatedTokenAddress(
                ^

TypeError: spl_token.Token.getAssociatedTokenAddress is not a function
```
xD
i neeed to do spl_token.Token.
O WAIT
<@!840683071496912916> sorry for the trouble again. but do you know why I would be getting this error ```spl_token.getAssociatedTokenAddress(
          ^

TypeError: spl_token.getAssociatedTokenAddress is not a function
``` and I have spl_token defined as ```const  spl_token = require("@solana/spl-token"); ```
Oh cool thanks!
```
import { Token } from "@solana/spl-token"

await Token.getAssociatedTokenAddress(
    splAssociatedTokenAccountProgramId,
    splTokenProgramId,
    mint.publicKey,
    wallet.publicKey
  );
```

Something like this
So something like ```const  spl_token = require("@solana/spl-token"); 
let wallet = new spl_token.PublicKey("");

wallet.getAssociatedTokenAddress();
``` 🙂
Yeah, it's part of spl-token
I used web3
<@!840683071496912916>  so is getAssociatedTokenAddress part of <@!750257486975467582>na/spl-token? I defined my keys using ```const solana = require("@solana/web3.js"); 
let key = new solana.PublicKey("");```
Ok cool thanks
I believe you can just use `Token.getAssociatedTokenAddress`
<@!840683071496912916> So I was looking at this and it appears to use type script annotations. Im not that familiar with typescript  and I was doing it in javascript. Do you have any you know how I could do this in javascript thx!
Can I dm you to provide a bit more context on my idea?
Thats deep down in technical details, you really don't need to concern yourself with much of that low level stuff nowadays.
Thanks for the response, really appreciate it. Looking at your link now
i will check this out thanks
Yeah I have the wallet address and the mint
> Is there any way a Solana program can access the private key of an account without compromising security? 
no
> Or any sort of useful by-product / derivative of the private key?
whatever you're trying to do is likely solved with a program generated address/signature - maybe?
> Where can I learn what data is generated when a transaction is signed? Tried to look for it in the docs without success
Not sure what you mean. It uses standard ED25519 signatures. https://cryptobook.nakov.com/digital-signatures/eddsa-sign-verify-examples
if you're at the top level of things, you can't use await - you'll have to use then/catch: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
where can i run a wormhole demo
I assume I'm asking the wrong questions here. I assume the right way to do this is to utilize a value generated by the signature event
Hey still learning here. I'm trying to learn more about the signature action. I have an idea for a dapp that touches on encryption and one set of methods for encrypting information between two parties is using a private and public key set. 

 - Is there any way a Solana program can access the private key of an account without compromising security? 
 - Or any sort of useful by-product / derivative of the private key?
 - Where can I learn what data is generated when a transaction is signed? Tried to look for it in the docs without success
hope it dont take me that long :( but thanks for the heads up, yeah i will be mulling a lot
Do you have the wallet address? You can use https://spl.solana.com/associated-token-account to go from wallet to account address for a given mint.
I'm trying to use the float64 `.ln()` function, and getting 

```
 Program failed to complete: ELF error: Unresolved symbol (log) at instruction #11900 (ELF file offset 0x172f8)
```

Is the natural logarithm function not supported in the Solana ecosystem?
I cant seem to find the documentation for ```@solana/spl-token``` I am trying to find the balance of an account using a  mint address.  any pointers?
and when i then remove the await from the `await Token.createWrappedNativeAccount()` the tests pass again, but now it's back to being a promise <pending>
and when i place this call to `createWrappedNativeAccount()` in my tests it causes all of them to fail, when they weren't before
how are other people wrapping their SOL for other defi protocols?
confused because wrapping it in another function just seems totally unnecessary, and further because why can't this `createWrappedNativeAccount` function act like any other token client function? i havent' found anything helpful in the discords
i'm calling it from an anchor test js file
im confused
```
/home/wil/jet/jet-anchor/tests/jet.js:45
    let test2 = await yourThing();
                ^^^^^

SyntaxError: await is only valid in async function
```
are you calling it inside an async function as well? you can't call await inside a normal function
i.e.
```
async function yourThing() {
...
let test1 = await Token.createWrappedNativeAccount(
...
}
```
Hey are there any examples of sending an SPL token from a keypair using javascript?
it is a static async function so why can't i await it?
otherwise it's just pending
then i just get: 
```
let test1 = await Token.createWrappedNativeAccount(
                ^^^^^
SyntaxError: await is only valid in async function
```
```
ClientErrorKind::Io(_) => {}
            ClientErrorKind::Reqwest(_) => {}
            ClientErrorKind::RpcError(_) => {}
            ClientErrorKind::SerdeJson(_) => {}
            ClientErrorKind::SigningError(_) => {}
            ClientErrorKind::TransactionError(_) => {}
            ClientErrorKind::FaucetError(_) => {}
            ClientErrorKind::Custom(_) => {}
```

Out of all these, are all of these caused by the node? (as in these are completely all the node client's problem and the machine's config right?)
Really, spend a couple weeks in those docs. Just those first 5 pages (under “developing”)are so difficult to digest. Took me a couple weeks really mulling over that to fully understand what a Solana account is and how it’s used properly in onchain programming.
In JavaScript? You could call getBlocks and then getBlocktime for blocks you want time on.
is there any api to get the average blocktime for the last 1hr or maybe the last day?
hypothetically, if one wanted to use solana's transaction speed to build out a tokenized torrenting (file sharing) protocol, would there be a way to create some sort of offchain state channel to keep track of token transfers between peers? I imagine settling onchain for every piece swap would create a lot of unnecessary noise/lag..
not my intention wink wink
Sorry for stupid question, I want to deploy a program to a different address than default, so I changed keypair in config, but I get this error`solana program deploy path/to/program.so
Error: Program's authority Some(UljPpSibGqyRAeEQGyDcBTQx8kQTDxHTAbDDxn7z1612) does not match authority provided T1jizxWhH5jRrvJFxM1bFe7VDyXVAQRbufA3Z1hwiI6e`
How can I do a Snapshot of all token X holders?
There's a converse to that where people don't bother reading or even attempting to search and burn the knowledgeable people out with repetitive questions 😉
:P alright. ill read through this but i may come back with questions
I agree, but this is written in the first paragraph 🙂
you know, sometimes you read documentation for days and days and then you ask a few questions of people more knowledgable and it saves a lot of fuckin time lol
I think the doc addresses most basic questions, you can search at the top right
in solana case VM => inside the nodes
It's an instruction set
https://docs.solana.com/developing/on-chain-programs/overview#berkeley-packet-filter-bpf
BPF is an instruction set to be run in a VM
this is better i guess.. i dont get, what is BPF? Is that some sort of dependency manager?
The source never lies. https://github.com/solana-labs/solana/blob/master/sdk/bpf/c/inc/solana_sdk.h
methods, etc
there's no official documentation like a Javadoc or something (except for C ofc)
i cant seem to find any solana language resources beyond just examples
yeah but where is the documentation that describes these objects as they relate to the C objects?
yup, hoping anchor solves it once and for all
Yeah, I had a prototype at one point that did instruction building and state deserialization in wasm with a typescript wrapper
I understand that anchor solves this problem, but a slim wrapper for vanilla could be nice
ok so it has been explored before
i don't like the typescript spaghetti that always ends up lying and blowing at runtime
That's been a dream forever.  <@!466984915376799748> hacked on it a bit at one point. We never really got it off the ground though
also i am lazy and i want to change only one place
Has anyone ever tried to expose instruction building to the web through web assembly? It feels like there is a missed opportunity to have a slim client layer
Those have nothing to do with a language, those are architectural pieces you need to understand https://docs.solana.com/developing/programming-model/accounts
also where do the objects SolAccountInfo and SolParameters come from? im used to Java and Python and SOlidity and such and im having a hard time understanding all this
what is the BPF SDK?
Well, apparently CMAKE cannot build when the absolute path contains parentheses so it was for this error.
So i'm having 0 error left and i still get ELF error: Failed to parse ELF file: bad magic: 0x0 :/
not yet, we haven't enabled it yet
it's because when bpf programs are invoked, there is a region of memory reserved for loading account data. Each account is padded with extra memory space in case its data size increases. That padding is restricted in size to avoid using too much memory but as large as possible to allow account creation (up to 10KB)
Ah right.  C dev in me is leaking out 😬
Oh, it's an OOP thing... that means that method should be called like `Token.createWrappedNativeAccount` vs `nativeMint.createWrappedNativeAccount`
Doesn't `static` mean "not-exported" in JS?
Probably oughta resolve that syntax error
Here more informations on the error when i do a npm run build:program-c

`TypeError: nativeMint.createWrappedNativeAccount is not a function`
i can see it in the spl-token library, but literally cannot get it to wrap SOL for me
i keep getting this error, while all i need to do is wrapped some SOL into wrapped SOL
`createWrappedNativeAccount` is not a function
i mean, realistically i dont need bigger ever because i could just shard my buffer, but it would be annoying
i probably dont need bigger for now but trying to plan ahead
why do program invocations of `create_account`  have a much smaller byte limit than client invocations? is there a way around this?
I might have something
This is the make file i use, based on the hello world example

Then when i run a sudo npm run build:program-c, i got an error:
makefile:3: /sdk/bpf/c/bpf.mk: no file or folder of this type
make: *** no rule to build target /sdk/bpf/c/bpf.mk
Are there any blogs or benchmarks about solana's jit compiler I can check out?
You can run your own RPC node or get premium access from rpcpool.com
<:crysmile:780597681785143326> Is there any way to whitelist our server for Testnet's API? (I can PM the IP)

We're indexing on a 64 core machine but its limited to 18 now because of the 10/s limit.. And even 18 causes RPC errors due to overpolling
Clearly a writing problem ?
When i check the elf with a hex reader, it's full of 0
ah got it, looks like the elf verification happens before the deploy
the problem is from today so..
might be yeah
last transaction I see on devnet for this address is from 5 days ago and was a successful deploy
https://github.com/Mystiik/MyField-Solana/tree/main/src/program-c/src/program
8A4YH1ijVuLLuBtyPqqmTkFvWUCVKUXdaczEDEUDcAGq
yeah, so that means you're using devnet. Can you share your address as well?
`$ solana address`
Can't create a dump apparently, i can share github repo if you want
<@!466984915376799748>
You mean this url ?

good point, <@!239813934360690690> which cluster did you deploy to? Can you share the address of the deploy buffer you used?
Or maybe write instruction to the first part of the account data failed?
not a valid ELF file. probably something happened when it was created. in other words it wasn't really linked properly by our tools.
The first few bytes of an ELF file identify it as such and are called the "Magic bytes".  in your case looks like you are attempting to deploy a file that is not an ELF
Hew, someone know how many time it’s need for a pull request to be treat on the token-list ?
<@!792782891196874792> <@!453347985628200960> any idea what would cause this for C programs?
hmm actually I think it will be more useful to share an elf dump, directions here: https://docs.solana.com/developing/on-chain-programs/developing-c#elf-dump

yes
My ELF file is the program.so ?
Probably not, i'm using npm run build:program-c
Did you build with `cargo build-bpf`? do you mind sharing your ELF file?
fast JIT compiling
What advantages does Solana get from targeting BPF vs some other VM?
When i do a solana deploy I get an ELF error: failed to parse ELF file: bad magic: 0x0 
Any idea why ?


///////////////////////////////////////////////////////////////////////////////////////////////

While decoding data from account, I get only recent data, what's the way to get all data?
Hi all! I am trying to send a signed transaction in JS using `connection.sendRawTransaction(signedTx.serialize());` but I am getting the following error:
```
index.browser.esm.js?64b9:1983 Uncaught (in promise) Error: Signature verification failed
    at Transaction.serialize (index.browser.esm.js?64b9:1983)
```
It was working before, when I was using a hardcoded private key and using a slightly different code:
```
connection.sendTransaction(tx, 
        [ initializerAccount, sharedAccount, stateAccount], 
        { skipPreflight: false, preflightCommitment: 'singleGossip'}
    );
```
 Any idea on how to solve this?
how do I add a ticker to a token I created? like ERC20s have tickers
That would be awesome thanks!
I will share what I get to work
let me try and see how I can use it
By reading replies to the last time you asked the same question?
in my case used it like this ```const  token = require("@solana/spl-token"); ```
Yeah so you can actually use it here https://www.npmjs.com/package/@solana/spl-token
the token.js file  has the methods to check and create token account for user and send spl token to the user
trying to figure out how to use it
https://github.com/solana-labs/solana-program-library/tree/master/token/js/client
I found something that seem to have all the functions to achieve that
Yeah, I thought that may have been the problem at first, I copied an example to start and it was using like 0.0.1 or something crazy. I will try to update it again
Maybe you just have too old a version? Keypair is new
I only pretend to know JavaScript. Sorry.
Yeah my problem is I'm trying to set it up so I can run it with nodejs as in when I run the file im just doing "node index.js". I saw <@!837069646413955084> had gotten a little help on how to do this since you apparently cant just use import and you have to use ```const  spl = require("@solana/spl-token"); 
const web3 = require("@solana/web3.js"); ``` I really am not to familiar with javascript so im not sure if thats totally correct. I also was trying to use https://solana-labs.github.io/solana-web3.js/classes/keypair.html and when I do ```
web3
.Keypair``` it seems that is does not exist. I get an error when compiling and it does not show up in vscode. maybe you might know something that can lead me into the right path
Probably best to check the tests in the token JS library
kk
if you do lmk
xD no sadly
@did you find help with this issue, currently trying to do the same
Probably a question for support in whatever protocol you're planning to interact with
hey ive been running into this error code when trying to install Solona

curl: (35) schannel: next InitializeSecurityContext failed: Unknown error (0x80092012) - The revocation function was unable to check revocation for the certificate.
`spl-token accounts --owner OWNER_WALLET_ADDRESS` should do that
still interested in this one, whether through cli or through js
Can't find a way with CLI, but easy enough using the js client
explorer shows funds instantly
:):)
bartosz you here?
that's in useEffect() hook in react
`connection.onAccountChange(selectedWallet.publicKey, (acc) => {
          if (acc) {
            setBalance(acc.lamports);
            toast({
              title: "Success",
              description:
                "Federal reserve sent more money to " +
                selectedWallet?.publicKey +
                ", new balance " +
                acc.lamports,
              status: "success",
              isClosable: true,
            });
          }
        });`
i'm doing this, on devnet i get response in 12-14s, on tesnet nothing
any core dev has an explanation for this?
testnet websockets don't even work..
(20s)
adding the sleep time everything goes just fine
removing the time sleep and only having the response time of devnet (from responseTime of request) i got the following error 

{'code': -32002, 'message': 'Transaction simulation failed: Error processing Instruction 0: incorrect program id for instruction', 'data': {'accounts': None, 'err': {'InstructionError': [0, 'IncorrectProgramId']}, 'logs': ['Program 8n5aQk7BNV778hd464wB1YTsBs4vq1KsgropHcF6PcV5 invoke [1]', 'Program log: entrypoint', 'Program log: Target account does not have the correct program id', 'Program 8n5aQk7BNV778hd464wB1YTsBs4vq1KsgropHcF6PcV5 consumed 696 of 200000 compute units', 'Program 8n5aQk7BNV778hd464wB1YTsBs4vq1KsgropHcF6PcV5 failed: incorrect program id for instruction']}}
hye guys i have a doubt, i develop a program which creates an account and afterward upload data into it, nothing fancy.
it works fine if between account_creation and data_upload i add a sleeptime of 20s, its just because devnet is slow? will in mainnet also have this constrain time constrain?
if i use polling and just do request to get balance after airdrop request i get it in 1-2s
like 10s?
is there a reason websocket response on devnet is slow?
Is there any reason why system_instruction::transfer() wouldn't work when from_pubkey is an account owned by the program?
Hopefully someone will know lol
https://github.com/solana-labs/token-list/blob/4ea7bda51a2eee3e9adb043a1afe5d3594b92b20/.github/PULL_REQUEST_TEMPLATE.md checkout the first sentence in the PR template 😆
Hello everybody. Tell me how quickly the PR in this repository is approved?https://github.com/solana-labs/token-list/blob/main/src/tokens/solana.tokenlist.json
If the account key is in the `accounts` vector of the `Instruction` then in your program entry the `&[AccountInfo]` will map to each key
I am also wondering the same thing <@!539801435571748868> helped me before he may be able to help you
It looks like there is no way to get account info by Pubkey inside the program, as you need to get account data to unpack account info for it. The only way I know is to get it via rpc request https://github.com/solana-labs/solana-program-library/blob/304d6a15dfcb82383824c17fcd8df2c9f3623c63/token-lending/cli/src/main.rs#L133.  So maybe you need to store base58 and account info in your program. Or send it in instruction data/accounts
I am trying to create my own implementation of a dex by cloning this https://github.com/project-serum/serum-dex-ui . Is there any way I can define the fee for transactions? Or atleast the fee tier based on conditions of another token on solana?
Are there any good examples of transferring SPL tokens from a keypair in javascript/nodejs?
One more thing. If I try to reuse an account with invoke, I get: instruction tries to borrow reference for an account which is already borrowed. I'm using foo.clone(). What's the correct way around this?
It reads that `slot` is a temporal aspect
hmmmm... someone smarter than I can answer or look here: https://docs.solana.com/introduction
one slot is like a block right? so a slot can still have multiple txs?
Still, chunking that up (assuming you've optimized to reduce EU count) may provide a path
yeah it's the execution cost
Sounds as if the data size is not your issue but the actual execution cost for your program logic is
yes, that is the case for bigger data loads (> 1231 per trans). But to reduce the execution unit count which is capped at 200_000 we execute some degree of logic per chunk instead of snowplowing everything to the last one.
what if the contracts are already deployed, and there's no way to modify them hypothetically?
so you store chunks and only on the last one, actually execute stuff eh?
oh wait I think I misread
is there any way to chunk them but still have them in the same slot?
in my case I have a bunch of stuff that has to happen in the same slot
One strategy we use is to *chunk* up the transaction into multiple and on the program side, store the chunks until the final one then execute the intended logic.
Any ideas?
I'm trying to fetch all Serum markets but request fails.
conn.getProgramAccounts(new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'))
#
# Fatal error in , line 0
# Check failed: i::kMaxInt >= len.
#
#
#
I am trying to create my own implementation of a dex by cloning this https://github.com/project-serum/serum-dex-ui . Is there any way I can define the fee for transactions? Or atleast the fee tier based on conditions of another token on solana? <@!639493393512398869> <@!539801435571748868>
ok, let me check
And I think there is no way to build `AccountInfo` from pubkey within instruction processing routine
When we send instructions with pubkeys - runtime converts them to `AccountInfo` type and build array [accounts] which we use. invoke and invoke_signed required that we pass `AccountInfo` types to them.
But if you do invoke_signed, the owner or delegate should be your program derived address, its seeds should be in authority_signer_seeds
What's the lowdown on splitting transactions to avoid hitting the compute limit? Are there any best practices?

What if all those instructions have to be done in one tx, how do we get around the "exceeded maximum computations allowed" error?
https://github.com/solana-labs/solana-program-library/blob/c9e3689a940e206ba2a852d328a56e76f98f8793/token/program/src/instruction.rs#L96 - should be pubkey
https://github.com/solana-labs/solana-program-library/blob/c9e3689a940e206ba2a852d328a56e76f98f8793/token/program/src/instruction.rs#L98 - and source account owner is signer if it is not of multisignature type
Look, here: ```  let result = invoke_signed(
        &spl_token::instruction::transfer(
            token_program.key,
            source.key,
            destination.key,
            authority.key,
            &[],
            amount,
        )?,
        &[source, destination, authority, token_program],
        &[authority_signer_seeds],
    );```  source and destination must be AccountInfo. That is the problem
`connection.getBlockTime` return type `Promise<number | null>`
"<null> timestamp is not available for this block"
but it can throw in some circumstances
Okay, makes sense. Thanks Kirill :)
You don't need to construct AccountInfo to transfer, only provide source account pubkey,  destination account pubkey (in your case it will be constructed from base58) and  source account owner signature when invoking your instruction.
Like here https://github.com/solana-labs/solana-program-library/blob/c9e3689a940e206ba2a852d328a56e76f98f8793/token-lending/program/src/processor.rs#L619. This is for Spl token transfer. For system program and native token you'll need to use transfer function from system program crate
I mean, I could try constructing the entire AccountInfo struct, but then I'm not sure how to find info for certain fields.
Rather than calling invoke
How could this work with try_borrow_mut_lamports?
Ok. So you can create PublicKey from this base58 data and create transfer instruction. You don't need account info for transfer, only signature of the owner of the account from which you want to transfer
Yes to everything, except the pubkey isn't passed in accounts[]. It would be a u8 array or base58 read from somewhere else.
Am I right, that  you want to transfer from account that belongs to your program to another account which pubkey is provided via accounts[] in the instruction?
Yeah, or just lamports
I see. I want to get AccountInfo for system account
spl token transfer?
I want to construct a variable so I can make a transfer to the necessary address.
You need to know account structure to get account info. That's why I've asked about account type. Do you want to get token account info or your custom account?
Yeah, like in your example: `lending_market_owner_info` has type `AccountInfo`, but owner is just `Pubkey`. How can I get `AccountInfo` for `owner` ?
lol hivemind
Is it possible to get a valid AccountInfo just from a base58 encoded key with solana_program?
Hi. Which AccountInfo do you want to get? Do you mean something like this https://github.com/solana-labs/solana-program-library/blob/c9e3689a940e206ba2a852d328a56e76f98f8793/token-lending/program/src/processor.rs#L146 ?
Is it possible?
Hey! How can I construct AccountInfo from a pubkey (only) when processing instruction?
Then that is something I'm not aware. I know the account data can be from 0 to 10 Mb at creation time but can not resize once created.
Question for core team - is there a roadmap for when slashing will be implemented? At least roughly - 1,3,6,12 months from now?
>>     getConfirmedTransaction(
      signature: TransactionSignature,
    ): Promise<ConfirmedTransaction | null>;
Hi guys! 

Regarding https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedtransaction from @solana/web3.js@^1.17.0

The doc states there is a second parameter "(optional) Configuration object containing the following optional fields:" while the actual method only has one
is there a helper function to wrap/unwrap wsol from the client?

EDIT: found if anyone else runs into https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L596
Im not sure about that, i heard that you could increase an account data size of 10kb for each transactions
I am trying to create a new wallet. But im getting the following error:
it was fun tho
unfortunately i will not be able to submit a working project in time
but very rewardding
ddamn this was hard as *f*
Anyone knows a good tutorial of how to test a Solana program? Currently there isnt an IDE like remix of Ethereum, its a challenge to debug and test Sol program to me.
yep, makes sense... there's already a faucet for USDC/USDT in devnet (https://secret.mercurial.finance/faucets)... I guess I'll use their Token Address for those... it'd be good to include those SPL addresses in the SPL token list, so the wallets display something friendlier than "Unknown Token"
Maybe some oddity with my rust version? Should I just ask again here on Mon?
I don't want to tag anyone on a weekend
Uhm those should be supported I think, but you might need to wait until Monday for someone to help you
Seems to be a ton of functions on floats, like `.round()`, `.ln()`, etc fail with `Unresolved symbol (round) at instruction #xxx`. Having trouble finding a good substitute for these, especially `.ln`.
<@!804350183105363980> do you work on the core blockchain at all? I'm having some issues with rust code compiling into commands that solana chokes on.
If you need support setting it up, please go to <#837340113067049050>
Thanks for the info!
Here you can find the rate limits of the public endpoints:
https://docs.solana.com/cluster/rpc-endpoints
You can use this Ansible role:
https://github.com/rpcpool/solana-rpc-ansible/tree/4e5e15b741844dbed6e731279769c6de39c55ebc

I'll take you a couple of minutes
We're running our dApp on Devnet and getting rate limited quite hard on the public endpoint (we've made some optimisations + caching in code, probably still a bunch more to make tho). Any suggestions on RPC providers who support devnet, and/or how much effort would it be to get an RPC node running on AWS (as a temporary workaround for the hackathon). Cheers, appreciate any advice
it's best to create your own new tokens on devnet and use those. Although it would be cool if someone created spl token faucets on devnet for everyone to use for testing
it makes it kind of hard when you want to test multiple swaps across multiple SPL tokens you want to support in your program, if you only have the XYZ token and SOL in devnet
any ideas where I can find these... do they even exist? if they don't, anyone knows why?
@here
I'm trying to find the Token Addresses for USDC, USDT, BTC and ETH in devnet, but no luck... in the official Solana Token List repo they only have mainnet records
Is there a convenient website to view an accounts raw data on devnet using something like solana explorer or solanabeach?
Edit: `solana account <pubkey>` does what I want
I'm coming from web3 and there isn't many examples of real world examples of calling the chain so wanted to see if anyone could give me a good place to start
Hey I was looking to get some info on calling the chain to check a users yield farming assets?
Hi guys, I just spoke with Austin Federa & Stephen Hess from Sol who are working with the Metaplex platform. 

We are launching an NFT platform releasing NFTs for a number of UFC stars and EPL footballers, with more sports in the works. 

We're putting pen to paper on a very big partnership on Monday with a large sports company. The campaign has the potential to reach hundreds of millions but we're working on a tight deadline. 

We need some assistance on front end development as well as plugging the back end Metaplex marketplace in to create our platform within our short timeframe. We need high end design due to calibre of clients we are dealing with. We also need a developer familiar with the sol eco-system. Please get in touch if you can help us move quickly and have good experience with our requirements. Thank you.
line 572
that makes sense
ah okay
transfer the tokens out first.
Oh, it has a token balance.
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L586-L592
the close account instruction does that
Transfer out the SOL from it first.
That error message describes exactly what the problem is...
attempting to invoke the `CloseAccount` instruction on an SPL token account (note: a non associated token account) is giving me this error:

```
    Program log: Instruction: CloseAccount
    Program log: Error: Non-native account can only be closed if its balance is zero
```

im trying to run this instruction from a program if it makes any difference
Do you mean can you dynamically increase the data size on an account? Currently the answer is no, it is fixed once you create it.
Any exemples of an account data size increased on C ?
If there is any, i will take it on rust
and thank you for the help btw
See the way I’m doing it doesn’t let me use import I have to use require. Any idea why that is?
It's taken quite a while to build but the local testnet is working. Building from source solved the issue 🙂
okay, got it, thank you
you generally want to use https://spl.solana.com/associated-token-account, which you can think of as a function that maps a (wallet, mint) pair to a token account address
how that works in the wallet? are those seamlessly linked to his main SOL account or he needs to manage them separately ?
oh, so basically, a user need to have as many accounts as he has SPL tokens?
no - each account can only hold tokens for one specific mint
related question, can the same account hold multiple different tokens?
I only see the "getTokenAccountBalance" which returns the token balance of an SPL Token account?
is there a API call to get a token balance of an account?
I use these imports: 
```
import { AccountLayout, Token, TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { Account, Connection, PublicKey, Transaction, TransactionInstruction } from "@solana/web3.js";
```
yes with pubkey
I believe there is instructions in the docs for -write out file location
and what's the difference between TransferChecked and Transfer instruction
where can I get instructions list in Solana


///////////////////////////////////////////////////////////////////////////////////////////////

hi everyone i have a question. so im creating two keypairs  in node js and then funding them via air drop on my test validator. i want to use node js to transfer lamports from one wallet to the other, how would i do this with solanaweb3? ive seen it done with the systemprogram but i dont think thats the right way to go about it when not on testnet right? thanks so much for the help
I had to restart vscode. works now 🙂
np!
Haven thought about this, thank you!
Jus like how we intialize a npm project with `npm init`, is there any command for intializing solana project?
A beginner level question: How do I intialize a solana program project?(with rust)
Sounds good. I'm really looking forward to this one. (Already have the C declarations ready. :) With that it should be possible to grow accounts without exceeding the compute budget; all in one go without coming up with some incremental copying scheme.
yeah, you could use a program derived account for that. The called program can verify that a certain program id + seed == pda signer
Is possible to make a function which can only be called by a specific separate program?
Ah, yeah, that feature just got released, I'll be activating it on testnet and devnet.  You can call them directly as syscalls when they are.  We are also planning a new tools release that authomatically translates large memory operations into these syscalls but we don't want to release that tool version until this feature is enabled on mainnet
I am receiving 502
Hi folks .. does any of you having problems to connect to devnet cluster using the web3.js API ?
Wait, you're talking about the "sysvars via syscalls" feature, right? I meant the one that introduces memcpy, memcmp etc... as syscalls. That's not even active on devnet yet.
Probably something else is up, I just tried installing it and doing:
```
const web3 = require("@solana/web3.js");
const keypair = web3.Keypair.generate();
console.log(keypair);
```
and it works
Planning to mark it for activation on mainnet today, should be activated at the next epoch, didn't want to enable new features on a Friday 🙂
The transaction fee parameters are defined in code.  To change them, there would need to be a code change that is accepted by the entire network.  The way we roll out these kinds of code changes is through this governance model: https://spl.solana.com/feature-proposal
Yes I also got this same expected item error.  Thanks for the tip
Can you say a little more, or point me to a discussion? I'd like to get clear on where the transaction fee is set
governance
What is the mechanism that will keep transaction cheap if SOL were to increase substantially in value vs USD?
derefence meaning - get the value located on the address?
`*(*(var))`, except clippy will yell at you about unnecessary parentheses
It's just two dereferences
for example: ` **program_account.try_borrow_mut_lamports()? += 1000000000;`
yo guys what `**` means in rust, cant find it in the docs lol
On a related note, <@!453347985628200960> I remember you mentioning that you were about to enable this feature (syscalls for memory operations) on devnet, but it looks like it's still inactive. Was there a problem with it?
Do you know why I am getting "Module '"@solana/web3.js"' has no exported member 'Keypair'." I remember trent said Keypair is new to to solana/web3 but im on "^1.17.0"
I am developing a full stack J2EE wrapper and server app with open source DB for all validators to use to manage their staking pools so I need a JSON switch on `spl-stake-pool` Can anyone help and I think i can hack around in rust to use the code u already wrote to do the same thing in the `solana` app if I have too. 🙂
what the heck:
`Error: failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions
    at Connection.sendEncodedTransaction (/home/amel/playground/solana-game/node_modules/@solana/web3.js/src/connection.ts:3469:13)`
Hey everyone I'm hoping someone can help me out, I'm trying to get a token account for a user, and in a way that gets me the pubkey for that token account. Right now I'm only able to get the balance:
thanks
oh, I see; yeah, I remember reading about that, but for whatever reason I thought using `msg!` wasn't
String formatting is expensive
any ideas why this simple snippet ends up consuming the entire compute budget when attempting to log `data`?
```rust
let data = data.try_borrow_mut_data()?;
msg!("data.len: {:?}", data.len());
msg!("data: {:?}", data);
```
the output is:
```
...
[DEBUG solana_runtime::message_processor] Program log: data.len: 1024
[DEBUG solana_runtime::message_processor] Program My11111111111111111111111111111111111111111 consumed 200000 of 200000 compute units
[DEBUG solana_runtime::message_processor] Program failed to complete: exceeded maximum number of instructions allowed (200000) at instruction #18527
...
```
i need to learn rust 🙂
oh wow 😄
Ah right.. one for the `RefMut` one for the `&mut`
```rust
        let in_tracking_account = &accounts[0];
        let program_account = &accounts[2];

        **in_tracking_account.try_borrow_mut_lamports()? -= 5;
        **program_account.try_borrow_mut_lamports()? += 5;
```
got * infront it

but still can't compile somehow
ahhh sorry i'm very new at rust
Aye
Always backtick 😉
oops
🙂
Yeah it's bold here
When I pasted in it must have consumed the "*" as markdown?
`*in_tracking_account.try_borrow_mut_lamports()? -= 5;`
You need to dereference
thats the compile errors:
that's what I'm using too hmm
yes cargo build-bpf
compiles fine on my end with `cargo build-bpf`
but it didnt want to compile += 5
i understood
So the example I gave considers that the account we are deducting from is at index 0 in the &[AccountInfo] array and the account we are crediting is at index 2. I don't know what is in the array in your program.... it may be 0 and 1
sorry pretty new to rust:
The SPL Token program's "close" instruction does  some lamports manipulation after program-specific logic. https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L565-L597
thanks! yep, that's what I would've done in the end; interestingly, I'm also now using a BTreeMap, kept getting AccessViolations with regular HashMaps 🤷‍♂️
hey, thanks for that; didn't occur to me to do that by calling `deserialize` directly
let in_tracking_account = &accounts[0];
        let program_account = &accounts[2];

        **in_tracking_account.try_borrow_mut_lamports()? -= 5;
        **program_account.try_borrow_mut_lamports()? += 5;
Just add an instruction that does the appropriate math on the `lamports` field of the corresponding `AccountInfo`s
I see and is there any examples on how to transfer from the program to some random account
It's our fault, not yours!  We have not made it easy on you
So if you need to transfer lamports from an account owned by your program, you need to specify instruction(s) to do that
sorry not 100% sure with the terminology, pretty new to this
We like the ambiguity, apparently 🤕
Oh so you just mean an "account"
Right now I have account which is owned by the program and store lamports, but not sure how to take them out to another regular account
So it needs account
As I understood program by it self is not capable to store lamparts
I mean the account which is owned by the program and which store lamports
You mean PDA?  "Program Account" usually means the account where a program's executable data is stored
yo fellas sorry for re-asking but really cant figure it out, after getting the program account I want to make a transfer, but there is no secret key, how is possible to transfer from program account to anyone else
Ohh....Okay, Thanks a lot!
There must be at least one signer in a transaction (the fee payer)
What should I have to pass in array of signers in case of PDA, as PDA is of type PublicKeyNonce, but signers array require type Account
But this is showing me an error of NO SIGNERS in my browser
Hii, I am sending a transaction through solana/web3 from my browser. In my deployed program, this transaction will be signed using PDA.
Awesome so I will attempt to use this
Yep! check out the constructor the `Token` https://github.com/solana-labs/solana-program-library/blob/e313f972bd0a82b7c987774d9923f31c4eff015c/token/js/client/token.js#L320
The use of the term `Pubkey` is ambiguous in 90% of cases, unfortunately.  Mostly it really means "address" and may not actually be a public key.  Some times it means purely an ed25519 public key.  And yet some other times it means both 🤕
Top one is the wallet's native account address, this corresponds to a real ed25519 keypair.  The other is the address of the token mint, it's just where info about the token is stored
Hmm this is the script i execute
I am talking about this, is this and pubkey same?
I used the same seed phrase on solana-cli and sollet, the pubkey is different from this
Alright cool! So if I already have a mint address I could probably just use that right?
should be the same thing, not sure what you're referencing exactly
exactly, you'll need the private key
nope
is that possible? cuz i guess private key is required for tr as well
I think i have to generate keypair from the pubkey
you probably need to do `signer.pubkey.toString();`
what is the difference between public key and the solana receiving address I have
on that line `signer.publicKey.toString();` throw error
that what i get like data for program account and i use prop `account` as signer on transaction
`{
  account: {
    data: <Buffer 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ... 67 more bytes>,
    executable: false,
    lamports: 1000000000,
    owner: PublicKey {
      _bn: <BN: a6a624a4dd81bfbd77a2c44492f0810ec5598e9eede0d784c2d435f24177ec5c>
    },
    rentEpoch: 141
  },
  pubkey: PublicKey {
    _bn: <BN: f56c7aabcc6d479db9be30dfbb9ad549b0fe5993cb72df597603b10f53cf8ad>
  }`
I see, btw I'm trying to do normal transfer from program account to normal but somehow not manage crying for cannot read property .toString() of undefined
anyone can use their account and send money to another account.  i can send money into one of your program accounts and give it more lamports, there's no protection on that. if you want to send lamports *from* a program account, that's a whole other case. from within your program, you can directly deduct the lamports from the account, and add them to another
Let me buy more sol to have a try
I have about 6 sol in acc, while the deploying action just deduct 2+ sol.  So I think it's enough for the deployment.
Prepend the slice size then slice by that size into the borsh deser. Here is mock-up for maintaining a BTreeMap in the account state: https://gist.github.com/FrankC01/abae44f481c67988820fbb8c2c836c27
it exists on the solana dev net (sollet)
How do I connect a pre-existing wallet to the solana cli
maybe you dont have enough lamports?
help me:
Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1

I tried to update my program on mainnet by deploying but got the above error. It's OK while deployed locally. Could anyone help me to figure it out? Thanks very much.
so you mean everyone who has programId can do transfer? if So how to protect only for specific account
note that the test depends on some state created earlier in the tests: https://github.com/solana-labs/solana-program-library/blob/e313f972bd0a82b7c987774d9923f31c4eff015c/token/js/cli/token-test.js#L145
would something like this help? https://github.com/solana-labs/solana-program-library/blob/e313f972bd0a82b7c987774d9923f31c4eff015c/token/js/cli/token-test.js#L265
You can just do a normal `transfer` instruction for that
Hey does anyone know a good example of sending an spl token from a keypair in javascript? I have like 3 other people looking for it as well
after fetching program account, how we can transfer lamports to some program account
oops, I was pretty far off
Nah man, Bulgarian! 🙂
Hehe tu parles français ?
top !
Yeah sure, the sol-did program might be the best example for all operations until the spl record program gets the JS bindings (work in progress)
* program side: https://github.com/identity-com/sol-did/tree/main/program
* client side: https://github.com/identity-com/sol-did/tree/main/client/src/lib/solana
how to encode -> send onchain -> decode -> save data
one final thing, do you have any examples using borsh on client and on chain
you are da best man
you can use `getProgramAccounts` to get all of the accounts owned by the program, and then send the lamports using `transfer` if the source account is owned by the system program, or just by adding / subtracting lamports (maintaining the same total number) from within your program if the source account is owned by the program
yo guys, how to get existing program account if i want to send more lamps?
having programId <@!539801435571748868>
They have a lot of similarities:
devnet = for devs, maintained by solana. runs the same version as mainnet (1.6.11 at the moment)
testnet = for validators and devs, allows validators to test out their hardware / setup before eventually moving to mainnet. always running the newest code (1.7.0 at the moment)
We added `try_from_slice_unchecked` to get around this in the sdk: https://github.com/solana-labs/solana/blob/60024d13c9ff0dcb52c823b52eb1ada244e2f8fe/sdk/program/src/borsh.rs#L76 that way, you allocate the max possible at the start, and then let it fill up over time
How can I activate a feature of my solana-test-validator? https://docs.solana.com/developing/programming-model/runtime#new-features is a bit light on details. I tried `solana feature activate ENQi37wsVhTvFz2gUiZAAbqFEWGN2jwFsqdEDTE8A4MU` but that gives me `missing signature for supplied pubkey`. Not really sure how this is supposed to work / where to get the private key from.
having programId
yo guys, how to get existing program account if i want to send more lamps?
Been learning a lot just by reading questions of people here being answered by other people 😎
what's the difference between devnet and testnet?
When using Borsh with variable-length account data, do I have to reallocate whenever the account data changes in size? It seems that `try_from_slice` expects the buffer to be empty after deser, so it fails if I preallocate a larger data buffer. Should I prepend the size of the data at serialization time or should I reallocate the account/buffer each time?
Once the program is deployed, there's isn't really anything someone could do with that keypair file on that network, so in theory it's safe *for that network*.  Since we don't know how else the keypair could be used elsewhere, I would avoid publishing used private keys unless absolutely necessary, even for deployed programs.
Hello there! I believe https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountsbyowner will get that done for you
Is it safe to publish the keypair json file thats generated after deploying a program?
<@!134384511772393482>, I don't know, and I've just realized that what I've described earlier would only fetch _raw_ log strings, which is just stuff a program "prints out"; so don't use that
Hey guys and girls! Is there a way to get all the token accounts associated with a solana account using JavaScript?
I have a `ParsedConfirmedTransaction` object, I would like to know what it is, whether it's a transfer or delegation etc. 
My questions: is there somewhere an exhaustive list of what this transaction could be? (e.g. transfer, delegate, createAccount...)
If yes, where in the transaction is this information stored? (since the Explorer gets it somehow, I have managed to find it in the ParsedConfirmedTransaction -> instruction -> parsed field so far, but that is of an any type and hard to work with)
I mean, unless they aren't already decoded (which doesn't seem to be the case, since `logs` is a `string[]`)
never used the JS client, buy I imagine there's a way to decode the transactions and get their `type`; you'd do this in the callback
So if i get a transaction, there is no way of getting the transaction "type" from it?
for the `LogsFilter` you'd have to specify the `SystemProgram` `Pubkey`, and handle the logs in the callback
you could do that from the JS client using this: https://solana-labs.github.io/solana-web3.js/classes/connection.html#onlogs
<@!134384511772393482>, it's likely doing that by subscribing to transaction logs and filtering out the things that's interested in
this. The explorer somehow knows what the transactions are and displays that. I've identified that it comes from the `parsed` field in the `parsedInstruction`, however, since this is of the any type, I can't really split the transactions up by type and such, since I don't know what's in that field exhaustively
I'm not sure I follow
or how it would be represented/displayed in the Explorer?
when you're sending a transaction?
so there is no way for me to know what the parsed field will hold?
well, yeah, if the `Transfer` instruction comes from a JS client, then it was likely created via the `transfer` method (https://solana-labs.github.io/solana-web3.js/classes/systemprogram.html#transfer)
see here for an example <@!134342847330648064>
https://explorer.solana.com/tx/4DuAPVg1Ps5YWi2ERnidEk6opBMSzoPJxonfErp4c3nEAE4noo2oRNfLUAu3Fs7UoynMzrHbp8EC7drh5QjjzaDY?cluster=devnet
if you inspect the object I sent you'll see it does indeed return "transaction types" such as "delegate" "transfer" or "createAccount"
<@!134384511772393482>, for example: there are system instructions, which can be interpreted by the SystemProgram; see a list of them here: ~~https://solana-labs.github.io/solana-web3.js/classes/systeminstruction.html~~ https://solana-labs.github.io/solana-web3.js/classes/systemprogram.html
<@!134384511772393482>, Solana doesn't have different transaction types; a transaction takes a series of instructions, each of which can be any arbitrary slice of bytes; as long as the receiving program can interpret those bytes, then it's fine; you're probably interested in the various instructions available
Hi everyone, I'm trying to get the different transaction types for Solana transactions, this is where they are normally found, but they have a type of "any". Is there some enumeration of what these can be somewhere? https://github.com/solana-labs/solana-web3.js/blob/feddce3/src/connection.ts#L574
https://solana-labs.github.io/solana-web3.js/modules.html#parsedinstruction
thats mainnet beta
Hi, does anyone have some suggestion `sqrt`  about `U256`?
but someone could argue that to test validators we need transactions not only votes, but possibly solana-labs is loading the network somehow?
Speculating here...
since devnet is for dev testing apps, and testnet is for validator testing. Possibly the testnet public rpc infra is a lot weaker as it isn't supposed to do much work?
`    data: Buffer.alloc(1, vote), // this is 0 in program logs` something like this for number
ok don't know how i changed this but should be
but in program logs i get 0 instead of 1 or 2 when i pass number
where vote: number
as you can see i am passing number as `data: Buffer.alloc(vote), // this is 0 in program logs`
`/**
 * vote
 */
export async function vote(vote: number): Promise<void> {
  console.log('Voting on ', greetedPubkey.toBase58(), ' for candidate ', vote);
  const instruction = new TransactionInstruction({
    keys: [{pubkey: greetedPubkey, isSigner: false, isWritable: true}],
    programId,
    data: Buffer.alloc(vote), // this is 0 in program logs
  });
  await sendAndConfirmTransaction(
    connection,
    new Transaction().add(instruction),
    [payerAccount],
    {
      commitment: 'singleGossip',
      preflightCommitment: 'singleGossip',
    },
  );
}`
sending buffer as instruction data to program out of sudden doesn't work anymore were there any changes? i have this function in javascript
test net is so slow though... We initially deploy the app on test net, but it turns out that the same app is a lot faster (be it getting account data or sending transaction) on dev net.
Devnet is for coding. Testnet is for trying to fuck up the network.
Another issue is why do we need dev net and test net : )

If the team does plan to keep test net, will be nice to at least make it faster, so project can go from dev net -> test net -> mainnet. : )

Right now test net seems quite laggy to me. ( To clarify, I love the Solana team and they have been amazing, just want to share some general feedback and hope we reach millions of users.
(can't say anything about that, sorry)
Also I am thinking if it makes sense for the Solana team to provide a fake USDC, SRM, etc. tokens on dev net for the protocols developer to use when launching on dev net. 

Right now, as far as I can see, most protocol just create a new token and label it as USDC, SRM etc on their front end. However they will not be properly shown in the users' Sollet wallet which can be confusing for them.
yeah, that's the first win
Filtering on server side (RPC node) could reduce the bandwidth cost for the end user.
I was actually surprised there was no `filter` parameter for `programSubscribe`, though I'm not sure how the runtime implements `filter`, 'cause if the events are still generated and then discarded, there's still a cost there
Yeah, I think if Solana wants to scale to millions of users, we will definitely need this.
<@!287924636493152257>, yeah, I don't like that either; the client should instead subscribe only to the accounts of interest, not to all accounts owned by the program
I wonder if it makes sense to provide filtering for `onProgramAccountChange` API (like `getProgramAccounts` API). If Solana program scale in the end, one program could owns loads of account (say one per users to record the state) and if we want to subscribe to all account change it could generate loads of events that is not relevant to that particular users.
https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
You need to read how to give ownership and control to a program
But program don't have private key? as far as I know
Unless you are taking about storage account
The owner is the private key that run new account()
As https://docs.solana.com/developing/programming-model/runtime#policy states, _an account not assigned to the program cannot have its balance decrease_. The `transfer()` call is part of the System Program, so the account has to be owned by that for it to work. That said, you can write your own "transfer" function that'll work on accounts owned by your program.
But how that account will be related with the program
Use solana web3 new Account() there are a lot of examples in their repository
I have a program, let’s say I store some new value in it, is there anything I can use that would inform all clients about this new value aka something like event emit in solidity ethereum where I could then update client in real time?
and should be done only once
or account can be created on the program side
and should happend on the client side
like i should create this program account everytime when i try to send lamports to the program
how i can create a program account
The error is spot on "instruction changed the balance of a executable account"
Where do you want to send money exactly? You cannot send directly to the program account, you need the program to own an account in which you transfer lamports
token-list is fine for now, i don't see the need for a rush
if it should be done asap maybe you can submit a proposal on the current name service?
It seems that person responsible for token PRs went on vacation or solution for storing that data on chain is right around the corner.
I'm doing this on rust, but thank you!
Hi. I'm developer on C. Write me if your have a questions about the on-chain program on C. Maybe i can help you.
Hello guys i receive following error when i try to send money to the contract:
`Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: instruction changed the balance of a executable account` 
<@!831450660146642974>
Can someone tell me what is ENV.MainnetBeta in the example of this - https://github.com/solana-labs/token-list
I'm doing some work in this area - If you need to verify 100% not manipulated during creation - what you're looking for is a VRF - likely via a VDF.  Not simple.
It depends on if the reward for manipulating the result is greater than the effort to do so. If the payoff is large enough, a validator can become a participant and preview the hashes - adding a nonce however able under the hashing scheme.
Hello everyone, I am trying to generate a random outcome in a program, wondering what is the best approach. Was thinking of hashing the different participants + clock::unixTimeStamp + maybe some other elements to make it complicated enough, would that make sense
Anyone familiar with what this could mean?  I get when deploying to devnet or testnet.  localnet works fine.
`Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1`
everywhere I see `pack` and `unpack`, which just seems a little inefficient..?
The solana infrastructure seems to avoid `#[repr(packed)]` and direct `transmute`. Any reason for that?
it should be done asap imo, I'm sure many devs want to create tokens with tickers and names and dont want to be forced to interact with curated lists to have metadata show up on dexes and dex tools
I wonder how can a shitshow be averted for existing tokens once it gets out
or you can be part of making such plan 😄
this seems generic, maybe there is plan to build on top of that
that doesn't seem to define a standard api for name and ticker, just the ability to add any metadata, there needs to be a defined standard so that all dexes and dex tools use it
Oo could be on devnet already
It looks like it is merged https://github.com/solana-labs/solana-program-library/pull/1600
oh ok good, where is it going to be announced? is there a github issue I can follow or something?
9 decimals is a choice for SOL, you can have what you want for your token up to something reasonable for a u64
decimal is in the token mint, other bits are added through the token metadata program soon
<@!445425471027544095> I'd like to talk about the decision to not store ticker, name and decimal count on the blockchain. I'm a heavy user of uniswap, metamask, dextool and many other dapps on ethereum and I think it's a huge mistake, most tokens I interact with never get listed on any centralized curated list and therefore would not be able to get any traction because no one wants to interact with a nameless token. The ERC20 standard originally started without name, ticker and decimal, then later realized it was a mistake and added it. Also 9 decimals is not enough for tokens with very low total supply.
Feel free to just send a PR
Hi, is there a process for getting transactions for a specific project integrated with the Solana explorer? Similar to how Bonfida did here: https://github.com/solana-labs/explorer/commit/5a931f9ac48c4c134b0dd8cab1193e6410a920c7. For context, I'm trying to integrate Mango Markets transactions. Thanks!
I did another test and there is even no need to call `setSigners()`  Calling `partialSign()` before `wallet.signTransaction()` does the trick!
next time you run into issues, i recommend breaking down the problem into a smaller chunk. This could have been more obvious with a transaction that only has the account creation.
nice!
It worked! Thank you so much man! I was struggling for a long time with that! 🙂
Not beyond digging up the PR that added the feature unfortunately
https://solana-labs.github.io/solana-web3.js/classes/transaction.html#setsigners setsigners is deprecated so there is probably a better method. But start with what dapp-scaffold does
Yes, it makes sense!
You have to sign when you create an account to "prove" than you own the keypair, otherwise you could clutter the address space of someone's wallet for instance
`transaction.partialSign(...signers)` this line
Yeap! Directly in the transaction 🙂 Amazing! I will give it a try!
I think this setSigners is deprecated in latest web3js but it should still work
dapp-scaffold is doing it in this link
https://github.com/solana-labs/dapp-scaffold/blob/9352c93fe34fb061eed33030dc406074295a69b0/src/contexts/connection.tsx#L233-L253
I am not sure about that: 
https://github.com/project-serum/sol-wallet-adapter/blob/46ef58403a203e925ab2628a1e58804ce2052e5f/src/index.js#L182
I did not find any way to do that 😦
ah no, wrong
If i am not wrong you can give additional signers through `wallet.signTransaction`
same for any account you are creating
so you are creating stateAcct, you need to provide it as a signer at least
As you can see in the code, my transaction contains 4 different instructions
https://github.com/monetiza/honorbox-ui/blob/8e6a78958e6d4772853b50e1d4378d84d2a0c724/lib/solana.js#L51
https://github.com/solana-labs/solana-program-library/issues/1871
It's js code. I will push it to GitHub and will provide the specific link 🙂
Hey hopped off the computer right after I posted that message, will do!
what is the transaction you are trying to build? And how is it built at the moment (ts code)?
This is a bit confusing
Still stuck guys! any support appreciated!
When I sign a transaction using the sol-wallet-adapter...
```
let signedTx = await wallet.signTransaction(tx);
```
I get a signedTx with an array of 3 signatures:
The first: public key = wallet.publicKey + valid signature
The other two contain public keys of the 2 accounts that are writable, but with signature = null
The transactions gets reject: `Error: Signature verification failed`
I have done many trials, but without success! Help!
Is there any documentation on these features? I'm particilourly interested in ```Retain updated data values modified after realloc via CPI```
or build my own server with websockets?
what does that mean? running own access node?
use your own RPC server if the public server is insufficient
RPC websockets, certainly not
or is there a hard limit on devnet and testnet? if there is a limit, how are we suppose to test apps?
what do you mean too many other users? it should work with billions of users no?
thank you very much
maybe too many other concurrent websocket users 🤷‍♂️
`solana feature status -um` vs `solana feature status -ud` will tell you what features are enabled on mainnet vs devnet
<@!445425471027544095> any idea?
wish it worked on testnet. and not taking 14s to get callback on devnet 😄
For the end user there aren't that many unreleased features i suppose
Btw where can I see the difference between devnet runtime and mainnet runtime?
Thanks, I didn't know.
So you are using a sdk version > mainnet runtime version. It calls something that does not exist and blows up
On mainnet you might still have to pass the rent sysvar to the program
I think
Not released to mainnet yet
On devnet works, on mainnet getting this error ``` Program failed to complete: ELF error: Unresolved symbol (sol_get_rent_sysvar) at instruction #11577 (ELF file offset 0x168e0)``` when calling ```let rent = Rent::get()?;```. What can be a problem?
Would you be willing to open a Github issue? I can follow up there
Thanks for digging into this, I'll try to test it tonight
<@!150787664553967616> attempting to repay obligation liquidity( setting `liquidity_amount` to `u64::MAX` ends up giving an error:

```
    Program log: Instruction: Repay Obligation Liquidity
    Program log: Math operation overflow
```

according to the instruction documentation `u64::MAX` indicates 100% of the borrowed amount. It seems like the problem is happening within this call:

```
    let CalculateRepayResult {
        settle_amount,
        repay_amount,
    } = repay_reserve.calculate_repay(liquidity_amount, liquidity.borrowed_amount_wads)?;
```

specifically `let repay_amount = settle_amount.try_ceil_u64()?;`
How can I get event logs using Solana web3.js?
Able to get all data using `getConfirmedTransaction()`
websockets on testnet work? don't get any callbacks, when i switch back to devnet i get callbacks. what gives?
https://github.com/revewz/revewz-dapp/blob/main/src/components/AddReview/index.tsx
this is the link to the code 👇
any help will be greatly appreciated
without any issues using the same said acount
But I was able to transfer my spl-token using the spl-token command line program
drilling into it let me to this expanded version of it :error:
code: -32002
data:
accounts: null
err: "AccountNotFound"
logs: []
__proto__: Object
message: "Transaction simulation failed: Attempt to debit an account but found no record of a prior credit."
__proto__: Object
id: "31b94da7-7249-414e-bccd-941eee66b4c7"
jsonrpc: "2.0"
__proto__: Object
error: {code: -32002, message: "Transaction simulation failed: Attempt to debit an account but found no record of a prior credit.", data: {…}}
id: "31b94da7-7249-414e-bccd-941eee66b4c7"
jsonrpc: "2.0"
__proto__: Object
Hi I am getting this error message when sending our spl token to another account


///////////////////////////////////////////////////////////////////////////////////////////////

Uh huh.  You do it like every other instruction, pluck our a parser by program id, implement parser as per program
I only really open them to share private info, which I can't possibly see how would be pertinent here
nvm. Imagine you're given a transaction recorded on chain, you want to record every instruction. So now you're handling the secp256k1 instruction.

I can access all of the data slices atm, and have interpreted them already, just unsure how I can read each property properly bc I don't really get all the slice sub properties
you blocked dms. nvm then
oh ..
DMs are a scam
Sure thing, and PM u! You can reply me here if you need to.
right, thanks
Can you just pastebin it?
It can change per-slot.   We haven't yet seen it deviate from the default
Can I PM you my source sample?(just relating to that instruction, not the entire source code) (just for ref)
After the chain processes the instruction, I want to read the instruction and record it elsewhere
The sample rate is pretty clearly documented. Can you be more precise as to what you're asking?
can you please help
how is the rate limit calculated btw? is it per second, per 10s? i think we have a burst of initial requests (< 100) but that still gets rate limited
Great! I will take a look.
Start with that and let us know what's missing
We have some basic information here: https://docs.solana.com/developing/on-chain-programs/debugging
Thanks for double checking! Do you have a pointer to the standard way to profile the code in Rust/Solana for me to look into as I am relatively new to both...
trying this but getting the buffer
yo guys, any idea how to deserialize the data on the client:
thank you
https://docs.solana.com/cluster/rpc-endpoints#rate-limits
ping on this? what are rate limits? (for devnet? for mainnet?) hard to understand exactly when we need to scale up w/o this info
What do you mean by "reverse engineer"
Hi Sam, Yes, I'm also not surprised that decompressing an eliptic curve point takes over 200k instructions.  Your tests look fine afaict.  Have you looked at the program's dump file or ran a trace to see where the time is spent?
```
let pubkey_result = secp256k1::recover(
                &secp256k1::Message::parse_slice(&message_hash).unwrap(),
                &signature,
                &recovery_id,
            )
```

Apparently,native program secp256k1 is simply an instruction that shas a pubkey through a recovery id for cross-chain stuff like between sol and eth.

I can simply recover the pubkey of the eth address if i have the instruction's message hash and the signature, along w the rec id
In `getConfirmedTransaction`, where can i find to determine whether the address is the `fee payer`, a `program`, or `readonly`? Thank you in advance 👍
nvm i found it
brb
sigh alright actually, i should read up sha3 and keccak
hah, I donno the answer
did u shrug my qn bc ur not sure too 🤣
Thanks!
Yup...its working now!
i don't understand
<@!445425471027544095>
```
pub fn construct_eth_pubkey(pubkey: &secp256k1::PublicKey) -> [u8; HASHED_PUBKEY_SERIALIZED_SIZE] {
    let mut addr = [0u8; HASHED_PUBKEY_SERIALIZED_SIZE];
    addr.copy_from_slice(&sha3::Keccak256::digest(&pubkey.serialize()[1..])[12..]);
    assert_eq!(addr.len(), HASHED_PUBKEY_SERIALIZED_SIZE);
    addr
}
``` 

Wondering if you have any idea how I can reverse engineer a sha3'ed keccak256 u8 slice. Is it as simple as doing that in reverse?

sdk/src/secp256k1_instruction
These are logs
Sorry to ask another, trent and mvines do you guys know abt this?
Thank u!
You don't have the validator process running
add `--log` to see what's up
Ledger location: test-ledger
Log: test-ledger/validator.log
⠲ Unable to connect to validator: Client error: test-ledger/admin.rpc does not e
Yeah I've seen this when I've rebuilt the binary and kept the same ledger under some circumstances
paste text
screenshots are the worse
Im getting this now
yep
you might just want to reset your ledger if you aren't too attached to it, add the  `--reset` flag
If i use `solana-test-validator --log`, im getting this error
RPC Url is correct

When i send a POST request to the url, i get failed to connect localhost:8899
Does anyone know why is solana-test-validator not working?
bump!
on that line
`data[..rest.len()].copy_from_slice(&rest);`
```
Program log: libstd rust_begin_panic
    Program log: panicked at 'range end index 116 out of range for slice of length 0',
```
any idea
even tried using the fully qualified keypair URL and that didn't work either. I'm going to move forward with derived keys, which isn't that big of a deal, but I'm glad we caught this during testing.
Weird.  Ok.  Thanks for the details!
```
spl-token transfer $token 25 $my_wallet \
   --owner $multisig \
   --multisig-signer usb://ledger/ \
   --blockhash $blockhash \
   --fee-payer $my_wallet \
   --nonce $nonce \
   --nonce-authority $my_wallet \
   --sign-only \
   --mint-decimals 9 \
   --recipient-is-ata-owner
  Recipient associated token account: 7BWfd7ppLr6KKiRvJuD9Q85RsFVGFGhrccNLubpQ78DX

Blockhash: AJSeB2Uym2m1UwGVW96KGM5vT2xeg9GAZunFbZoCRz1a
Absent Signers (Pubkey):
 7CzfJauMha4ev95GzmZ11DhTe2BPWj3cwYnsV2znaHeZ
```
I know, but if the device is locked an no slash, gives `absent signers`. With slash, device locked gives protocol error, unlocked ... absent signers
Throwing an error when the device is locked is the correct behavior, BTW
Did you actually try it again without the slash or are you misinterpreting the device locking between attempts?
you want me open a issue?
hrmm. no, but it does error if the ledger isn't unlocked, which it doesn't do without the trailing slash
Does `usb://ledger/` work?
It might be resolving the signer differently, though the signer path parsing is pretty heavily tested
IDK if there's a flag I can put on it to keep it from trying to sign with my hotwallet, but adding `?key=0` to the switch prompts the Ledger
yep
at $500/mo rpc pool only allows 50 requests per second. is there some caching or batching mechanisms that anyone in the community has suggested for dealing with these limits
what is the suggested method for scaling an app within the rate limits
Still `spl-token` v2.0.11 ?
Hmm.  I'll try to take a look today
Yo guys I'm creating a System Account and on property `space` i provide the length which will be required to store data, but on program when I get account data_len is 0
It doesn't ask to confirm on the ledger, just functions like the template tx, basically, passes the address back as absent signer. 
```
spl-token transfer $token 25 $my_wallet \
   --owner $multisig \
   --multisig-signer usb://ledger \ 
   --blockhash $blockhash \
   --fee-payer $my_wallet \
   --nonce $nonce \
   --nonce-authority $my_wallet \
   --sign-only \
   --mint-decimals 9 \
   --recipient-is-ata-owner
  Recipient associated token account: 7BWfd7ppLr6KKiRvJuD9Q85RsFVGFGhrccNLubpQ78DX

Blockhash: AJSeB2Uym2m1UwGVW96KGM5vT2xeg9GAZunFbZoCRz1a
Absent Signers (Pubkey):
 7CzfJauMha4ev95GzmZ11DhTe2BPWj3cwYnsV2znaHeZ
```
how strict are rate limits?
Has anyone gone through the Paulx.dev escrow tutorial.It says that the token program sets no limit of how many token accounts for the same mint user may be the owner of.But when I try to create an associated token account for the same mint,it says account already exists.So My account plus mint account gives only one possible combination of associated token account.Am I getting it correct?How in the tutorial is he able to create a temporary account to hold some of his tokens
is there a library that can help us send batched RPC calls, it looks like web3.js doesn't support any batching functionality
thank you!
If it's a throwaway account, then the keypair is normally lost after the transaction anyway, so there's no need for a revoke.  And if you properly revoke from the pool authority, you're all good
thank you! so going off that then for using the throwaway keypair route, if we had the same scenario with approving 100 tokens and only 80 are traded, we would still want to revoke and close out the throwaway account  to return the 20 remianing tokens back to the "main" account correct?

and for the pool authority situation, if the transaction also included a revoke after the 80 trade then would there be any difference?
Is there a command to get private key from keypair?need to get it to import account in sollet Wallet
Not possible, the base pubkey needs to sign
the main difference with using the pool authority, is that you can have the situation:
* i approve 100 tokens to be traded
* i execute the trade, only 80 are moved
* i *don't* revoke the delegation
* you can come in and trade the 20 remaining tokens into one of your accounts without any approval from me
Hey guys.  Is it possible to use `system_instruction::create_account_with_seed` where the base pubkey is itself a derived address?  If so, how would you sign the transaction?  🙏
well, then I misunderstood your question; accounts are described here in more detail: https://docs.solana.com/developing/programming-model/accounts
thank you so much for that information :))))
reading through SPL-token-swap and comparing it to the stable-swap code, i see that in the SPL docs it recommends to approve a precise amount to throwaway keypair and use that to sign the txn (this would be the user-transfer-authority account in the code if i'm understanding correctly). in the stable-swap code, it seems like they skip using a throwawy keypair and use the pool-authority to do this. is there any significant difference between these two options?
<@!584788446443208704>, yes, accounts have lamports and data, and programs can access them
Like with the lamports?
<@!584788446443208704>, the program account stores executable program data; you need other accounts for data storage
Is state on the program stored on the program account owned by the program and not on the program it self, the same way like lamports are working
you should get the filename output after successful build
`solana program deploy filename.so`
Cargo build-bpf isnt creating a dist folder....so how do i deploy it?
afaik you can build it with `cargo-build-bpf` and then deploy it to chain to be interacted with via clients. Don't know about the way to execute the program locally.
Can anyone help with this?
How do i run a program file? `cargo run` is giving error
How reliable is `Clock::get()?.unix_timestamp` can it get stuck or drift from real value ?
Is it me or the devnet became much faster literally like an hour ago? 😄
yo guys how to save parsed_data (deserialized) in the state:
in new version
`https://docs.rs/solana-sdk/1.6.1/solana_sdk/decode_error/trait.DecodeError.html` ?
anyone knows whats the replacement for this
how often in time can lamportsPerSignature (fee cost) change? What is a safe interval to refresh it? Is 15 seconds ok?
is it possible to generate hd wallet in solana web3.js ??....anyone know means....please tell me
<@!491788881822220313> yo mate could i have quick discuss with you when you can thanks
sorry to ask, how do i stringify this **safely**?
I saw there's an RPC request called GetTokenAccountsByOwner in solana-client. Does this mean Solana cluster has some special treatment to the SPL-Token program?
found the instruction. Man these RPC nodes are expensive.
https://github.com/rpcpool/solana-rpc-ansible
I'll need to run private RPC node for production anyway. How do I run an RPC node and have it connect to devnet/testnet/mainnet?
you can find some forks that have that worked out
API endpoints*
you dont have to.. Just use the APIs provided
its up again 🍎
Hii guys....i can generate hd wallet using solana-cli as command line....bt i want to do in python....how can i do that??....is there any possible to do that??.....please help me
there is issue with local validator if you are using mac with m1
run local validator
you have to run  solana-test-validator
I'm so tired of the devnet/test RPC drama. What do I need to  spin up my private RPC node? Appreciate any pointer/instructions
api.devnet.solana.com return (503 Service Unavailable)
yo guys do you have any simple example for sending data to the program and retrieve it using borsh
yesyes i understand haha. i'm also asking u to see if i can help haha
sorry unrelated, my answer. Then followed by another question I have lol
basically, every transaction has a vec of TransactionTokenBalance. Is this referring to only native token account inputs?
wdym?
```#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionTokenBalance {
    pub account_index: u8,
    pub mint: String,
    pub ui_token_amount: UiTokenAmount,
}```
`connection.getRecentPerformanceSamples` blows up for me with "Expected from 0 to 1 parameters"
But this is used in the explorer, weird...
not sure I understand...
hmmm.. yes and no (no in a sense that the explorer is simply a mirror of the RPC API), am asking specifically about transactions from a block's API response

EncodedTransactionWithStatusMeta
Are you asking about the explorer?
Hi guys, for token balances in a transaction, only spl-based tokens appear there right?
Thank You So Much For Help 🙂
Through spl's cli
https://spl.solana.com/token#example-creating-your-own-fungible-token
And if I want to create a new token, how to create one as https://www.spl-token-ui.com/ is not working
https://discord.com/channels/428295358100013066/749579745645166592/851517187926654997
No, how to do that
apis for devnet recently updated. have you changed over yet?
timestamps come from the chain, anything consisted 'At' would be indexer-based. We have docs, all layed out there. Once we do get solana (they've been busy so.. I'll just iterate and wait) to advice us before we release it
Heyy, while doing any operation on https://www.spl-token-ui.com/#/sol-airdrop , like create token or airdrop on devnet network. It is showing an error: FAILED TO FETCH
I wonder though, are those timestamps (e.g,, `createdAt`) generated on your end, when the data is slurped, or are they provided by the `Clock` sysvar?
my oyster?
my project?
whats yours?
<@!161028871095844864>, that's cool; yeah, as long as you have the data, the world is your oyster

ok i understand this, I had to read what `trailing_zeros()` is
Sample of what's possible
i worked on the actual indexer so i dont really have graphQL knowledge.. Not sure how this works but my teammate might have some queries done

gotta say, that's pretty sweet!

Its up since ytd 😉
yeah, expose that in some query language and you're good to go 🙂
yup that's right! That way I can serve anyone who's looking to create interesting charts that showcase data from the chain!
but I suppose that's exactly what you're doing 🙂
you'd piece it up (in a way that makes sense for your use case) as its being pushed into/pulled by the archive node
you would have to query the RPC api chunk by chunk to piece them up.
yes of course everything is in place. But have u ever wondered how analysts can access data for a specific type of instruction relevant to a program?
(again, sorry, I don't know enough about the inner workings of the runtime to provide any insight)
isn't there already a way to tell which accounts are involved in that transaction?
doesn't "the system" already keep track of which instruction belongs to which transaction?
yeah, at a high level, I would expect there's a way to go around that
already read that lol.. so tiring supporting every program meticulously
<@!161028871095844864>, yeah, that proposal seems like something you'd be interested it
So apparently you need that for cross operations, but for us (indexers), don't have much to worry about since instructions were already processed (aka executed). Just need to link them so that people can create deep visualisations.
https://docs.solana.com/implemented-proposals/instruction_introspection
its commonly used for cross chain operations.
yeah, I was reading that before asking; sadly, I can't see its use case at this point (due to my limited knowledge of the system), though I'm sure there is one 🙃
> This allows the user to specify any instruction data in the transaction for signature and message data. By specifying a special instructions sysvar, one can also receive data from the transaction itself.
> 
> Cost of the transaction will count the number of signatures to verify multiplied by the signature cost verify multiplier.
https://docs.solana.com/developing/runtime-facilities/programs#secp256k1-program as from here
those native instructions target other instructions within that transaction

This would mean:
1) You have to ensure those targeted instructions actually exist
2) Create a link amongst them

(1) is needed not because we don't trust the onchain data, but we instead do not trust our own node. Because we'll never know if its breaking apart or not.
what makes `secp256k1` instructions difficult to handle?
thanks mate, the key blockage now are secp256k1 instructions tbh

didn't expect instructions to be so entertwined
I see, good luck!
so this way we safely index the entire chain from a specific slot onwards and ignore the history (but im just doing this bc of limitations of the hackathon atm)

I'm hoping to look for devs who're interested in trying it out to test it out soon. Have to iron out bugs

Sadly im the only one writing the fixes atm, my team took a few days break bc we rushed some UI work throughout the past few days
So on top of indexing slots via archived nodes, we will never trust a node completely. If it fails to index a slot bc of the node's archival problems, we'll set its finality to false
on top of a block's properties, the indexer stores a new bool (we call it finality)
oh, there are those
The moment one slot goes out of sync, the engine screams (but it skiips that slot
you need a fully archived node.
nOpe 😉
yeah, that's what I mean; you gotta be a validator to have access to this, though, right?
Because every program has its own unique instructions (unless based-off native), we have to support each of them manually. but we've designed a way to still index instructions that we have yet to support already (Just that you can't view what data beholds within an instruction)
We are still sticking to RPC atm because we need to capability/capacity to sync from 0 to 81mil

In time to come, we'll def use subscription APIs


Tbh i'm not really listening to chain activity atm, only storing the activities
i use 0 subscription endpoints atm.
`logsSubscribe` is close enough, but that's just program logs; can't get any real data from that
<@!161028871095844864>, just curios, how do you listen to chain activity? it seems there's only `logsSubscribe`, `accountSubscribe`, etc., nothing that actually shows _everything_? or is this something only a validator can do?
Hi team. When i am tying to install dependencies in package.json i am facing an error that "package not found". can any one help me.
oic
Dom asked for it in april but we have yet to hear for him for the past 2.5 months.
we're just building a platform that allows anyone to create viz that they can never imagine of with just the RPC APIs.
not sure.. the season gave the data viz idea
this is an instruction table, there are more columns and relations
why?
huhh interesting
i kid you not lol
Like literally keeping track of the entire chain
indexing like validating? or like managing the filesystem of accounts? but yes ik there are tradeoffs always, and solana is already probably very hard to run infrastructure for bc its so demanding. im just trying to understand best use
i just wanted to see how a program works that doesn't have its source public, i can figure out most of it from the instructions it sends but i just wanted to verify if my assumptions are correct
Don't know of a way to readable code but you can disassemble the code to assembly.  If you have the debug version that assembly will include symbol names.  I assume that doesn't get you anywhere near where you want to be.  What are you trying to do?
sigh man I'm actually indexing the chain and I understand your pain.. But if its more scalable in storing more, its very hard to index instructions as an indexer
hey i wanted to ask if there's a way to decompile a deployed program on solana back into readable code
yes and my consideration more or less goes "if i can do everything on solana it could be worth it but if i have to use arweave anyway i would be dumb to not build on an ethereum l2 instead"
Thanks, guess i didnt catch that part 😅
Check out https://docs.solana.com/cli/deploy-a-program
have u considered arweave?
their discord invite is expired, so I guess a GH comment will have to be enough ;p
Did anyone manage to run `cargo test-bpf` on a m1 mac? Running everything under Rosetta2, I was able to build and deploy my own programs. Unfortunately I can't get the test-bpf program to run & verify the code efficiently. The tests always stop with the following error:
```
running 4 tests
test test_id ... ok
test v1::test_id ... ok
test processor::tests::test_utf8_memo ... ok
test processor::tests::test_signers ... ok

test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/functional.rs (/Users/max/Code/solana-program-library/target/debug/deps/functional-012879a9f7635583)
error: test failed, to rerun pass '--test functional'

Caused by:
  process didn't exit successfully: `/Users/max/Code/solana-program-library/target/debug/deps/functional-012879a9f7635583` (signal: 10, SIGBUS: access to undefined memory)
```
https://www.youtube.com/watch?v=7Iitv5tMOMY
I was looking in this video, and he talks about upgradable smart contracts. I did not see anything about this in the Solana Docs. Does anyone have a link talking about this or about how to do this?
No.  If you can't optimize your app any further, you should obtain other means to connect to RPC.  Either through a service provider or running your own node
p/s: my code works fine with `devnet.solana.com`
Could Solana team consider to open the limit?
but this the only ways to quickly read all associated data of an address in my DApp
I know that I have requested many at a time
Hi team, I have migrated `devnet.solana.com` to `api.devnet.solana.com` . However my queries started to return `Server responded with 429 Too Many Requests.  Retrying after 500ms delay`
I expect they'll respond on the PR directly.  If not you could to find them in their Discord
I fixed it and tested locally
<@!445425471027544095> any idea how to best contact the serum guys about this?
https://github.com/project-serum/anchor/pull/366
looks like i prolly wont make the hackathon deadline thoo lmao
is oki i like pain
Yeah that’s totally fine (minus the pain to get it up into the account due to the transaction size limit!)
i was thinking more in the low kbs
ok then cool
oh
<@811633301747531786> - storing data on Solana is a great idea, all programs do it.  My point was that mass data storage, GBs or TBs, is not what Solana is directly well suited for.  There are other projects that attempt to fill that niche
or is it just one of those thngs where the current model isnt sustainable long term so if lots of people start using the chain for storage then the economics get out of whack and will need to be clamped down upon
why is storing data on solana a bad idea? is availability not guarenteed even if i deposit my two years rent?
so like
You're going to have to qualify some of those words
Any function for validate confirmation for a solana hash?
thats sad i thought it would be a nice use of the system
IPFS or ArWeave seem like nice options, then link to it with a  URL in your solana account and include a hash of the data for clients to verify in the account data as well
so uh. building any kind of text storage system liek blogging or social media or anything on solana is a bad idea then
oh
Archivers don't exist currently, the code is deleted even in the master branch.  They didn't make the MVP cut
oh i thought it would be a good usecase since you put all that work into separating persistent storage into archivers and forking the filecoin reward mechanic and such and such
<@!811633301747531786> use IPFS for any files that u wish to upload
there's no generic upload functionally so you'll need to implement it.  Solana isn't really designed to block data storage though, so generally people don't need this.  Program deployment has been something of a special case so far
ya what im asking is is that functionality available to us to also put larger things on chain, or do i need to go find the code and copypaste it or reimpl it
idk maybe if you can find a volunteer to do so 🙂
yep, exactly.  A program deployment sends hundreds of transactions to shuttle the program ELF into the on-chain account
btw. is there any way to have like a 30 min chat with screen sharing with one of devs?
i have just now discovered the 1232 byte limit on transactions and am very sad about it. is the thing that solana program deployment uses to break binaries up into packets and deploy them all into the same account available as a library function or anything by chance? :c
thx for your answers <@!445425471027544095> 🙂
well, phantom seems to be doin that
fair enough 🙂
Yeah that's an opportunity for builders on Solana to make something better!
end customers*
a 54 year old lady: so how do I use your service?
me: oh, just install the cli from npm and run a couple of commands. GG, EZ 😄
You are  my customer frankly
tell that to potential customers 😄
And the most functional wallet that I use every day, the `solana`  command-line tool!
obviously 😛
we provide the network 😉
Basically they want Solana to be successful because they run on us!  ♥️
well, exactly. shouldn't a basic wallet be provided by the solana folks?
They wrote sollet.io as well
anchor seems to be the truffle of solana
i kinda get that, but how come an exchange is providing tooling for the blockchain?
Sealevel is what some people call the Solana runtime, which is the part of the validator that programs run in
Serum is this thing: https://projectserum.com/
Serum runs on Solana.  They are not the same at all
Sealevel seems to be a solana concept, but anchor (by serum) is providing the implementation?
another thing - a stupid question probably:
whats the relationship between serum and solana?
sometimes it seems like it's the same thing, sometimes it seems separate...
also lol vipmainnet, that's gone now
Somebody prolly needs to send a PR to anchor to update it's internal URL list
<@!585868308419444749> 
fair enough. but there seems to be no way of setting that in anchor.
`-u` flag doesn't exist.

`--provider.cluster` looked interesting, but seems like it errors out

```
anchor deploy --provider.cluster https://api.devnet.solana.com
error: Invalid value for '--provider.cluster <cluster>': Cluster must be one of [localnet, testnet, mainnet, devnet] or be an http or https url
```
and the message is even more misleading, because the implementation actually doesn't accept URLs
```
    fn from_str(s: &str) -> Result<Cluster> {
        match s.to_lowercase().as_str() {
            "t" | "testnet" => Ok(Cluster::Testnet),
            "m" | "mainnet" => Ok(Cluster::Mainnet),
            "v" | "vipmainnet" => Ok(Cluster::VipMainnet),
            "d" | "devnet" => Ok(Cluster::Devnet),
            "l" | "localnet" => Ok(Cluster::Localnet),
            "g" | "debug" => Ok(Cluster::Debug),
            _ => Err(anyhow::Error::msg(
                "Cluster must be one of [localnet, testnet, mainnet, devnet] or be an http or https url\n",
            )),
        }
    }
```
No they're all on `api.OLD_URL` now
yeah, I saw that. but testnet should be working fine, right?
<@!445425471027544095> 
`error: Found argument '-u' which wasn't expected, or isn't valid in this context`

and before someone asks 😛 
```
$ anchor --version
anchor-cli 0.7.0
```
<@!784156219861762109> - `anchor deploy -u https://api.devnet.solana.com/`
New URL was announced this morning. https://discord.com/channels/428295358100013066/749579745645166592/851517187926654997
Hi, I wonder is dev net RPC node down?
hey
I just tried running `anchor deploy` after setting the following in my `Anchor.toml`
```
[provider]
cluster = "devnet"
wallet = "~/.config/solana/id.json"
```
and I'm getting the following
```
$ anchor deploy
Deploying workspace: https://devnet.solana.com
Upgrade authority: ~/.config/solana/id.json
Deploying program "basic-1"...
Program path: /_work/_learning/blockchain/solana/anchor/examples/tutorial/basic-1/target/deploy/basic_1.so...
Error: RPC request error: cluster version query failed: error sending request for url (https://devnet.solana.com/): error trying to connect: dns error: failed to lookup address information: No address associated with hostname
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```
any ideas what's wrong?
I'd understand if it was an authentication issue or whatever, but it says that the address doesn't exist (same for `testnet`)
Thanks for the tip! I found an example for using pyth with solana here: https://github.com/pyth-network/pyth-examples
I think Pyth is available on devnet
Does anybody know if there are any oracles active on testnet already? I saw that Chainlink integration is still ongoing but I was wondering if there was already something on testnet to work with...
What does "doesn't work" look like?
If I pass the Ledger without a derivation key it doesn't sign. `--multisig-signer usb://ledger` doesn't work but `--multisig-signer usb://ledger?key=x` will.
I'm just starting with anchor tonight - glad you hit me with this
OH!
Hi <@!99911938955309056> , yes, that was precisely the issue: that anchor (at least in my case) was defaulting to https://devnet.solana.com which is now deprecated (as in, it no longer works). So, the user has to specify the exact devnet url, which now starts with "api".
`-u d` does the same thing. Can use m, t, d, l as shortcuts to main, test, dev, local.
Thanks!
I think there's an anchor-specific support channel on the Serum server. https://discord.gg/EDvudv6
And we are preparing the demo video for the hackathon 😟
Just noticed the cluster address is changed but anchor has not kept up the change
Is there any way to specify the cluster address for anchor command?
SOLVED - Turns out I had insufficient funds according to the solana logs. 

Hi there - Experimenting with the helloworld example from the docs. I've successfully compiled the program but when I try to deploy using `solana program deploy` to point to my `helloworld.so` file, I get the following error: `Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1` -- Ideas? Thanks in advance for your help!
I looking forward mint tokens tutorial, anyone can share?
I've made my C++ SDK publicly available, since the hackathon deadline is approaching:
https://github.com/machacekch/solana-cpp-sdk
<@!445425471027544095> and <@!453347985628200960>, I believe you have expressed some interest. Suggestions are welcome - I plan to keep using it for my own programs after the hackathon has come to a close.
https://github.com/solana-labs/solana/blob/18ec6756e49507c3945ab3d13d34dacbe897843b/sdk/program/src/epoch_schedule.rs#L87-L90
I don't understand this, how can we have this formula but minimum slots per epoch is 32?
Fixed it! This is how it should be done:

anchor deploy -u https://api.devnet.solana.com
Doesn't seem right that you are exhausting execution units ser/deser empty things. Can you get to simplified code and put in Gist for a look?
https://github.com/solana-labs/solana/pull/17810
the test i wrote is failing but working on it now
EDIT: `npm run test` goes through the RPC mock but `test:live-with-test-validator` bypasses the mock, ok I have to check how this works
Looking into it some more ... am I the only one having this problem?
So anchor is not even looking at the solana configuration.
Aha! Yes, anchor tells me that it's pointing to devnet.solana.com:
I did an "anchor cluster list" and here's what I get -

Cluster Endpoints:

* Mainnet - https://solana-api.projectserum.com
* Mainnet - https://api.mainnet-beta.solana.com
* Devnet  - https://devnet.solana.com
* Testnet - https://testnet.solana.com
Unfortunately we don't have a RightPlace ®️ to post stuff like this ATM.  So long as you keep it compact and respectful like you did, you probably won't get hassled
Anyway, thanks for the help, <@!445425471027544095>, but I'm stuck now.
Hey All,
I’ve worked in corporate digital asset financing for a few years now, & I’m looking to launch a project that caters to an underserved industry in the crypto space. There are currently no similar projects on Solana & I’m looking for developers with experience building on the main net. Please DM me for details if you’re interested. 

Alternatively, if this is the wrong spot to post can someone kindly advise where I can find freelance Solana developers?
OK, looking into that ... all it says in the Anchor.toml file is as follows:
cluster = "devnet"
`anchor deploy` may have its own config file?
Hmm. I don't know where to look to figure out how it's going to devnet.solana.com when it's configured to go to api.devnet.solana.com ...
> Error: RPC request error: cluster version query failed: HTTP status server error (502 Bad Gateway) for url (https://devnet.solana.com/)
This is from what you provided, it's clearly using devnet.solana.com
Please look at my solana config, though. It's correct, right?
You're using https://devnet.solana.com/, and somebody has been abusing devnet.solana.com today so everybody suffers 😕
https://discord.com/channels/428295358100013066/749579745645166592/851517187926654997
Hello! My "solana config get" gives me:
Config File: /home/<user>/.config/solana/cli/config.yml
RPC URL: https://api.devnet.solana.com
WebSocket URL: wss://api.devnet.solana.com/ (computed)
Keypair Path: /home/<user>/.config/solana/id.json
Commitment: confirmed

And yet it gives me the following error when I do a "anchor deploy":
Deploying program "reward-token-staking"...
Program path: /home/<user>/ZeroInterestDeFi/anchor/reward-token/target/deploy/reward_token.so...
Error: RPC request error: cluster version query failed: HTTP status server error (502 Bad Gateway) for url (https://devnet.solana.com/)
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.

What am I doing wrong?
Sounds like you need to handle state transitions in your program
Sounds like you need to use zero copy
https://discord.com/channels/428295358100013066/749579745645166592/851517187926654997
```
Access to fetch at 'https://devnet.solana.com/' from origin 'http://localhost:3000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
```
Suddenly started seeing this today, were there some changes made to devnet.solana.com?
nope, afaik they are treated the same when just representing simple data objects
ok, is there any reason most returned types are `Type` not `interface`s in web3?
yeah I would create a class after superstruct validation. And then ideally it returns a TS interface with the additional method
im trying to make a on chain blog platform and the two obstacles rn are how to store large global mappings eg user accounts to post accounts, and how to handle large buffers eg to accept a post from one user and validate it is safe to store and serve to other users
Mmmh looking now, superstruct doc does not mention how you would add methods or wrap it into a greater object. Should I just innovate there?
you can look into anchor, I believe armani tweeted something about zero copy deserialization recently
haha yeah, too expensive
well i mean obviously not its too expensive but i just found that out now lol
ya should i not
are you serializing to json on-chain?
Hey everybody. Can you help me with a little question please, when I query "getAccountInfo" from JSON RPC API I'm getting owner account `"owner": "11111111111111111111111111111111"` why is that and how I can get an actual owner address?
eg what are the consequences if i split what should be one operation into five operations and a malicious users calls them in weird combinations
so i need to think abt either storing data off chain (app breaks if i stop hosting), or custom binary formats (dangerous), or splitting up single instructions into many (dangerous) especially if i find i dont have the budget to do sanity checks
rn im hitting it just like, serializing and deserializing between basically empty rust structs and json
is there currently a way to predetermine the amount of compute units necessary for an instruction/transaction?
while there is a max cap in there, the spirit of the proposal is to provide flexibility to devs who want to use more compute and charge a relatively higher fee
im gonna be honest switching from a hardcoded per-instruction cap to a hardcoded per-transaction cap is even worse
WARNING: IntelliJ is not real Open Source as it says on 'community version' "Kostenlos, entwickelt auf Basis von Open Source" meaning "Its based on Open Source" so it has proprietary code in it. Do Not Use IntelliJ then. unless u compile it from code here I guess 🙂 https://github.com/JetBrains/intellij-community.git
oh, working now 🙂
i think that points to the older devnet rpc?
alright, thanks!
correct
currently yes, but subject to change: https://github.com/solana-labs/solana/pull/16984
<@!466984915376799748>, so accounts that exceed that limit would have to be created by a client calling the SystemProgram directly?
yeaaa this is what i figured, its pretty ugly tbh
yes
are accounts created via CPI limited to 10KB?
What error are you seeing?
No.  You can definitely use a Ledger wallet for `--multisig-signer`
yeah that sounds nice, would be happy with a PR that added that
<@!811633301747531786>, can't say much w.r.t it being hardcoded, but you can spread your work in multiple instructions, where each instruction gets its own compute budget from scratch
Works fine if you don't abuse it 😉
`sol<@&517159430190661652>-us-west1-b:~$ solana airdrop -ud 0.1
Requesting airdrop of 0.1 SOL

Signature: 2hgXKnnjdY1hotUU8DuQPTLTaponcPqN6UAh3AcRo1KAZkv2yu79B2cMA78oyX7XQooLDJ987kmxo7E4JjZ6CWDz

2192.951952404 SOL`
hey. SOL airdrop requests not working at https://api.devnet.solana.com
im guessing the compute unit cap is hardcoded and its not like ethereum where users can pay more for more compute? im starting to hit it already just from serializing and deserializing data
Are there any examples of how to use the `@solana/spl-token` JS library to mint a new token? I can't find proper API documentation.
i can post the rest of the error if anyone would like to see it but its very large
hey guys! im trying to use the sol wallet adapter module and its giving me this error when i try to create a new wallet ```node:12003) UnhandledPromiseRejectionWarning: ReferenceError: window is not defined
    at --snip```
in strings in machine code
they got NSA crypto keys in all OS 7+
Anyway any IDE should do, but I like having one for most projects regardless of language
i really paranoid bout MS
Yes download is on MS
kul
o
I didn't say visual studio but I said visual studio code. Different product
i tried to DL and got MS site
cool
o?
I use kate now too for Rust
vscode is free and open source
Oh wait I work in SEC and I can never run any proprietary code IDE or any other software on my Ubuntu box I use for blockchain programming for SEC reasons. Nobody in this biz should either. I only use Netbeans IDE for this reason as its fully open source and I only use OpenJDK Java, never Oracle closed source JRE or JDK. Please never use M$
<@!585868308419444749> sorry to ping you, buddy. need some confirmation with the multisig signing: using the root derivation key from a hardware wallet `usb://ledger` appears to be ok for nonce authority and fee payer, but doesn't seem to be allowed for `--multisig-signer` can you confirm?
<@466984915376799748> can we add helpers like the rust get_first_epoch_slot to EpochSchedule in web3js or should those remain plain data structures?
I have made the code as a helper on my side but I could make a PR
should be good, feel free to use `'confirmed'` instead of `'singleGossip'`
web UX
i just use twitter bootstrap for JS front end
it like wild west programming and rodeo mixed together
i hear that about JS as I use java mostly and JS drives me nuts with no typing
It is for the front-end side, you can also use JS but it is a world of pain not to have some types
sounds good
o its JS
o what is typescript or is it in use in solana?
vscode, works for typescript too
intellij is all i come up with
what is good free rust IDE with debugger and open source please?
and this would be part of web3
```const connection = new Connection("https://api.devnet.solana.com/", 'singleGossip');``` is this correct for connection?
Thank you so much!!!!!! 🙂
See <#749579745645166592>
you've got it exactly right.  the idea is that `testToken` is a `Token` object, which contains the public key for the mint, the token program id, the payer account, and a connection to use.  Once you have that, you can use all of the other functions on it.  Feel free to read through the source for the `Token` object and then see how it's used.  Or you can checkout the solana-program-library repo, build the token program yourself, and run the tests yourself!
solana config set --url https://api.devnet.solana.com
😖 thanks!
https://discord.com/channels/428295358100013066/749579745645166592/851517187926654997

but that looks like the wrong url
no
anybody else experiencing the same?
having some issues connecting to devnet... Trinity, help!
<@!539801435571748868> Hey thank you for all your help so far. I know your time is very valuable so I apologize if i am being an inconvenience. I am not sure why I am having such a difficult time with this. So I was able to use my keypair by using web3.keypair.fromSecretKey. But Im confused about the actual token transfer "await testToken.transfer(testAccount, dest, testAccountOwner, [], 100);" So the first parameter is the source, the next is the owner, next is multisig and that doesn't matter in this case and finally the amount right? So in the case of testToken. Is this an actual spl-token that was created? I know you sent me a link with the constructor. So I would just need to create a token object that has the info of the token im trying to transfer?
Using a Ledger as an spl-token multisig, I used `usb://ledger` as my keypair, but when passing this to `multisig-signer` doesn't seem to work. Is there a derivation address that this equates to, because it's not `key=0` or `0/0`
Hi! I am experimenting with the curve25519 arithmetic operations to get a sense of their BPF count. The code that I am using to test the operations is in https://github.com/samkim-crypto/ristretto-bpf-count. I am using cargo test-bpf to let it spit out the BPF count of various operations. It seems like decompressing (deserializing) a single elliptic curve point requires well over 200k instructions, which is not completely unexpected, but I wanted to double check that I am compiling things in the right mode. Does cargo.toml and the general setup of the library look reasonable? Also, right now, there are a number of constant-run-time mechanisms in place like the use of the crate subtle. I am guessing that this shouldn't affect the BPF count to make a significant difference, but I wanted to get some input from the experts.
go check out Anchor by the Serum team. It's got everything you need.


///////////////////////////////////////////////////////////////////////////////////////////////

