great, waiting for it
I was able to create a browser module that works well with angular tonight, I'll have a PR up tomorrow. I didn't get a chance to check on the signature issue yet though.
each active node will process/validate all new transactions but nodes can be booted up from a trusted snapshot so they don't have to process all transactions from genesis
in solana's architecture, does each node ultimately process/validate all transactions?
ok thnx
https://explorer.solana.com/?cluster=testnet
is there anyone to know that health of the testnet?
I've been testing and now using the spl token ui (https://spl-token-ui.netlify.app/#/account-editor) it seems like it wasn't just my txs
txs don't seem to be confirming
looks fine from here, what are you experiencing?
anything happening on testnet?
lemme run a real quick simple typescript client app and examine this
under nodejs server staff look good.
its just the client side who have issues(maybe angular @_@?)
üôá‚Äç‚ôÇÔ∏è
Yeah I know it works under node.  I just modernized the ledger wallet signing example to 0.90.4 last week
but we'll figure it out!
we have it working on other apps ü§∑‚Äç‚ôÇÔ∏è
not sure yet
why you guys think i cant finish a tx?
üôÇ
yeah happy everyone's on the esmodule train now
Webdev is wild üò≤
great !
nice, soon this shouldn't be necessary anymore
https://stackoverflow.com/a/51627535 the solution
kinda
webpack config override or something?
yea
thought it was broken, did you find a workaround?
es6
sure!
please lemme know when tx transfer will work smoothly, am working on a big project on solana blokchain
how are you importing the web3 library now btw <@!289763878877790210>?
thanks for your help <@!289763878877790210> pointing out these problems!
I can't imagine the the message serialization being busted, CLI can decode it
yeah, i'll take a look.. pretty odd
Hmm. sig is still bad ü§∑ .  Maybe Justin will come across something while fixing the esmodule
584sCjGc7To3zJP4ESRCws7WuaT1muHK4Xo6HGL9ShiS88cxfr6354mtFe2jHtD4pxgR61tfmz3ceJnAS9wp65aHWFLJenqHYtLheGyY7A2fbtXzvFwooi9VrCJhT2ZZGK41pi5KeNhMSK9RQbDQVfLfcj4GCPZew5QHW4P8t7jcGaWKyWXVvvLSJeomcUH1c5fNHYtDGAQs1RfS4XVT7p4XPyu1zMBKYxK8oPnQwwVRj4pbZ4FRuwdSx2opAerQq22WHFFMQMDsCmfv2NsyXK2ttfWyhNgNym67q
sorry
hoo the addSigniture was after , 1sec
`Signature 0: 1111111111111111111111111111111111111111111111111111111111111111 (none)`
Looks like you forgot to `addSignature()` ?
3md7BBV9wFjYGnMWcMNyAZcjca2HGfXWZkrU8vvho66z2sJMZFcx6HZdBiAddjo2kzgBv3uZoac3domBRjJJSXkbBvokxRmv7P2R3DmNedCvMuhEt7XvzgLrd1bJPhvro8Yag9tuKw8mihczuEM9QtNwmiW1AStZ19E9QAJFygukTNLTfArxvPMnJncGimdSDQX7mBT9ueyoHRShc59c4pbKh2cuuEkNQsG9Qav2LQdT9YrZP6yfjAeVwGnQWWia4BR6eCqQv4BvEtaaHVxUZJEX5brbTPUoRjUMV
Except don't partialSign this time.  Keep the nacl + addSignature() thing
base58 of ‚òùÔ∏è
The tx after you've added the signature
No
you mean the base58 of this: let signature: any = nacl.sign.detached(tx.compileMessage().serialize(),privateKey);?
If signing is busted, no reason to believe verification works
Can I have the base58 string of the serialized transaction, like before
fail
ok, for now you can do `as any` to avoid the type error, I'm working on fixing browser esmodule support right now, but I'll fix this issue as well later today
yes
ah, this looks like a typedef issue. `Uint8Array` is valid there, are you using typescript?

the nacl sign return uint8array and the addSignature expect a buffer
Probably, assuming `ed` is some ed25519 library.  What <@!345046176149536769> posted above, using `nacl`, should work, if not
?
The main difference is that we only really test node üôÇ
are just similar enough to screw you
yeah, i've notice node env and the browser
hahaha
It works fine under node AFAIK
Like I said, I don't know if I was using it correctly so I bailed and looked for an alternative
Don't quote me on this but I think the partial sign has some conflicts with something in transaction.js
Nice, I wonder what the issue is then... maybe something in the browser conflicting with nacl web3 pulls in
Yea, it works for me
That smells right
```
let privateKey = new Uint8Array(Account.secretKey);
let signature = nacl.sign.detached(tx.compileMessage().serialize(),privateKey);
//build transaction
tx.addSignature(Account.publicKey,signature)
```
The bytes you need to sign are those of the message, so `tx.compileMessage().serialize()`
Can you try signing with some external ed25519 package  and attaching the signature with tx.addSignature()?
Which would imply that something isn't right with `partialSign()` under the browser bundle
<@!289763878877790210> the signature is indeed bad
https://tenor.com/view/really-shrug-seriously-james-little-james-gif-11213198
I wonder if there's something else busted with the browser bundle thing
Let me add signature verification to that CLI command real quick
This looks ok
```
$ solana decode-transaction '5P7ve4uZbgLUMZaRDFPHejnn959FwwzMDapdBKKatLcQF6oKsW1KyZg2gbMh8DvU7TkY3VFHqhWkwYiqzhCpEGQ2DcCXboa72fHVBFLjTYpEfrCmo1oS3z2tqesmvXzXPZnPw4JL86fquhu1d154F97bnXCQ7c7CzvFar8MGUELjZteGm4bBa9vdNsnbzm3eqgpFieJWQYASmDYrD5duguRkXLn7fqD3LG4hmRdvZfW3YeTfxv9knbrAHAYXJFDPsTyTDZ7TevZmzvNdSW6svn9BVAticvhK6kpGw' base58
Recent Blockhash: FW7Es7XzFHJ4jDiwNcySuCVjVd8ZxfzxEu6ejBN1JXHU
Signature 0: 3yoLTqkdSTGKofVWM99MjuZPWsTFhutpHYKRUbPpzDiUPXMEumvxXTouAU94n43AaosPuB6aYNxxMJ1naw9qAkok
MessageHeader { num_required_signatures: 1, num_readonly_signed_accounts: 0, num_readonly_unsigned_accounts: 1 }
Account 0: 9rW87NZ2vr8ZqTHUv8mirQbmty1XTBZGEkXYw8WTsZjp
Account 1: GTGaf3uDnsUWGb2o3ctKsweWynFkKiavCcMcBzqRM5Py
Account 2: 11111111111111111111111111111111
Instruction 0
  Program: 11111111111111111111111111111111 (2)
  Account 0: 9rW87NZ2vr8ZqTHUv8mirQbmty1XTBZGEkXYw8WTsZjp (0)
  Account 1: GTGaf3uDnsUWGb2o3ctKsweWynFkKiavCcMcBzqRM5Py (1)
  Transfer { lamports: 500000000 }
Status: Unavailable
```
5P7ve4uZbgLUMZaRDFPHejnn959FwwzMDapdBKKatLcQF6oKsW1KyZg2gbMh8DvU7TkY3VFHqhWkwYiqzhCpEGQ2DcCXboa72fHVBFLjTYpEfrCmo1oS3z2tqesmvXzXPZnPw4JL86fquhu1d154F97bnXCQ7c7CzvFar8MGUELjZteGm4bBa9vdNsnbzm3eqgpFieJWQYASmDYrD5duguRkXLn7fqD3LG4hmRdvZfW3YeTfxv9knbrAHAYXJFDPsTyTDZ7TevZmzvNdSW6svn9BVAticvhK6kpGw
Can you base58 encode bytes and paste the text here?  (no screenshot, I am not a computer)

haha sure
Or... whatever is the actual JS translation of that code block üòÖ
Can you 
```
tx.partialSign([wallet]);
const bytes = tx.serialize({ false, false });
```
base58 encode bytes and paste the output here?
fail..
i tried a few different code pattrens to perform tx. none works....always getting "Signature verification failed"
I'd get rid of everything between `const tx ...` and `sendAndConfirmTransaction()`
The whole thing looks overly contrived.  Do you really need all this complexity or do you still have hacks from before upgrading web3?
0.90.5
It fails at the explicit `verifySignatures()` call?
So you're on a 0.90.x now?
yes. i did some workaround to overcome http issue on the last npm ver.
but still cant finish the transfer method.
keep getting the errors as i showed above
<@!289763878877790210> did you manage to get solana-web3 updated?  I think all of your problems will go away (as well as others) and you'll have a much better experience if you work on that problem
yeah we'd go with some data center, but I was wondering if you have any suggestions. Maybe another team that has successfully done it
That said, the solana-run validator nodes are on google cloud are n2-standard-64 and n2-standard-128 machine types and they perform just fine, but are not at all cheap
guys, maybe some one have a working example for submitting tx.
i keep getting "Signature verification failed"
We've generally found that cloud VMs are cost-prohibitive, given the amount of network egress traffic a solana node generates.   Data center based options with unlimited traffic policy would make for a better deal.
do you have any recs for cloud arrangements? or somebody to talk to?
At this time, yes.  A lot of our validators have found certain data center arrangements to work well for hosting their servers to be cost-effective, rather than choosing to build one from scratch.  We are hoping to have some better community-hosted/-facing RPC options in the near term, as well as some. infura-style pay-per-RPC service so that everyone doesn't need to rely on the few endpoints maintained by our team
<@!563035598743535646> thanks. So I guess the only option is to invest in the hardware.
An API endpoint node is a full validator, as far as the hardware and connectivity requirements.  The difference is an API-only node does not submit vote transactions to participate in consensus (just add the `--no-voting` flag), and you may set different options for ledger storage and RPC access, and compared to a consensus-voting node that isn't also serving as an RPC endpoint.  https://docs.solana.com/integrations/exchange#node-setup
Is there a guide somewhere on how to run a Solana node but not a full validator? We want to set up a server and an endpoint to be used by our app and not have to rely on the default solana mainnet endpoint


///////////////////////////////////////////////////////////////////////////////////////////////

Yep!  That's the main library for managing the ledger data.  the `ledger-tool` directory may be a better example of using it, as it is more self-contained than the validator
Yes. Do I need to research this part of solana https://github.com/solana-labs/solana/tree/master/ledger  or maybe anything else?
<@!208527206966755329> You can use the deprecated loader if you like but there aren't any advantages to it over the latest loader
So you want to run a validator and pull data from RocksDB into some other database?
<@!585868308419444749> that link just points folks to where to find the on-chain program
thanks
It probably won't be too helpful for someone new to Rust
<@!453347985628200960> I was trying to figure out if we should really be linking to the Cargo.toml there?
<@!394537695185076244> I see the broken link, fixing now
I want to fetch transactions data and build some indices on them.
For now I see only one way it‚Äôs  poll getConfirmedBlock and parse it
what's not working ?
The link to on-chain hello world program on this link is not working, https://github.com/solana-labs/example-helloworld#quick-start. Does anyone have that link please.
What do you want to do?
You can't really query it like this though.
That's somewhat complicated as we store the raw data as the same "shreds" that are broadcast over the network, then reassemble the block from that.
<@!585868308419444749> could u help with link on source code of block data structure?
<@!267610913773715456> WDYT about a "Help wanted/available" channel under developers? ‚òùÔ∏è
Yes please. That's what I was looking for but ended up here.
I see a lot of people are asking for solana devs maybe its good idea to create special channel for that ?
Quick question folks: I need to start putting together a team to help build out the crypto side of my business. Where is the best place to look for qualified (solana) talent?
Historical block data
so we don't use the deprecated one ?
<@208527206966755329> The deprecated loader's entrypoint and deserialization routines operate on unalighed data. That was improve in the updated loader
What kind of data stored in bigtables?
Yes `getMultipleAccounts` https://docs.solana.com/developing/clients/jsonrpc-api#getmultipleaccounts.
is there a `getaccountinfo` to batch multiple accounts in a single call?
what's the difference between ``BPF_LOADER_DEPRECATED_PROGRAM_ID`` and ``BPF_LOADER__PROGRAM_ID``
Any Solana developers here available for Freelance ?
<@!555204910321369099> Are you writing to a buffer account and then providing that buffer account to `solana program deploy`?  If so, the buffer's authority must match the program's upgrade authority.  If you show the exact commands you are running that might help us identify the issue.
yes, I had a similar idea. it just seemed that adding small data fields to the token itself would be much more versatile. thank you.
trying to keep spl token a light weight primitive
maybe a directory / name service program would be a better fit for that?
to be honest not to much data. ipfs address or similar.
Hey, how many compute units is ok for you? I tested `u128` sqrt and it looks like around 80k
yeah, there's no way to add custom data to tokens right now. What would you like to add?
am I correct to assume that if we want to add some data to the token we need to add new instructions to the spl token program and new serialisation functionality?
Understood.  Thanks <@!445425471027544095>
We've yet to create a formal process like that.   Github issues and discuss there/here is the current way
Is there an equivalent of ERC's for Solana?  Solana Request for Comments, if you will?  Thanks.
https://explorer.solana.com/tx/5wyAfKHWfc6jMvjbnmqwyiwWygmcYZhrR89Pf3nm8i15Zrk3dezENWgbbiKQ52VQHcf2AteqfzKWS7Pd1DcBpF1w?cluster=devnet
Hmmm looks like I need to read up more on the buffer address and where the CLI is pulling that from
yes, maybe the `u128` is enough
<@!750257486975467582> so you need the sqrt for a `u128`?
I use `let x2_temp = (price as u128) * (x as u128) * (y as u128);
    let x2_power = PreciseNumber::new(x2_temp)?;
    let x2 = x2_power.sqrt()?.floor()?.to_imprecise()?;` to calc
<@!555204910321369099> which instruction is failing? Do you have an explorer link handy?
Oh got it
No, sorry for the confusion. When my many attempts to use  `solana program deploy` failed, I did a sanity check with `solana deploy`
I think the deploy reuses the previous program id by default or something
I'm confused. You deployed as immutable already and are trying to deploy again?
I'm working on deploying my first program to dev net, but I keep getting a tx failure. `Error: Deploying program failed: Error processing Instruction 1: Incorrect authority provided` . This was when using the `solana program deploy` CLI (solana-cli 1.5.5 ). I tried specifying the upgrade authority, program id, and keypair. Deploying the program as immutable with `solana deploy` worked as expected. I was following the Deploy a Program docs. 

Any ideas what I'm missing from `solana program deploy`?
So you are using `PreciseNumber`? <@!539801435571748868> took a look and has an in-progress change to use `u64` based `sqrt` which uses much fewer instructions. What precision do you need?
We wrote a test program with almost no other logic, but using this method will report an error `exceeded maximum number of instructions allowed`
But it seems to consume much instructions.
Is there a good way to execute `sqrt` operation over chain?We use the method from https://github.com/solana-labs/solana-program-library/blob/40b7690a58af87f221c8ec6c6237907c57abc331/token-swap/program/src/curve/math.rs#L474.
Great
We use the `after` method is ok.
Still have problem?
`// Before diff_y  is mistake 
let diff_y = (price as u128) * (y as u128 - y_out) checked_div(1000000 as u128).unwrap();

// After diff_y  is correct
let diff_y = (price as u128) * ((y as u128 - y_out) / (1000000 as u128));`
I put together a semi-stripped down repo, to see if there's anything grossly wrong with what i'm doing: https://github.com/gyeiv/spl-issue-repro.

key pieces here are account creation client-side: `spl-issue-repro/js/src/repro/marketCreation.js` and the program: `spl-issue-repo/program`
that was weird I rebooted to install an update for my mac and its working now. I may have needed one of the environment variables to apply not sure which one. Thank you.
just the plumbing...
https://github.com/xGromovniKx/WF_Csharp_SolanaJsonAPI
ok, as I promised, here is jumpstart project in C# with Solana JSON RPC API:
<@!394537695185076244> - strange, `solana-test-validator` by default attempts to create the `test-ledger/` directory from the current working directory.  If you run `mkdir test-ledger/` manually does it succeed?
Hello I'm trying to run the hello world example but when I run solana-test-validator  --log command I'm getting the Error: Unable to create directory test-ledger: No such file or directory (os error 2). I have already installed the cli and was able to send myself some sol
Ok thanks this gives me crazy idea ;D
<@!149990576572334080> - yes, well not useless but at that point it's up to the program to decide if the account private key retains meaning
When i generate new account and assign it to program this program account does not change its initial address i just lose ownership of this account making my private key useless ?


///////////////////////////////////////////////////////////////////////////////////////////////

<@!750257486975467582> please don't cross post, I answered in the other channel
Hi, we deploy our program over mainnet use command `solana program deploy --program-id ./mainnet_program.json ./serum-amm/amm/target/bpfel-unknown-unknown/release/serum_amm.so`
But get errorError: `Data writes to account failed: HTTP status server error (502 Bad Gateway) for url (https://solana-api.projectserum.com/)`
Does anyone know what's wrong about the deploy?
is there explorer that shows internal logs ?
Here's the conversion from a solana_program Pubkey to base58 string: https://github.com/solana-labs/solana/blob/5d3caa57a0e79cfa37a5d1e0ab32600356dcc880/sdk/program/src/pubkey.rs#L321
Under the hood, a Pubkey is just a byte array. While I'm not familiar with that serum struct, I imagine you could convert the array of u64s to a 32-byte array of u8s (https://doc.rust-lang.org/std/primitive.u64.html#method.to_le_bytes) then base58-encode.
In the rust, how are bytes encoded into a base58 public key? I'm trying to replicate the below code from serum in python. They store their public keys as 4 u64 ints. But how could I convert 4 u64 ints to an encoded base58 public key string from first principles?
https://github.com/project-serum/serum-dex/blob/master/dex/src/state.rs#L929
I see thanks. Any other links for learning solana?
I'm not sure if this is the right place for this question but I'm trying to get started learning to make dapps with solana and I've run into a bunch of errors when I run: npm run build:program-rust.
<@!466984915376799748> Last question sorry but where can I find the address to add to my wallet metamask?
Thanks a lot
I'll leave the rest up to you, heading to bed üí§
signature is a local thing, no need to fetch. After a transaction is signed, you can get its signature with:
```js
const bs58 = require('base58');

bs58.encode(transaction.signatures[0]);
```
we have programs here: https://github.com/solana-labs/solana-program-library
yeah, we refer to "smart contracts" as "on-chain programs" actually. Just a program that conditionally makes changes to account state and can call other on-chain programs. Programs are usually written in Rust but you can use C as well
Yes, sure. Pls detail further.
My current code is as below

const transaction = new Transaction()

then, from the "transaction" object, how to fetch the signature?
not sure, but maybe something like this.. 
https://github.com/mcf-rocks/active-stake-breakdown/blob/main/getStats.js
so that does two different things, but the active stake for validators in any epoch must equal active stake for authorised staker in any epoch... the way it works out authroised, it rolls forward calculating warming up and cooling down in an epoch (which may not be full amount) - you could do it for any epoch i think... then work out what validator each bit of stake belongs to. (?) 
No warranty LOL.
Having said all that you should ask Tyera when she gets on because probably can make better suggestion, helped me in the past.
you'll need to encode the signature as base58 as well. let me know if you need help with that
Wow, that's it. I'll try now. Thanks a lot
If this is true are there any examples of smart contracts in solana?
<@!720492966204145695> does ^ make sense?
```js
try {
  sendAndConfirm..
} catch(err) {
  console.log(transaction.signatures[0]);
}
```
I am new to solana. Am I right in thinking that smart contracts on solana are just programs that use constraints to decide whether to execute an instruction or not? And there is no separate solidity like language to do smart contracts in solana.
It throws the Error message in text only
Ok, no worries. Can you try accessing the transaction.signatures inside the catch then if you need it?
I will need to change a lot
This sounds complicated?
just access `transaction`
you can also break things down.. you can sign the transaction, copy the signature, then pass the tx to `connection.sendTransaction` and confirm it
when it already throws Error, then inside the catch(), how can I get the tx?
yea, try ....catch(error)
try catch
No way as the method throws Error
even after the failure
I meant, the tx signature
you can pull the signature out from tx.signatures[0]
you mean the signature not the hash right?
<@!466984915376799748> To initialize the account, I use the below method for sending the tx

sendAndConfirmTransaction(connection, transaction, signers, {
  commitment: 'max', //'singleGossip',
  preflightCommitment: 'max', //'singleGossip',
})

Sometimes, I see that, it throws error like this

Error: Error: Transaction was not confirmed in 60.01 seconds. It is unknown if it succeeded or failed. Check signature FaNpMyh3xxSQrkbBz7XcDmd28xdFk2BcoSAnyKMVctFQjC3CJwgBCTXSRUVqnpe2gKbWWxo2tF5xpzuTT9NF8PJ using the Solana Explorer or CLI tools.

My question is, why the method does not return the tx hash
Thank you
nope, you'll have to talk to Exodus about that
<@!466984915376799748>  So you know why I can‚Äôt?
yes
thx
https://unpkg.com/@solana/web3.js@0.91.2/lib/index.iife.js
https://unpkg.com/@solana/web3.js@0.91.2/lib/index.iife.min.js
how to know current BB and url?
<@!466984915376799748> Exodus I already made an exchange in the direction btc<sol
thanks!
I'll clean that up tomorrow
never noticed that
oh, it's in our readme..
https://solana-labs.github.io/solana-web3.js/ the browser bundle
where do you see that
why this never change? <script src="https://github.com/solana-labs/solana-web3.js/releases/download/v0.0.6/solanaWeb3.min.js"></script>
auto
<@!466984915376799748> is this documentation automatically generated, or manually? https://solana-labs.github.io/solana-web3.js/
you want the active stake for a validator for a given epoch?
are you using a website to exchange tokens?
Hi, why isn't it possible to exchange?
but not per account
ah, but that is only total, not the distribution per validator
yeah that will show the amount activating, deactivating, etc per epoch
https://github.com/solana-labs/solana/blob/master/sdk/program/src/sysvar/stake_history.rs -- there's a sysvar with all of that, which you can use in a program.  does that give you what you need?
all you need to is to use `@solana/web3.js` same as anchor
yep i havent pushed change
still doesn't error for me on the test branch
ah true, and compute backwards
hmm, for recent epochs one could probably try to fetch all the transactions involving the stake program
no easy way, I believe you would have to replay the ledger to get that info
Are there any steps to setting up local devnet besides in Develop.md? It doesn‚Äôt seem like my eth-devnet and solana-devnet are properly running
branch test
sorry, wrong branch
what do you mean once app opens you should see error in web console
its missmatch of `@solana/web3.js` with anchor and my own
<@!466984915376799748> ok so i think i got fix
is there any way to get historic stake information? i.e. for example, get the stake distribution of the last (not current) epoch?
<@!149990576572334080> how are you reproducing that error?
haha ok, shouldn't be hard to fix
<@!466984915376799748> i appreciate help since this is hard block for me ;C
ah thanks <@!149990576572334080>
```npm install 
npm run start ```
and run it yourself
<@!466984915376799748> https://github.com/Synthetify/webapp/tree/test you can pull branch test
Yes, that's right, I can clarify the documentation there
dev of anchor told me that i may be issue with transpilation
It's to keep your funds safer.  Imagine you delegate 10 tokens to a program, and then only 9 are used by the program in an instruction call.  If you don't revoke that delegation, anyone could use your account with that program again and potentially siphon off that last delegated token
oh thanks
btw it only happens using anchor
taking a look...
I got problem with https://github.com/pabigot/buffer-layout package used by solana when using with TS idk why it crashes any tips
reading further I think "token swap" means "pool"
or it means a preparation for a single swap? i.e. you need to do that before each swap?
swap program: When the docs say "Create a new token swap" it should read "Create a Pool" ?
can't you delegate to the token swap directly?
why a new keypair is needed?
Swap program
spl-token:
but follows the same interface as other spl tokens
yeah it has some special behavior
no temp accounts, I'm reading that wSOL is special, it's not just another token
üòâ
yep, but for everything else you have ~~Mastercard ~~Wrapped SOL
Yeah, you can always create temp accounts as well that act as delegations
and staking is done with native SOL as well
just that all transaction fees are always paid with SOL üôÇ
yeah that came out wrong üòõ
haha
uncommon != DEFI
ok, but for what I'm reading it's way safer because you can delegate
users transact and pay fees with native SOL
relatively uncommon, mostly used for defi
how common is to use wrapped SOL? all users transact with that?
ah! yes
yes, sol accounts are owned by system, but system doesn't have delegation
sol is not an spl token
only for wrapped sol
Delegation works for SOL too? SOL accounts owned by the System program correct? so the System Program also has delgation?
thanks! I'll read that first
but happy to answer questions here too
might want to read this https://spl.solana.com/token#operational-overview
so alice could delegate 100 SOL and 20 x token to the program's authority and then the program would be free to transfer
in the case of spl tokens (erc20 equivalent btw), you can delegate tokens to a particular address
so alice just signs with one account which is the owner of both the sol and x-token accounts
Let's assume we are talking about spl tokens (SOL -> wrapped SOL). SPL tokens allow setting an owner which by default would be the token account itself, but in practice, is set to a user's main sol account
https://discord.com/channels/428295358100013066/517163444747894795/810409585482792970
I'll link
yeah we discussed this yesterday
If she signs with her main acc, and it's a malicious program, can the program access all her funds?
Do she sign a txn with both her main accounts? or it's customary to create a new account before adding liquidity?
Let's say Alice wants to add 100 SOL & 20 x-token
another: (I'm thinking about "add-liquidity" txn on a liquidity pool)
you could also deactivate existing stake and redelegate, but not very practical given the cooldown/warmup time
in general, yes
for staking you need to create an account every time you want to stake. correct?
ok, with staking, is somewhat different, is that correct? (sorry for the noob questions, I'm new to solana)
That's right
on a transaction signed by Alice too? if yes, that's because the spl-token-program owns both accounts?
You _can_ write to Bob's account. Nothing in the token program that forbids this
Hi <@!347689664855015424> I've read your escrow example for Solana, it's very good and detailed. I've a question on a simpler interaction. Let's say Alice wants to transfer 10 X tokens to Bob. You can't write Bob's account, so after the transfer Bob will have a "new account" with the amount transferred and is his job to transfer that to his main account if he wants to unify both.  It's that correct? or there's a way to transfer X spl-tokens directly into Bob's main account?
Hello, it‚Äôs impossible to change SOL into any crypto can I have any information ?thanks
https://github.com/certusone/wormhole/blob/master/DEVELOP.md

^^ are there steps not included in there I'm missing? Do i need to setup a wormhole node first?
everything gets up and running after `tilt up --update-mode=exec -- --num=1`, but the eth-devnet and solana-devnet keep claiming about connectiong refused
hey ppl, having some trouble with getting the local devnet setup...
ok, never mind, got it. you should add the "npm install --save Solana/web3.js" command to the hello world guide
and indeed it seems theres no node modules file present. what should i do?
hello - I'm trying to get the hello world example going. I can't seem to get "npm run build:program-c" to work. I get an error like this: No rule to make target '../../node_modules/@solana/web3.js/bpf-sdk/c/bpf.mk'
Wormhole may be expanded in the future to link to these
> As opposed to ethereum which allows contracts to have state, solana programs are stateless
Thank you very much for this thorough answer. I think this was the detail I was missing. I will try to put together an account model to try to make more sense of it.
To compare it to the example you gave, as opposed to ethereum which allows contracts to have state, solana programs are stateless. But you still need to save state somehow, e.g. for an escrow. That's what accounts are for. They're really just memory. Transactions never go to accounts, always to programs (which are themselves stored in memory i.e. in accounts) which then access the memory they're allowed to read for that tx (=the accounts passed into the programs `entrypoint`). Right now I can't think of a more general explanation than what I've written in the guide but maybe if u have more specific questions i can try and answer those
My understanding is I could send X token directly to the Escrow X account and maybe pass an int as the desired token Y ?
Ah no unfortunately not.
just checking, this https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/#is-there-really-a-need-for-a-temporary-account-for-alice-s-x-tokens didn't help?
i am geting weird error when creating instruction for newprogram account
<@!347689664855015424> Just went through your tutorial and most of the docs (thank you v. much for putting this together btw). There is still something I still don't understand well though: The Account model.
It is said that a temp account is necessary in order to allow the escrow program to move funds around. In my ethereum world, Alice would just send a Tx to an escrow smart contract with some params (e.g desired Y amount) and the smart contract would hold the funds for the time of the Tx.
How could I make more sense of Solana's account model ? Are there great docs that I should be reading ?
I added an issue to accept `null` lockups as a synonym for "no lockup" in these interfaces https://github.com/solana-labs/solana/issues/15326
Yeah, its a pubkey who's byte value is all zeros

it cant be all zeros since last prop is expecting pubkey type
Rust `Lockup::default()` is all zeros
We should really allow that to be null and fill in defaults
I'm sure there's a test in there somewhere, but I don't have one on hand
via js
you have an example for creating a stake account?
it dosent look like an option...
You probably shouldn't be setting a lockup at all
so where a normal stake is created - the connected wallet pubkey should be passed there?
https://docs.solana.com/staking/stake-accounts#lockups
Custodian manages the lockup and controls withdraw while the lockup is in force
guys, what the meaning of custodian prop (accept pubkey) on lockup object when trying to generate a stakeaccount ?
https://youtu.be/oJS38KacmK4
Bridge between eth, terra, and solana
ok what about the cross-chain ? what's the wormhole thingy (sorry noob question)
there is currently only one "real" solana cluster which is the solana mainnet-beta cluster, the others are testing and dev clusters which do not help with decentralisation of the main cluster. Just like other POS blockchains, solana gets more decentralised the more independent nodes make up the superminority (see byzantine generals problem). The System Program does not control everything. It can only do a few things that other programs cannot (like creating accounts, see: https://github.com/solana-labs/solana/blob/master/runtime/src/system_instruction_processor.rs) but that's it. The tx fee is currently fixed but will in the future be automatically adjusted based on network congestion. cc <@!306185268879425538>


///////////////////////////////////////////////////////////////////////////////////////////////

<@!445425471027544095> Even got this error

Error: failed to send transaction: Transaction simulation failed: Blockhash not found
<@!445425471027544095> Right now, I get constantly the below error when connecting with mainnet

<h2>The server encountered a temporary error and could not complete your request.<p>Please try again in 30 seconds.</h2>
Is there a serialization solution out there to make the account lists in program calls more rigid? I was thinking of writing something that lets you do this:
```rust
/// Potato order state, used to retrieve data about a customer's potato purchases from Solana.
#[derive(AccountState)]
struct PotatoRequestState {
    farm: AccountInfo,
    customer: AccountInfo,
}

pub fn main () {

    let accounts: Vec<AccountInfo> = PotatoRequestState::to_acc_vec();
}
```
Thanks a lot!! It works
Once the account is marked executable, it's a program and can't be modified (other than by a program upgrade).
Yes but I was wondering if there is a way to make an account that can both run code and store data
<@!633016166838829066> - program (code) own accounts (data)
Maybe it's a stupid question but can a program account be owned by another program account? If yes does the child account inherit all the parent functions?
so you get the signature
sign the message yourself first üôÇ
What if this method connection.sendTransaction() also throws Error?
it's not complicated.
`sendAndConfirmTransaction()` is just two function calls: https://github.com/solana-labs/solana/blob/aaa44355b118975c05e5f27226d6b61e634e4ac5/web3.js/src/util/send-and-confirm-transaction.js#L31-L42
Just call `connection.sendTransaction()` yourself
For example, it throws the below Error

Error: Transaction was not confirmed in 60.01 seconds. It is unknown if it succeeded or failed. Check signature FaNpMyh3xxSQrkbBz7XcDmd28xdFk2BcoSAnyKMVctFQjC3CJwgBCTXSRUVqnpe2gKbWWxo2tF5xpzuTT9NF8PJ using the Solana Explorer or CLI tools.
The problem is that, the method `sendAndConfirmTransaction`  does not always return tx signature. It can throw Error and I wish to know the tx signature in this case
???
`sendAndConfirmTransaction` is a very simply function, just copy the code out
export class Transaction {
    signatures: Array<SignaturePubkeyPair>;
    signature?: Buffer;
Context is:

const transaction = new Transaction()

sendAndConfirmTransaction(...)

I wanna to get the tx signature from the "transaction" object in case the method sendAndConfirmTransaction throws Error
I don't understand the question, can you please rephrase or give me more context
Try adding these validator arguments: `--enable-rpc-transaction-history` and `--enable-cpi-and-log-storage`
<@!445425471027544095> Pls help me with the above question
Question pls, from the below

  export type SignaturePubkeyPair = {
    signature?: Buffer;
    publicKey: PublicKey;
  };

We can access the "signature" as a Buffer. Then, how to get it as tx signature? 
I tried using "toString()", but not success
` --account-index "spl-token-owner" ` works fine
<@!383348505491668993> could you please advice
hmm not sure, getting late here. I think <@!383348505491668993> can point you in the right direction when he's available
<@!466984915376799748> should I run validator with '--account-index spl-token-owner or --account-index program-id to retrieve preTokenBalances/postTokenBalances ? Right now I see always empty arrays: "preTokenBalances":[],"status":{"Ok":null}
I think you can get logs from specific rpcs, but you can open a websocket connection using the `logsSubscribe` api with <@750257486975467582>na/web3.js.
<@!501570363566587905> i have seen that transaction simulation is throwing error with logs maybe just matter of smart parsing ?
I believe the answer is no. üôÇ
Lazy question: does web3.js have an api for streaming `msg!` logs?
Hello, i'm interested in Governance Tracker Interface/Tool grant in gitcoin. i have a question regarding that. It says Forum - integrates voting tools/interface with discussions from forums.solana.foundation

Do you expect to have a new forum with all tools and interface for voting proposals and create proposals from there ?
And why it confuse me, right know I see them at documentation "getconfirmedblock" üëç
no problem, <@!383348505491668993> added them recently üôÇ
My Golang struct deserializer skip postTokenBalances/preTokenBalances json fields.  But I see them at original json reponse. Thank you very much!
<@!567465402716913664> note pre and post token balances in the meta field ^
https://explorer.solana.com/tx/5ByKfh7FW3VQRjEUzU7ZymYS5sWEasrFE8X2as5hZ7veEeht4JM4ns4ABCii1ka92a65vEd9r4DmEsTEuJiTVbZc
```
{jsonrpc: "2.0",‚Ä¶}
id: "ccc54aaf-90dd-41d7-a0a8-dfd96456bb9b"
jsonrpc: "2.0"
result: {blockTime: 1613422616, meta: {err: null, fee: 5000, innerInstructions: [],‚Ä¶}, slot: 65551020,‚Ä¶}
blockTime: 1613422616
meta: {err: null, fee: 5000, innerInstructions: [],‚Ä¶}
err: null
fee: 5000
innerInstructions: []
logMessages: ["Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [1]",‚Ä¶]
postBalances: [3997728025880, 2039280, 2039280, 3461600, 1118555520]
postTokenBalances: [{accountIndex: 2, mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",‚Ä¶},‚Ä¶]
0: {accountIndex: 2, mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",‚Ä¶}
1: {accountIndex: 1, mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",‚Ä¶}
preBalances: [3997728030880, 2039280, 2039280, 3461600, 1118555520]
preTokenBalances: [{accountIndex: 2, mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",‚Ä¶},‚Ä¶]
0: {accountIndex: 2, mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",‚Ä¶}
1: {accountIndex: 1, mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",‚Ä¶}
status: {Ok: null}
slot: 65551020
transaction: {message: {,‚Ä¶},‚Ä¶}
```
instructions: {"accounts":[3,2,1],"data":"3Dc8EpW7Kr3R","programIdIndex":5}]
From transaction I can understand called TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA: transfer from Aaccount to Baccount, Cauthority. But I don't know a token account address, balances and value.
token name i think is hardcoded and does not exist onchain balances changes are just parsed transaction data idk if there is way to pull all transactions
Hey folks! Could you please advice how explorer.solana.com show token transfers(token name and balances changes)? How I can retrieve this info from transaction ?
no cranks
nope, just need to prepend that instruction in the transaction
So does it need to have a entity to call the `AccrueReserveInterest` instruction periodically (similar to Serum crank)?
it's a function of the liquidity utilization and a few params. As liquidity is borrowed, the interest rate goes up along the curve of min <-> optimal <-> max and as liquidity becomes available, it drops.
<@!466984915376799748> thanks for the clarification. Do you mind sharing what is the formula for the interest rate? I tried looking into the `reserve.rs` but am a bit confused on the Math.
yes, we can coordinate upgrades but ideally that rarely happens to minimize impact on existing programs which leverage the token program
will switch to an oracle when it's ready
it uses the serum dex for price discovery right now
https://docs.travis-ci.com/user/reference/windows/#git-bash ahhhh ok that is how, travis uses git bash that is how all those bash script work
I have WSL, but i am trying to understand how the build works for windows binaries given through the installer for windows
are you using WSL?
right
I am trying to help for https://github.com/solana-labs/solana/issues/15164
But i am completely confused about the build pipeline for windows, are things built in travis through https://github.com/solana-labs/solana/blob/master/.travis.yml ?
I struggle to see any relevant bits that would work on windows
I think developer can just make a new deployment in a different account and use the new program. This is how Serum does it at least.
is the token contract upgradable? <@!287924636493152257>
Dear Solana devs,

I am wondering what is the high level idea for  `token-lending` program. I understand that this might still be a work in progress, so no much documentation is provided. So I am wondering can someone provides me with a **high-level ** idea of how it works?

In particular, I am slightly confused about:
- the `InitReserve` instruction contains a Serum DEX market, what is that for?
- the tests in `borrow` refers to `bids` and `asks`, but isn't a lending protocols just a pool of money? Or is it using the Serum DEX as liquidity provider?

Thanks for the clarification.
super
sure thanks
You can ask the devs to go to <#796351569921703946> and choose the appropriate role.
I think you need to have the developer role to access it.
is this invite channel invite only ?
alright, thanks. I will pass the info to the devs. Not sure why they are not able to access the channel . defifarmer
#1139
Which is in here: https://github.com/solana-labs/solana-program-library/tree/master/token
Correct me if I am wrong, but I think this will just be the token-program.
Hi team, any way I can see the source of USDC or USDT Solana contract? Like you can see on ERC20 ?
<@!439210198142550016>   thanks I appreciate it
Each additional validator eats up some capacity
<@366636124778659840> it floods the network with txs.
Question about the multinode testnet beta (https://docs.solana.com/cluster/bench-tps), does it produce blocks, or just transactions?
Or is it a matter of how many validators you set up to produce blocks?
Such that no two leaders transmit at the same time
It‚Äôs a forced delay for block producers aka leaders
Hey! I just wanted to understand - how does the PoH implementation of Solana ensure the proper ordering despite difference in clocks between nodes?
exactly what i was looking for, thanks!
If the account has an allocated size and either contains non-zero data or is owned by a program other than the System program (most likely your program), yep, it will throw an error. Here's the relevant code: https://github.com/solana-labs/solana/blob/b3256aa722ecc3291fa7e053c8f095680d2e93eb/runtime/src/system_instruction_processor.rs#L68
I've seen a few answers here mentioning "on the roadmap" but haven't been able to track down what that is yet.  Is there something formal I can look at?  And major milestones coming up in the next Q or two?
gotcha. for context, i'd like this to be an initialization function, so the size being fixed is desirable. Concretely, if the program tries to invoke an `allocate` instruction on an account that already has an allocated size, will it throw an error?

in particular i'd like the data in the initialized account to be immutable (excepting certain members that will be accessible via program-specific operations), so i'm trying to understand if i'll have to do an unpack + check afterwards
Short answer, yes. While account reallocation may be implemented in the future, atm once an account is allocated at a specific size, that size is fixed.
However, if you were to empty (ie defund) the account at the derived program address as part of some program operation, you could recreate it via your program at the smaller size.
question: let's say i have an instruction that takes in an account `A`, creates an account at a derived program address that uses `A`'s address as a seed, allocates space of a certain length to it, and writes some data there.

if the amount of space allocated fixed at this point? (e.g. if i rerun this instruction on the same derived address, with say a smaller space allocation, it would throw an error?)
I'm planning on polling transactions on the chain. Is there some quota limit I should be mindful of? Is there a prefered way of doing this? So far I'm planning on just mimicking whatever "solana block" is doing
noted, we'll keep both of those in mind
Also as a side note, it would be very nice to have an entry point that was integrated with protobuf (and not burn compute units for initial instruction parsing if possible)
totally with you there... we might need to create a separate trait to do that
Fair enough, thanks for the suggestion!  Btw, you'll probably prefer to not use `Instruction::new` in your case
I would also except byte vectors not to be bincode serialized at all
Perhaps a note in the documentation reminding that rust bin code serialization, including vector serialization, needs decoding
You're not the first person to run into that problem... any suggestions on making that behavior clearer?
I see, that‚Äôs definitely what‚Äôs happening, thanks!
Are you doing `Instruction::new` and passing in `Vec<u8>`?  If you do that, the `Vec<u8>` will be serialized using bincode before creating the instruction, which means it'll prepend the length of the vector.
I pass a byte vector to the invoke function. Upon receiving the data, the bytestring looks pretty similar except for the first few bytes. Is there some deserialization I need to run on the passed Vec?
thanks. printer go brrrr
As long as there's a `mint_authority` set, you can keep minting!
We'll need some more info here.  Are you saying that the child program is receiving the wrong data?  You might need to post some context with what you're passing to `invoke` and what you're seeing on the other side
What is the difference from a cbc block and just a block. What does cbc stand for?
are you able to continually mint tokens, like a inflation rate, or is a fixed supply required?
When I call a child program with `invoke` it seems the `instruction_data` I pass to it changes.  Why would this happen?
Very helpful, thanks!


///////////////////////////////////////////////////////////////////////////////////////////////

cuz I am still a beginner
not so simple but still not that diffucult
Im looking for simple ideas
not really
well
You can check the hackathon-team-formation channels if you are looking for a team
Well Solana needs an attractive Defi ecosystem to succeed
lending etc..
and Im still a beginner for these stuff
it seems all ideas posted are about defi
anyone got a good. idea for hackathon üôÇ
thanks
got it
But the blockchain is a state machine.
You send a Tx to the blockchain from a client (frontend) by using web3.js or else (ethers.js on Ethereum)
You cannot make direct API calls if that is what you meant.
ah yeah okay
<@!208527206966755329> You want to look at Chainlink. It is a simple way to get API data from within a blockchain.
can you elaborate pls
<@!208527206966755329> - there's no network access from within a program, that would be nondeterministic.   Instead the network data would need to be provided as instruction data from the outside
I just use simple rust http request and it works ?
if I wanna use coingecko api in a solana program
so for example
its kinda generic question, but yea üôÇ
Would it still be final at 12 seconds?   Would the difficulty in overcoming PoH be the same, no matter the number of blocks?
Say blocks were slow and you only had 8 blocks over 12 seconds.
How do the blocks affect PoH over those 12 seconds?
So you have your 12 seconds.
Question is, why does the difficulty double on each block?
I have another question üòÖ      
Finality.
I understand that finality is set to 32 blocks because   2^32      (difficulty doubles on each block)
web api
in a solana program
can I get data from the web ?
i am using the onSignature cb method but it seems to return a null and not calling again when tx is completed
how do i set a callback function based on txid with the web3 js?
Question on account debiting. The docs say that the runtime only allows the owner program to debit an account or change its data. I would assume this does not mean that every users' account in a large app requires a deployment of the same program to debit their account and send money to someone else. Then how do the mechanics of this work for large apps with thousands of users? Is the same program's ownership getting updated to the new account each time a debit is required on that account?
Thanks for that <@!466984915376799748>
the lending program example can be found here: https://github.com/solana-labs/solana-program-library/tree/master/token-lending/program
serum has a pool implementation that balances a basket of assets here too: https://github.com/project-serum/serum-dex/tree/master/pool
> those examples are for showing how to create your own programs. Are you looking for how to use the lending program?
I am actually interested in building a liquidity pool for an AMM. I have seen earlier in the discussion that a pool can be found in token-lending. Maybe there is a better example somewhere else ?
I found how to start local cluster and > npx solana-localnet logs -f | grep "Program log"
those examples are for showing how to create your own programs. Are you looking for how to use the lending program?
Hi all, is there any specific reason why token-lending is not in /examples in solana token library ?
How to read program logs?
the executable data address is a ProgramData account
check out here ^
https://explorer.solana.com/address/LendZqTs7gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi
Nah, program account just points to a programdata account now
The main program account contains executable code. ProgramData is another account bigger than code
nice!
(yes)
https://github.com/certusone/wormhole-networks/blob/master/mainnetv1/info.md
Is Certus One's Wormhole project live on mainnet beta yet?
program state needs to be stored in separate accounts. On Solana, accounts are owned by programs which gives them full control to write to data and debit lamports
arguably a confusing name
nope, ProgramData just stores code
Is ProgramData account used automatically by deployment for storing globals?
yeah that's a good work around for interest / yield. But rebase tokens can also decrease in value and we don't have a good solution for that yet with the current token program
I think as a workaround, you can just ask the users to claim their interest. You could have an account for each user recording their unclaimed interest. And have a `claimReward` instruction for the program so the user will just claim their rewards by sending the instruction.
Account for upgrading is Buffer account
for upgradeable programs?
Hello. How to use ProgramData account?
yes
https://solana-labs.github.io/solana-web3.js/class/src/connection.js~Connection.html#instance-method-getConfirmedSignaturesForAddress2 <@!720492966204145695>
didn't realize it was already added
Should use `getConfirmedSignaturesForAddress2`
oh, right. The limit is different for v2.
1k txs returned for max?
~~`getConfirmedSignaturesForAddress` is fine~~ please use `getConfirmedSignaturesForAddress2`
What is the best method to check tx history on a given address?
~~yeah, it will be removed, web3 still uses the deprecated one~~  sorry, web3 also provides v2 already, please use that
The method is just now deprecated? and suggested to use the version 2 of it?
10k, see here: https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedsignaturesforaddress
For the method 

connection.getConfirmedSignaturesForAddress(
    pubkey,
    startSlot,
    endSlot,
  )

what is the max distance between startSlot and endSlot that we can use???
So, usually we look up blocks by their slot because there can only be one confirmed block at a specific slot. Doesn't mean that every slot has a block though
Blocks are produced according to a schedule of slots.. there can be at most one block per slot. But sometimes slots are skipped and don't contain a block. Blocks will always reference the parent block, but the total number of blocks in the chain will be strictly less than the total number of slots.
> - Correct way how to process instructions from the transactions is doing something like this? In order to recognize what functions needs to be called
No so-called "correct" way but there are general patterns that you can find in the SPL. For the token program, check out this line as a starting point: https://github.com/solana-labs/solana-program-library/blob/9613df57244101d4dec2221a28e39f1f2ec4936c/token/program/src/processor.rs#L644
<@!466984915376799748> Question pls, what is the different between "slot" and "block height". As I see so far, all input params to the methods are "slot"
> - Is it possible to delegate tokens from the smart contract directly?
Yes definitely. Check out this page for how to invoke other programs from your program (contract): https://docs.solana.com/developing/programming-model/calling-between-programs#cross-program-invocations
I would imagine this being a separate program since the current SPL token program doesn't support overriding the balance in this way
Not yet, we are discussing what it would like to support interest bearing tokens and we likely need some sort of ABI to support other token-like contracts like rebase tokens. Follow along here: https://github.com/solana-labs/solana-program-library/issues/1207
I shutdown my virtualbox, increased the RAM, rebooted and tried again. This time the build completed without exception.
Thanks, this looks a lot like what I had in mind
another thing, we are building a liquid staking solution, and would need to stake via program / contract directly. 

- Is it possible to delegate tokens from the smart contract directly?
- Correct way how to process instructions from the transactions is doing something like this? In order to recognize what functions needs to be called
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs

have been studying all the docs but any additional code walkthrough / tutorial is highly appreciated! üôÇ
Great thanks a lot!!!
yes I see that, but can I rebase? meaning the token would have an internal logic based on which all token balances would be multiplied e.g. numTokens = balances[account1] * multiplier. We have a value accruing token and are exploring ways how to make the value accrual
Anyone else having issues on compiling solana-ledger-tool? error: linking with 'cc' failed: exit code: 1 ....... error: could not compile 'solana-ledger-tool'
What is the maximum size for account data?
An error coping and pasting from vscode, it's the closing string '
Silly question, but what is `%27` ?
If I run conn.getAccountInfo(new PublicKey('sameKeyOfAbove')) the problem is the same, so it is something related to solana web3js module and not to the serum one
It runs almost infinitely and then fails
Why does Market load not work at all?
import { Account, Connection, PublicKey } from '@solana/web3.js';
import { Market } from '@project-serum/serum';

let connection = new Connection('https://mainnet-beta.solana.com/');
let marketAddress = new PublicKey('CVfYa8RGXnuDBeGmniCcdkBwoLqVxh92xB1JqgRQx3F'); // BTC/USD market

let market = await Market.load(connection, marketAddress);
https://solana.com/staking/#timing should give you the answers regarding stake warmup / cooldown
I think all the token except from sol itself is using the `token program`. You can mint more token or burn token using your program though Cross Program invocation.
Is there a token contract with rebasing feature similar to AMPLE forth on ehtereum? thanks!!
Hey guys we are building a liquid staking protocol on solana, how is it with unbonding period? the docs are a bit confusing or maybe am reading them wrong..
Aha I see. That makes sense now
Ah, yeah it's a bit tricky.  If you look at the way the tests are setup, `TestDexMarket` is pulling in some static binary files that contain the exchange state for a few markets: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/program/tests/helpers/mod.rs#L1168
So in the `token-lending/program/tests/borrow.rs` test, where does the:

```
    // Using SOL/USDC max 3 bids:
    //  $2.199,  300.0 SOL
    //  $2.192,  213.3 SOL
    //  $2.190, 1523.4 SOL
    //
    // Collateral amount = 750 * 0.8 (LTV) = 600 SOL
    // Borrow amount = 2.199 * 300 + 2.192 * 213.3 + 2.19 * 86.7 = 1,317.1266 USDC
```
comes from?

Specifically, I am confused about the max 3 bids part, I am struggle to find where did we set it up in the test?
Right I see
I don't think any of the required dex markets are deployed on devnet or testnet unfortunately, so their use is limited at the moment.  And we can only call `InitReserve` if there's a corresponding dex market  giving a conversion between two token types
Or rather, how can I call the `InitReserve` instruction via UI?

Hi I am wondering for `oyster-lending` , why I can't deposit into the interface after getting test token from faucet? There is nothing shown in the deposit tab. ü§î
Is there a way to find an account by its data inside an on-chain program? Or by owner?
ha yeah, fair enough.. brb s/collateral/pool/g
I feel calling it `pool`/ `share` token will be clearer. `collateral` was a bit confusing. üòÇ
okay thanks
https://docs.solana.com/cli/deploy-a-program#redeploy-a-program
right can you share any document so i can study
happy to receive suggestions and changes there
sorry the naming is not very clear
In this case, the collateral token is the equivalent of aToken and cToken
the state and code are stored in separate accounts
no need to do proxy contracts, you can upgrade contracts directly
yes
like if we want to change contract in future
You meant `proxy contract` in Ethereum sense?
Do you mind elaborating on what do you mean by a `proxy contract`?
<@!287924636493152257> Can we create a proxy contract of a token?
Hi, I am wondering in `token-lending` what is reserve `liquidity` and what is reserve `collateral` in `InitReserve` instruction? If I create a reserve of `USDC`, I assume the `liquidity` will be `USDC`, but what is `collateral` in this case?  A concrete example will be great!

And do I get a certain amount of pool token (similar to `aToken` for Aave or `cToken` for Compound) as part of my `InitReserve` instruction?
If you run nodejs on a validator
It can be accessed via local host in the same way then
Good to know
Oh cool
it will be restricted by the same rate limit
Random question, the rpc API is a rated limited. But when connecting to solana with via the web3.js library, this isn't rate limited?
I am looking for someone to help on a project to write a smart contract. In the core it‚Äôs enabling issuers to mint NFT‚Äôs and register the attributes of these NFT‚Äôs into a (public) register. If interested, please send me a DM for more information. It‚Äôs a paid project
This previous answer worked: rm -rf config/ledger/rocksdb
looks like rocksdb folder is taking all the space. what files are safe to delete?
the test validator can't run for very long because of it, what's the best way to free up that disk space?
I'm working on limited disk space on my machine (25GB)
Ok awesome. Thank you!
you can check out the spl: https://github.com/solana-labs/solana-program-library
program data cannot be written to. Programs are the owner of accounts which can be written to individually
it exists, maybe the adapter is using an old web3 version
Also, in conjunction with the sol-wallet-adapter, I am getting `transaction.serializeMessage is not a function`. I was wondering if I should add a serializeMessage function to the transaction object and if so of what shape?
I was looking online and I was wondering what the typical way to write to the program's data is?
yeah you can have them create a temporary funded account which is assigned to your program. Then you can drain lamports as a fee
not exactly mapped to files
Is there a way that I can get an wallet holder to pay me lamports for each execution of my program?
oh right, because program accounts are files right?
yup, just getAccountInfo with jsonParsed encoding
is that an RPC endpoint?
we have special handling for certain accounts like token, stake, vote, etc where you can return the state as parsed json
What's the typical way people read account state? I'm assuming there has to be something more efficient that literally downloading the entire state as a buffer?
That's perfect thank you!
Are you looking for an adapter that integrates with multiple different wallets? Currently the best option is https://github.com/project-serum/sol-wallet-adapter
Check out what <@!501570363566587905> has been working on here: https://project-serum.github.io/anchor/tutorials/tutorial-2.html#clone-the-repo
Hello, I was wondering if there is a wallet extension/ endpoint where a frontend app could get a user's address/ credentials?
try https://docs.solana.com/developing/clients/jsonrpc-api#getfees
üò©
Yep, SPL Token is the best way to do this.  Here's some info: https://spl.solana.com/token#example-creating-your-own-fungible-token
If I wanted to create my own token. Can I create one within solana
Hey all
hmm maybe I should consider packing it into docker container to not have problems like this again, be able to send it to my teammmates if they had etc
Oldies but goldies üòâ
or run a cluster in cloud hosted vm üòâ
:/ should have thought about it maybe I'll solve it by linking or sth
Oh... we don't support anything that old, sorry üë¥
Here's that package in Ubuntu 20.04
```
$ apt-file search libssl.so.1.1
libssl1.1: /usr/lib/x86_64-linux-gnu/libssl.so.1.1
```
Ubuntu 16
Which distro is this?

need to do some mv's and cps
maybe sth like this https://stackoverflow.com/questions/61133615/mysql-usr-local-lib-libssl-so-1-1-version-openssl-1-1-1-not-found-required
not helped :/
i will try sudo apt-get install -y libssl1.1.
maybe I just miss that certain package somehow
I encountered it while setting up rust updated openssl and it helped https://github.com/openssl/openssl/issues/3993
Do you have the `libssl1.1` package installed?
thank you fellow solana devs

./solana: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory
Guys any idea what to do I need to have open ssl ver 1.1 exactly ?
hey there,
Question about --limit-ledger-size.    How similar is it to pruning?  will we lose historical blocks with it?
..
when I start up a test cluster, I notice the first 30,000 transactions take up about 5 GB.
On bitcoin network, 30,000 transactions are less than 10 Mb.
Are my settings wrong?   will the gain in size plateau or will each transaction always use up 500x more size?
Sorry for my wording I'm just confused
i am a developer btw but need a professional blockchain developer
hey is this the right place for developer hire
How long i can wait before send signed transaction? Does blockhash have expire time?
<@!720492966204145695> The RPCs are pretty loaded these days


///////////////////////////////////////////////////////////////////////////////////////////////

Or maybe you could use an SPL token as a way to track owners of that particular token ? I don't know if it would be easier, but might be.
At a super simple level - my contract needs to have users register themselves, and then the owner/deployer of the contract performs an action on behalf of all registered users at an interval.
So that approach won't work and I'd have to go the upfront allocation and fit as many users into 1 or more accounts and then batch process those.
but if you think you need to pass in hundreds of accounts, your model is probably not quite right for the runtime
a transaction needs to fit in a UDP packet without fragmentation, addresses are 32 bytes and signatures are 64 bytes, so you run out of space quick üôÇ
maybe ~20-ish
Do you happen to know where I can find the limit? I'm guessing it wouldn't handle 100k accounts being passed in?
Thanks!  Dev environment is definitely a pia.  Making things fast often means exposing complexity to the devs
Thanks <@!439210198142550016>. Been through a lot of your replies to comments in different channels and they're always spot-on.
And the scaffolding should get you started really quickly
The intro guide is quite good
<@306185268879425538> check out this guide. https://github.com/solana-labs/defi-hackathon
Maturity of the platform does not help either, but I'd rather learn Solana & Rust than Cairo.
<@!447814520224743424> Totally agree. I too come from the Ethereum world and struggle to get a grasp at how things are supposed to be done the Solana way.
Yeah this is where I'm struggling. Simple constructs are no longer simple lol.
You're limited in the number of accounts you can pass into a program as well.   There are ways to work in the model but it's definitely a paradigm shift from a Solidity-like world where from the program you can just assume a single global state
Hmm good point. This relies on the client side to provide a huge list of accounts at program execution though, right? It also means a level trust on the client to provide the entire list - nothing really stopping the user/client from omitting users from the list
This is more "work" up front for the app, for sure.   But the benefit is parallel execution and much greater transaction throughput
<@!447814520224743424> - you'd typically want to do something like mapping a user to an account.   If you have a single uber account for all users, you're stuck with sequential transaction execution due to write-lock contention on that single account
Exact reason I'm researching Solana but struggling to wrap my head around how you actually achieve similar constructs like simple dynamic arrays and mappings. Generally trying to allocate 10's of thousands of structs up front is not the best approach - but that seems like the only way to do it in Solana - which means extra effort in understanding how much you can fit in the 10MB limitation, and if that is hit, being able to handle "pagination" of multiple accounts to have very large data sets.
A way of doing this is through getProgramAccounts https://docs.solana.com/developing/clients/jsonrpc-api#getprogramaccounts with some filters for your user account (size or some other flag), then you can process those accounts with some admin instruction.  That can be done in batches.  Alternatively, the closest you have to massive onchain dictionaries will be program addresses with well-known seeds https://docs.solana.com/developing/programming-model/calling-between-programs#hash-based-generated-program-addresses
I believe so, I was able to build and deploy the memo program
obvs i don't know what you are trying to accomplish, but you could just stick an array of 1000, or 10000 into an account.
btw, you wouldn't get away with iterating huge arrays in ethereum, you'd run out of gas.
rent for storage is very cheap on solana, i know it isn't "nice", but you can just massivley overallocate the array and not use most of it.
Are you using the latest tools?
I'm talking about arrays though. Say in my contract, a user registers themselves with it, and then the owner of the contract wants to be able to loop through every registered user and perform some actions. Can this be done?
how do I request a list of address transactions using web3 solana?ü§î
I gave you link to a code example that creates a functionally equivalent ethereum style mapping.
<@!311962918511968256> is this basically impossible with solana?
Hi, I am trying to deploy a contract and I get the following when attempting to deploy after a successful build: ```Error: dynamic program error: ELF error: ELF error: Failed to parse ELF file: read-write: bad offset 11139776032``` I was wondering if anyone has seen something similar/ how I can go about debugging this?
If I needed to allocate a struct for each user that calls into my program and then be able to loop through that list of users to perform some calculations.. I don't see how this can be done.
Agree. This is quite the limitation. Dynamic arrays and dictionaries are vital data structures.
the on-chain program and the data (accounts) are separate in solana, the program owns the account and only it can write to it. the program does stuff based on the data you pass to it in transactions, the "instruction". so code the program to initialise the account on an "inititalise instruction"... the size of a transaction is limited, so if you want to put a lot of data into the account you will have to split the initialisation over many transactions.
Ok just read this:
> In Solana we could, if we knew the number of voters, create a fixed size array (or something) in the contract‚Äôs data account, which we could record votes in, but this would almost certainly be the wrong approach. What we need is an expanding mapping similar to what Solidity has.
If you have 10MB worth of user ids, you probably have other pbs
Can't you create an array of ids in the state ?
yes, solidity makes things easy... believe solana max account size is 10MB, which can hold a really long list... but if you want like-for-like, mapping can be done like this https://smith-mcf.medium.com/a-simple-solana-dapp-tutorial-6dedbdf65444 scroll down to word "mapping". That is 6 months old, so if anyone knows a better way, I'm all ears.
Hi, is there a constructor concept in Solana contracts/programs to be used? (Like to set up account once the contract is created.)
oof. that seems kind of limiting. How would you for example maintain a list of users who deposit into your contract? This is super simple in ethereum, just have a map of address -> uint256 and adjust value.
Ok thanks
hmmm idk.... you know there is a Serum discord right? what you are trying to do sounds very DeFi and I think the people on that discord might know.
<@!311962918511968256>  Would you have any pointers regarding this by any chance ?
you can store the data anyway you like, if you are using rust i think all the regular stuff works... but, an account is limited in size and is fixed size once created... if you wanted an infinite extendable mapping like in ethereum, you need to go across accounts.
Check his Github for full code
If you check instruction.rs, it contains a way to parse a value when a Tx is initiated.
Was actually thinking about this:
paulx[dot]dev[slash]blog[slash]2021[slash]01[slash]14[slash]programming-on-solana-an-introduction[slash]#instruction-rs-part-1-general-code-structure-and-the-beginning-of-the-escrow-program-flow
this kind of thing? https://github.com/solana-labs/solana-program-library/tree/master/memo
thanks
How should complex structures be handled in accounts? ie: Dynamic Arrays and Maps/dictionaries. Do we use something like protobuf/flatbuffer?
ty
Sthg along the lines of:
```
pub enum EscrowInstruction {
    InitEscrow {
        /// The amount party A expects to receive of token Y
        amount: u64
    },
}
```
I think what you want is to pass arguments to instructions as shown in paulx's escrow example.
<@!324927508170670080> Afaik you can specify the paying account when you issue a Tx. This should be outlined in the CLI transfer example
does solona support meta transaction (Gas less transactions)?
does solana support adding messages to a transaction?ü§î
are there any documentation for integrating infura ipsf with solana ?
ok, ty
you would need to use a bip39 library
nope not yet
Hello everyone. I would like confirmation about something. I am looking to do a pool, but not in the sense of the one present in Serum dex's Github, which is a 2 asset swap pool.
What I want to do is a simple pool whereby people can deposit some SOL. Based on the amount they deposit in the pool they will have a share of rewards from my protocol.

‚Ä¢ Is building a 'MySolPool' program with a MySolPoolState Account the right design ?

Also, I want another Program to be able to lock/unlock some of MySolPool SOLs for a given timespan.
‚Ä¢ Is moving some SOL from MySolPoolState Account to a temp Account which would be owned by my other program the proper way to build such a flow ? (Is it safe to leave some funds in a temp account which would be owned by my other program using its PDA)
is it possible to restore keypair via seed phrase via web3 solana?
Yes, of course, thank you, thought I was missing something
<@!633016166838829066> well you could do it without the library but it makes things easier
Thank you, so I just had to install the solana/spl-token library
<@!633016166838829066> You need to create a token object first (this does not create a new token, it's just a helper) `const token = new Token(..,mintPubkey,..); token.createAccount(..);` (see https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js)
I still can't figure out how to create a new account for a specific token with web3js, I can't find a createAccount that let me add a Mint as parameter
thx, will do!
```
$ solana rent 42
Rent per byte-year: 0.00000348 SOL
Rent per epoch: 0.000003239 SOL
Rent-exempt minimum: 0.0011832 SOL
```
CLI also has a rent subcommand that'll calculate rent for you if you know your account data size
Try this https://docs.solana.com/developing/programming-model/accounts#rent
ty so much!
any btw, where i can read more on "rent" idea.
i am not sure i understand it completely
That should get you by until it's implemented in web3 üôÇ
SUPER
hoo wow
Yeah, same level as filter
inside params array?
adding where?
Add "encoding":"jsonParsed" and that `data` field becomes something much more interesting üôÇ
nice! ty
_Or_ write a helper to do the JSONRPC request like I suggested
You have to parse the account data
yes
so you cant tell which is the "parent" address of specific stake account?
You most likely want "the public key of the account that controls the stake account", which is the stake authority pubkey
It's probably not whatever you want
"owner" in that context is the program ID of the program that controls the account.  Stake in this case
can i tell which normal account is the owner of this stake account?
example for 1 stake account
What do you mean by "owner"
assuming i gonna fillter this giant array.
how can i know whose the owner of the program account based on the object props
You just get the parsed object
Actually it doesn't really look like web3 does you much better than the JSONRPC request with jsonParsed encoding
ho ok
No, with JSONRPC api
Assume you talking about the web3 api
the only arg you can pass in getProgramAccounts method is pubkey and commitment
thank youü§ù
There's also an `"encoding":"jsonParsed"`  arg, that might be a little easier to work with the output of in the mean time
Have your friend brigade it üôÇ
Nope, but I added an issue here. https://github.com/solana-labs/solana/issues/15388
i guess i can create some service to pull the data whitening http req, but this is kinda killing the idea of the NPM üò¶
any idea when those params will be exposed to the web3 api?
This works via JSON RPC
```
curl https://api.mainnet-beta.solana.com -X POST -H "Content-Type: application/json" -d '
  {
    "jsonrpc": "2.0",
    "id": 1,
    "method": "getProgramAccounts",
    "params": [
      "Stake11111111111111111111111111111111111111",
      {
        "filters": [
          {
            "memcmp": {
              "offset": 12,
              "bytes": "your stake authority pubkey here"
            }
          }
        ]
      }
    ]
  }
'
```
kidding...it would take forever...XD

any idea how to get that info?
i can filter it out but....
üòÖ
Mmm... looks like these parameters aren't exposed ü§ï
web3
Oh are you using web3 or jsonrpc?
there is an example? 
the getProgramAccounts method only accepte pubkey and commitment, idont see where filter fit in
Yes.  That's where the memcmp filter comes in
i dont want all stake accounts, i want only the once who bound the my main wallet. in other words, the one who created those stake accounts
https://github.com/solana-labs/solana/blob/master/programs/stake/src/lib.rs#L9
Sec, I don't know how many ones it has
It means the address of the stake program
No
program id means my wallet account pubkey?
That will return _all_ stake accounts
You'll pass the stake program ID as the first param
https://docs.solana.com/developing/clients/jsonrpc-api#getprogramaccounts
i tried getProgramAccounts but i get empty array
memcmp filter, AFAIK?
You'll have to use `getProgramAccounts` with a memcmp filter, AFAIK
any 1 know what the method for fetching all stake account owned by the specified account?
i have tried  getTokenAccountsByOwner but i get an error
thank you very much <@!737068146850136176> üôè
https://solongwallet.medium.com/using-solong-in-dapp-6c1c396ce7e4
you can use this blog, you can also send email to them, they usually respond fast
is it just delegate staking
can anyone put me on the path of single asset staking?
are there docs out there for solong wallet integration?  https://solongwallet.com/
righto
to the ix
so i'd need to make the api call via e.g. my own web server and then feed the data in manually?
not possible <@!147971603156828160>, instead you'd feed the program the data using instruction.   Network access can fail intermittently, so that could cause a difference in behaviour across the different validator nodes as they all execute your program
is it possible for a solana program to make e.g. http requests to an api endpoint and parse the data (say, using `reqwests`)? would like to use some offchain data feeds as an oracle
Anyone else coming from EVM/solidity?
just you wait top shelf stuff is dropping from me on this hackaton
amazing stuff, great job! üçª
Possibly
'cause I can build just fine with a fresh 1.5.8
Hmm... or the toolchain install failed silently somehow
or perhaps a bug in `bpf.mk` in the CLI version vs. the npm version
It was some other problem with the llvm toolchain that gets installed with solana cli tool suite
I had updated `include` to point to correct location. That wasn't the issue
This'll make it work without having to endure NPM üòâ 
```
$ git diff .
diff --git a/src/program-c/makefile b/src/program-c/makefile
index e191c35..75e0463 100644
--- a/src/program-c/makefile
+++ b/src/program-c/makefile
@@ -1,2 +1,2 @@
 OUT_DIR := ../../dist/program
-include ../../node_modules/@solana/web3.js/bpf-sdk/c/bpf.mk
+include ~/.local/share/solana/install/active_release/bin/sdk/bpf/c/bpf.mk
```
Ah yeah, here's the problem...
```
$ cat makefile
OUT_DIR := ../../dist/program
include ../../node_modules/@solana/web3.js/bpf-sdk/c/bpf.mk
```
Thanks!
All good though. I'll roll with the NPM approach as it'll be nicer configuring build steps etc
Some disconnect between SPL project and the instructions at https://docs.solana.com/developing/deployed-programs/developing-c#how-to-build
I wasn't using that entire project before - I just took the minimal c project and makefile and was trying to build it against the tool suite that gets installed under `.local` - this seems to be broken. If I use the NPM method, the makefile for bpf is actually under node_modules (../../node_modules/@solana/web3.js/bpf-sdk/c/bpf.mk) as opposed to (~.local/share/solana/install/active_release/bin/sdk/bpf)
Nice!  Copypasta your way to victory? üôÇ
(A wallet for a custom token)
Question related to accounts: can an account be both a wallet and a storage for a program?
Yep that works
Lemme install the 1.5.8 release.  Maybe something's busted
If you clone the SPL repo and `make -C examples/c`, and the toolchain is installed correctly, it should work
Yeah I went through https://docs.solana.com/cli/install-solana-cli-tools
You're sure the toolchain is setup correctly?
I had to install 2 additional libraries for Rust, (libudev-ssl or something similar) but I don't know for C if It's smething parallel
CI doesn't do anything special. https://github.com/solana-labs/solana-program-library/blob/master/ci/cargo-build-test.sh#L15
FYI going the npm route appears to work
Was following this which states running `make` lol
https://docs.solana.com/developing/deployed-programs/developing-c#how-to-build
I installed solana-cli etc so thought I didn't need anything npm related
That is what I was looking at more or less but running `make` directly. Must be some step in between that is needed to get environment setup.
Had to run npm first
Have had a similar pb with Rust.
That's also what I guess, cause if you look at the npm script to build in C it actually calls a 'make -C' instruction
<@!447814520224743424> you might check the C examples in the SPL repo. https://github.com/solana-labs/solana-program-library/tree/master/examples/c
I'll try that link with npm - it must setup some extra env vars
Never tried with make sry
Ah. I was trying to build it in a more simple environment direclty by calling `make` not going through `npm`
Try from this if you haven't, there's both rust and c versions and also a client app, from this repo I was able to compile both rust and c
https://github.com/solana-labs/example-helloworld/blob/master/README.md#build-the-on-chain-program
llvm-native is the non-docker version of the tools
I've tried with and without docker
This page is clearly outdated or something
Actually I didn't install It with docker
https://docs.solana.com/developing/deployed-programs/developing-c
<@!633016166838829066> did you do any other steps I can try?
Which installed the missing llvm-native directory and now I get error `ld.lld: error: no input files`
I ran `.local/share/solana/install/active_release/bin/sdk/bpf/scripts/install.sh`
Hm
It's a stupid guess I know... But who know
Maybe permissions?
Noticed the `.local/share/solana/install/active_release/bin/sdk/bpf/c/bpf.mk ` has a env var for DOCKER - I've tried with and without docker
Strange since bpf.ld does exist
`[lld] ./dist/program/helloworld.so ()
ld.lld: error: cannot open /home/user/.local/share/solana/install/active_release/bin/sdk/bpf/c/bpf.ld: No such file or directory`
Hah was just grabbing it
üòú
It may be more helpful than a lot of hypothesis
Just show the error
Do you have any instructions you can provide?
Yes, I compiled It on an Ubuntu server one week ago, without problems, just had to to download 2 additional libs
np
any 1 know what the method for fetching all stake account owned by the specified account.
i have tried  getTokenAccountsByOwner but i get an error
Thank you so much
https://github.com/solana-labs/solana/tree/master/web3.js/test this link is your friend, good luck =]
1. create a mnemonic
2. sign it
3. pass it to new account constructor 
4. done
Has anyone been able to successfully compile the C example? There seems to be some steps missing to setup environment (docker/llvm/etc)
How to create a new wallet for a specific token? In solana web3js
Is it possible with something similar to: new Account() ?
hope my knowledge is correct üòÜ
and storage accounts owned by these programs
and programs have bpf-loader program as their owner
and sol accounts have system program as their owner
their owner is the token program right ?
np
Thank you
source and target are tokens accounts
That is a very nice wallet! Really good.    For my question; I have two Sol accounts and both have one token address each. I want to transfer tokens from one token account to another. For this I need the transfer() function right? Should source be the token address I am sending from or it‚Äôs associated Sol address?
cargo build-bpf
cargo build running fine
why don't I have a deploy folder ? :/
Should be in target/deploy by default
name of your rust module + .so
same as package?
what's the name of the file would be ?
hmm
i guess just use search feature üòÜ

there's a lot of files in the target folder
i think its in target folder
where is the .so file located after building a program ? in rust
you will see how it works
create your token add account for it
https://nebulawallet.com/ try my wallet
so you sign with your SOL account but use address of token account
your token account is bounded to your SOL account
so you can move tokens only between account that are under token
for each token u need to have separate account that will only use to move this specific token
ok so tokens on solana does not work like ERC20
Could you explain please? I have two token accounts and want to transfers token from one to the other...
you need to create account for each token
no
Thanks. So here source and destination are token accounts and owner is the Sol public key of the source/sender?
guys, how can i pull related stake accounts from solana web3 api? (the address that bound my to my account)
Thank you! üçª
you can change your network by clicking the icon next to the account icon
one question: is there a version of sollet.io for testnet?
<@!616304377791119410> for comunication with spl tokens use @solana/spl-token'
If I want to make a payment with SPL tokens, do I use the transfer function? Or is this only for sending SOL? https://solana-labs.github.io/solana-web3.js/file/src/system-program.js.html#lineNumber668
I am getting `This program may not be used for executing instructions ` error when i try to send `Token.createApproveInstruction` any hints?
what's the limit of bytes in a transaction ?
One more question. If I have an app and I create a program that debits accounts when an appropriate condition arises. And let's say that within a single transaction I have 10 accounts that need to be debited by this program. How does that work in terms of mechanics, since a program can only change an account's state if the program owns the account?
Is it good idea to create program state account on-chain in Instruction::Init command handler and somehow return address to client for next calls or better to create it on client side?


///////////////////////////////////////////////////////////////////////////////////////////////

As Smith pointed out, you want https://solana-labs.github.io/solana-web3.js/class/src/stake-program.js~StakeProgram.html#static-method-deactivate
You may have also noticed that Solana is a bit faster as a result üòâ
The commitment `finalized/max` is considered finalized in fact. When a block reaches vote depth of 32, it would take 54 years of lockout for a validator to switch to a different fork. (Here is some more information about lockout: https://docs.solana.com/implemented-proposals/tower-bft#cost-of-rollback )
The commitment `confirmed/singleGossip` means the block is confirmed with optimistic confirmation; the node has seen votes on the block from 66+% of cluster stake: https://docs.solana.com/proposals/optimistic-confirmation-and-slashing
in this context, `custom program error: 0x1` probably means:
```
    #[error("account does not have enough SOL to perform the operation")]
    ResultWithNegativeLamports,
```
That is, the source account may not have enough funds for the transfer
emm, hope have a rpc query the name
Yes that's definitely one of current risks/downsides of the current centralized registry.   Although I imagine most SPL Tokens won't need to rename themselves often
Thank you!
Thanks your reply, but the name maybe change?
Fair enough üëç
Better to get support from the group where others can help too
I'd rather not, I don't scale that way
<@!445425471027544095> can I DM you?
I keep getting this error trying to send SOL:
```failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x1```
What does it mean?
<@!311962918511968256> / <@!199065747832438784> - we punted on symbol/name in SPL Token itself because we figured that information should existing a more general metadata registry service for accounts.    But that thing also doesn't yet exist so in the mean time you just have use an off-chain registry such as https://github.com/solana-labs/token-list
Try `solana logs`.   This displays transaction logs as they execute, which is much more dev friendly.  The firehose of  logs that `solana-test-validator --log` produces is geared toward actually operating a validator node
Hello, I am using `msg!` in my rust code to try to print logs out. When I run  solana-test-validator with the --log flag, I do not see the msgs printed out. I was wondering if there is a recommended way of logging?
I‚Äôve noticed there is a lot more off-chain shenanigans required in solana dev. Lots of account management etc
that's a good question, i'm not sure.  maybe someone else has a better idea though -- <@!213083996689661953> ?
<@413015915014258699> I wonder are there statistics about probability of confirmation on each commitment ?
kudos
ah, max = finalized, singleGossip = confirmed, recent = processed
<@!539801435571748868> oh i am using older version with single/recent/max
https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment should give that info
CreateAccountWithSeed might do what you want if you want to create an account for a program given some deterministic inputs: https://docs.solana.com/validator/runtime#systemprogram-interface
Hey Guys I am trying to install tools for the hackathon in windows, but I am running into this error
```
curl: (60) SSL certificate problem: self signed certificate in certificate chain
More details here: https://curl.haxx.se/docs/sslcerts.html

curl failed to verify the legitimacy of the server and therefore could not
establish a secure connection to it. To learn more about this situation and
how to fix it, please visit the web page mentioned above.
```
this looks like a maybe... https://solana-labs.github.io/solana-web3.js/class/src/stake-program.js~StakeProgram.html#static-method-deactivate but they will know better.
yea, but i am looking the web3 way
i guess you've already seen this https://docs.solana.com/running-validator/validator-stake
Is there good writeup about commitments ?
<@!585868308419444749> how to undelegate from a voteaccount(validator)?
Is it possible to create account for program derived address using system program instruction?
üòÇ
just the mint address i guess... you'd code the name, etc in your gui... let's see what the green names say when they come on.
Thanks
OOPS, not the name and the symbol decimals, How to know which token...
I'm actually kind of curious why the symbol was omitted, since SPL is meant to be like ERC20 and that has the symbol field, it must have been intentionally left off... logically it should be in the mint account, the other things are there (such as decimals places)... but it's not.
unless they changed things recently, that data is not on-chain
How to get spl token symbol and name ?
Really appreciate, thanks
<@!585868308419444749> <@!466984915376799748>
i have notes there is a cors issue on testnet
guys
yeah that'd be better for sure
how about renaming `Account` to `Keypair` in web3?
Oh ok sure. Thank you for your help!
slightly confusing üôÉ 
`new Account()` is really just creating a ed25519 keypair locally, that's it.   The `createAccount` instruction for the system program actually causes a new account to be allocated on the blockchain
Awesome, thank you! How does new Account() differ from createAccount?
maybe this is a better example reference: https://github.com/solana-labs/example-helloworld/blob/master/src/client/hello_world.ts#L144
random example: https://github.com/solana-labs/solana-web3.js/blob/d3eecac7f92da138802cf5252fa6ba86613e8244/src/loader.js#L113
Got it. You'd just use the system program's `createAccount` instruction for that: https://solana-labs.github.io/solana-web3.js/class/src/system-program.js~SystemProgram.html
One of the arguments is the program id
The later. I am trying to just create an initial account to store program state in and have the program own the state
"where the owner is a different program id" -- do you mean reassigning an existing account to a different program, or how to create a new account that's assigned to a specific program?
Hello, I was just wondering if there is a recommended way to create an account from say a js-client where the owner is a different program id?
ah nice didn't realise there was a channel here for it
Ah, yep.   Swing by the <#778656605453156376> channel to talk shop with the folks that are working on that project
I came across this which is kinda cool too: https://solang.readthedocs.io/en/latest/index.html
Hey the general pattern is to store the address of the account owner within the account data, so the program can verify the account owner signed the transaction before permitting write access to the account data.    This is exactly how programs like SPL Token work
Learn Rust, it's worth it!
The compiler actually wants to help you, unlike C/C++ where it wants to üî™ you at every turn
I'm trying to decide if I go down the less supported C++ path or add on the burden of trying to learn Rust as well as Solana lol
Rust is awesome once you wrap your head around it
Same üôÇ
Rust is so strange to me. I come from heavy C/C++ background.
yep!
https://github.com/project-serum/anchor
Is that the thing that <@!501570363566587905> is hacking on?
Is that what Anchor is attempting for Rust?
yes currently that's the case.  There are some early stage projects to provide a nicer object::method based interface.   Basically we don't yet have a nice IDL-like language that serializes/deserializes over the wire for you yet
So a user can read and write on his data account passing through this program, but all the others users can just read from this account of course
How to create a system where a user has univoque access to an account owned by a program? I want for N accounts let them have access to just one of N other accounts owned by a single program
Is there a better data structure to use than HashMap?
Still though, serde_json is working to deserialize and serialize another enum I use for instruction
Side note: You might want to serialize/deserialize binary data instead of json to save space/cycles.
<@!453347985628200960>  I'm using serde_json. My unpack snippet looks like: ```pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        serde_json::from_slice(input).map_err(|e| {
            msg!("Error parsing input data {:?}", e);
            ProgramError::InvalidInstructionData
        })
    }``` and the data looks like #[derive(Serialize, Deserialize, Default)]
```#[derive(Serialize, Deserialize, Default)]
pub struct B {
    pub a: Vec<String>,
    pub b: Vec<i32>,
    pub c: Pubkey,
    pub d: String,
}
/// The program state
#[derive(Serialize, Deserialize, Default)]
pub struct ProgState {
    pub hash1: HashMap<String, Pubkey>,
    pub hash2: HashMap<String, B>,
    pub hash3: HashMap<String, Pubkey>,
}
```
Or should I be thinking that there should be many small programs and those represent the different functions I would normally have inside one contract in solidity
Coming from solidity contracts, you have a contract with a number of functions that can read/write the storage. In Solana, you have a program and entry point - is it up to developer to provide some kind of branching/switching in the entry point to execute different functions or am I thinking about this wrong again?
The only facility that current exists for this is the Instructions sysvar, check out https://docs.solana.com/developing/builtins/sysvars#instructions
What is the easiest way to get the tx size from the chain?
```
"/usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.22' not found (required by /home/johnnie/.cache/solana/v0.2.5/rust-bpf-linux/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so)"
```
Maybe:
```
$ sudo apt-get update
$ sudo apt-get install libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang make
```
<@!695713747108495420> Sounds like maybe your linux box is missing some dependencies?
It does, thanks!
The program can only get AccountInfos from the accounts that are explicitly passed in.  So for example if an account contains another account address in its data, there‚Äôs no way to turn that data into an AccountInfo.  The sender of the transaction would need to include that account address as well in the list of accounts.   I‚Äôm not sure if this answers your question though?  üôÇ
Hi fellow Solana developers. Can you build program: 
https://github.com/solana-labs/example-helloworld

I try to build a helloworld program and my friend too an we both get the same error:

npm run build:program-rust
npm WARN lifecycle The node binary used for scripts is /snap/bin/node but npm is using /snap/node/3292/bin/node itself. Use the `--scripts-prepend-node-path` option to include the path for the node binary npm was executed with.

> helloworld@0.0.1 build:program-rust /home/johnnie/example-helloworld
> cargo build-bpf --manifest-path=./src/program-rust/Cargo.toml --bpf-out-dir=dist/program && mv dist/program/solana_bpf_helloworld.so dist/program/helloworld.so && npm run clean:store

BPF SDK: /home/johnnie/solana-release/bin/sdk/bpf
Running: /home/johnnie/solana-release/bin/sdk/bpf/rust/xargo-build.sh
+ ./rust-bpf-linux/bin/rustc --print sysroot
error: couldn't load codegen backend "/home/johnnie/.cache/solana/v0.2.5/rust-bpf-linux/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so": "/usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.22\' not found (required by /home/johnnie/.cache/solana/v0.2.5/rust-bpf-linux/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so)"


What should we do? Thank you in advance for your help
^ i edited the message so it states account instead of program which was confusing
If i can obtain a key of an account from another account (that is passed in the array), can I query its AccountInfo similar to what `next_account_info(account_info_iter)?;` would return
You're primarily restricted by the max size of the transaction as a whole.   Not sure I totally follow your second question though
Is there a maximum number of accounts that you put in a tx, and is there a better way to getting the AccountInfo instead of passing it through the account array?
Hi <@!473198585890996224> , the error you are seeing is coming from the elf parser we are using.  it's hard to tell beyond the info it gives where it might be coming from exactly.  What are you using to unpack into a HashMap?  If you have some sample code we can try to recreate the issue
<@!453347985628200960> is probably the best person to answer this when he's at the keyboard next
Hi, so I isolated my ELF issue to trying to unpack into a HashMap in rust. I was wondering if Solana supports it/ if there is an alternative I can use?
how does one track the txn's happening in a liquidity pool?
That‚Äôs probably the easiest approach, yes.
That's a great idea
We‚Äôll probably change the limit soon to be transaction based
<@!445425471027544095> In this case, I guess each and every user would need to have an account as well as per Smith's suggestion ?
The limit to the amount of instructions you can put inside of a transaction only depends on the maximal packet size
Every instruction has its own 200k compute budget (even though I think a shared compute budget between all instructions in a transaction would make a lot of sense), so you don't really need to worry about that.
Ok thanks. I've got some ideas to play with now. Things making a bit more sense üôÇ
Yep.  But you can simulate this locally at the unit-test level using the `solana-program-test` crate, and at the integration-test level with `solana-test-validator`
Is that the 200k operation limit I need to be aware of in that scenario?
You'd probably be able to crank several of them in the same transaction, as a transaction can contain multiple instructions.  So basically fill up a transaction with as many crank instructions as you can, then spill over to a new transaction if there's more accounts that need cranking
Yeah exactly.  All the accounts can be cranked in parallel üôÇ
It is probably more efficient in terms of parallel execution like you mentioned earlier?
That is interesting. I assume this is just as cheap as looping a bunch of users within 1 account and one execution?
I'm basically paraphrasing what Jon mentioned at https://discord.com/channels/428295358100013066/517163444747894795/812020213054046228 though üôÇ
For batching, you can still use a different account for each user.  Each account holds the slot that it was last cranked at.   The backend job then finds all the program accounts and cranks them individually
Having a data structure nightmare at the moment ü§£
Permissions is something I'll look into. I guess I'm more concerned on whether solana architecture can actually allow me to do what I need - the triggering I'm less concerned about at the moment.
"Crank" operations like this are common, typically you'd set this up such that the instruction is unprivileged so anybody can trigger it and the program figures out what to do based on the accounts.
Ideally it is triggered in a decentralized way through some kind of nodes
In an EVM world this would be done by something like Keep3r or yeah - a backend script during development
> then the owner/deployer of the contract performs an action on behalf of all registered users at an interval.
How is this triggered?  A cronjob or something on the owner/deployer's machine?


///////////////////////////////////////////////////////////////////////////////////////////////

thanks üôÇ
how i could miss that chanel üòÜ
<#763249718339567626> is a good place to get started <@!529936734574870538>
Hello, i want to start developing apps on Solana, but dunno which what i have to start with. Im a programmer but new to blockchain. Any advices?
okay found it..thank you.
<@448224710682083359> set the decimals to 0 and supply to 1 when you mint a new spl token.  That‚Äôs your nft
hi. I want to create 1  NFT token . ƒ±  created  by spl-token.  I can send a token smaller than 1 but  I dont want it.  ƒ± want to non-fungible token.  It should only be able to be transferred as 1. How can I do it ?
You can try it out now with this change:
```
-    "@solana/web3.js": "^0.90.2",
+    "@solana/web3.js": "github:jstarry/solana-web3.js#bundle",
```
PR is pending here: https://github.com/solana-labs/solana/pull/14993
Hahahahaha
For relationships that are confirmed, but not final
singleGossip... the decentralised Tinder competitor
<@!213083996689661953> - when you have a sec, would you mind taking a pass through the JSON RPC APIs and scrub the "max" references?
*New => Old*
"finalized" = "max"
"confirmed" = "singleGossip" (super confusing name!)
"processed" = "recent"
oh! got it
<@!788215642070581289> - "max" is "finalized".   We recently added new names, "finalized, confirmed, and processed", in an attempt to improve clarity.   There's likely still multiple places with the old names
https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment  according to the doc, there are three different type in Commitment (finalized, confirmed, and processed), but the example below the doc seems pop up a whole new type "max". what is the max represent
Yup that's totally fine!  I just wanted to check.    I have to be honest our initial implementation probably won't have retries.   The explanation you gave is a perfect recipe for it but really I should have a year of experience in Solana before automating things like that.
I'd suggest using the JSON RPC API, either through web3.js or directly, for max robustness also.  We aim to not break backwards compatibility with the cli but there are much more safeguards in place at the JSON RPC API level
There's no extra knobs for that right now.   I think handling retrying is just a necessary evil for full robustness.  But I totally appreciate that needs to be done carefully!
and is there special treatment I can give the node to give it better sending success?  If I want to avoid retries altogether (which I really do).    I saw an exchange sadly go extinct with a very bad retry bug üòÖ
that's exactly what I was looking to understand, thank you üôÇ    Yeah basically my primary concern is false positives on deposits, and false negatives on withdraws.     
but false anything is good to handle well
You could still use `solana transfer --output json --no-wait --blockhash <xxx> ...`, which then returns the transaction id immediately for the user.    If you run `solana transfer --output json --no-wait --blockhash <xxx> ...` a second time with the same blockhash, you'll also find that the signature is the same.    You can then poll `solana confirm <signature>` until  `solana slot --commitment finalized`  returns a slot that's higher than lastValidSlot, at which point it's safe to retry the withdrawal as the original transaction is now expired and cannot execute
ah ok, that's fantastic, thank  you very much üôÇ
hmm
yeah I might end up using web3, I'm still getting there.     
So, I don't need to use --no-wait, really.   It's not a risk to use it, the idea is that people get their txids back instantly which is nice.
And if people don't get the withdraw, well.   I'm...going to hear about it if my system doesn't flag it  (which it will).    So,  no.  I don't need it.   But the fast withdraws are nice and safe.
But from the command-line perspective, you can also use:
```
$ solana fees --output json
{
  "slot": 61343019,
  "blockhash": "2VxMzzfx73HHGCvzY6oBAbMJJcB2nCL3AP6PeA2wPU3J",
  "lamportsPerSignature": 5000,
  "lastValidSlot": 61343315
}
```
to obtain a blockhash and the last slot that it's valid for.   Then you can provide that blockhash as an argument to `solana transfer` explicitly.   By doing this, you know that the transaction will become invalid after "lastValidSlot", and it's then safe to retry it once that slot arrives
Integrating directly with the JSON RPC API will give you much more flexibility though than just invoking the command-line tool for transfers
Do you need to use `--no-wait`?   From a withdrawal perspective, I think you'd want to use `solana transfer --commitment finalized <address> <amount>`
<@!445425471027544095>   ok nice thank you, so that retry mechanism is already built in.   Sounds like a legit failed error which should simply be handled as what it is then.     Anything I can do to reduce the occurence?..
.
Exchanges that attempt to retry withdraws automatically usually don't stick around too long üòÖ
<@!366636124778659840> - at the RPC API level you can disable transaction simulation, but that's not exposed to the `solana transfer` command-line level.   Normally the RPC node will hold on to a transaction and re-transmit it every couple of seconds until it sees that either network has processed the transaction, or the transaction blockhash expires.   "Blockhash not found" is a pretty fatal error though, the RPC retry mechanism would drop this transaction immediately.

Blockhashes are only valid for a couple minutes
Is there a way of submitting a transction so that it will always go through (if submitted correctly), even if there is an initial network rejection?
For instance, ```solana transfer --no-wait``` sometimes returns ```Transaction simulation failed: Blockhash not found```
Obviously I want to be very careful about handling exceptions so just wondering if there's an internal mechanism which does so
<@!788215642070581289> - yes, not all slots will produce a block.
I got null when I use the JSON-RPC getConfirmedBlock method with some slots. (like 61338623 in testnet) and I found the slot number is bigger than block height in the explorer. Is the slot just like a ticking which will not wait for block producing ?
I don't believe maps are well supported at this point. And our bpf toolchain only supports rust features up to v1.39 currently (we're working on it!). There are some restrictions listed here: https://docs.solana.com/developing/deployed-programs/developing-rust#restrictions
rustc 1.49.0 (e1884a8e3 2020-12-29)
Is there a problem with newer rust versions? Using HashMap seems to result in `InvalidInstruction` errors and some BTree functionality exceeds max stack offset
okay
<@!345046176149536769> - we're not intentionally keeping the limit a secret no.  it changes from time to time as we manage the load though.
is the rate limit public?
ok
You'll get 429'd
if it's just a "hold" limit it's ok, it's problematic if it blocks the request completely
If you're using the public API nodes, very likely
(so I request all txs in bulk at the same time)
(typically to get parsed/executed transaction detail after I get a list of transactions somewhere)
mmh, I've setup my requests to be parallelized using Promise.all in javascript... can I get ratelimited?
Check out `solana program --help`  (from v1.5.5) for the available upgradable program loader operations.   That's "the documentation" at the moment
"there's no such thing as coincidence", right? üôÇ
Thanks.
<@!197812530624724992> - timely question!  We're in the process of rolling out a new program loader that supports upgrades.   So you can choose to allow your program up be upgradable and who has the authority to do so.   Later you also have the option to turn upgrades off as well
Hi, rookie question: what would happen if I have an active smart contract on the chain, but need to upgrade (e.g. found a bug)? Would it create a new version of the contract, leaving me to redirect everything to the new address, or can it somehow preserve state, address, etc.?


///////////////////////////////////////////////////////////////////////////////////////////////

Afaik it greatly simplifies some flows.
I am curious though. Why would you not use web3.js ?
Or explore the Solana CLI if you are using another lang.
<@!399700740928438272> Ah yes indeed, I misread your question. I think your best bet is to look at the Js source code then to see how Transactions are issues in vanilla Js.
If I want a program to take token deposits from users, and have the program do "stuff" with that deposit, but also maintain a virtual balance where the user can withdraw their deposit or the remaining balance - is the right way of thinking that the program needs an SPL Token account to accept the deposit, and then it needs another account to maintain the virtual balance of each user?
I think
You didn't answer my question
Paulx is using web3js
You should have better luck with WSL.
This is not the the use case that I have in mind. I need an onchain program to invoke a function of another on-chain program, not using the client.
i'm not sure how much support there is for windows here
oh
and to tell the truth I haven't run the scaffold, I figured you would like something like that to start with
ehh no
are you on WSL?
If you're on mac, can you try add `~/.local/share/solana/install/active_release/bin` to your path?
Is you `solana` command working? I think it's because `solana-test-validator` is not in your path, but it should.
https://github.com/solana-labs/dapp-scaffold
It really depends on what you are trying to do
if for example you forked the token program, you could use the same client and extend it without much work
but I don't know of any standardization around account inputs or arguments.
nothing is stopping you
I guess you could build a general client
what is your output?
I just ran the command and I am having the same version as you do. It's showing me log here.
Yes we should. But I am thinking of future program here. If I have a program and I want to interact with a program that doesn't exist yet, but will exist and have a pre-defined function following the exact details according to some standard, i.e. interface (if we are in the Solidity world). There should be some way to do it right?
Yes it should work. What is your `solana` version?
How to make a offline nonce-account?
If you want someone to build on your program you need to provide detail about the accounts and the instructions
there is nothing closed source at the moment
But surely there should be a way to somehow mimic an interface right? 
Right now it's basically that we need to have the source code (so that we can import it) in order to do cross program invocation. But sometimes this is not possible, isn't it?
right yeah
bit ugly for me to pass calls like that, would be happy to see another way
I don;t think there Solana programs have anything like interface, you have instruction that serves as API (I have read that in https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/#the-token-program-part-1)
ok, got it thanks
its just prototype so dont get too attached
its mine wallet and names are on chain build with my system
bump a bit for my question ^
This is the source of truth when you create token. As you can see it only takes three argument.
https://github.com/solana-labs/solana-program-library/blob/fa9427ce3568b5c830e4741e471e78b268aee834/token/program/src/instruction.rs#L37
it is determined by consensus off chian
names are not part of token creation on chain
I actually tried, but can't send transaction
I have no idea of this...

if you go here :https://nebulawallet.com/ and click on "create token"
where is the option again?
hmm how about this Nebula Wallet why they have an option to give token a name ?
you can give well-known token name since they can store a mapping between name to address
I think Serum has name because they stored it in here: https://github.com/project-serum/serum-ts/blob/master/packages/serum/src/markets.json
but how to do it using `spl-token`  command line tool ?
there is an option to give token a name
also I have foudn this page to create tokens : https://nebulawallet.com/
but on Serum and token swap apps on Solana all tokes have a name
I think the name is not stored on chain.
Its not my page, but it is very useful
how then you assign a name to a token ?
found your page https://www.spl-token-ui.comm very useful
the name is not part of the token creation process
https://github.com/paul-schaaf/spl-token-ui/blob/ee7c32c9fd579f1e9f543981b8cad39d10a17d43/src/solana/token/index.ts
You specify the decimals using the createInitMint instructions
Hi guys, I have read the docs on how to create and mint SPL token (https://spl.solana.com/token) but can't find any info on how to configure  token name and decimals, where can I find that ?
I get errors when attempting to perform Token.createIinitMint
As a heads up, I dont think the newest solalana web3js library plays nicely with the newest token-spl program client
Hi I am wondering is there an equivalent of Solidity interface for Solana program? Say I know that several program on the Solana chain implements functions with the same signature and I want to call it. Thanks!
no luck building from source, any ideas?
From Paulx' website: 
```
const initTempAccountIx = Token.createInitAccountInstruction(TOKEN_PROGRAM_ID, XTokenMintAccountPubkey, tempTokenAccount.publicKey, feePayerAcc.publicKey);
const transferXTokensToTempAccIx = Token
    .createTransferInstruction(TOKEN_PROGRAM_ID, initializerXTokenAccountPubkey, tempTokenAccount.publicKey, feePayerAcc.publicKey, [], amountXTokensToSendToEscrow);
```
Just clarify something as we are not priobably use the web3js library
to have a fee payer different from the sender of the SPL token
we will have 2 signatures in the transactions is that correct?
which one should go first ? fee payer or SPL token holder signature?
how the Solana knows which signature is going to be the fee payer of the transaction
?
(it is not well explained in your documentation https://docs.solana.com/developing/programming-model/transactions)
I'm also leaving... Need to enjoy my weekend hehe
lol. ok... good luck guys
that's what he does ^^^
```
docker run --detach --name solana-localnet --rm --publish 8001:8001/tcp --publish 8899:8899/tcp --publish 8900:8900/tcp --publish 8901:8901/tcp --publish 8902:8902/tcp --publish 9900:9900/tcp --publish 8000:8000/udp --publish 8001:8001/udp --publish 8002:8002/udp --publish 8003:8003/udp --publish 8004:8004/udp --publish 8005:8005/udp --publish 8006:8006/udp --publish 8007:8007/udp --publish 8008:8008/udp --tty --ulimit nofile=500000 --env RUST_LOG=solana=info solanalabs/solana:beta
```
hehe
Check spoiler.txt, I think he is doing that, but it's a huge "script"
if you are using docker (you may) need to do a port bypass type thing -- from outside docker to inside.
Looks like you use docker...
do a docker ps -a and check the logs of the container using docker logs -f [container-id]
do you have the solana tools installed -- once you start it, you can do ```solana slot --url http://127.0.0.1:8899``` as a sanity check that cuts out any problems you might have with scripting etc.
check logs
Not running, <@!311962918511968256> is correct.
i don't see 8899 there
Sorry, that should work even on 0.0.0.0... But netstat will let you know where and if it's listening...
do a "netstat -ltp"
Maybe it's running but listening on 0.0.0.0
maybe restart everything and try again
is the node on docker?
is the node running?
```Failed to connect to localhost port 8899: Connection refused```
looks like you can't talk to the node.
Not that it's that important to this idea
Is it possible to request snapshots from a particular slot?
If you're running with no-snapshot-fetch, the node will use the newest snapshot in the ledger directory. So if you move away any snapshots newer than your target, the node should boot from it. Just rebuilding the accounts state will take a bit, though.
If it was possible to force the validator to use an out of date snapshot that would speed it up a lot
I'm going to test it out
Depends how fast I can get the validator to load
It's not an intractable problem though. If I only needed to scrape once every 100 slots or so
Lol, yes that would take a long time to iterate through all of the slots
That is technically possible now using the `dev-halt-at-slot` arg: https://github.com/solana-labs/solana/blob/5ae37b9675888c1eb218780d778c0825460f8105/validator/src/main.rs#L905, but wouldn't be practical to do very often, since you'd have to reboot the node each time.
Random question: currently, there's no rpc api to query account info at a particular slot height. But if you have a validator running, is it possible to load the solana blockchain at a particular slot height and then query it via rpc?
(it is not well explained in your documentation https://docs.solana.com/developing/programming-model/transactions)
?
how the Solana knows which signature is going to be the fee payer of the transaction
which one should go first ? fee payer or SPL token holder signature?
we will have 2 signatures in the transactions is that correct?
to have a fee payer different from the sender of the SPL token
Just clarify something as we are not priobably use the web3js library
thank you
You'd load one of those from the rent sysvar in your program to do something like ensuring rent-exemption during withdraws
The rent caclulations are done here. https://github.com/solana-labs/solana/blob/master/sdk/program/src/rent.rs
Serialize it and check the output buffer's length
ok and one dumb question, how do you know how many bytes your account will use
But there's no deserialization helper for the account data
You can pull down the rent sysvar with `getAccountInfo` and https://solana-labs.github.io/solana-web3.js/variable/index.html#static-variable-SYSVAR_RENT_PUBKEY
You can get the rent-exempt-minimum with https://solana-labs.github.io/solana-web3.js/class/src/connection.js~Connection.html#instance-method-getMinimumBalanceForRentExemption
It doesn't look like it's exposed per-epoch in web3
web3js
Where do you want it?
its only in the CLI?
```
$ solana rent 42
Rent per byte-year: 0.00000348 SOL
Rent per epoch: 0.000003239 SOL
Rent-exempt minimum: 0.0011832 SOL
```
CLI has a calculator
how do you see how much rent will cost an account each epoch? I am using getAccountInfo(pubkey) and it doesnt appear -.-
https://github.com/solana-labs/solana#building
Yeah it's in the monorepo README.md.  Sec
any details on how to do that? (windows user here, linux noob)
You'll have to build from source, our release bins are AVX2
That's fine.  Lack of AVX2 instructions isn't though.
one thing to keep in mind: I'm running Ubuntu 20.04 in VMware

Specifically the "flags:" section
What's the output of `lscpu` look like?

and I can't start Solana cluster

I've got this error when I tried to do: npm run build:program-rust 
example-helloworld
you guys are speed daemons
problem solved by upgrading web3 to the latest version
I try to deploy and it doesn't confirm in 30s, the explorer eventually shows it was successfully however the program is not executable
anyone having issues deploying a program on mainnet?
yeah you re right probably that is what I should do really thing is you know this is my private hardware and I selddom use it for my side projects or just to browse web so I was too lazy to update because I have a lot of tools set up and a dual boot etc. I should upgrade anyway or buy new computer and have a fresh install of OS but many things happen and I had no time. My bad now we have not much time to makae a hackaton project so I want to be able to develop stuff asap for me making a docker seems fastests and also helps if any body else from my hackaton team had the same or similar problem if I succed at doing this it will be useful for whole team maybe also for other teams I feel like I'm in 'zone' now so I wil try üôÇ
Worth investigating that path unless you're a docker guru and can quickly get a container setup
16 is EOL and you'll probably continue to run into similar problems building any recent project
Can you not do a direct upgrade from ubuntu 16 to 18 or 20? That might be faster option but I suppose it has its own risks depending on your Linux experience.
well however this container might be a well better starting point anyway I will just need to install node and then try build solana blockchain programs on it whank you so much <@!445425471027544095>  hopefuly you will feel good for helping us when you will see the output of our work
I fail at point where I run npm run build:program-rust
like for ex. in this example https://github.com/solana-labs/example-helloworld
I have problem to build programs
because this one more or less work on my end
ah ok... but is it just for CI program?
Nice ! üòÑ
Here‚Äôs the image we use for CI, hopefully that‚Äôll give you a head start: https://github.com/solana-labs/solana/blob/master/ci/docker-rust/Dockerfile
maybe solana needs more dependencies so it's waste of time trying to make it a distroless container and use one with ubuntu 20 or somethin
I feel like I could just take this one and modify a dockerfile to install solana ... maybe I am just wrong at one point
https://github.com/danylaporte/docker-node-rust/blob/master/Dockerfile#L9
hmm painfully? what more does it need than node, npm, rust (rustc, cargo etc...) and a solana wouldn't sth like this one just work just kick out the neon and put commands for installing solana
But just a stock Ubuntu 20.04 docker image that you then install the dependences into would work I guess
We don‚Äôt have a prebuilt docker image that‚Äôs configured for interactive development.   That sounds pretty painful honestly.
you recommend some pre build one or I shall create one myself ?
Yeah that‚Äôs possible.
Ok I should have thought about it. Well have you tried run solana in docker container ?
You have the same docs I do üòÖ https://solana-labs.github.io/solana-web3.js/class/src/connection.js~Connection.html#instance-method-getStakeActivation
I mean in terms of web3 api.
Something that can tell a status based on stakeaccount pubkey
https://solana.com/staking#timing
Thx, after the undelegate there is warmup process, right? How can i tell?
It's older than the company!
Yeah, incompatible glibc version between 16 and later. Try upgrade or you may need to build under a container running 18 or 20.
Ubuntu 16 is really old.   18.04 works and we're using 20.04 here.
https://github.com/trustwallet/wallet-core/blob/master/src/Solana/Transaction.h
Yes it is supporting solana
But seems like it should if it supports Solana.
No idea unfortunately
We are planning to integrate wallet-core signing library into our wallet
does wallet-core from TrustWallet has this feature?
<@!399700740928438272>  You can specify the paying account in the Tx:
https://solana-labs.github.io/solana-web3.js/class/src/transaction.js~Transaction.html
what do you recommend as best distro for developing with solana? (windows user here)
how do we do for the dapp to pay the fees in SOL of a SPL token transfer for a end-user
?
but I am running on Ubuntu 16 
npm run build:program-rust
npm WARN lifecycle The node binary used for scripts is /snap/bin/node but npm is using /snap/node/3292/bin/node itself. Use the `--scripts-prepend-node-path` option to include the path for the node binary npm was executed with.

> helloworld@0.0.1 build:program-rust /home/johnnie/example-helloworld
> cargo build-bpf --manifest-path=./src/program-rust/Cargo.toml --bpf-out-dir=dist/program && mv dist/program/solana_bpf_helloworld.so dist/program/helloworld.so && npm run clean:store

BPF SDK: /home/johnnie/solana-release/bin/sdk/bpf
Running: /home/johnnie/solana-release/bin/sdk/bpf/rust/xargo-build.sh
+ ./rust-bpf-linux/bin/rustc --print sysroot
error: couldn't load codegen backend "/home/johnnie/.cache/solana/v0.2.5/rust-bpf-linux/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so": "/usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.22\' not found (required by /home/johnnie/.cache/solana/v0.2.5/rust-bpf-linux/lib/rustlib/x86_64-unknown-linux-gnu/codegen-backends/librustc_codegen_llvm-llvm.so)
ah so maybe that's what my friend needs ok
The dev environment isn't supported on Windows natively right now.  You can use WSL or a Linux VM, or MacOS
I will try but my teammate has the same problem on Windows
We fought internally against upgradable programs for a while but now we have them with `solana program deploy`, which should make incremental dev work at the system integration level so much easier than having to deal with migrations/etc
Should I mention deployments as well ? Truffle is just weird.
And boy, I can't say that the Ethereum dev is nice either. Having to read mem stack errors is meh.
Yeah totally.  The design is rooted around optimal performance for the chain itself, with the expectation that middleware and frameworks will eventually wallpaper over some of the quirks as the ecosystem grows
It is also very early days for this ecosystem. Ethereum has been around for more than 4 years. I remember the pre-zeppelin ERC20 days and all the quirks one had to go through.
To Solana's credit, I have found the model to be a bit safer. Not having to share keys from your main account is really nice for example.


///////////////////////////////////////////////////////////////////////////////////////////////

https://github.com/certusone/wormhole/blob/master/DEVELOP.md

Followed this....are there additional steps not listed)
Could really use some help. Seems like my node_modules aren‚Äôt being installed and it‚Äôs crashing everything because of that
Anyone had success setting up the wormhole devnet? :/
Where in the docs can I find what rustc version program compilation uses?
I've given up for now setting up distro in VMware or WSL Ubuntu. My knowledge of how to use self-compiled bins is non-existing. üò´ Will work with what I have. üòÅ
yes, i think i did... https://solana-labs.github.io/solana-web3.js/class/src/connection.js~Connection.html#instance-method-getMinimumBalanceForRentExemption
it would be rent-exempt + rent/year
hmm okay so how do I calculate 1 mb permanently
yes
the cost I mean
is there difference between the dev and main ?
this is devnet
```solana rent 100000                     ÓÇ≤ ‚úî ÓÇ≤ 1117 ÓÇ≤ 12:44:51
Rent per byte-year: 0.00000348 SOL
Rent per epoch: 0.001908023 SOL
Rent-exempt minimum: 0.69689088 SOL

```
actually you told me that before so thanks
yeah already know that üòÑ
if the account is rent-exempt it will be stored permanently, rent-exempt requires the account to have a certain minimum balance on it, rent-exem,pt accopunts do not pay rent. if it has less than that amount then rent will be deducted from the account until it is zero, at which point it will be deleted.
<@!149990576572334080> can you give me an estimate of cost ?
ok the test in associated token account passes... So it has to do with what i am doing.
There is at least a test a bit similar in SPL https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/tests/functional.rs#L106-L126
I am going to run it to see if it just works or possibly fails the same for me for some obscure reason
Learning too much today, i didn't know such magic was possible
```Rust
#[tokio::test]
async fn test_enter_lottery() {
    let program_id = id();
    let mut pt = ProgramTest::new(
        "solanalotto",
        program_id,
        processor!(Processor::process),
    );
    let lottery_account_keypair = Keypair::new();
    let lottery_account_pubkey = lottery_account_keypair.pubkey();

    let second_user_keypair = Keypair::new();
    pt.add_account(second_user_keypair.pubkey(), Account {lamports: 1000000000, ..Account::default()});

    let (mut banks_client, payer, recent_blockhash) = pt.start().await;
    let rent = banks_client.get_rent().await.unwrap();
    let lottery_account_rent = rent.minimum_balance(Lottery::LEN);
    let ticket_price = 10;

    let mut instruction_data = vec![0];
    instruction_data.extend_from_slice(&payer.pubkey().to_bytes());

    [... First instruction which works]
    transaction.sign(&[&payer, &lottery_account_keypair], recent_blockhash);

    assert_matches!(banks_client.process_transaction(transaction).await, Ok(()));

    // END of copy pasta

    let mut transaction = Transaction::new_with_payer(
        &[
            Instruction {
                program_id,
                accounts: vec![AccountMeta::new(second_user_keypair.pubkey(), true), AccountMeta::new(lottery_account_pubkey, false)],
                data: vec![1, 2, 3],
            }
        ],
        Some(&second_user_keypair.pubkey()),
    );
    let recent_blockhash = banks_client.get_recent_blockhash().await.unwrap();
    transaction.sign(&[&second_user_keypair], recent_blockhash);

    assert_matches!(banks_client.process_transaction(transaction).await, Ok(())`); //Troubles here```
<@456226577798135808> Your code would be more readable if pasted as markdown IMO.
<@!208527206966755329> yes its permanent but crazy expensive
The code with the panic
I am in a deep struggle, the following code leads to what seem to be a panic early but which does not end the future immediately. This result in the code test ending with:

thread 'test_enter_lottery' panicked at 'assertion failed: `Err(IoError(Custom { kind: TimedOut, error: "Client dropped expired request." }))` does not match `Ok(())`', tests/functional.rs:119:5

If i go back up the first panic stacktrace, I can see it has to do with INVOKE_CONTEXT, but I have no idea what might be consing that
hello, is the storage stored permanently in solana ? currently using ipfs and afaik it's only stored in 1 node. is this similar in solana ? Also is solana storage expensive compared to ipfs ?
Unfortunately, i have not committed any of the prior stupidity so it will remain a mystery forever
Excellent, that looks right to me.
Mmmh i am not sure what stupidity I was doing but it came down now
2289840 * 0.000000001 = 0.00228984
Lottery::LEN is 201
Might need a little more information about what you're trying to do, then. ProgramTest definitely uses `Rent::default()`, so something seems awry.
By test i meant, using solana_program_test::ProgramTest
Those numbers seem absurdly high, yes. For comparison, a stake account on the solana clusters is exactly 200 bytes and minimum balance for rent exemption is 2282880 lamports. I believe if you use the default Rent struct for your tests, `minimum_balance()` should be the same as on the current clusters.
hey guys,
does derivedSeed path is required before sign the seed with nacl util?
I am writing tests for my program and the program requires creating a system account with ~200 bytes of data.
The minimum balance for rent exemption is  140737337322872 lamports or 140737337322872 * 0.000000001 = 140737 SOL Oo
Are all those number completely made up or disconnected from what could be observed on mainnet/testnet ?
I see. Thanks!
In solana programs, instructions don't return data, just the processing result.
And may I ask what is rationale of not providing an instruction that returns the balance of an account in `token-program`?
I will just parse the account state
Right, that makes sense.
Do you mean, is there a way to get the balance of a token account from the context of another program? Certainly, the balance is part of a token account's state, so the account just needs to be passed in the instruction, and unpacked in instruction processing. Here's an example from our spl-token-swap program of the code to unpack an spl-token account: https://github.com/solana-labs/solana-program-library/blob/fa9427ce3568b5c830e4741e471e78b268aee834/token-swap/program/src/processor.rs#L35
The token Account state definition is here: https://github.com/solana-labs/solana-program-library/blob/fa9427ce3568b5c830e4741e471e78b268aee834/token/program/src/state.rs#L86
So is there anyway to get the balance of a token account on-chain?
Hi I am wondering why doesn't the `token-program` have a token balance instruction? Instead we have an rpc called `getTokenAccountBalance`?
Sounds like the latter, in which case your CPU probably doesn't have AVX2 support.  So you should use your self-compiled bins.
Are you using v1.5.8 bins from your build or the ones published with the release on Github?
right - but i've provided the expected signers (payer and base pubkey) to the tx, and the ix doesn't take the base account (because it's optional?). you can see this in the tx link provided. is there e.g. an option i need to provide? right now i'm just doing `sendAndConfirmTransaction(conn, tx, [payer, baseAcc], {skipPreflight: true})`
After a countless hours trying to install WSL Ubuntu on Win10 through most amazing Microsoft Store (nope, its just hangs on download), I managed to install it manually and run it. Installed rust, cargo, node, npm, Solana 1.5.8. Succesfully compiled all source from https://github.com/solana-labs/solana but I did not managed to run a minimal local cluster nor the example-helloworld. 
If anybody has some idea what I'm missing... steps that I did not did... or need to do something else...
https://github.com/solana-labs/solana/blob/master/sdk/program/src/system_instruction.rs#L98
it seems like create account w/seed doesn't take on the base account as a signer
example tx: https://explorer.solana.com/tx/2cHM1es9uY8YoHt212w1v2yE3asuPC6LQ7EoKzVmMmeu6Z5iQ1vbTjw3NX2WovhAePYE4cAWdJTMmFu4jzbchcd3?cluster=devnet
who are the correct signers for the `createAccountWithSeed` instruction? i've provided both the base pubkey account and payer account as signers for the instruction, but `transaction.js` is failing with an unknown signer error
Hm so looks like it expects an arg for the tag. Using the dapp-scaffold `yarn localnet:up stable` seems to work
not sure where it is getting the `undefined` tag from
`Docker version 20.10.3, build 48d30b5
+ docker pull solanalabs/solana:undefined
Error response from daemon: manifest for solanalabs/solana:undefined not found: manifest unknown: manifest unknown`
Does `npx solana-localnet update` take a long time to complete? It just seems to be sitting there not giving any progress indicator
```
# cargo build-bpf
BPF SDK: /Users/qqq/.local/share/solana/install/releases/1.5.7/solana-release/bin/sdk/bpf
Running: /Users/qqq/.local/share/solana/install/releases/1.5.7/solana-release/bin/sdk/bpf/rust/xargo-build.sh
error: could not determine rustc version
note: run with `RUST_BACKTRACE=1` for a backtrace
```

Once of a sudden started getting these, any tips?
thanks
limited by the size of tx, I think i've seen around 20 accounts max
is there an upper limit to how many accounts you can pass into a programs instruction?
another question: is there a way to access `AccountLayout` and `MintLayout` in the `spl-token` npm package? it seems like they're not exported publicly. or is there another way to get the space we need to allocate for these accounts when creating them?
Also, what happened to the https://github.com/czl1378/solana-flux-aggregator/ repository? Looks like some commit history was re-written from a few days ago o.O
Hey <@!777712090507902985> maybe return the guide how to run our own oracle feeds? üòÑ
is there a nonmanual way to handle serializing/deserializing state? are there concerns w/implementing `Loadable` and `Pod` (https://docs.rs/bytemuck/1.5.1/bytemuck/trait.Pod.html) for state structs that i should be aware of? alternatives to this? seems like there's some mentions of borsh in the chat


///////////////////////////////////////////////////////////////////////////////////////////////

lets do another test
?
give me anohter address
ok
once again, try to send token from your mint address: `ACTAmzTFsQMg7nLJhuzJ5YFiP5MrK3ubSv13J3yVaf5W`
somebody, not me
I am lost
me ?
https://explorer.solana.com/tx/2WHKHwCasnUnoUvQ2LnMnv8Q35mD3yxRc7hHj7e8sdSJ9D1kqMYNwJeh7AK4qBLGZfaTWKncdgSQSUPHJtXyTDbT?cluster=devnet
who did this transcation?
https://explorer.solana.com/address/BVxGZhLos2Gua9YP9TutVVJXMxSi2YH53EgUYXXkZSk4?cluster=devnet
now on
there is some money
nope üòÑ
?
BVxGZhLos2Gua9YP9TutVVJXMxSi2YH53EgUYXXkZSk4
Did youn fund
wait
ok
try to send token from this address: `ACTAmzTFsQMg7nLJhuzJ5YFiP5MrK3ubSv13J3yVaf5W`
!
I fixed something in the config and it worked now√ß
ok, try to send it here: `BVxGZhLos2Gua9YP9TutVVJXMxSi2YH53EgUYXXkZSk4`
I registered a spl token there
I am on devnet
ok
try to send it to me on testnet `2yGneVbsuZwBPaR6ekEdCTufAXhvHquKkvCNQYa5nq5h`
this is what I want to do
transfer a token to another user with sender funding
https://spl.solana.com/token#example-transferring-tokens-to-another-user-with-sender-funding
because I want the sender to create the fund the account
well, you must
I didn't
did you create token account for that address?
is a root account correct?
but Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
like I said, in explorer account token must have owner (SOL account)
spl-token transfer --fund-recipient 4w8CpSwyGPuUUpgnjNgQu6CCutNi8FYe684qwD8GXeLa 33 Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
Transfer 33 tokens
  Sender: 4w8CpSwyGPuUUpgnjNgQu6CCutNi8FYe684qwD8GXeLa
  Recipient: Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
Error: Recipient does not exist: Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
ok then I don't understand why I got an error message here
yep, already did that
is that correct ?
even if the receiver has no SOL
Paulx said it is possible to send a SPL token and to fund the token account of the receiver
Yep
do you have 2 keypairs (id.json and id2.json)?
/.config/solana/id2.json
========================================================
pubkey: Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
====================================================================
from my keypair to test the SPL-cli
https://explorer.solana.com/address/Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y?cluster=devnet
I am talking about a root address
token account should look like this:
https://explorer.solana.com/address/GVZnEa69EZWFBDvrc4iUQFxyjVsKnEdGkNjTxTdzFPuv?cluster=testnet
it must have owner
I don't know
maybe there is problem in the tutorial page
I did not
spl-token transfer --fund-recipient 4w8CpSwyGPuUUpgnjNgQu6CCutNi8FYe684qwD8GXeLa 33 Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
Transfer 33 tokens
  Sender: 4w8CpSwyGPuUUpgnjNgQu6CCutNi8FYe684qwD8GXeLa
  Recipient: Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
Error: Recipient does not exist: Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
did you try with the SPL-token CLI ?
you can send tokens to an associated token account whose creation you fund even if the owner of that account has no SOL. idk that's going on with your example but you can test that this works (which I have) with the token ui <@!399700740928438272> (cc <@!287924636493152257> ) 
https://explorer.solana.com/address/8RTmrhZFNwqmsbSnDHccp3fBSXaqvt9z7mEgCyHq4uZW is such an associated token account
by just sending some SOL ?
can we create the account of someone else?
then
this is super painful
It doesn't
I think this command only create  the *token account* instead of the *account*. In your example does the account `Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y` exist?
to someone
lets say I want to send 50 USDT
Yes of course
?
means i wanna do gas less transaction
if i want to send a token(created on solona) and i have 0 SOL, is there a way to send token?
hi
https://spl.solana.com/token#example-transferring-tokens-to-another-user-with-sender-funding
With the flag --fund-recipient normally the account should be created during the transfer no ?
<@!399700740928438272> I don't get the question. If you're sending to an account that doesn't exist. Then shouldn't you be expecting an error?
any help?
spl-token transfer --fund-recipient 4w8CpSwyGPuUUpgnjNgQu6CCutNi8FYe684qwD8GXeLa 33 Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y

Transfer 33 tokens
  Sender: 4w8CpSwyGPuUUpgnjNgQu6CCutNi8FYe684qwD8GXeLa
  Recipient: Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
Error: Recipient does not exist: Bdj6yc4HdQ35joNvusxm6Duv7vYtz7jqAaTexXKmfG7y
I am trying to reproduce the command for sending SPL token to an account that is not exist on the devnet but I got an error
Is the only solution really an investment in a GPU server?  I'm not interested in validating/staking, I just need access to the REST and WS APIs with high reliability.
Would anyone be able to share in detail how they've been able to create/access a reliable RPC API node?  I've been trying to find a solution for months without much luck.  As has been pointed out many times, the official RPC nodes fail pretty often with "Node Unhealthy", "Blockhash not found" or just error 502.  And my experience has been that a self-hosted validator on even a 32 CPU cloud server (the biggest our provider offers) won't keep up with the network.
What's the maxium Recent Blockhash in transaction?
Rust or C
Hi, what languange is used to make dapps on solana
Guys! What happened with https://api.mainnet-beta.solana.com/
Sometimes:
```
Error: failed to send transaction: Node is behind by 116 slots
... or ...
Error: failed to send transaction: Transaction simulation failed: Blockhash not found
```
Does anyone have any good Solana contract video tutorials?
when does a `ProgramFailedToComplete` error typically arise? is it when a tx consumes too many compute units?
there is things here like creating a token account, minting to a token account, getting token accounts for a mint, getting token accounts for an owner, and transfering a mint into a contract...
https://github.com/mcf-rocks/solana-mint-old/tree/master/set-token
this is something i was thinking to do some time ago, and am not doing now... but it might help someone, seeing as ppl are asking me.
NO WARRANTIES ETC.
You can create a mint from javascript, for example: https://github.com/mcf-rocks/solana-mint-old/blob/9795849644a30be404927d4bc5b4d77c177f58a4/set-token/js/client/create_new_mint.js#L42
People have DM'd me about NFTs (non fungilble tokens) afaik an NFT is a token (mint) with a supply of 1.
So after infinite pain trying to navigate the stacktrace, I updated solana- sdk, program-test and solana-program to 1.5.8 (like spl on github) from 1.5.0. The problem is gone, it returns fine now Oo...
Very interesting post, thank you
a way of creating an account at a "deterministic offset" you can read here if you search "createWithSeed" for a working example. https://smith-mcf.medium.com/a-simple-solana-dapp-tutorial-6dedbdf65444
Can somebody please explain me what is an account created with seed?
note that `keys` only ever has two accounts. yet the rust docs require existence of the third signer if `basePubkey != fundingPubkey`: https://docs.rs/solana-program/1.5.5/solana_program/system_instruction/enum.SystemInstruction.html?search=#account-references-3
there seems to be a mismatch between the instruction created `createAccountWithSeed` in the js version and the deployed rust package. the ix created by the web3.js package never adds the optional 3rd account (the base pubkey) as signer: https://github.com/solana-labs/solana-web3.js/blob/4d26e796eb9db1d0ed1a71099df6fd94eafbcb1d/src/system-program.js#L737


///////////////////////////////////////////////////////////////////////////////////////////////

Thank you
wss://devnet.solana.com
Hello, I would like to know what is the websocket url for the devnet?
Thank you <@!445425471027544095> for your help! We will soon deliver public graphQL based on that
blocks lower than https://docs.solana.com/developing/clients/jsonrpc-api#minimumledgerslot will be fetched from BigTable

If you successfully hook up BigTable, then https://docs.solana.com/developing/clients/jsonrpc-api#getfirstavailableblock should now return "0" for your node
AWESOME!!!
yep
If i already have a synced node, i also can connect big table to it?
The RPC node, if configured to use BigTable, will just query BigTable for older blocks/transactions that it doesn't have locally
Yep.  You can also query most of the data using `solana-ledger-tool` without running a node, but (1) it's probably more convenient to use the RPC interface, (2) ledger-tool doesn't yet cache the access token, so each query in ledger tool takes a couple seconds to first setup
So i will query RPC and it will query google big table?
<@!445425471027544095> you made my day! This is awesome if it will work
oh, cool.  that's easy then.  To test that it's valid, do this to fetch the genesis block as a test:
```
$ export GOOGLE_APPLICATION_CREDENTIALS=path/to/token/file
$ solana-ledger-tool -l . bigtable block 0
```
then to hook it up to a local RPC node, so you can fetch the block data over RPC like you would from the public RPC nodes:
```
$ export GOOGLE_APPLICATION_CREDENTIALS=path/to/token/file
$ solana-validator --enable-rpc-transaction-history --enable-cpi-and-log-storage --enable-rpc-bigtable-ledger-storage ...usual arguments here...
```
BTW, i have the token i think, i only need to understand how to use it
OK. thanks
Ping me next week sometime.  Weekend, gotta get AFK
yes, please, also - i can download it to run a node? Or how to use it from BigTable?
It's in BigTable, I can get you a temporary read token so you can get it directly rather than going through public RPC.  It's one less hop and 50% less network traffic
can i download that 8T?
you'll then be part of the problem for why the public RPC is always overloaded üôÇ
please don't though
65M calls are not so much as sion i can run them concurrently
Do you have other options? It will be very helpfull
i think i see the problem with the public rpcs
lel
ok, if/when you want to backfill the real data we should chat about options.   It's ~8TB right now and there are more efficient ways than barraging the public RPC for 65,592,535 calls to `getConfirmedBlock` üôÇ
first we plan use public RPC, then switch to own node
we are running indexer from public RPC and from own node
cool
> we have all data from genesis
Dumb question, where did you get it from? üôÇ
basically you will be able to query any data in any time
yes, we have all data from genesis. It will be maintained in analytical column oriented database
Where are you planning to store the historical data?   Are you going to try to backfill back to the genesis block?
That would be awesome <@!546486384622305307>
thats why we building graphQL interface for dapps to read historical data without need to maintain archive node
it is very problematic with running full node that maintains the history
Thank you <@!445425471027544095> it works!
<@!546486384622305307> - meanwhile you could use the Serum endpoint: https://docs.solana.com/cluster/rpc-endpoints#mainnet-beta
There's one grant being worked on to rebuild RPC now actually.  If other folks are interested in building a public RPC system, please also apply for a <#627964701690691601>.    The more independent RPC gateways the better
just a thought: grants for ppl to run public RPC nodes == many working public RPC nodes.
public RPC problems seem frequent.... ppl with dapps should run their own... but it's a lot to ask devs to run one just to dev
some rpc nodes are stuggling, network itself is fine
as soon as possible
When RPC and explorer planned to be fixed?
<@!296346160124395520> - it'll cost approx 0.00204428 SOL to create and distribute a new SPL token account to a user
would it be more than say 10c per address to mint the tokens to?
has anyone done airdrops or similar for a token? Roughly how much would it cost on average per address to airdrop/mint directly to them. Batched or not. Building a project for fun that takes advantage of the cheap fees to learn the ecosystem but I am not sure if it will be economically feasible
Explorer does not work as well
I'm also getting CORS errors from mainnet
In the rust RpcClient, is there a way to confirm a transaction without waiting? Like client.confirm_transaction with timeout = 0?
can you setup nginx with failover?
https://api.mainnet-beta.solana.com -> error 502 please fix!
that is how ppl are doing it, and it's terrible imho.
believe so... the .so you write out, should be identical to the .so you uploaded... if it's not pls tag me as that would be interesting.
Yeah, loaded binary is all I want. I was trying to follow the docs (https://docs.solana.com/cli/deploy-a-program#dumping-a-program-to-a-file). I haven't dug into the source code enough, but is the AccountInfo data purely the raw binary file, which I could write to an .so file?
https://github.com/solana-labs/token-list/blob/main/src/tokens/mainnet-beta.json

If we create a token in mainnet-beta, and we send the above link to PR?
the value doesn't make sense
{"jsonrpc":"2.0","result":{"context":{"slot":67011269},"value":2039280},"id":1}
i get this
curl https://api.mainnet-beta.solana.com -X POST -H "Content-Type: application/json" -d '                            root@fe55c6075622
  {"jsonrpc":"2.0", "id":1, "method":"getBalance", "params":["FidGus13X2HPzd3cuBEFSq32UcBQkF68niwvP6bM4fs2"]}
'
but whenever i query it using the JSON RPC
the balance of this Wrapped Etehreum is 40.48
https://explorer.solana.com/address/FidGus13X2HPzd3cuBEFSq32UcBQkF68niwvP6bM4fs2
hi can someone help me?
I'll try again
`solana slot
65557340`
that information is not currently stored on-chain afaik.
do this to check your setup is good
```
solana slot
65554763
```
just tried it on testnet... that doesn't happen for me... it lists all the stake like it should
what do you mean "dump program" -- isn't it just the data in that account?
```
  let pk = new PublicKey("EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o");
  let account = await connection.getAccountInfo(pk);
  console.log(account.data);
```
It's just a load of binary, is that what you wanted?
`> solana stakes
Error: error decoding response body: operation timed out`
it's reasonable, how many stake acc are in testnet ?
can anyone help on this?
I created a token on Sol.
How can I set the symbol and account name?
```solana stakes``` shows all the stake in the system
let's say I created several independent stake-accounts, how do I list all my stake?
Is there a way to get all stake-accounts where my main account is the stake-authority?
I finally will patch validator code to save transaction statuses inplace in separate blockstorage collection, it will be fast in the end, but not now.
It depends on node config, if it configured to save history, then it will collect it, and save to bigtable. So, it depends on how long such configured node working, I think
these are historical confirmedBlocks, from long ago?
Yes, you are right, I have part of that db on our node, but our machine (16 cores, 64 RAM), is too slow to get ConfirmedBlock's with statuses from rocksdb
to be clear, when I said "get a full rocksdb" -- I meant it's available to download, not that you need to run from genesis. (which would take more than a year!)
I still not found fullfilled bigtable, yes, we could create one ourselves, but we need history, not a open-source (yet)
Thanks, yep, Im getting from local db, but transaction statuses too slow, slower, than blocks production itself.
I'm kind of interested in this, if your project is open source, maybe you can share link, where you query BigTable.
Don't know much about this, but I believe they strip out some information when putting it into BigTable. I've been told you can get a full (from genesis) rocksdb if you need that. See if you can catch mvines when he is online.
I created a token on Sol.
How can I set the symbol and account name?
nvm, solved
I'm doing a simple createMint to a token account created with my account
what do I pass in authority and multiSigners
the function takes those params
```* @param dest Public key of the account to mint to
   * @param authority Minting authority
   * @param multiSigners Signing accounts if `authority` is a multiSig
   * @param amount Amount to min```
maybe u have to pass ur own account with private key and lamports on it, to sign transaction.
finally when I'm trying to mint the function takes authority and multiSigners
I have a code that creates an account -> creates a mint . initializes the account
```if (isAccount(authority)) {
      ownerPublicKey = authority.publicKey;
      signers = [authority];
    } else {
      ownerPublicKey = authority;
      signers = multiSigners;
    }``` can someone give me a hand on what to pass here ?
Also maybe getting bigtable read credentials will be good too)
Hi here! We participating in hackaton, and need to download some confirmed blocks from bigtable, or to get them from blockstorage. Now I got Transactions in ComfirmedBlocks from blockstorage of lockal, but it lacks of StateMeta prop for transaction. Do you know why?
I'm working on some dev tooling to get Serum set up locally. I'm trying to dump the mainnet program to avoid discrepancies between the client package and the program. I'm running `solana program dump EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o ./serum/dex/serum_dex.so` but I keep getting the response "Error: Not a buffer or program account". I've verified my config is set to mainnet, the explorer (https://explorer.solana.com/address/EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o) shows an executable, and Serum has this address in it's current package (https://github.com/project-serum/serum-ts/blob/master/packages/serum/src/markets.json#L66). 

Has anyone been able to successfully dump a program from mainnet? (cli version 1.5.10)
Do you know of any Solana PHP library?
I noticed that feature-proposal program uses Borsh, is this a recommended library to use for serialization of account data?
ok, it actually did not do anything
Doing solana program deploy program.so, once the validator is running takes some time and yields a programId
It is a bit confusing since for regular deployment the program id is given to you
Is the address just whatever i want?
I think i am doing something incorrect when doing solana-test-validator --bpf-program ADDRESS program.so
Mmmh kind of stuck, I have a solana-test-validator with my program. I can run a basic transaction, but if i add instruction targetting my programId then i get:
"Transaction simulation failed: This program may not be used for executing instructions". What are the next steps to investigate what is going on?
Yeah, the solana one is down, and Serum one not working for some calls (e.g. getConfirmedSignaturesForAddress2)
https://docs.solana.com/cluster/rpc-endpoints
does anybody have an endpoint I could use for testing
https://api.mainnet-beta.solana.com
is the API down?
solana config set --url http://127.0.0.1:8899
That fixes it thanks
Strange then how is the doc https://docs.solana.com/cli/choose-a-cluster#configure-the-command-line-tool
getting away with
`solana config set --url https://devnet.solana.com` then
I'm no good at JS, but I think it's something like `greetedAccountDataLayout.span` (assuming that ~4 bytes)
Probably something to do with that, yeah.  Look for where the account creation happens and that should tell you.
ah i see, good guess, port look all screwed
solana config get
Config File: /home/pierre/.config/solana/cli/config.yml
RPC URL: http://127.0.0.1
WebSocket URL: ws://127.0.0.1/ (computed)
Keypair Path: /home/pierre/.config/solana/id.json
Commitment: confirmed
const greetedAccountDataLayout = BufferLayout.struct([
  BufferLayout.u32('numGreets'),
]);
it would be this code, right?
Try `solana config set --url http://127.0.0.1:8899`
It should be the maximum serialized size of the state data you want to store
I went for solana config set --url http://127.0.0.1
Did you set the port in `solana config set -u ...` ?
when we create an account, how do we specify how much data we want to allocate?
https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/ in this tutorial that did work (for the writter üôÇ )
Using solana-test-validator, it seems like only RPC is possible. The CLI does not work, is that expected?
i will keep an ear out for the Arweave project
Right, not without another validator to serve it to you.
oh ok, so even if i had the old snapshot, i couldn't get all of the other information needed to process through the rest of the blocks
No, I don't think any of the validators are maintaining active ledgers that far back, so you wouldn't be able to receive/repair those old slots. I believe there is a plan to archive the entire ledger on Arweave, though, so you might be able to leverage that.
cool thanks, will check that out üôÇ
https://github.com/solana-labs/solana/blob/master/explorer/src/providers/accounts/history.tsx#L86
Maybe this
sorry to keep bothering you about this. Do you think that if I was able to get a snapshot from a long time ago, like say slot 10,000,000 , that it would be possible to run all the way back up to the current time?
ah true there isn't any obvious function doing that, maybe take a peak at the explorer code to see how it is done.
Was checking, you can get a single confirmed transaction but not sure where you can get all transactions for an account
Yes look at the documentation
Is there a way to get the list of transactions for a specific account?
Using JSON RPC or solana web3
you'll also need to pass the SPL Token program account itself as an input to `invoke()`, which means passing it into your program's instruction as well.
eg, https://github.com/solana-labs/solana-program-library/blob/26a3c62a50ad58c9b4e60aadb7b812dbd220c55f/feature-proposal/program/src/processor.rs#L175
Hello, I am trying to invoke a call to the spl token program to do an approve transaction from my own smart contract. But, I keep ketting Missing Accounts: I am currently passing in a source account, delegate, and owner
cheers!
but at the moment, both devnet and testnet are running the same software version.   Until we branch the 1.6 release off master
devnet is just a handful of nodes, and we try to keep it pretty stable for dev usage.  testnet typically runs a newer, less stable release and it breaks sometimes -- and sometimes we intentionally break it to practice a network restart
What is the difference between dev and testnet?
No clue.  Sorry
yeah- do you know if there's a faucet so i can start making transactions on their app to try and figure out what's going on?
Sorry. I don't know much about Raydium other than people started asking stuff here and the knowledge is elsewhere.
their community manager is not being helpful so i'm just going to try and figure things out myself
(also wow i love the ebpf-as-EVM bit, that's adorable)
hey <@!585868308419444749> sorry to bother you, i'm pretty new to solana- do you know how i'd go about finding the raydium contract addresses on solana explorer, or if there's a faucet i could use to get stuff to swap so i can figure it out myself?
appreciate it
oh word thank you
am i asking this in the wrong place
<@!784685577625665576> you might try the raydium telegram, https://t.me/raydiumprotocol.  There's a <#775591246797996073> channel  intengrations here as well, but it's been quiet lately
seriously where can i look at raydium code? or is there like a faucet or something on the testnet so i can generate some transactions on there and go poke around the explorer?
anyway
generate it from openssl or something
if its hardcoded from a library, don't use it
Just authority I think based on the documentation: https://github.com/solana-labs/solana-program-library/blob/f0e363fe71def612efd50b08b005802f54fb4e63/token/program/src/instruction.rs#L167
when you mint tokens into a token-account, do the token-account owner has to sign? or just the mint_authority?
Ok thanks. Probably just store it in some program state acount.
Not built in.  The program could hard code an address within it
You need to compute u^x=c mod m where m is the 2048 bit modulus. You do this a lot so you want a static BigInt modulus to do this.
Is there a concept of a "deployer owner" in solana? ie: can I check if the person calling a program instruction is the owner/deployer of the program? Suspecting I need to store the deployer pubkey in a global account that is passed in and check against that but just wanted to double check.
Not familiar with what that is or how it would be used in a program
I have been modifying this ```https://github.com/cambrian/accumulator``` to get an rsa accumulator that I can use with a solana program.
Guess need more context on how the data will be used
Can off-chain clients read that tho?
if it doesn't need to be writable, I think it could just be stored in the program shared object itself though
yep!
Right, so he could store a binary blob of this modulus in an account using PDA for lookups?
also wait does solana use RSA somewhere? what why
its just not something i have ever seen before, not necessarily bad, just extremely strange
Is there a better way? This is from a library and I'll change to something better.
so weird
pemfile but in decimal
(that everybody must pass into every instruction that the program executes)
<@!491788881822220313> - the only global writable data a program can have is through an account
why is your rsa modulus stored like that lol
Oh, this looks like more of a Rust specific problem then Solana architecture?
I am using PDA's so I can have a token account owned by a program and be able to easily lookup this account using a string identifier ("seed"). This token account is used to store a lump sum of deposits from users.
This may not work for me. I need a singleton for this:
```pub const RSA2048_MODULUS_DECIMAL: &str =
  "251959084756578934940271832400483985714292821262040320277771378360436620207075955562640185258807\
  8440691829064124951508218929855914917618450280848912007284499268739280728777673597141834727026189\
  6375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172\
  6546322822168699875491824224336372590851418654620435767984233871847744479207399342365848238242811\
  9816381501067481045166037730605620161967625613384414360383390441495263443219011465754445417842402\
  0924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951\
  378636564391212010397122822120720357";
let modulus = BigInt::from_str(RSA2048_MODULUS_DECIMAL).unwrap(); // needs to be a singleon

```
So I have a specific use case that could be seen as a singleton pattern and it revolves around using PDA's: https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
<@!447814520224743424> please share  what you have  for the singleton pattern. I really need it. Thanks.
like is there a block explorer or smth
or code
where can i look at the raydium contracts
Success! https://explorer.solana.com/tx/3iz96ujsTfFjVHzPSvDPd4rAc7VdkMHbE2bWAJCxhBj4ZRcqNL5vVGy8CCoCvXkc3hQHfBzVrKZE3t83aBbPq1uT?cluster=devnet
ya!
Oh yeah silly me. I got things mixed - I am creating a token account. So `AccountLayout.span` is what I need ü§£
got it, the size of the token account is just well known.   It's part of the SPL Token API contract, just like the instructions it supports
yeah, def no global data.  Interestingly <@!447814520224743424> is developing a singleton pattern right now.  You could store "global program data" in a program-derived address that's the same for all program users
size of the account is what I was missing. Was trying to determine it dynamically or from some value provided in the SDK
There's a rent cost for a 0-sized account even.  But the token account is 165 bytes
Is there a singleton pattern for programs? I cannot use lazy_static!.
Just pass 0 to it for bytes? Thought that would just give back 0 rent
rent is based on the data size of the account, not the number of signatures in a transaction
this guy: https://docs.solana.com/developing/clients/jsonrpc-api#getminimumbalanceforrentexemption
Something like this maybe:
`const {feeCalculator} = await connection.getRecentBlockhash();
  const rentAmount = 2 * feeCalculator.lamportsPerSignature;`
system accounts are normally just a data size of 0, unless you're creating a nonce account.
Do you know where you get the size for system accounts from? I've only used it with token accounts and can use the `AccountLayout.span` to get the struct size


///////////////////////////////////////////////////////////////////////////////////////////////

I pushed the code to git: https://github.com/eltNEG/solana-frontend/blob/main/pages/addvoters.tsx
I am trying to write a modified version of a vote tutorial I saw on medium. I want the user who created a new vote to be able to add user accounts who can vote.

In the addvoter process, I am doing a create with seed and such that the seed is gotten from the voteDataAddress:

`let expected_voter_data_account = Pubkey::create_with_seed(voter_account.key, seed, program_id)?;`

And I am writing to the  `expected_voter_data_account`

On the frontend, the `vote_creator` is calling the addvoter process.

I am not sure if this is the right approach but I am facing two issues at the frontend.

1. I am getting `Attempt to debit an account but found no record of a prior credit.` when I tried to createwithseed


```
const seed = voteDataAddress.substring(30)
        console.log(seed)
        const voterDataAccountKey = await PublicKey.createWithSeed(voterAccount.publicKey, seed, sol.getProgramPublicKey())
        console.log("voterDataAccount", voterDataAccountKey.toString())

        const numBytes = 2
        const rentExempt = await sol.conn.getMinimumBalanceForRentExemption(numBytes)

        // await sol.conn.requestAirdrop(voterAccount.publicKey, 100_000_000)

        let createTransaction = new Transaction().add( SystemProgram.createAccountWithSeed({
            fromPubkey: voterAccount.publicKey,       // payer
            lamports: rentExempt,                // funds to deposit on the new account
            space: 2,                        // space required in bytes

            basePubkey: userAccount.publicKey,       // derive from... must be signer
            seed,                                   // derive from...
            programId: sol.getProgramPublicKey(),                 // derive from... and will be owner of account

            newAccountPubkey: voterDataAccountKey,
        }))

        const voterDataTx = await sendAndConfirmTransaction(
            sol.conn,
            createTransaction,
            [userAccount]
        )
```
Thanks ( Issue was I forgot to add --url htpps://devnet.solana.com )
ask for less SOL, or wait.  it's rate limited

Any ideas what to do when `solana airdrop 10` gives connection timed out?
<@401815058012962840> - are you creating the token accounts on behalf of the user before the swap?
How can I get Token Accounts owned by <Main Account> that's already been delegated to <ProgramId>?

We have a smart contract with PubKey = <ProgramId>. The user gives swap permissions to <TokenAccount>, which is owned by <Main Account>.

When the user reconnects to our frontend app with <MainAccount>, how can we find the existing <TokenAccount>?
I got my tokens stuck on bridge that sollet.io uses, from sol to erc20, didn't receive the confirmation part on metamask. Are tokens gonna be sent back after some time, or what do I do now?
<@!445425471027544095>  nice, thanks bro
<@!700244911101837352> - sollet has some utility code that should help: https://github.com/project-serum/spl-token-wallet/blob/5ca3e3d90366be74383ec04aaa4cfbdb3ef77e22/src/utils/tokens/index.js#L204
Can anyone help me out?
But the doc right here https://spl.solana.com/associated-token-account#creating-an-associated-token-account is very ambiguous
Hey team, I'm looking for a javascript function to create the associated token account.
looks like bonfida on devnet is using old contract with new code
forget the question about `u64` I handeled it in other way
Sorry about that, we don't surface that information from the program.  It's actually hard-coded in the program that the fee account must be owned by 'HfoTxFR1Tm6kGmWgYWD6J7YHVy1UwqSULUGVLXkJqaKN' -- you can see the information at https://github.com/project-serum/oyster-swap/blob/master/src/utils/ids.tsx#L15
how to deal with it, how do you create `u64` in TS ?
`u64.fromBuffer(Buffer.from([100]));`
but when trying to used fromBuffer i got another error with wrong array size
```export class u64 extends BN {
    toBuffer(): Buffer;
    static fromBuffer(buffer: Buffer): u64;
  }
```
when I;m going to the sources I see
but this does not compile, there is no cuntructor like that
in paul-shaf example here creates u64 in FE layer as : `new u64(tokenAmount.value, 10),`
`import {u64} from "@solana/spl-token";`
guys I got stuck on some stupid TypeScript issue with `u64` from `spl-token` lib
correction - its solana-cargo-build-bpf that is no longer there. There is no build-bpf that i can find
oh, and solana 1.5.11
am I missing something obvious ? it looks a bit like the instructions dont work for me. Running windows 10
Hi, total newb on solana here, so please be patient while I get up to speed! I'm trying the build/run the hello world application. I've followed the instructions but when I try to run  npm run build:program-rust it spawns this command: cargo build-bpf <blah, blah> - and it then fails with the error error: no such subcommand: `build-bpf`. I tried cargo install build-bpf, but when I checked cargo it seems this package has been removed
Ok so I suspect it is because the `struct LendingMarket` 's `bump_seed` variable is not set correctly. But I don't see anyway to set it explicitly. 

In the `process_init_lending_market` function, all the fields in the `LendingMarket` struct is set but the `bump_seed` is not. Why is that?
Hi I am wondering has anyone encountered `InvalidSeeds` when calling `initReserve` of the `token-lending` program? 

I am quite confused by this error since it is not used anywhere in the `token-lending` program... Some help will be greatly appreciated!
Great! I just started. node with bigtable and it works as expected,. thanks <@!445425471027544095> !
I suppoose it was 19 March but have no confirmation
What is the time/date of genesis on mainnet? When was mainnet on Solana launched?
It does
I hope that BigTable has this
Looks like they do not have --enable-cpi-and-log-storage This is major problem
thanks, I was able to find that I was using systemprogram in my client code, while using my programID on the chain, so once I started using the right programID it worked out
<@!716418766501576775> - here's the correct derivation:
```
    fn test() {
        let base= Pubkey::from_str("ATWubNdyC3UWQX1BAtQKZmusXnET3iTwdnLdMfnZ4uKD").unwrap();
        let owner = Pubkey::from_str("7hdnq9bTCxHKTpWiBJoML2b6YCmte8qRJzYuUZrLzJ3s").unwrap();

        assert_eq!(
            Pubkey::create_with_seed(
                &base,
                "whowannadietoday",
                &owner,
            ),
            Ok("Hn4T59DM4fJ982qWx8tbdroWzaBKW35cNA9FbBw2qgju" // <-- not "6RveYsjQKu3aA1gR9rvbMEhKApKoKNQAHR15GrGJCY8j"
                .parse()
                .unwrap())
        );
    }
```
<@!716418766501576775> - looks like you are calling the `CreateAccountWithSeed` instruction of the system program and it's returning  "custom program error: 0x5", which corresponds to AddressWithSeedMismatch [1].    Check that the second account [2] that you are passing into the `CreateAccountWithSeed` instruction matches what `Pubkey::create_with_seed()` [3] would output.

[1] https://github.com/solana-labs/solana/blob/3ac7e09de66f8a38a4da30cc4470fe3c55cf605a/sdk/program/src/system_instruction.rs#L25
[2] https://github.com/solana-labs/solana/blob/3ac7e09de66f8a38a4da30cc4470fe3c55cf605a/sdk/program/src/system_instruction.rs#L94
[3] https://github.com/solana-labs/solana/blob/0f6f6080f30dcb969eac17c682baa7d6127e210e/sdk/program/src/pubkey.rs#L121
hi all, could use a little advice on this transaction: https://explorer.solana.com/tx/2UyQxuRCtKx1riKNqREToVfTMbRSU4ZNEynBj1uGV1Eq5Hp6L5hsbqXHGrD2UEyR7VXHXdqAeqK5c1F4Qp4rXPTm?cluster=devnet
for some reason my transaction is returning custom error 0x5 which lines up with Account Data too small, but this is an unallocated account and the allocation function is only for 100 Bytes. Any tips would be appreciated,
Trying to setup a pool that I have access to mint two tokens so I can test swapping from my program.
I'm more or less running the same code as this: https://github.com/solana-labs/solana-program-library/blob/833ea9324d129b340b873f636d795daf85acc61f/token-swap/js/cli/token-swap-test.js#L161
At least not in terms of being able to view it on explorer
`Transaction simulation failed: Error processing Instruction 1: custom program error: 0x2 
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8 invoke [1]
    Program log: Instruction: Init
    Program log: Error: The input account owner is not the program address
    Program SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8 consumed 18887 of 200000 compute units
    Program SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8 failed: custom program error: 0x2
`
Ok thanks. I don't think a transaction even occurs.
(I don't have the swap details paged into my brain unfortunately)
The best folks to help with ^ are <@!539801435571748868>,  <@!752722929397137452> or <@!466984915376799748>
Yeah I'm really struggling to find the correct registry of programs and account info to be able to move forward. I'm also having trouble being able to create a Pool on the different dex/swap UI's available. Just tried bonfida on devnet and it fails the same way as the oyster-swap project. https://explorer.solana.com/tx/iSmP9KKKqZVWvVZgXnWupTS3ubRxGzg58mpAQwiY7hBGPgau3TLh7h2a2Y46mswebdgWNzx7dfzKYeUCbdyYiws?cluster=devnet
<@!539801435571748868> might be able to help if you can share the transaction.  
Looks like the swap program could use some logging during error conditions that return the same `SwapError::InvalidOwner` for easier user debug:
https://github.com/solana-labs/solana-program-library/blob/b26491552f78de3b1f0652c35e4df6fda3af477d/token-swap/program/src/processor.rs#L238-L250
does the account only need to exist during the transaction? If so then no rent is required by the system at all
You could close the account at the end and it would refund the remainder?
Hi, is there a way to have an account funded with enough rent for just one transaction?
<@!445425471027544095> is there a way to figure out which account its complaining about owner?
From what I could figure out swap program is `SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8` and its fee account is `Hj4WnYu918EN5rzevpZx8RTzkW28iZYNcktUHDRJr5er`
Trying to create a pool programatically and keep hitting `Error: The input account owner is not the program address`
Does anyone have the account info for the token swap program on devnet? Looking for the `owner fee` address
I hold data and lamports in a system program account owned by my program across calls, but I am thinking this is unsafe since anybody can create such account on behalf of the program which would just look the same to other users. Am i right to think that ownership should be given to the PDA by the program during the initialization phase?
I'd probably model it off how token program is done and then import it as a library to your program needing to call it.
I have Program A from which I'd like to invoke instruction of Program B. 
At the moment of writing Program A I only know that Program B will have execute_operation instruction and its interface (which params and accounts it should accept). 
How can I invoke execute_operation instruction of Program B from Program A? I don't know how to pack it inside Program A without knowing  the implementation of program B. Should I pass instruction data as an argument?
why testnet.solana.com domain have cors?
guys
That is exactly what I needed, thank you
The explorer doesn't offer any sort of API functionality.  You'll have to use an RPC node, https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedblock
Anyone know the correct way to make a request to https://explorer.solana.com/block/66960001 using python. Might not be possible, if there is public api somewhere that allows me to get this information that would be helpful too üôÇ
Is this Serum event parsed correctly? https://explorer.solana.com/tx/217Eetx8T2bpT8wRKcFwywavBupZLowHeaK28rFYiiepvgSAqfq8jBAXtj16D6veC5akhVFMouCmk93LspygoAnk   in action ConsumeEvents look like event queue parameter is incorrect.... ?
Thank you
I'm new to Rust too but learned some pack/unpack info from this tutorial: https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/
Ok. thanks. Let me give it a try
I don't have a simple example to show. But since it is a fixed byte array you can just unpack/pack that number of bytes
I am curious how this was done in the token program. It seems the token name and token symbols are not stored
can you please show me a full eg that includes how to pack and unpack? I am new to rust too
I solved string by using a fixed byte array - [u8; MAX_LEN]
What if I give the title a max len?
Since account storage has to be known and allocated up front, you can't have a dynamic type like string.
You can store a fixed length string, otherwise I think you would need to use a byte array with another variable storing the length.
how can I implement pack and unpack for this?
I have a struct defined as

```
pub struct Vote {
    pub yes: u8,
    pub no: u8,
    pub title: str,
}
```
can I store a string into an account?
Anyone aware of any examples available for interacting with serum via a program? Seems to only be JS/web libraries available. Can serum-dex rust repo be used as a library like the token program?
yeah we aligned fees across devnet, testnet, mainnet for convenience
devnet fees end up comparable to mainnet fees, right?


///////////////////////////////////////////////////////////////////////////////////////////////

I think it'd make more sense to fail where the error occurs (`Account` creation from the bad seed)
i am not very familiar with encrypt area so forgive me for noobie implement

This will give you a keypair. Then pass keypair.secretKey to new Account
https://github.com/dchest/tweetnacl-js/blob/master/README.md#naclsignkeypairfromseedseed
so how i use this keypairFromSeed method to export the valid secret key
!!
hoo alright
Yeah, doesn't mean it's valid unfortunately
but the account return just fine
But with Account, you need to pass a valid secret key
You can call keypairFromSeed by using tweetnacl directly
That's what's causing your issue
You can't pass a seed to Account
<@!466984915376799748>,
a simple javascript app with send sol - not working
Thanks. I'll follow there.
Yeah, good point. I'll start a discussion in <#439194979856809985>
Right as SOL increases relative to USD the USD cost of solana rent increase.
Due to the price of SOL?
Agreed, although in USD terms the costs are currently rising.  I guess I wonder what might trigger the ability to reduce the rent exempt fee
Storage costs should get cheaper over time
This would break a lot of contracts, we wouldn't do this
https://docs.solana.com/developing/clients/jsonrpc-api#gettokenaccountsbyowner
It requires a mint or token program ID. Which are you using?
More than 20 seems fine, can you please file an issue?
I think it was just meant to copy how getLargestAccounts works for SOL
2. What (besides decreasing storage hardware costs) can/could we do to be able to decrease the cost of rent over the long term? (https://discord.com/channels/428295358100013066/560174212967432193/711479918977875968 talks some about it and there is the Arweave archiving project, but would Arweave, if it worked, lower the rent cost?)
1. If in the future the storage rent costs were to go up, would it start deducting rent on previously rent exempt accounts?
Storage Costs Questions:
Right now the storage rent costs are fixed. Two questions about this:
Cleaner language please. Did you check how the wallet account was created? It shouldn't have anything to do with angular
<@!466984915376799748> i think angular is not playing nice, lemme check on plain js
I want to get more than 20 largest accounts but it's limited by constant NUM_LARGEST_ACCOUNTS
https://github.com/solana-labs/solana/blob/98aa1fa4ea7d737cb02fad88d74fb958b2fe8f7d/core/src/rpc.rs#L1244

Could someone explain why exactly 20?

```        let mut token_balances: Vec<RpcTokenAccountBalance> = self
            .get_filtered_spl_token_accounts_by_mint(&bank, &mint, vec![])
            .into_iter()
            .map(|(address, account)| {
                let amount = TokenAccount::unpack(&account.data)
                    .map(|account| account.amount)
                    .unwrap_or(0);
                let amount = token_amount_to_ui_amount(amount, decimals);
                RpcTokenAccountBalance {
                    address: address.to_string(),
                    amount,
                }
            })
            .collect();```

In get_token_largest_accounts we are iterating over all accounts, so why we have restriction on response count?
hi .  I have this error.  Any idea ? 
```Error placing order
failed to get token accounts owned by account H51n5DqjSb4NcphAj7MFu14duvPLnUpPafCH86wKKqDT: Invalid param: could not find mint```
it works! Thank you!
https://www.rosetta-api.org/docs/node_deployment.html#offline-mode-endpoints offline mode only allows construction not data endpoints
There is a community created library here that you can try out: https://github.com/portto/solana-go-sdk
I'm paraphrasing here, as someone non-technical so this might not make sense. But I also wanted to check <@!208338302825136129>, if the the Data API and Construction API functions - are they able to be run offline with this implementation of rosetta you've built?
thx
understood
everything else is for testing
<@267610913773715456> yeah sure
but mainnet-beta is where the real tokens are
they are all live chains üôÇ
devnet, testnet, and mainnet-beta
[feels dumb]
there are 3 clusters to choose from, the tokens are all different
yessir
Notice in the top right, it says "devnet"
or it is recording on the live chain?
there was a fee involved that was paid. is this in testnet?
https://explorer.solana.com/tx/2Azay6HFyvXJz4hpK7Ad837wZDYR1i6X15wgXatSmPaczYka12xGSnMFEiKHeWMs31LDuRAo1xc83i3qPMyZsx7g?cluster=devnet
I mean I was able to spin up the hello-dev. It recorded a transaction.
You are probably missing this cli flag:
```
        --enable-rpc-transaction-history
            Enable historical transaction info over JSON RPC, including the 'getConfirmedBlock' API.  This will cause an
            increase in disk usage and IOPS
```
(from `solana-validator --help`)
Great to hear you got setup quickly! I'm not sure I understand your question about dev tokens. What are you trying to do?
<@!585868308419444749> we could protect against this by immediately verifying each partial signature and throwing a special error that the account is invalid (pretty certain that's what's happening here). Thoughts?
<@!289763878877790210>  How are you creating your wallet account? I am guessing that you are creating it with an invalid secret key. Keypairs must be created from valid ed25519 secret keys otherwise signing will not work correctly and verification will fail (I just verified this)
Hey <@!208338302825136129> is the rosetta implementation ready for a review?
are these dev tokens on dev chain - or is this live?
was able to fire it up just fine on my mac and sent my first transaction through the hello-dev module.  Very easy install, thanks guys.
Hello, is there any Golang lib to communicate with the JSON RPC API of Solana??
I run my own node by these steps on 
https://docs.solana.com/clusters#testnet
I can send tx on it successfully but I can't get the result of getConfirmedTransaction correctly.
Should I wait it for full syncing just like ethereum ? or I need to do something else ?
Started to learn about Solana. Could anyone say what is the current block size limit? Where can it be verified?
Using WSL might be ok
and i just switched from mac back onto windows lol
Cool.   Literally nobody on the team uses Windows right now.  While we aim to keep the Windows builds compiling, that's about it.  But we love pull requests if you find bugs and are able to fix them üôÇ
i'll try from source - will let you guys know.
It might work if you build from source but maybe not.  Best to use MacOS or Linux
We don't even include cargo-build-bpf in the windows distribution
Ah, the problem is here: https://github.com/solana-labs/solana/blob/38e2fe89979a0a438ff41d7e349ea111d116d077/scripts/cargo-install-all.sh#L62-L69

`no such subcommand: build-bpf` indicates that `cargo-build-bpf` is not in the path, at least when it's run by the decentology script
solana --version
solana-cli 1.5.5 (src:10e12d14; feat:1043916741)
im on windows, CLI is installed...
`error: no such subcommand: build-bpf` -- this error indicates that you don't have the solana command-line tools installed.  Info on how to instal them is at https://docs.solana.com/cli/install-solana-cli-tools#macos--linux
I see you are on Windows as well, I don't know if that'll work for you.  Maybe?  If you can switch to MacOS or Linux
Hi everyone, can someone help me launch? I followed guide on dappstarter, installed all dependencies including solana cli, however still get an error when running yarn start:


@decentology/dappstarter-dapplib: error: no such subcommand: build-bpf
@decentology/dappstarter-dapplib: (node:35228) UnhandledPromiseRejectionWarning: Error: ENOENT: no such file or directory, open 'C:\Gebo_Group\defiTrophy\excited-jobjubif\packages\dapplib\programs\build\dapp.so'
@decentology/dappstarter-dapplib:     at Object.openSync (fs.js:458:3)
@decentology/dappstarter-dapplib:     at Object.readFileSync (fs.js:360:35)
This should help
https://www.npmjs.com/package/@solana/spl-token
üôá‚Äç‚ôÇÔ∏è
Is it possible to create a token address through web3.js? Either from the main account itself or sender funded?
But nice to see that other stuff is working!
I'm afk today, might have time to look tonight
Weird
didnt help
Try removing the tx.sign call as well
Maybe that's the issue, trying to add the same signature twice?
Well, sendAndConfirmTransaction will actually sign as well

Remove the addSignature line
just a thought
instead of the wallet service
it might be worth it to try this with a created account

I haven't been able to reproduce this unfortunately, can you try by calling `tx.sign(wallet);` directly?
üò¶
maybe the rpc servers? I am not able to retrieve blockhashes
something went south
testnet?
(per page load)
(anyway it's not much, it's like 30 in total)
so it's less aggressivre
Changed the way I'm doing it, doing it per batch of 5-10 requests at the same time
Got it, I just pushed a fix to the branch. Please try again
without adding the workaround i posted before - the client side cant handle buffer
hey <@!466984915376799748> 
after using your new bundle- hers the result


///////////////////////////////////////////////////////////////////////////////////////////////

<@!806420548514217984> this isn't bitcoin, if you are looking for the limiting factor, that's not it. The nodes (validators) have to perform all the transactions, which on a smart contract chain, means executing a bunch of code. How many they can churn through in a slot is ultimately gonna depend on hardware and bandwidth, right?
(Proof of History also uniquely scales Solana but I'll leave it there)
<@!806420548514217984>   here's what I found from my research, disk space is no longer a limitation nor will it ever be.
The limitation is that all previous blockchains were made wrong.   They were made single-threaded.
Imagine you buy a video game, and it's really slow.   So you ask for a refund, and they say no-can-do, but we can send you two slow video games to play at the same time (sharding).
This is the state of crypto right now.
Outside of crypto, nobody takes single-threaded software seriously. 
With Solana, we don't have to in crypto either.
Also consider what you're Doing with the transactions.
Avalanche, Elrond, Polkadot all claim to have potential high TPS, say 5000  (a fraction of what Solana does).
But, when you actually run smart contracts or really do anything useful, they all grind to a hault.
Why?   Because they're all running on a single thread like pacman from the early 80's.
Solana processes data in parallel.   It is only limited by the number of threads processing it.
*** I'm not paid by Solana lol, that's my honest research and why I'm here
<@!806420548514217984>   where are you seeing 3-6?    Solana is running around 600 tps right now.    It is by far the fastest real and potential tps in the world on a single chain. 
Is disk space a limitation?    Your calcs look correct.   blocks can only be so small to hold necessary info
Yep! It's deployed to the same address on devnet / testnet / mainnet: SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8 -- just beware that it probably doesn't have a lot of liquidity on other networks
looking for platform that can really enable large-scale use cases. Solana states TPS of 50k, (while I see TPS of 3-6 in explorer for past 6 hours). If block size ~ 1MB and block time 0.4s (from Solana) then each transaction is about 50 byte.  So am interested in real block size that will be able to ensure such high tps. Sinature only ~ 64 byte
What‚Äôs your goal?  Are you concerned about max block size for some reason?
thanks. i searched it in whitepaper as well as in discord, but did not find it. may be you know where can I check that info?
The explorer doesn‚Äôt show block size, you could examine the size of individual blocks though using the getConfirmedBlock JSON RPC method.   I forget offhand where the current physical limit lies for block size ‚Äî we use a 16bit value somewhere for convenience and that‚Äôs what determines the current implementation limit.
Nevertheless, can we see average block size in explorer or somehow? What is the block size limit then?
It‚Äôs variable.  Depends on how many transactions the leader received while it was in the process of producing a block
<@!445425471027544095> Hi it seems that only you can answer this) May be you know what the current size of Solana block is?
Nevermind, I found it, in case somebody runs into this issue, you need to add: transaction.feePayer = wallet.publicKey; before signing.
Hey! Sorry for bothering, but I'm using @project-serum/sol-wallet-adapter and it's giving me an error when I try to use it with the latest <@!725399140938416199>/web3.js (0.90.5). The error that I'm getting is when I try to sign a transaction from my dApp, and it's saying: **Transaction fee payer required**. Does somebody have an idea of why it's happening? Thanks in advance.
Ok
v1.5.5 works just fine for me, I imagine v1.5.0 would too but maybe try 1.5.5?
```
$ solana-install init v1.5.5
Configuration: /Users/mvines/.config/solana/install/config.yml
Active release directory: /Users/mvines/.local/share/solana/install/active_release
‚Ä¢ Release version: 1.5.5
‚Ä¢ Release URL: https://github.com/solana-labs/solana/releases/download/v1.5.5/solana-release-x86_64-apple-darwin.tar.bz2
  ‚ú® Update successful

$ solana --version
solana-cli 1.5.5 (src:10e12d14; feat:1043916741)

$ solana -v airdrop 2
RPC URL: http://devnet.solana.com
Default Signer Path: /Users/mvines/.config/solana/id.json
Commitment: confirmed
Requesting airdrop of 2 SOL from 34.82.57.86:9900
138.049171838 SOL
```
over devnet
Solana client version is 1.5.0.Does that ok?
2 Sol is failed too
10 SOL or less
Requesting airdrop of 20 SOL from 34.82.57.86:9900
Error: connection timed out
It always prompts connection timed out
Airdrop on devnet works fine:
```
$ solana -v airdrop 1
RPC URL: http://devnet.solana.com
Default Signer Path: /Users/mvines/.config/solana/id.json
Commitment: confirmed
Requesting airdrop of 1 SOL from 34.82.57.86:9900
136.049171838 SOL
```
Devnet does not support airdrop?
But the solana cluster verison over devnet is 1.4.26?
v1.4.26 doesn't exist yet.  Perhaps try v1.4.25, which does exist
`Configuration: /home/computer/.config/solana/install/config.yml
Active release directory: /home/computer/.local/share/solana/install/active_release
* Release version: 1.4.26
* Release URL: https://github.com/solana-labs/solana/releases/download/v1.4.26/solana-release-x86_64-unknown-linux-gnu.tar.bz2
Error: "Unable to extract \"/tmp/.tmpDktLQn/download\" to \"/home/computer/.local/share/solana/install/releases/1.4.26\": failed to iterate over archive"
`
Hi, my local solana version is 1.5.0.But how can i down to version 1.4.26?
beautiful, thx guys
General flow is (1) get a blockhash and the associated fees, (2) confirm the payer account for the transaction contains a balance that exceeds that amount, (3) broadcast the transaction
<@!289763878877790210> - the tx fee is bound to the blockhash that you use to sign the transaction with, and is deterministic: https://docs.solana.com/developing/clients/jsonrpc-api#getfees
https://github.com/solana-labs/solana/tree/master/cli
i am using the web3 npm.
can you refer to the CLI example please?
I was suggesting what we do with the CLI client
Huh? No you should, or your user will get scary messages
so dont need to verify balance (like in solidityüòÖ )?
CLI queries the account via RPC and does basic balance checks like that
guys, what is the best-practice for checking if the user can perform a tx?
1. balance vs sending amount
2. tx fee
<@!750257486975467582> - <@!539801435571748868> or <@!466984915376799748> might be able to add more colour in that sqrt implementation if you need
Ok, thanks
https://github.com/solana-labs/solana-program-library/blob/40b7690a58af87f221c8ec6c6237907c57abc331/token-swap/program/src/curve/math.rs#L474
Hi, does anyone know how to use `sqrt()` in program?Or is there risk to use?
<@!539801435571748868> or <@762849487013543936> would know
is `token-swap` deployed on devnet? where can i find the address? (if yes)
<@!445425471027544095> thanks for the clarity. It helped
Like this? https://medium.com/solana-labs/mainnet-beta-stall-postmortem-ba0c6064e3
Will there ever be a full post-mortem for the event that took place on dec 4? https://medium.com/solana-labs/solana-network-update-live-updates-3acd3de261bc
*sigh*
okay, I didn't realize it was already BE actually
yes i am
You're using this class? https://github.com/solana-labs/solana-program-library/blob/b2712c6c2f815386b7a3f9b3971ac391cdfd0a41/token-swap/js/client/token-swap.js#L24
That kinda seems like a bug
oh `Numberu64.toBuffer()` returns a BE buffer.  Yuck
it seems it is
i just wanted to confirm
ehhh, so is it BE in node then
Ah yeah, sorry I wasn't aware the JS interface didn't handle that for you
this big/little is driving me crazy
thanks
https://github.com/solana-labs/solana-program-library/blob/00f28eeb0c9740b0d5a7332638ccea6caf8fda2e/token/program/src/instruction.rs#L393
it's le
```  = new Numberu64( amount * Math.pow(10,6) ).toBuffer(); ```
the number is held in a byte array
buffer?
I just want to confirm when using token.approve in nodejs, the buffer is expected to be BE
Just ask away.  I know a little bit about it.  I'll be off and on this evening, but will try to answer when I'm around and others don't beat me to it.
is anyone online familiar with the token program?
Agreed that examples would be great as well
> 2. without my workaround from here https://stackoverflow.com/questions/51087330/angular-6-many-cant-resolve-errors-crypto-fs-http-https-net-path-stream/51627535#51627535 i could not verify the mnemonic, even with your branch
<@!289763878877790210> thanks for the heads up. I'm adding browser tests to the web3.js sdk to prevent these surprises
Yeah, that would be better
The Borsh or speedy crates are good options
Is there a better pattern for parsing dynamic account data (i.e. complex types like maps etc.) rather than json parsing? `serde_json` seems to eat a lot of compute units
<@!466984915376799748> quick update
I have finaly managed to submit a tx after verifying a wallet with pre-sign NACL secretKey

a few things to mention:
1. would be nice to know when we connect a wallet - what kind of permission it has and categorize the authority so i would know what are the capability of my signed wallet(account)
2. without my workaround from here https://stackoverflow.com/questions/51087330/angular-6-many-cant-resolve-errors-crypto-fs-http-https-net-path-stream/51627535#51627535 i could not verify the mnemonic, even with your branch
3. a more "straight forward" example of how to do simple staff would be nice. i have spent hours to understand what necessary in order to make a tx (from reading the current documentation it◊≥s very unclear)

overall - ty so much for your help, and everyone help!!
Or is there another way to create a token address via JS?
Ah okay, that probably why I couldn‚Äôt find it. So I‚Äôll continue building the rest of my app and wait for it then üëçüèº
Ah, that's a feature of the SPL Associate Token Address program.  I'm not sure that's been exposed via JS yet
Like this üëáüèº but then available in the web3.js instead of the command line?
What do you mean by "create a token address as a sender" ?
Thanks, but I already integrated this. I however can‚Äôt find the function to create a token address as a sender


///////////////////////////////////////////////////////////////////////////////////////////////

Okay, if this is the issue - I'll start a fresh webserver dedicated to this project. This was overdue, I was working on an existing one. Thank you for your help <@!445425471027544095>
that's not great.  <@!238372030918033419>, do you know about this exodus fork?
oh they forked it?  üôÉ
There is a @exodus/solana-web3.js installed with an older version. Is this maybe cause the issue? Should I delete this?
Thank you sir. I think I am on the right version:
That sounds like you don't actually have 0.90.5, which contains this fix: https://github.com/solana-labs/solana-web3.js/commit/57c282719463ce799b5d3905d4b814c4ded32b90
Are you sure you're on 0.90.5 and not some older version?
I am having this error. The response is correct, but I am getting a promise rejection error. I am using @solana/web3.js@0.90.5. 

I am calling the function like this: 

const signatureOptions = {limit: 10}
const transactions = await connection.getConfirmedSignaturesForAddress2(tokenAddress, signatureOptions)

Is there anyone that can help?
Oh! I see messages in <#749059399875690557> Ok
Hello guys! Is there some problems with devnet?
```
$ solana airdrop 10 --url https://devnet.solana.com
Requesting airdrop of 10 SOL from 34.82.57.86:9900
Error: RPC request error: Failed to deserialize RPC error response: {"code":-32005,"message":"RPC node is unhealthy"} [missing field `data`]
```
the websocket api is documented at https://docs.solana.com/developing/clients/jsonrpc-api#subscription-websocket - not sure how it compares exactly to infura though
is there a websocket api similar to infura?
Fwiw I've run into this problem when trying to import `solana_program` into a proc macro (which I was doing so that I could use the hash module and I ended up just using the sha2 crate directly).
<@!453347985628200960> is that a known issue?
yeah
I haven't, no.  Did it compile before you updated the deps?
updated dependencies and cannot build, was just wondering if anyones seen it
a modified example-helloworld program
What are you trying to build?
Compiling subtle v2.4.0
error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)
   -->/.cargo/registry/src/github.com-1ecc6299db9ec823/subtle-2.4.0/src/lib.rs:513:1
    |
513 | impl<T> From<CtOption<T>> for Option<T> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type
    |
    = note: only traits defined in the current crate can be implemented for a type parameter
Has anyone seen this error before?
OK, thanks anyway.
Note that `run.sh` does not use `--limt-ledger-size`, but `solana-test-validator` does
ü§£
30G seems pretty small üòâ
Ah, yeah, because the folder `rocksdb` is too large(about 30G) after run 12 hours.
But overall it sounds like you need a bigger disk
You could `rm -rf config/ledger/rocksdb` then restart.  This'll keep the accounts but remove the historical ledger.
If so, I need to redeploy program and recreate accounts
Is there any way not to delete?
entire ledger would be gone
yep
Does the account will be deleted?
After running on day, there is no space on device
Got it,  thanks.  you can `rm -rf config/ledger` to clean the ledger that `run.sh` uses
Then start local cluster by `NDEBUG=1 ./run.sh`
And execute `cargo build` to build release
Clone source code from https://github.com/solana-labs/solana/releases/tag/v1.4.25
hm, I'll need more information to be able to help you
No, build the source code
<@!750257486975467582> - You're using `solana-test-validator`?
Because when i run local cluster a whole day, much more disk space Occupied.
Hi, does anyone know how to clear info useless about local cluster?
np
<@!147971603156828160> - ty, fixed now
did the cert for devnet expire?


///////////////////////////////////////////////////////////////////////////////////////////////

i see there is this method: https://solana-labs.github.io/solana-web3.js/class/src/validator-info.js~ValidatorInfo.html
but not sure what kind of buffer i need to pass to fromConfigData
i got the cluster info but iam not sure how to extract validator data from it.
Yeah , I really wanna get the m1 chip , they are very appealing (developer pov)
devnet is not that bad still almost instant transactions
besides that he said everything works fine so I hope there's no more compatibility problems
so my friend had to use devnet
well it doesn't (yet)
as long docker works i think you are fine
no idea linux pleb here
Also, do you know if the Mac m1 are good for coding in solana ?
okay thank you
I thought it's for the custom tokens üòÜ  that's why I was confused
yes
you store the alias on chain?
i mean just prototype for hackaton
ah I get what you mean
oh no its my project ;D
I'm new to those , is there documentation for it ?
aliasing is onchain
both accounts and tokens
there is support for aliasing
sorry for the noob question but, how does this use rust? because if I'm not wrong this is a solana wallet
at least backend part ;D
yes
is it written in rust ?
https://nebulawallet.com/
<@!208527206966755329>  https://github.com/Nebula-Wallet you can checkout my project from last hackaton
can I get an answer for my question ? üòÖ
the pro of having all of the programs in one place üôÇ
ty
i can't help with the m1 question, but if you want to look at more intricate programs, we have examples in https://github.com/solana-labs/solana-program-library/tree/master/examples or you can look at the programs like https://github.com/solana-labs/solana-program-library/tree/master/associated-token-account/program for assocaited token accounts or https://github.com/solana-labs/solana-program-library/tree/master/memo for memos
https://docs.solana.com/developing/clients/jsonrpc-api#getclusternodes will give node info, and https://docs.solana.com/running-validator/validator-stake should give an easy example of staking
oyster lending is the frontend so you were looking at something related.  we've been trying to figure out the best way to package everything, it's unclear when the frontend and program live in separate repos üòï
oh i was looking at oyster lending ahah
thank you
Also, is there any good projects to learn from besides the hello world example ?
the lending program can be found at https://github.com/solana-labs/solana-program-library/tree/master/token-lending/program -- there's a bit of logic there üôÇ
oh nvm, I just saw "Accounts whose balance is insufficient to satisfy the rent that would be due simply fail to load." so you're good there
besides running localnet
does mac m1 have problems with solana ?
I saw the implementation for the lending system. I couldn't find any contracts is this because its mainly done as UI coordinated logic with a simple program account?
epochs aren't too short -- roughly 2 days on mainnet, so it could be a consideration
ah okay, guessing epochs are short enough that it doesnt really matter if the dev does it or not.
https://docs.solana.com/implemented-proposals/rent#timings-of-collecting-rent will give that info and the considerations about a "drop"
okay sweet. How often is the cleanup? Does it make sense to allow app developers to call something like `drop()` to do it right away?
yeah that's the current way -- you can extract all of the lamports to ensure it gets cleaned up by the runtime, and in your program you can optionally set all of the account data to 0 if you don't want the data to be used
that's right, you've got https://crates.io/crates/spl-token and https://crates.io/crates/spl-token-cli for rust and https://www.npmjs.com/package/@solana/spl-token for us
hey guys, how do i pull validators info from web api? & any good example of how create a stake account and delegate to a validator?
Is there a way to mark accounts or contracts for cleanup? Possible remove the rent exempt amount is a way?
is `@Solana/spl-token` still main package to interacting with spl tokens ?
tysm
I remember having so much trouble when using windows
use linux
Hi everyone, I'm new to solana development, i try to run helloworld examples on windows but stuck at "Start a local Solana cluster", any help would really appreciate
Thanks üôÇ
I hope you guys wait until monday and enjoy your weekend. Thanks as always for the continued support!
Thanks for the info
We'll announce in <#749059399875690557> when it's back up.  Hopefully over the weekend sometime.  Sorry for the hassle
Righto, that explains it
Normally a couple seconds.  Right now forever since devnet is down üòû
How long does a devnet airdrop request take?
Ok bro , Thank you üôÇ
it's the start of the weekend here, team is pretty spent, please be patient. üôá .    A good alternative is to run a `solana-test-validator` locally on your machine
It has been reported down 2 hours ago, they are looking into it
hi I can not transact on devnet. Any ideas? RPC error
For example, it would prevent me to query the rpc service hundred of times, that's a huge bandwidth and resources waste tbh
Honestly, the need hasn't come up before. But it is an interesting idea.
You could say that about any field in the transaction ü§∑‚Äç‚ôÇÔ∏è
Btw, why there's not feePayer on getConfirmedSignaturesForAddress2? It would be so helpful
You are correct, looking into it.  Thanks for raising!
Looking at the explorer's TPS history graph, I suspect due to my test suite.
I think Devnet is down.
Great, cause Ive sent multiple memos on a single transaction and it would be great to be able to retrieve them all
Good question! We haven't defined that interface yet. But yes, almost certainly an array
Great, what would happen if there are multiple memos? an array? When the feature is released I mean
Memo refers to the SPL memo program: https://github.com/solana-labs/solana-program-library/tree/master/memo
You can use that program to add an instruction to a transaction containing arbitrary UTF-8 data.
However... the plumbing to print memos in that field on `getConfirmedSignaturesForAddress2` results is still to come.
No, there isn't an rpc for this, unfortunately. Retrieving the transaction is the only way currently.
I'm trying to retrieve transactions from an specific sender, avoiding the need of requesting all the transactions made to an address.
Btw, I'm talking about this: https://docs.solana.com/developing/clients/jsonrpc-api#getconfirmedsignaturesforaddress2
And what does "memo" stand for on the result? Is it writable before sending a TX? Could I write the feePayer on this?
Hi everyone, is there a way to retrieve the feePayer from the result of "getConfirmedSignaturesForAddress2" without requesting the transaction itself?
thank you good sir
<@!748249199606497502> - it's back up now
I was trying to shift all my dev work to testnet, but unable to deploy the serum dex on testnet.
<@!445425471027544095> installed it on a fresh webserver, and it works now! Thanks you üéâ
working on it, sometime today.  I'll post in <#749059399875690557> when it's back up
Looks like devnet is down. Any idea when it will be back up?


///////////////////////////////////////////////////////////////////////////////////////////////

Is there any planned first party support for protocol buffers? I would much prefer to use such a package rather than byte packing.
tysm <@!445425471027544095>
There are some other examples in https://github.com/solana-labs/solana-program-library/tree/master/examples/rust
The less complex SPL programs are also good to look at:
* https://github.com/solana-labs/solana-program-library/tree/master/memo
* https://github.com/solana-labs/solana-program-library/tree/master/token
* https://github.com/solana-labs/solana-program-library/tree/master/associated-token-account/program
* https://github.com/solana-labs/solana-program-library/tree/master/feature-proposal
I'd stay away from the token swap and lending programs if you're still ramping up, they're much more involved
I am still a beginner tho ü§£  I finished the hello world example , do you any simple projects to learn from?
I don't think so, although it probably would be a fun exercise for somebody to bring it up to date.   The concepts it uses are fine, it just needs to be ported to the latest solana SDKs
try send the props in body, not query param
hello , is there a new working version of the tictactoe example ? thanks in advance

can somebody please tell me what I'm doing wrong?
The function sendAndConfirmTransaction() should work for sending SOL as well as for sending SPL tokens right?

still not sure how to get validator info =/
staff like skiprate/fee/etc...
you can use `getAccountInfo` on the account at the `pubkey` field in each element of the array and parse the data on that account as ValidatorInfo
the getclusternode reutrn array of nodes (validator list)
what should i parse? and to what? üëÅÔ∏è
i remember taking awhile getting it to work the first time, and having to look at serum as a reference
yeah fair enough, we might want to make an example which just does a transfer with a program address
I may have this wrong, but if you fetch the validator node account on the pubkey listed on getClusterNodes and parse it as ValidatorInfo, i believe it should work
still think we need better explanation i spend like 4H with help from Serum folks
You can see how it's done in the feature proposal program: https://github.com/solana-labs/solana-program-library/blob/master/feature-proposal/program/src/processor.rs#L246
Just send token using proxy and i got to say this Program Derived Addresses is sooo complicated. Documentation needs example  like full e2e example


///////////////////////////////////////////////////////////////////////////////////////////////

<@!445425471027544095> But thanks a lot for your pointing out the wrong config. I'm deploying the new change now. If you don't hear further from me, mean that thing works again
That config is provided from your sample code
'recent' , means it can be rolled back
but why previously, when I was using the old config, things were working fine?
Remove `skipPreflight` and try `commitment: "confirmed"` and `preflightCommitment: "confirmed"`
Pls provide the valid config?? As the above config is from your sample code
`recent` -- you're using the latest block that has no confirmation
`skipPreflight: false,` -- you turned off checks
ouch, ok.   100%
<@!445425471027544095> You mean that, the below can be failed??

  return sendAndConfirmTransaction(connection, transaction, signers, {
    skipPreflight: false,
    commitment: 'recent',
    preflightCommitment: 'recent',
  })
We actually did recently, works fine
Pls try creating some token-associated account
Previously, all were working fine
What's happening on the client side?  Any RPC failures or other issues while sending the transaction?
Right now, this issue is constantly happening
<@!445425471027544095> I also wanted to ask why no tx associated with that account address
<@!720492966204145695> - what's the transaction that affected the `FwFeRZAxSH9LmofJEixYSSsJHs9g9St5Rs1xVBAVZkZL` account?   I don't see any, so I wonder if the client failed to send it somehow?
<@!445425471027544095> Big problem!!
Previously, whenever a token-associated account is created, I can always see the initialization of "mint" and "owner". For example, this one: https://explorer.solana.com/address/74Jtu6dPZvcEERtvLG7KpcmNBeNAeeNuWCRNF7we2hGX

But right now, I don't see the initialization of "mint" and "owner". For example, this one: https://explorer.solana.com/address/FwFeRZAxSH9LmofJEixYSSsJHs9g9St5Rs1xVBAVZkZL

The target token here is KIN.
Same code, but why different result??
Anything wrong from Solana blockchain node??

This issue happens both on Mainnet and devnet
solana does not support `u128` ?
This is more of a curiosity question than something I need to understand for practical reasons
I've read the docs
https://docs.solana.com/validator/runtime#execution
I think it will run one after another coz `request queue` will be marked as `write` so, they will be sorted by timestamp.
sure, i understand that only one transaction can edit the account data at a time and it locks out all other transaction from editing it. What I'm curious about is what happens when two transactions try to edit it. Does one of them fail? And if so, how does the runtime decide which one to fail.
like rust reference ownership
It said somewhere, that instructions run in parallel only for for accounts, that only exists in is_read state and at most one is_write instructions.
this might sound like a serum question but it's more of a solana runtime question:

Let's say two people try to do a `new order` transaction on the same market, during the same block. Both orders need to update the same request queue, which is stored as modifiable account data. What happens in this situation? If all the transactions are executed in parallel, how does one transaction get priority over another to edit the `request queue` account data? Or is this resolved in some other way

A technical introduction to the Serum DEX <https://docs.google.com/document/d/1isGJES4jzQutI0GtQGuqtrBUqeHxl_xJNXdtOv4SdII/edit#heading=h.3prnf1bvfjen>
But we cant call `other programs` from `my program` to modify `user account`
what is working now: we could call `createAccount` with binding it to `my program`, signed with `user account` so, then calls to `my program` will be allowed to widthraw from `user account`
could someone please help to understand account assignment and owning? What I want to achieve - are 2 scenarios: 
1.  to allow my `program` to commit transactions for some `user account`. it have to be assigned to `my program` somehow.
2. allow my `account` to send transactions to `other programs` for assigned `user account`.
<@!501570363566587905> I'll try that, thank you üôÇ
I believe Solana needs to upgrade its rust version to 1.45 or above to remove the requirement for that feature attribute.
Yes proc macros work. You can try adding `#![feature(proc_macro_hygiene)]` to your program.
host  build works fine under 2021-01-25 nightly
but I'm getting `unresolved  import  "proc_macro"` when building
Is there  Rust proc macro support in the Solana SDK? I was  hoping to use  a crate for  automatic `TryFrom` on `repr(u8)`  enums.
Ok, do you mind writing a new issue describing why you need the pong? https://github.com/solana-labs/solana/issues/new
What format is the key in? Recently it was changed to use the same array format used by the solana cli. So no need to encode into base 58 anymore.
Use the method by https://discordapp.com/channels/428295358100013066/517163444747894795/781713338958348299
over mainnet

Hi, why i can not add account in sollet wallet?
I think the pong also can help me to know the network traffic
On the browser and in node.js the pong wasn't needed
Do you need the pong?
We can implement that if needef
<@!466984915376799748> oh, the automatic heartbeat is written by you üòÜ . I imitate your method sending the `{"jsonrpc":"2.0","method":"ping","params":null}`, but the server seems no response for it. Is there anything wrong in my request body or it is a normal situation ? I'm expecting the server will answer me something like `{"jsonrpc":"2.0","result":"pong","id": 1}`
I will check the heartbeat implementation in web3 js sdk
but thank for your information
I'm not using any sdk, I just connect it in golang.
There is an automatic heartbeat in the web3 js SDK. Are you using a different SDK?
I connect to the websocket for subscribing my account event, but there is no api for ping-pong. (https://docs.solana.com/developing/clients/jsonrpc-api#subscription-websocket)  Is there any idiomatic ways in solana for keeping websocket connection ?
The cli code shows how to do it
You can use web3 getProgramAccounts to fetch the validator info
so i cant get validator data from web3? in other words, i prefer to keep all logic on the client (if possible)
the validator public key doesn't store anything (data is empty)
need to search for the config account for the validator public key you want
`process_get_validator_info`
yeah, check out `cli/src/validator_info.rs`
one more thing please <@!466984915376799748> 
you have an idea how i can pull off this one?
hoo now i get it... yea my mistake, probably an issue with the bip39 on the clientside
I meant, which code uses bip39? We don't use that library in solana-web3.js
bip39 - https://www.npmjs.com/package/bip39
which one?
lib
is that your code or some library?
solana-web3.js doesn't use bip39
bip39 package cant verify
Hey <@289763878877790210>, which method? What's the error?
<@!466984915376799748> hey mate
just checked ver 0.91.0 npm
still can◊≥t verify seed without the workaround on the webpack browser bundle
any thoughts? at a loss as to how to proceed here
accounts were created using a `token.createAccount()` call from the `@solana/spl-token` pkg
interestingly, the owner of the account appears to be the system program - is this supposed to be the case? i thought i read somewhere that these token accounts should be owned by the spl token program
afaik, the account being passed in is a valid spl token account (e.g. https://explorer.solana.com/address/7iBuPbiXUyYFh5ZP8CfHZq8JxuhCsUNyuj4iA7JxAxyK?cluster=devnet was passed in)
however, the function chokes with an `InvalidAccountData` error
some questions on how to debug unpacking spl accounts: i have a function that essentially does the following: 
```pub fn unpack_token_account(
    account_info: &AccountInfo,
) -> Result<spl_token::state::Account, ProgramError> {
    spl_token::state::Account::unpack(&account_info.data.borrow())
}```, and with some logging, i've checked that the key of the `account_info` being passed in matches what i expect
<@!445425471027544095>    ah, thank you kindly I appreciate it üôÇ
iirc there's some programatic generation of some of the accounts yes.  There's other accounts generated for the testnet bootstrap validators as well.
<@!445425471027544095>   thank you!  I was thinking that too, but the part I couldn't get my head around is that they don't add up to 423.    Are they triplicated perhaps?
These are probably the default accounts that get automatically added whenever `solana-genesis` is run: https://github.com/solana-labs/solana/blob/master/genesis/src/genesis_accounts.rs
why 423?   and...where are said accounts?  üòÖ
Capitalization: 1000000000 SOL in 423 accounts
quick question on creating testnets...
I've actually noticed it happening on mainnet-beta as well "rarely". Where a common transaction is show in a different format than usual
suddenly the explorer doesn't give the expected transaction  output when checking a transaction
Is there anything happening on testnet
üëç
re: above, realized my entrypoint wasn't calling `process`...üòÜ
we need to pull some of the 40M Microsoft developers here üòÑ
üòã üëç üéâ
np for me finding it in solana json api, problem was configuring Postman üôÇ
Whoo!  New language support üéâ
I started new project with C# making call to JSON API, and I probably upload it tomorrow or day after tomorrow on GitHub for everyone who wants to jumpstart in C#.
There are examples in the docs too, https://docs.solana.com/developing/clients/jsonrpc-api#example-19 üôÉ


yep, that was right direction, tried it in form-data and x-www-form-urlencoded, but with no luck. Then <@695713747108495420> resolved it by puting it in raw. Here is the solution for everyone that wants to quickly explore JSON API from Postman:
i tried naively to re `cargo build-bpf` and deploy the program (on devnet), but it doesn't seem to have affected any changes
?
wrt the above, i assume that if a fn returns `Err`, you would expect to see the txn fail with that `Err`
i have a unit test in the program that is supposed to verify the correct mint amounts; that being said i'm fairly new to rust so it's possible the test coverage is incomplete
however, when i try to send the instruction to the program on devnet via a js client, the transaction succeeds, but i don't see the expected token amounts in the accounts
any suggestions on how to debug a misbehaving instruction? i have an instruction that is supposed to perform 3 CPIs: 1 to transfer an SPL token to an account and 2 to mint two different SPL tokens to two accounts.
tx id is just the first signature in the transaction
isn't that supposed to be tx id not signature
hmm it makes sense now, but why is the tx id called signature in the solana explorer ?
A transaction must contain at least one signature, which is the system account that pays for verifying all the signatures in the transaction.  A transaction can contain 1 or more instructions, and an instruction can require 0 or more signatures.
a transaction can have multiple transactions ?
so basically
a transaction may have multiple signatures though
the first signature in the transaction is used, by convention, as the transaction id.
I thought signature is tx id
wdym by signature
unfortunately not currently
A transaction may require multiple signatures, and the transaction fee is based on the number of signatures
Rpc API doesn't cover this and all the history is locked up in the those bittorrent things
Is there some way to get the account info at a specific block?
like, what's the reason behind +2 , *2 etc... (the formula)
I couldn't understand the code of calculating the cost of deploying a program
```javascript
export async function estCostLoadProgram(connection, pathToProgram) {
    const {feeCalculator} = await connection.getRecentBlockhash()
    
    const data = await fs.readFile(pathToProgram)

    const cost =
      feeCalculator.lamportsPerSignature *
        ( (BpfLoader.getMinNumSignatures(data.length)+2) * 2) +
      (await connection.getMinimumBalanceForRentExemption(data.length))

    return cost
}```
thanks for clarifying this, i was wondering
Read this https://docs.solana.com/cluster/overview
well Ik that , but I'm bit confused with isolated networks and connected nodes part
So it's maximally lightweight, just one validator voting on their own decisions and handling whatever trickle of transaction and RPC requests you make to it
It's running the same protocol, but with no other cluster participants
localnet is a new genesis, new blockchain, everything
well they just use different id/port idk how it is in solana
so groups of node exist in a network , if nodes are not isolated how can networks can be isolated ?
nodes are in networks
networks are isolated
nonono
yeah but nodes are isolated
you mean solana nodes ? Proof of stake i guess
how do they maintain consensus ?
i guess you are doing heavy stuff
no you are on separate network isolated
(sorry I come from bitcoin/ethereum)
so basically, solana transactions are not synced ? how can one node process your transactions faster than other
i'd be worried about getting blocked if we need to keep making calls
they're rate limited
a cheap VPS is like a couple of dollars a month on vultr
if you want node that syncs with mainnet you need some more power
localnet is well local i does not connect to network
why buy a solana node ?
I'm bit confused , isn't this the same as having localnet that you work on
maybe for purpose of building explorer you need own node
i think thats great
my wallet on open query like 2k accounts and it takes couple of seconds
for what use do we need to have our own nodes
is it possible to rent them hourly ?
ah got it
but honestly public ones work great
solana nodes are supercomputers in a nutshell
Also, what's the expensive stuff that donderper talked about ? isn't that just regular hosting ?
ah okay that makes sense now
i think it does it under the hood i haven't ever set blockhash
why not use public ones ? too slow ?
oh so sendAndConfirmTransactions takes another blockhash argument ?
I think sendAndConfirmTransaction sets it if it's hasn't been already
or is it getting the blockhash from the connection ?
how Is this working fine ?
```const transaction = new Transaction().add(
        SystemProgram.transfer({
          fromPubkey: account.publicKey,
          toPubkey: 'AhaTv2588AAWqcCsjheFYuxC6sTqDvZ1b12rUrNCffw5',
          lamports: 10000000000
        })
      )

      const signature = await sendAndConfirmTransaction(
        connection,
        transaction,
        [account],
        {
          confirmations: 1,
          skipPreflight: true,
        },
      ).then((sign)=>{
          if(sign != null){
              console.log("Transaction successful : " , sign)
          } else {
              console.log("Transaction failed")
          }
        })```
You seem to be missing some fundamental knowledge.  This might prove enlightening https://docs.solana.com/developing/programming-model/transactions
Yes
<@!585868308419444749> is the blockhash mandatory ?
maybe we will just do proof of concept
but that's just so expensive for a hackathon project
it's like ‚Ç¨70 - ‚Ç¨120 a month plus the same again for a setting up fee
hetzner seems better
the one that is listed as used by solana for their own RPC is like $1.5 an hour
damn, these cloud things are expensive
Np
Thanks for asking all these question. I had the same questions
No.  You'd have no idea of the chain state
Voting is basically nothing computationally
during the last hackathon if you looked at the list of staking nodes on solfare, the list was incredibly long. So it seems like a lot of people were hosting their own. Or maybe doing something slightly different?
but ok, that's good to know that it'll need decent hardware
i read in the docs you can make it "non-voting" somehow
can you turn off validation ?
The requirements are basically the same. Higher in some cases as certain RPC requests can interfere with validation
do i need to have all the same minimum hardware requirements as a regular validator or can you get away with a cheap VPS?
let's say i want to run a local node so that i can send lots of RPC API requests
It gives the transaction a lifetime and deterministic fee rate
Yes, every transaction needs a recent blockhash
well , you don't need it for a transaction afaik
isn't that the nonce?
wait how does it return transaction id while it failed ?
so it will return error instead of transaction id
i hope they fixed it in current api
i cease to exist ;D
in case it drops
and what does signature get ?
its dropped
if it is not confirmed in 40 sec
nope
so basically I check if the signature is not null , if so the transaction is fine ?
I thought signatures mean the signer
ah it returns the transaction id
that look fine
yep
like a parameter for sendAndConfirmTransaction ?
you gotta check api
yeah but is there a simpler way ?
i am sure current api support better way
that i used signature for ;D
is there a way to know if a transaction is successful ?
i got to be `Account`
yes
only the person sending right ?
what should I give in signers ?
okay tysm
ah I wouldn't be using it since I will just check the balance if it's working ü§£
its old version of api
idk about now
last time i used it was bugged
to check if transaction is confirmed
what's the use of signature here ?
yes
I remplace here the amount with 1 sol , then pass this Transaction to sendAndConfirmTransaction ?
```const signature = await connection.sendTransaction(transaction, signers, {
    skipPreflight: true
  })```
```new Transaction().add(
          SystemProgram.transfer({
            fromPubkey: wallet.publicKey,
            toPubkey: new PublicKey(action.payload.recipient),
            lamports: amountToSend
          })
        ),```
okay so basically I wanan write this in simple js , let's say I wanna send 1 sol
if u just use js/ts
but you dont need that
syntax magic
call is like `fn()` => `call(fn)`
what's call and select?
yes this is support for sending max balance
you mean this ```amountToSend = myBalance - blockHash.feeCalculator.lamportsPerSignature```
ah , so you are calculating the fee ?
ohh
we dont ?
for example , why do we need a blockhash for a transaction ?
sorry for being a noob but I didn't really understand the code besides this ```new Transaction().add(
          SystemProgram.transfer({
            fromPubkey: wallet.publicKey,
            toPubkey: new PublicKey(action.payload.recipient),
            lamports: amountToSend
          })
        ),```
this uses generators so syntax is harder but idea is same
<@!208527206966755329>  https://github.com/Nebula-Wallet/nebula-website/blob/3dedcd53fa70f43a9e1f9faef65f7d4913d6aad4/src/store/sagas/solana/wallet.ts#L58
I've found Transaction and TransactionInstruction , idk if that's what I am looking for
how to send solana to another account using web3js ?
How can i get current block number in rust


///////////////////////////////////////////////////////////////////////////////////////////////

Thank you.  Also, are NFT tokens in solana similar to ERC-721 or ERC-1155?
about NFTs. I went through spl token docs and looked at the source code. What if we want to attach some info/data to the token?
here's a start: https://spl.solana.com/token#example-create-a-non-fungible-token
Hello, what are some good resources to learn more about NFTs in the Solana network?
ok thanks
Not sure, I don‚Äôt know that much about solflare file formats
Thank you but What is the diff between the raw key file I used and the id.json file? Are they both keypair?
To resolve this error, just run `solana-keygen new`
I am using a solflare wallet
Yes that was it I switched to the raw key file and that got me farther but now I get this. Error: could not read keypair file "/Users/davidchoi/.config/solana/id.json". Run "solana-keygen new" to create a keypair file: No such file or directory (os error 2). I do have that directory but I don't see a id.json file in it.
Ok, let's go with this!
Thanks for your time
Yep, `sendAndConfirmTransaction()` should be good enough.
That cmd works fine on my localhost. Don't know why it doesn't work on yours.
My version
solana-cli 1.5.3
command is running on same folder
When I already send the tx with the below method, do I still need to wait to check if it is confirmed?

sendAndConfirmTransaction(connection, transaction, signers, {
  commitment: 'singleGossip',
  preflightCommitment: 'singleGossip',
})
the command is running on same folder as the json file
the `lastValidSlot` of https://docs.solana.com/developing/clients/jsonrpc-api#getfees will tell you how long a blockhash is valid for
Generally I'd suggest https://docs.solana.com/developing/clients/jsonrpc-api#getsignaturestatuses at least waiting for a "confirmed" ("singleGossip") commitment before considering the transaction executed (other commitment levels may be used depending on the exact use case).   And if the transaction is not confirmed by when the blockhash expires, the client should resend it
With a tx signature, what method to use to check if it is confirmed?
yes of course
This means, for token-associated account creation, we must check if the tx returned from the method "sendAndConfirmTransaction" is confirmed????
Or, could you suggest the secure way?
‚ö∞Ô∏è ü§≥
I agree. That's why I said, it is dead forever
Use absolute file path
If you don't have the secret key then there's nothing you can do
when I use the -k I get this Error: could not read keypair file "solflare-keystore.json". Run "solana-keygen new" to create a keypair file: invalid type: map, expected a sequence at line 1 column 1
But, problem is, when creating that account, I stored only its pubkey. I did not store its secret key
You can use the sendTransaction method: https://solana-labs.github.io/solana-web3.js/class/src/connection.js~Connection.html#instance-method-sendTransaction
Try this:

solana transfer -k ./my-keypair-mainnet.json ......
<@!394537695185076244> - I've seen this before, I think there's two formats that solflare will produce for your keypair.  Use the "other one"
is the keystore file not the keypair?
solana transfer 9CjaaC29qNnLQCym7PcPyohnzWFAjeLaug9sk93kngaL 5 --url https://devnet.solana.com --fee-payer solflare-keystore.json
error: Invalid value for '--fee-payer <KEYPAIR>': invalid type: map, expected a sequence at line 1 column 1
Hello I am trying to go through the cli example for testing a wallet (Send and Receive Tokens). But when I run this command I get the error shown using a solflare wallet and its keystore file. What am I doing wrong?
You should resend the transaction, it didn't execute

How to resend?
You should resend the transaction, it didn't execute
I just explained why you see what you see on the explorer above
That's why, on the Explorer, we don't see any associated tx
Root cause is

const newAccount = new Account()

    const transaction = new Transaction()
    transaction.add(
      SystemProgram.createAccount({
.......

The transaction was failed by Solana
At least, it is now visible on the Solana explorer
The account literally doesn't exist.  So I don't see how it was mistakenly created.  Why do you think the account exists?
<@!445425471027544095> Then, what to do with this mistakenly-created account?
FwFeRZAxSH9LmofJEixYSSsJHs9g9St5Rs1xVBAVZkZL

It is dead forever
The account may have existed in the past, and thus may have history and it may also have tokens associated with it.  So that's why the two tabs on the bottom are still present
The address is valid but doesn't exist.  The explorer renders this as an account of 0 balance that's not assigned to any program
https://explorer.solana.com/address/doesnotex1st1111111111111111111111111111111      üôÇ
Then, why the Explorer knows of it?
But the FwFeRZAxSH9LmofJEixYSSsJHs9g9St5Rs1xVBAVZkZL account has no balance so it doesn't currently exist
So, it is forever a dead account?
It also doesn't have the "owner"
The above account address was created but because the "initialization" tx was failed. Thus, now I wish to be able to get it initialized again. But I don't have its secret key
I don't understand your question sorry
Why? I already have the secret key of the owning account
(or if it's a derived account, the private key of the base account)
hmm, you need the private key for an account to initialize it
Thanks! It works now. 
Another question pls, also the consequence of this issue, some account has been created but without the initialization. For example, this one: https://explorer.solana.com/address/FwFeRZAxSH9LmofJEixYSSsJHs9g9St5Rs1xVBAVZkZL

So, now, how to get this account initialized again? I have only the account address but not secret key
ack!  I thought we had reflected this into solana-web3.js already but nope: https://github.com/solana-labs/solana-web3.js/blob/master/src/connection.js#L157
You're right.  So in your case please use "singleGossip" (the old term for "confirmed")
we don't have "confirmed" enum
Hi <@!445425471027544095> 
Yesterday, you have suggested to use the below config for the method "sendAndConfirmTransaction"

Remove skipPreflight and try commitment: "confirmed" and preflightCommitment: "confirmed".

It does not work at all because of

  export type Commitment =
    | 'max'
    | 'recent'
    | 'root'
    | 'single'
    | 'singleGossip';
Or serum has their own rpc server as well. Which allows 30 calls per second
You could always try to find a nice validator to let you run rpc calls
Yes that‚Äôs correct, assuming you want to run against mainnet.
sorry to ask so many questions, just want to make sure to confirm, before settling on a quite expensive hardware configuration. basically there is not really a cheaper way (in terms of TCO) than to run a validator with the specs presented here: https://docs.solana.com/running-validator/validator-reqs ?
The validator operates at a block level, it doesn‚Äôt really have a way to only validate transactions for certain accounts of interest
üôÇ
Can you confirm if this change fixes your problem?
```
// Before
let diff_y = (price as u128) * (y as u128 - y_out) / (1000000 as u128);

// After
let diff_y = (price as u128) * ((y as u128 - y_out) / (1000000 as u128));
```
got it
Programs are deployed through many transactions and transactions have a max size. So the bytes of the program are deployed in batches and the bigger the program, the more transactions that will take. You can start a localnet with your program in the genesis with `solana-test-validator --bpf-program ...`
Is there reason why if program gets bigger we need more confirmations with `solana deploy`  also can we skip this confirmations on localnet ?
i did,  but i dont know rust.
didnt understand much from it...
i found this documentation with regards to setting up a validator that exposes the rpc port. https://docs.solana.com/integrations/exchange
is that the "private rpc node" config you mentioned?

the document mentions that the amount of disk space needed can be effectively reduced. what would be other settings that could be tuned to achieve minimal hardware requirements? could we filter maybe accounts that we would like to validate by program / owner instead of validating all possible transactions?
Can you confirm you are using mainnet?
price: `12765768`, y:`209800000`, y_out: `0`
there are many more than 30. Please look at the Rust code I shared before to learn how to find what you need
also, only 30 items in the array of getProgramAccounts
it could be an issue in our forked rust toolchain. Can you provide a minimal example with a test that fails and write an issue?
validator info return null, what am i missing?
Does anyone know why?
use `let diff_y = (price as u128) * (y as u128 - y_out) / (1000000 as u128);` to calc is different from use `let diff_y = (price as u128) * (y as u128 - y_out).checked_div(1000000 as u128).unwrap();`
Hi, i find a problem about rust, but i don't know why
You need to call that method with the address of an executable program account. If you're looking for validator info, you'll want to fetch accounts for the config program. Here's the executable program account for the config program: https://explorer.solana.com/address/Config1111111111111111111111111111111111111
Yes, the implementation is naive right now, it makes a single request to an rpc server but it runs quite slowly. Is it timing out?
Yes, it's expensive. You can track the number of compute units used by logging the compute units before calling `sqrt`:
```
solana_program::log::sol_log_compute_units();
```
I often get errors while calling the getParsedTokenAccountsByOwner function on accounts (in solana web3)... is that method expensive or doing a lot of calls?
while i use the method, it prompts `error: exceeded maximum number of instructions allowed`
https://github.com/solana-labs/solana-program-library/blob/40b7690a58af87f221c8ec6c6237907c57abc331/token-swap/program/src/curve/math.rs#L474
Hi, does the method `sqrt` expensive instructions?
guys i am trying to reach validator info like skip rate,fee, etc...
what am i missing?
the program isn't deployed on mainnet or testnet, and the logs are what i would expect from the call, so i believe so
for the program call?
You're sure you're pointed at devnet?
i created this account via `mint.createToken(...)`
this was strange to me
correct, the last log is `account_info.owner` and the log before is `account_info.key`
i don't think much else can be wrong on the program side - all it does is read in the accounts and try to unpack the 2nd one
Assuming the last log before the panic is `account_info.owner`, that's a system account somehow
So something is wrong before you even get to unpack then?
(forgot to swap the explorer)
this was on devnet: https://explorer.solana.com/address/B8JScqoor6EMsKj6XwLnZheft9qtzz8zVw6V4Vq3kDiC?cluster=devnet
actually let me retract that
let me see if i can dig them up
i did have some instances with what i believe were token accounts
ah, you're right, it is
Looks like that's a system account, then?
ping on this - is this not the correct way to unpack an SPL token account? my program panics when doing so: ```Instruction 0: Program failed to complete 
    Program 5GXFfGR8VtgYRtYy2RV9RPrirMnhytUPuefiiE5idoau invoke [1]
    Program log: Instruction: Initialize liquidity.
    Program log: B8JScqoor6EMsKj6XwLnZheft9qtzz8zVw6V4Vq3kDiC
    Program log: 11111111111111111111111111111111
    Program log: Panicked at: 'called `Result::unwrap()` on an `Err` value: InvalidAccountData'``` with the logs being the key and owner of the account to unpack, respectively
You'd have to use your own node to make calls like that
Ehh...do we have some method to fix  it
Definitely
hey, when i use this to query all SPL accounts, I got 502: Time out. 
https://gist.github.com/cz-theng/d921b7f8d7ef5c7da98034afef1112f7
is it too many results?
Thanks for the help! Upgrading to 1.49 and installing the solana CLI got this working  as expected
sure, so writes to the same account will be forced to execute serially.  At most one tx per entry but as an easier estimate say once per tick.  There's 64 ticks per slot.  ~2.5 slots a second.  So maybe ~160 TPS-ish
<@!546131690951802890> - `cargo test-bpf` is installed as a part of the solana cli toolsuite
definitely will upgrade, i'm on 1.45.2
``` ‚úò ÓÇ∞ ~/Development/audius-poc-contract ÓÇ∞ ÓÇ† master ‚óè ÓÇ∞ solana --version
zsh: command not found: solana```
interesting, i see the following - i should probably install that cli manually?
<@!546131690951802890> - but you should upgrade rust to 1.49
ah, ok.   How about:
```
$ solana --version
solana-cli 1.5.5 (src:10e12d14; feat:1043916741)
```
<@445425471027544095> hi, could u help with answer on this
``` ~/Development/audius-poc-contract ÓÇ∞ ÓÇ† master ‚óè ÓÇ∞ cargo --version
cargo 1.45.1 (f242df6ed 2020-07-22)
 ~/Development/audius-poc-contract ÓÇ∞ ÓÇ† master ‚óè ÓÇ∞ cargo test-bpf --version
error: no such subcommand: `test-bpf`
 ‚úò ÓÇ∞ ~/Development/audius-poc-contract ÓÇ∞ ÓÇ† master ‚óè ÓÇ∞```
from the root of the above repo when i execute the same steps I see the following:
*command
interesting, i'm not able to invoke the second ommand
<@!546131690951802890> - I'm not able to reproduce here.  My toolchain details:
```
$ cargo --version
cargo 1.49.0 (d00d64df9 2020-12-05)
$ cargo test-bpf --version
solana-cargo-test-bpf 1.5.5
```
ah, I think I see how this happened.  lemme dig for a moment
so the problem is that the solana-stake-program crate uses language features not in 1.39, so that crate simply won't compile currently with rust 1.39
ah i see, should I downgrade my local installation to Rust 1.39?
<@!546131690951802890> - I think you'd probably running into the fact that our BPF toolchain is currently on Rust 1.39, so newer language features aren't available yet.  It's on <@!453347985628200960>'s list to upgrade the toolchain
hi everyone! i had a quick question - while trying to run the test-bpf command specified in the Cargo.toml in this repo (https://github.com/ysavchenko/audius-poc-contract) i'm hitting an error around 'unstable library feature option_zip ' at `solana-stake-program-1.5.5/src/stake_state.rs:1329:14` , is this error known or something obvious i am missing?
You could run your own private RPC node
What is the most reliable and / or lowest latency way to peer to the solana network?

To give a bit of context: we are currently planning the operation of a liquidation bot for a distributed margin trading protocol. This bot will observe all accounts created by a certain and program and a pricing-oracles (we are working with chain-link) to determine, when to liquidate an account. It therefore needs to have the lowest possible latency to operate as efficiently as possible and will be frequently executing transactions on the chain, similar to the serum dex crank.
What is the maximum of tps in case of transaction update same account address
Hi there everyone! Can anyone point me any documentation that can help me transition my ERC20 token to Solana and anything regarding bridging between Solana x Ethereum? (thanks <@!585868308419444749>)
<@!167896053868265473> you'll probably have better luck with app development questions in this channel.  The engineering channels are more for core infrastructure development
<@!149990576572334080> rust has libs for u256 and natively supports u128


///////////////////////////////////////////////////////////////////////////////////////////////

