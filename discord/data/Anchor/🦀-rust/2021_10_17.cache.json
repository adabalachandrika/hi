{
    "total_results": 59,
    "messages": [
        [
            {
                "id": "899326576645271593",
                "type": 0,
                "content": "I just added two custom `types`",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T16:02:44.552000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899326396936118312",
                "type": 0,
                "content": "",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [
                    {
                        "id": "899326396730593361",
                        "filename": "idl-modified.json",
                        "size": 3109,
                        "url": "https://cdn.discordapp.com/attachments/889584618372734977/899326396730593361/idl-modified.json",
                        "proxy_url": "https://media.discordapp.net/attachments/889584618372734977/899326396730593361/idl-modified.json",
                        "content_type": "application/json; charset=utf-8"
                    }
                ],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T16:02:01.706000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899326393907830836",
                "type": 19,
                "content": "If I was not clear, see the difference between the IDL that was resulting in error and the modified one",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [
                    {
                        "id": "899326393949777970",
                        "filename": "idl-by-anchor.json",
                        "size": 2370,
                        "url": "https://cdn.discordapp.com/attachments/889584618372734977/899326393949777970/idl-by-anchor.json",
                        "proxy_url": "https://media.discordapp.net/attachments/889584618372734977/899326393949777970/idl-by-anchor.json",
                        "content_type": "application/json; charset=utf-8"
                    }
                ],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T16:02:00.984000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "899324875607519273"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "899326008786845727",
                "type": 0,
                "content": "This was write by hand. If the resulting objects are actually usable (I will test it), it would be interesting to have Anchor to \"convert\" BTreeMap and HashMap to Vec automatically by writing this to the IDL file.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T16:00:29.164000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899325402303053855",
                "type": 0,
                "content": "This was sufficient to get ride of the error at IDL-read time. Don't know if this won't crash in the case I actually use the type later (but I am not expecting to use it)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:58:04.567000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899325060802830396",
                "type": 0,
                "content": "So, by defining these two types I am just saying to the coder that BTreeMap<Outcome,Pubkey> is actually a Vec",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:56:43.147000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899324875607519273",
                "type": 0,
                "content": "```json\n    {\n       \"name\": \"BTreeMap<Outcome,Pubkey>\",\n       \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n             {\n                \"name\": \"values\",\n                \"type\": {\n                   \"vec\": {\n                      \"defined\": \"<Outcome,Pubkey>\"\n                   }\n                }\n             }\n          ]\n       }\n    },\n    {\n      \"name\": \"<Outcome,Pubkey>\",\n       \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n             {\n                \"name\": \"outcome\",\n                \"type\": {\n                   \"defined\": \"Outcome\"\n                }\n             },\n             {\n                \"name\": \"pubkey\",\n                \"type\": \"publicKey\"\n             }\n          ]\n       }\n    }\n```",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:55:58.993000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899324493238009916",
                "type": 0,
                "content": "Well, I was able to get ride of the error by adding these 2 types to the IDL:",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:54:27.829000+00:00",
                "edited_timestamp": "2021-10-17T15:54:57.158000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899323341654097921",
                "type": 0,
                "content": "Don't know if it will do it",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:49:53.270000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899323308007379004",
                "type": 0,
                "content": "Thank you. I am trying something with IDL types (define that \"BTreeMap<X,Z>\" is a vec xD)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:49:45.248000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899322921531637841",
                "type": 0,
                "content": "Running anchor build will then give you the idl.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:48:13.105000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899322880335183953",
                "type": 0,
                "content": "^ the way I generated this btw, was adding a dummy `#[account]` to basic-1 (that's the project I use for scratch experiments)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:48:03.283000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899322762387161118",
                "type": 0,
                "content": "Thanks!!",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:47:35.162000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899322753570721793",
                "type": 0,
                "content": "Is that what you mean?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:47:33.060000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899322742460018708",
                "type": 0,
                "content": "The idl will look like\n```\n{\n  \"name\": \"stuff\",\n  \"type\": {\n    \"vec\": \"string\"\n  }\n}\n```",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:47:30.411000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899322689091690497",
                "type": 0,
                "content": "I know know, I just want to see the IDL json resulting from something like that \ud83d\ude05",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:47:17.687000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899322468039278652",
                "type": 19,
                "content": "Yeah, you can just do something like this:\n```.rs\n#[account]\npub struct Thing {\n  stuff: Vec<String>\n}\n```",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "637707515328725002",
                        "username": "jonasthecat",
                        "avatar": "913071ed965c493c6af00d53d06dec87",
                        "avatar_decoration": null,
                        "discriminator": "4803",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:46:24.984000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "899317055529037834"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "899320144336126064",
                "type": 0,
                "content": "You can also look at the tests to see how vector arguments are passed to the program.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "392918378559438848",
                    "username": "code_monkey",
                    "avatar": "9570f4c6ff1a3b25530e153ff12efc31",
                    "avatar_decoration": null,
                    "discriminator": "8627",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:37:10.970000+00:00",
                "edited_timestamp": "2021-10-17T15:37:18.945000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899320007438237728",
                "type": 0,
                "content": "You can generate the IDL of the multisig program by cloning and running `anchor build`.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "392918378559438848",
                    "username": "code_monkey",
                    "avatar": "9570f4c6ff1a3b25530e153ff12efc31",
                    "avatar_decoration": null,
                    "discriminator": "8627",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:36:38.331000+00:00",
                "edited_timestamp": "2021-10-17T15:36:50.064000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899319444621373500",
                "type": 0,
                "content": "Thank you, I think not. I was just asking for an example IDL definition (the JSON file), where the type Vec was used. My IDL doesn't have one and was just avoiding to have to write a dummy struct with a Vec and then build the IDL just to see it ahaha",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:34:24.145000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899318728888557579",
                "type": 0,
                "content": "I think you're trying to do something similar?\nhttps://github.com/project-serum/multisig/blob/master/programs/multisig/src/lib.rs#L26",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "392918378559438848",
                    "username": "code_monkey",
                    "avatar": "9570f4c6ff1a3b25530e153ff12efc31",
                    "avatar_decoration": null,
                    "discriminator": "8627",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/project-serum/multisig/blob/master/programs/multisig/src/lib.rs",
                        "title": "multisig/lib.rs at master \u00b7 project-serum/multisig",
                        "description": "Contribute to project-serum/multisig development by creating an account on GitHub.",
                        "color": 1975079,
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/7f7b73c99b6acb96814ff097a6e38d85f2f13ec46fece335cbb86648582604f2/project-serum/multisig",
                            "proxy_url": "https://images-ext-1.discordapp.net/external/aa3wC4cLF9ij5Mvm4SnudSWtqkHq9fmeeV6zqmPMZhg/https/opengraph.githubassets.com/7f7b73c99b6acb96814ff097a6e38d85f2f13ec46fece335cbb86648582604f2/project-serum/multisig",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:31:33.501000+00:00",
                "edited_timestamp": "2021-10-17T15:31:56.940000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899318395504308274",
                "type": 0,
                "content": "?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:30:14.016000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899318384561389580",
                "type": 0,
                "content": "Where's that? Is it \"vec\": \"aType\"",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:30:11.407000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899318245021061150",
                "type": 0,
                "content": "One of the arguments on init is a vector of public keys",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "392918378559438848",
                    "username": "code_monkey",
                    "avatar": "9570f4c6ff1a3b25530e153ff12efc31",
                    "avatar_decoration": null,
                    "discriminator": "8627",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:29:38.138000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899318182035214417",
                "type": 0,
                "content": "You can look at the multsig program that armani wrote",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "392918378559438848",
                    "username": "code_monkey",
                    "avatar": "9570f4c6ff1a3b25530e153ff12efc31",
                    "avatar_decoration": null,
                    "discriminator": "8627",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:29:23.121000+00:00",
                "edited_timestamp": "2021-10-17T15:29:46.134000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899317699501522974",
                "type": 0,
                "content": "From the idl code, I am guessing it's just \"vec\", but would be nice to confirm",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:27:28.076000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899317219832508477",
                "type": 0,
                "content": "I am trying something...",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:25:33.714000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899317170176139344",
                "type": 0,
                "content": "Currently only have array, but I would to see a Vec one",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [
                    {
                        "id": "899317167613440081",
                        "filename": "unknown.png",
                        "size": 2943,
                        "url": "https://cdn.discordapp.com/attachments/889584618372734977/899317167613440081/unknown.png",
                        "proxy_url": "https://media.discordapp.net/attachments/889584618372734977/899317167613440081/unknown.png",
                        "width": 273,
                        "height": 92,
                        "content_type": "image/png"
                    }
                ],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:25:21.875000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899317055529037834",
                "type": 0,
                "content": "<@!134416332509675520> do you have an idl.json at hand with a Vec? Just to see how it's defined",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "avatar_decoration": null,
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T15:24:54.541000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899307679628013658",
                "type": 0,
                "content": "The recommendation now is to just use an account with static seeds.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:47:39.152000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899307541178253313",
                "type": 0,
                "content": "Yeah, state is/was a way to have some static/global state for your program (under the hood it's an account with a `Pubkey::create_with_seed` address)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:47:06.143000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899307008375816196",
                "type": 0,
                "content": "So, basically just a normal Account?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:44:59.113000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899306925169192991",
                "type": 0,
                "content": "Don't know that 'state'. Is it to have some data associated with a program? To save state between program calls?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:44:39.275000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899306069287911525",
                "type": 19,
                "content": "I think a `StateCoder` is for the ~~now-decremented~~ lol, now-deprecated `#[state]` feature",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "637707515328725002",
                        "username": "jonasthecat",
                        "avatar": "913071ed965c493c6af00d53d06dec87",
                        "avatar_decoration": null,
                        "discriminator": "4803",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:41:15.217000+00:00",
                "edited_timestamp": "2021-10-17T15:12:21.519000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "899305116207816744"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "899305116207816744",
                "type": 0,
                "content": "What's a `StateCoder`?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:37:27.985000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899304122732400650",
                "type": 0,
                "content": "This is the stack trace. Basically, it starts on the worspace proxy, then Program constructor, then Coder constructor, then AccountsCoder constructor",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [
                    {
                        "id": "899304120924659772",
                        "filename": "unknown.png",
                        "size": 85526,
                        "url": "https://cdn.discordapp.com/attachments/889584618372734977/899304120924659772/unknown.png",
                        "proxy_url": "https://media.discordapp.net/attachments/889584618372734977/899304120924659772/unknown.png",
                        "width": 842,
                        "height": 312,
                        "content_type": "image/png"
                    }
                ],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:33:31.122000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899301870558916628",
                "type": 0,
                "content": "I'll see if I can do it",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:24:34.162000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899301716405653535",
                "type": 0,
                "content": "Think your solution (which I sufficient for me) is probably easier to implement that these custom encoder/decoders",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:23:57.409000+00:00",
                "edited_timestamp": "2021-10-17T14:24:04.003000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899301317045002300",
                "type": 0,
                "content": "Alternatively, Anchor could allow custom decoder/encoder for particular account struct. Don't know exactly how. On the on-chain side, it would normally serialize the data with Borsh, and on the JS client it would either use the decoder to get a JS object from the account data or the encoder to convert a given object to the serialized representation (e.g., for passing an object as instruction data)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:22:22.194000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899300556789657652",
                "type": 0,
                "content": "Lazily would solve the problem in my case, because I am not planing to use the type",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:19:20.935000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899300554050785351",
                "type": 0,
                "content": "Right, got it.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:19:20.282000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899300451470675968",
                "type": 0,
                "content": "I don't even call any instruction or something",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [
                    {
                        "id": "899300448735985744",
                        "filename": "unknown.png",
                        "size": 3483,
                        "url": "https://cdn.discordapp.com/attachments/889584618372734977/899300448735985744/unknown.png",
                        "proxy_url": "https://media.discordapp.net/attachments/889584618372734977/899300448735985744/unknown.png",
                        "width": 312,
                        "height": 25,
                        "content_type": "image/png"
                    }
                ],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:18:55.825000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899300351465885776",
                "type": 0,
                "content": "Yes, it's only at IDL read time. It just fails on this line:",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:18:31.982000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899300096682893352",
                "type": 0,
                "content": "Actually, yeah, when do you get these errors? At idl-read time? I guess anchor could use the idl lazily or something (but maybe that's also super confusing if you don't get some idl errors until you actually use them :/)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:17:31.237000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899299655601487922",
                "type": 0,
                "content": "Ye, it's for reading convenience, got it",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:15:46.075000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899299531013881877",
                "type": 19,
                "content": "Mm, not 100% sure but I think this is because you can use anchor to fetch nicely deserialized account structs too, e.g. `await program.account.myAccountType(somePubkey)`",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "637707515328725002",
                        "username": "jonasthecat",
                        "avatar": "913071ed965c493c6af00d53d06dec87",
                        "avatar_decoration": null,
                        "discriminator": "4803",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:15:16.371000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "899299049306464277"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "899299049306464277",
                "type": 0,
                "content": "Actually, think that all my instruction data are very simple data types. Only my accounts data use more complex types, but I don't need them on the JS side to still be able to call the program, right? For accounts, I just need the pubkey or keypair. EDIT: By default, Anchor seems to force a JS twin for every Rust account struct, don't know exatcly why.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:13:21.523000+00:00",
                "edited_timestamp": "2021-10-17T14:14:48.513000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899297847554482287",
                "type": 0,
                "content": "Yea, had already thought about that. It's an option. Nonetheless, is it possible to set Anchor to ignore a particular account struct on JS side?  I don't really need this account struct/type on JS, none of my instruction calls require it as instruction data (only as account, but for that I only need the pubkey or keypair, not the object itself)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T14:08:35.003000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899104092398444606",
                "type": 0,
                "content": "So at the end of the day it's basically using a simple serialization strategy (an array/vec of kv pairs) under the hood and then converting those kv pairs into an actual fancy BTreeMap.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T01:18:40.174000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899103782917537792",
                "type": 0,
                "content": "For example, I was curious how Borsh serializes BTreeMaps, and it looks like it does something super straighforward: 4 bytes for the number of key-value pairs, then the k-v pairs themselves, one after another. [Edit: in other words, an array/vec of kv pairs]",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T01:17:26.388000+00:00",
                "edited_timestamp": "2021-10-17T01:21:07.444000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899103547516391454",
                "type": 19,
                "content": "Hmm. My guess is that in practice your best bet is to just stick to simple composite types in your Accounts struct, and then convert them into fancier types as necessary, within the program.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "637707515328725002",
                        "username": "jonasthecat",
                        "avatar": "913071ed965c493c6af00d53d06dec87",
                        "avatar_decoration": null,
                        "discriminator": "4803",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T01:16:30.264000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "899095356153933875"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "899095356153933875",
                "type": 0,
                "content": "Well, it seems that wasm_bindgen is itself somewhat limited on the types it can export to JS. In particular, it cannot directly export most of the std::collections data structures (including BTreeMap). Nonetheless, it is possible to pass arbitrary data between Rust and JS using Serde, as described here https://rustwasm.github.io/wasm-bindgen/reference/arbitrary-data-with-serde.html.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-17T00:43:57.291000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899052004553420810",
                "type": 19,
                "content": "Maybe someone else will have a more experienced opinion. Let's see. Anyway, thanks a lot for the attention!",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "avatar_decoration": null,
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-16T21:51:41.464000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "899048919818977351"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "899051495608156160",
                "type": 0,
                "content": "I was just developing some dapp using the solana library but then I was continuously validating the account signatures etc. in a procedural way, while that was something that should be done in a declarative way. That's why I shift to Anchor, which allowed me to reduce lot of the code boilerplate. But now I am facing this issue, which I don't exactly know whether is my fault or Anchor's. But anyway I would prefer to spend some time solving this correctly before proceed with dapp development",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-16T21:49:40.122000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899049961713467453",
                "type": 0,
                "content": "I am very newbie here on Anchor (and solana actually) but I have been digging into the code around the IDL and it's seems to be designed in a way that's not much scalable. But I might be wrong, so I think it would be interesting to listen the opinion of the people that developed it (maybe armani ferrante?)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-16T21:43:34.413000+00:00",
                "edited_timestamp": "2021-10-16T21:55:57.356000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899048919818977351",
                "type": 19,
                "content": "Ha, I was thinking the same thing\u2014I'm not a specialist either though, but it does seem like a neat idea",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "637707515328725002",
                        "username": "jonasthecat",
                        "avatar": "913071ed965c493c6af00d53d06dec87",
                        "avatar_decoration": null,
                        "discriminator": "4803",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-16T21:39:26.006000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "899048646878826576"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "899048646878826576",
                "type": 0,
                "content": "Hopefully I am just being noob and there is a easy solution to use a BTreeMap in an account struct. But if I am not, what would you think about using wasm_bindgen to generate the data types on the JS side instead of the IDL? (I am not a specialist on any of these, is just an idea)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-16T21:38:20.932000+00:00",
                "edited_timestamp": "2021-10-16T21:39:15.530000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "899048233140105216",
                "type": 19,
                "content": "^ just replying to say that I'm thinking about this, not sure yet what your best option is though",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "avatar_decoration": null,
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "637707515328725002",
                        "username": "jonasthecat",
                        "avatar": "913071ed965c493c6af00d53d06dec87",
                        "avatar_decoration": null,
                        "discriminator": "4803",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-16T21:36:42.289000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "899047808244539423"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "899047808244539423",
                "type": 0,
                "content": "The IDL is somewhat limited to a small set of rust data types (it's not ready for BTreeMap, for example).  What should I do when designed my account structs using some data type that's not compatible with the IDL? For example, BTreeMap is such a generic struct that I am sure that someone else  already faced the same problem. What's the solution in this situation? Redesign my account structs to use another data type? I would rather anchor.workspace ignore the accounts structs that are IDL incompatible and/or allow me to specify a custom encoder/decoder between the borsh representation and javascript object. Maybe this is possible but I don't know how (if it is please tell me how). I love the automatic (de)serialization, signature validation, etc. that Anchor offers on the on-chain side by declaratively defining the instruction accounts, but the IDL thing seems very limited and incapable of scaling (to any data type).",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "637707515328725002",
                    "username": "jonasthecat",
                    "avatar": "913071ed965c493c6af00d53d06dec87",
                    "avatar_decoration": null,
                    "discriminator": "4803",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-10-16T21:35:00.986000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ]
    ],
    "analytics_id": "5ed86c01bdfe4a288900803ca35cab83"
}