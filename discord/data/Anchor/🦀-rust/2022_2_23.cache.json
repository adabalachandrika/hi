{
    "total_results": 19,
    "messages": [
        [
            {
                "id": "946091456093884486",
                "type": 19,
                "content": "The way those numbers line up on 'fee' implies something is shifted on deserialization. `0xf4 01 00 00` => 500 and `0x00 00 00 f4` => 4093640704. The tickSpacing seems odd though.",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "653649801086500914",
                    "username": "SchwarzBi3r",
                    "avatar": "7ae13041dfcdec569907ce3b42d858d1",
                    "discriminator": "9697",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "679936424971468859",
                        "username": "0xHaddock",
                        "avatar": "2988978494e386a5debdd6b7699954ec",
                        "discriminator": "9993",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T17:09:40.662000+00:00",
                "edited_timestamp": "2022-02-23T17:09:54.600000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "945991664659472416"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "946039759589998703",
                "type": 0,
                "content": "https://doc.rust-lang.org/1.8.0/book/references-and-borrowing.html",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "295862671155396609",
                    "username": "Sushant",
                    "avatar": null,
                    "discriminator": "8681",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T13:44:15.255000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "946039640224333985",
                "type": 0,
                "content": "Rust : )",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "295862671155396609",
                    "username": "Sushant",
                    "avatar": null,
                    "discriminator": "8681",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T13:43:46.796000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "946039178200756275",
                "type": 0,
                "content": "but this does not \n\"let vault_transfer = CpiContext::new_with_signer(token_program.to_account_info(), Transfer{\n        from : vault_account.to_account_info(),\n        to : taker_token_account_x.to_account_info(),\n        authority : vault_account.to_account_info(),\n    }, &[&[b\"escrow\",&[escrow.vault_bump]]]);\"",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "445019022338031618",
                    "username": "aaraN",
                    "avatar": "d629786f19bee49e084593d5705df36b",
                    "discriminator": "5789",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T13:41:56.641000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "946039081681428510",
                "type": 0,
                "content": "for instance this works \n\" \n    let signer_seeds : &[&[&[u8]]] = &[&[b\"escrow\",&[escrow.vault_bump]]];\n\nlet vault_transfer = CpiContext::new_with_signer(token_program.to_account_info(), Transfer{\n        from : vault_account.to_account_info(),\n        to : taker_token_account_x.to_account_info(),\n        authority : vault_account.to_account_info(),\n    }, signer_seeds);\"",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "445019022338031618",
                    "username": "aaraN",
                    "avatar": "d629786f19bee49e084593d5705df36b",
                    "discriminator": "5789",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T13:41:33.629000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "946038902198788147",
                "type": 0,
                "content": "anyone figured out that when i pass a bump directly to \"CpiContext::new_with_signer\" it complains about temporary value being dropped but if i create local variable where i give  a type hint and create the signer seeds myself and then pass the signer seeds to cpi context it works, what witchcraft is this ?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "445019022338031618",
                    "username": "aaraN",
                    "avatar": "d629786f19bee49e084593d5705df36b",
                    "discriminator": "5789",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T13:40:50.837000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "945991664659472416",
                "type": 0,
                "content": "My account loader gives incorrect values on JS side after the v0.22 upgrade. The rust function looks like this-\n\n```rs\n    pub fn enable_fee_amount(\n        ctx: Context<EnableFeeAmount>,\n        fee_state_bump: u8,\n        fee: u32,\n        tick_spacing: u16,\n    ) -> Result<()> {\n        let mut fee_state = ctx.accounts.fee_state.load_init()?;\n        fee_state.bump = fee_state_bump;\n        fee_state.fee = fee;\n        fee_state.tick_spacing = tick_spacing;\n\n        msg!(\"fee state {:?}\", fee_state);\n        Ok(())\n    }\n```\n\nThe ctx looks like this-\n```rs\n#[derive(Accounts)]\n#[instruction(fee_state_bump: u8, fee: u32, tick_spacing: u16)]\npub struct EnableFeeAmount<'info> {\n    /// Valid protocol owner\n    #[account(mut, address = factory_state.load()?.owner)]\n    pub owner: Signer<'info>,\n\n    /// Factory state stores the protocol owner address\n    #[account(mut)]\n    pub factory_state: AccountLoader<'info, FactoryState>,\n\n    /// Initialize an account to store new fee tier and tick spacing\n    /// Fees are paid by owner\n    #[account(\n        init,\n        seeds = [FEE_SEED.as_bytes(), &fee.to_be_bytes()],\n        bump,\n        payer = owner,\n        space = 8 + size_of::<FeeState>()\n    )]\n    pub fee_state: AccountLoader<'info, FeeState>,\n\n    /// To create a new program account\n    pub system_program: Program<'info, System>,\n}\n```\n\nThis gives `fee state FeeState { bump: 254, fee: 500, tick_spacing: 10 }` in rust logs, JS side shows `fee state { bump: 254, fee: 4093640704, tickSpacing: 1 }`. What could be wrong?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "679936424971468859",
                    "username": "0xHaddock",
                    "avatar": "2988978494e386a5debdd6b7699954ec",
                    "discriminator": "9993",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T10:33:08.530000+00:00",
                "edited_timestamp": "2022-02-23T10:34:54.293000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "945988943105650738",
                "type": 0,
                "content": "Hmm yea",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "679936424971468859",
                    "username": "0xHaddock",
                    "avatar": "2988978494e386a5debdd6b7699954ec",
                    "discriminator": "9993",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T10:22:19.661000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "945988061118996491",
                "type": 19,
                "content": "you still need to check that its the ATA if you care about that",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "679936424971468859",
                        "username": "0xHaddock",
                        "avatar": "2988978494e386a5debdd6b7699954ec",
                        "discriminator": "9993",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T10:18:49.379000+00:00",
                "edited_timestamp": "2022-02-23T10:18:58.417000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "945987472284868639"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "945987472284868639",
                "type": 19,
                "content": "Fanatid mentioned this in #1416. Should I still make a new one?\n\nAnyways, I found a workaround\n\n```rs\nconstraint = vault_0.mint == pool_state.load()?.token_0,\nconstraint = vault_0.owner == pool_state.key(),\n```",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "679936424971468859",
                    "username": "0xHaddock",
                    "avatar": "2988978494e386a5debdd6b7699954ec",
                    "discriminator": "9993",
                    "public_flags": 0
                },
                "attachments": [
                    {
                        "id": "945987471584403456",
                        "filename": "unknown.png",
                        "size": 86506,
                        "url": "https://cdn.discordapp.com/attachments/889584618372734977/945987471584403456/unknown.png",
                        "proxy_url": "https://media.discordapp.net/attachments/889584618372734977/945987471584403456/unknown.png",
                        "width": 841,
                        "height": 496,
                        "content_type": "image/png"
                    }
                ],
                "embeds": [],
                "mentions": [
                    {
                        "id": "347689664855015424",
                        "username": "paulx",
                        "avatar": "f0f52417776819a379ec501b16d461c1",
                        "discriminator": "9059",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T10:16:28.990000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "945958360581283861"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "945958360581283861",
                "type": 19,
                "content": "mind filing an issue?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "679936424971468859",
                        "username": "0xHaddock",
                        "avatar": "2988978494e386a5debdd6b7699954ec",
                        "discriminator": "9993",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T08:20:48.219000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "945944940586872842"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "945944940586872842",
                "type": 0,
                "content": "`associated_token::mint` breaks after v0.21.0 upgrade. It requires an account type now, and disallows pubkeys. How to fix?\n\n```rs\n    #[account(\n        mut,\n        associated_token::mint = pool_state.load()?.token_0,\n        associated_token::authority = pool_state,\n    )]\n    pub vault_0: Box<Account<'info, TokenAccount>>,\n```\n\nError\n```\nthe method `key` exists for struct `anchor_lang::prelude::Pubkey`, but its trait bounds were not satisfied\nthe following trait bounds were not satisfied:\n`anchor_lang::prelude::Pubkey: AsRef<anchor_lang::prelude::AccountInfo<'_>>`\nwhich is required by `anchor_lang::prelude::Pubkey: anchor_lang::Key`rustcE0599\n```\n\n This seems related to https://github.com/project-serum/anchor/issues/1416#issuecomment-1047478037",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "679936424971468859",
                    "username": "0xHaddock",
                    "avatar": "2988978494e386a5debdd6b7699954ec",
                    "discriminator": "9993",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/project-serum/anchor/issues/1416",
                        "title": "Implement Key for Pubkey  \u00b7 Issue #1416 \u00b7 project-serum/anchor",
                        "description": "https://github.com/project-serum/anchor/pull/1127/files#diff-c30312f654589dc8120c3ca5d75db6816b7825627c10c7c4b485215991bd54e7L237 removed the implementation.",
                        "color": 1975079,
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/414267b8df1af9b36ef5dd89747f1a44171408e459de4c1a19271b8aa4c08b9e/project-serum/anchor/issues/1416",
                            "proxy_url": "https://images-ext-2.discordapp.net/external/erCWjgpG_-o6BvzN8S_RIQo22cQLkIehuWM28JSEHQs/https/opengraph.githubassets.com/414267b8df1af9b36ef5dd89747f1a44171408e459de4c1a19271b8aa4c08b9e/project-serum/anchor/issues/1416",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T07:27:28.643000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "945915022138306651",
                "type": 19,
                "content": "friendly bump here \ud83d\ude42 happy to provide more context if needed",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "430802284742574101",
                    "username": "Mark Antony",
                    "avatar": "b1831778b027788bd79a1ae82fc90e79",
                    "discriminator": "2393",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-23T05:28:35.529000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "945787966150836244"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "945826897936404480",
                "type": 19,
                "content": "Nice, cool demo!",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "653649801086500914",
                        "username": "SchwarzBi3r",
                        "avatar": "7ae13041dfcdec569907ce3b42d858d1",
                        "discriminator": "9697",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-22T23:38:25.082000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "945826198485893170"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "945826198485893170",
                "type": 19,
                "content": "The bump is just a single `u8` added to the seeds you pick to create the PDA. findProgramAddress first tries 255 for the bump, then if the result is on the curve (meaning the address it created could have a private key), then it decrements the bump and tries again, and keeps trying until it finds an address that's \"off the curve\". Anytime you generate a public address, there's a 50/50 chance it will lie on the curve, so usually most bumps are 255 (~50%), then 254 (~25%) and so on.\n\nYou can see it in action here - https://codesandbox.io/s/findprogramaddress-distribution-et07bv",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "653649801086500914",
                    "username": "SchwarzBi3r",
                    "avatar": "7ae13041dfcdec569907ce3b42d858d1",
                    "discriminator": "9697",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://codesandbox.io/s/findprogramaddress-distribution-et07bv",
                        "title": "findProgramAddress-distribution - CodeSandbox",
                        "description": "findProgramAddress-distribution by schwarzbi3r using @solana/web3.js, nes.css, react, react-dom, react-scripts",
                        "reference_id": "945826198485893170",
                        "author": {
                            "name": "schwarzbi3r",
                            "url": "https://codesandbox.io/u/schwarzbi3r"
                        },
                        "provider": {
                            "name": "CodeSandbox",
                            "url": "https://codesandbox.io/"
                        },
                        "thumbnail": {
                            "url": "https://codesandbox.io/api/v1/sandboxes/et07bv/screenshot.png",
                            "proxy_url": "https://images-ext-1.discordapp.net/external/IpAJTAOsgijopf64jiIBRNvJmWOAeG552K6PCyEpNY4/https/codesandbox.io/api/v1/sandboxes/et07bv/screenshot.png",
                            "width": 1200,
                            "height": 630
                        }
                    }
                ],
                "mentions": [
                    {
                        "id": "371810607403630603",
                        "username": "Gugg",
                        "avatar": null,
                        "discriminator": "9321",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-22T23:35:38.320000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "945480739091279894"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "945788260494495755",
                "type": 0,
                "content": "context for initially the user_redeemable account\n```\n#[derive(Accounts)]\npub struct InitUserRedeemableTokenAccount<'info> {\n    // User Accounts\n    #[account(mut)]\n    pub user_authority: Signer<'info>,\n    #[account(\n        init,\n        token::mint = redeemable_mint,\n        token::authority = user_authority,\n        seeds = [USER_REDEEMABLE_SEED.as_bytes(),\n            vault.vault_name.as_ref().strip(),\n            user_authority.key().as_ref()],\n        bump,\n        payer = user_authority\n    )]\n    pub user_redeemable: Box<Account<'info, TokenAccount>>,\n    // vault Accounts\n    #[account(seeds = [vault.vault_name.as_ref().strip()],\n        bump = vault.bumps.vault)]\n    pub vault: Box<Account<'info, Vault>>,\n    #[account(seeds = [VAULT_AUTHORITY_SEED.as_bytes(), vault.vault_name.as_ref().strip()],\n        bump = vault.bumps.vault_authority)]\n    pub vault_authority: AccountInfo<'info>,\n    #[account(seeds = [REDEEMABLE_MINT_SEED.as_bytes(), vault.vault_name.as_ref().strip()],\n        bump = vault.bumps.redeemable_mint)]\n    pub redeemable_mint: Box<Account<'info, Mint>>,\n    // Programs and Sysvars\n    pub system_program: Program<'info, System>,\n    pub token_program: Program<'info, Token>,\n    pub rent: Sysvar<'info, Rent>,\n}\n```",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "430802284742574101",
                    "username": "Mark Antony",
                    "avatar": "b1831778b027788bd79a1ae82fc90e79",
                    "discriminator": "2393",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-22T21:04:53.198000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "945788153078358098",
                "type": 0,
                "content": "logic where error happens\n```\n        // Send rent back to user if account is empty\n        ctx.accounts.user_redeemable.reload()?;\n        if ctx.accounts.user_redeemable.amount == 0 {\n            token::close_account(ctx.accounts.into_close_account_context(signer))?;\n        }\n\n        Ok(())\n    }\n```",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "430802284742574101",
                    "username": "Mark Antony",
                    "avatar": "b1831778b027788bd79a1ae82fc90e79",
                    "discriminator": "2393",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-22T21:04:27.588000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "945787966150836244",
                "type": 0,
                "content": "i'm getting an error that the owner does not match when trying to close an account, any ideas what I'm doing wrong?",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "430802284742574101",
                    "username": "Mark Antony",
                    "avatar": "b1831778b027788bd79a1ae82fc90e79",
                    "discriminator": "2393",
                    "public_flags": 0
                },
                "attachments": [
                    {
                        "id": "945787966004027422",
                        "filename": "message.txt",
                        "size": 2969,
                        "url": "https://cdn.discordapp.com/attachments/889584618372734977/945787966004027422/message.txt",
                        "proxy_url": "https://media.discordapp.net/attachments/889584618372734977/945787966004027422/message.txt",
                        "content_type": "text/plain; charset=utf-8"
                    }
                ],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-22T21:03:43.021000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "945781525801238589",
                "type": 19,
                "content": "You need to pass those public keys in from the client as accounts (not possible in solana to dynamically turn a pubkey into an AccountInfo within your program\u2014you have to have the client specify those addresses as accounts, like how you pass in baseAccount and signer, etc.)",
                "channel_id": "889584618372734977",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "205796791004692480",
                        "username": "whoami333",
                        "avatar": "e623c63263639cd8975a5de031e20a9f",
                        "discriminator": "4958",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-02-22T20:38:07.522000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889584618372734977",
                    "guild_id": "889577356681945098",
                    "message_id": "945712402270412850"
                },
                "hit": true
            }
        ]
    ],
    "analytics_id": "3de45b4c63ce42254edd55d53906f500"
}