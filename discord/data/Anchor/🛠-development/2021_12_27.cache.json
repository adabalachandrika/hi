{
    "total_results": 115,
    "messages": [
        [
            {
                "id": "925078142685700127",
                "type": 19,
                "content": "in that case I'd do TS for both (coz it's internal - if it was a cli you'd actually be shipping to other devs then I'd consider rust)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "368075764010319872",
                        "username": "F\u00e9lix",
                        "avatar": "c27b4df41546fb32c6d15c555592dcff",
                        "discriminator": "5351",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T17:30:16.337000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "925041724684894268"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "925071431165935666",
                "type": 0,
                "content": "Most likely cause of this line\n```\nconst myProgram: anchor.Program = anchor.workspace.MyProgramName;\n```\ncausing the mocha tests to stop executing? I'm not sure where to start looking for the bug here",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "694353963121901680",
                    "username": "UnsupervisedLearner",
                    "avatar": "a06748d5cf12546a4df247bef86e0e2a",
                    "discriminator": "4148",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T17:03:36.186000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "925071417962274816",
                "type": 0,
                "content": "has anyone successfully gotten a Ledger working with an Anchor program without using an existing wallet like Phantom?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "265256084556480513",
                    "username": "billyjacoby",
                    "avatar": "38981002ba4ce00cfe91bd85afb51a61",
                    "discriminator": "7369",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T17:03:33.038000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "925065642841874452",
                "type": 19,
                "content": "Thanks! Im writng test on typescritp, but will consider switching to rust.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "426731456996442127",
                    "username": "banannn",
                    "avatar": "b31af831fce03a8ab4680ed121a4a342",
                    "discriminator": "2292",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "915682383905316864",
                        "username": "man0s",
                        "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                        "discriminator": "8230",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T16:40:36.142000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "925038890694352936"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "925050279035015230",
                "type": 0,
                "content": "if not is there just a way to interface with the Swap API and get transactions to manually sign and send?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "265256084556480513",
                    "username": "billyjacoby",
                    "avatar": "38981002ba4ce00cfe91bd85afb51a61",
                    "discriminator": "7369",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T15:39:33.125000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "925050207102697522",
                "type": 0,
                "content": "im trying to figure out how i can perform swaps with a Ledger using javascript, and it seems that using serum's swap API will be easiest. but I need to pass in an Anchor Provider to do that, and i'm not sure I can create one with a ledger device.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "265256084556480513",
                    "username": "billyjacoby",
                    "avatar": "38981002ba4ce00cfe91bd85afb51a61",
                    "discriminator": "7369",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T15:39:15.975000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "925049990244626452",
                "type": 0,
                "content": "hey guys, is there any way to setup an anchor provider with a ledger device?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "265256084556480513",
                    "username": "billyjacoby",
                    "avatar": "38981002ba4ce00cfe91bd85afb51a61",
                    "discriminator": "7369",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T15:38:24.272000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "925041724684894268",
                "type": 19,
                "content": "Our program has 2 sets of instructions: one to be called from the webpage, and another from the maintainer's computer. This program can be written in Rust without issue: the question is about the boilerplate I have to write. I'm not sure about what anchor generates",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "368075764010319872",
                    "username": "F\u00e9lix",
                    "avatar": "c27b4df41546fb32c6d15c555592dcff",
                    "discriminator": "5351",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "707604162673639504",
                        "username": "ilmoi",
                        "avatar": "f0814434562dc7752375131b7ab1b1ab",
                        "discriminator": "5651",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T15:05:33.609000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924998336774287410"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "925038890694352936",
                "type": 19,
                "content": "If you write your tests in Rust (and specifically if you use the ProgramTest struct) you can use this: https://github.com/solana-labs/solana/blob/master/program-test/src/lib.rs#L1014\nand examples:\n- https://github.com/solana-labs/solana/blob/77861e2d40e69b74adfa2fea9b1f54269c1d4c7a/program-test/tests/sysvar.rs#L40\n- https://github.com/solana-labs/solana/blob/1adf255e3acecdb5f2f43d36e065bf071d496e3b/program-test/tests/warp.rs#L69\n\nIf I remember correctly the jumps might be finicky (not accurate), but it might be good enough for your goal",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "915682383905316864",
                    "username": "man0s",
                    "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                    "discriminator": "8230",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "426731456996442127",
                        "username": "banannn",
                        "avatar": "b31af831fce03a8ab4680ed121a4a342",
                        "discriminator": "2292",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T14:54:17.933000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924995487260614696"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924999081032564758",
                "type": 19,
                "content": "btw for anyone googling (discording?) this error in the future - the problem ended up being premature account deserialization at the caller program level.\n\nwhat I did was:\n- take an Account<'info, Whatever> at parent level\n- then do #[account(init)] at child level\n- the problem is of course the account doesn't exist when the parent tried to deserialize it into Whatever\n\nthe solution ended up being replacing Account<'info Whatever> with AccountInfo<'info>",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T12:16:06.570000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924972964326289449"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924998394429186049",
                "type": 0,
                "content": "in terms of actual libs - I don't even know what libs are used in TS for arg parsing:D maybe oen of these? https://openbase.com/categories/js/best-nodejs-cli-arguments-libraries",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T12:13:22.871000+00:00",
                "edited_timestamp": "2021-12-27T12:18:50.940000+00:00",
                "flags": 4,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924998336774287410",
                "type": 0,
                "content": "but most people aren't writing CLIs - they're writing front-ends that need sdks, hence the TS choice",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T12:13:09.125000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924998197368197150",
                "type": 19,
                "content": "if I was writing a pure CLI with no expectation of it being used in the front end, I would hands down opt for rust",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "368075764010319872",
                        "username": "F\u00e9lix",
                        "avatar": "c27b4df41546fb32c6d15c555592dcff",
                        "discriminator": "5351",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T12:12:35.888000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924993803092361236"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924995487260614696",
                "type": 0,
                "content": "Hi, Im looking for any convenient way of testing time-dependent programs (like vesting, staking).\nI wonder if there is any way to manipulate cluster time in the test environment. Currently i am using sleep function, as seen in example programs, but dont really like it.\nIs there any better way of testing time dependent logic?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "426731456996442127",
                    "username": "banannn",
                    "avatar": "b31af831fce03a8ab4680ed121a4a342",
                    "discriminator": "2292",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T12:01:49.748000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924993803092361236",
                "type": 0,
                "content": "I've used less TS than Rust, so that may explain why, but I think that TS is less ergonomic. For example, the lack of derive make me afraid that a CLI is harder to write",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "368075764010319872",
                    "username": "F\u00e9lix",
                    "avatar": "c27b4df41546fb32c6d15c555592dcff",
                    "discriminator": "5351",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T11:55:08.211000+00:00",
                "edited_timestamp": "2021-12-27T11:55:10.750000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924992954446274560",
                "type": 19,
                "content": "Thanks! Is there a tool in TS that looks like Rust's clap? What do people usually use?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "368075764010319872",
                    "username": "F\u00e9lix",
                    "avatar": "c27b4df41546fb32c6d15c555592dcff",
                    "discriminator": "5351",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "707604162673639504",
                        "username": "ilmoi",
                        "avatar": "f0814434562dc7752375131b7ab1b1ab",
                        "discriminator": "5651",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T11:51:45.878000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924991616106778674"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924991616106778674",
                "type": 19,
                "content": "you can still do it in rust, but most people prefer ts as it integrates with front ends",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "368075764010319872",
                        "username": "F\u00e9lix",
                        "avatar": "c27b4df41546fb32c6d15c555592dcff",
                        "discriminator": "5351",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T11:46:26.793000+00:00",
                "edited_timestamp": "2021-12-27T11:46:28.533000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924990313410469978"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924990313410469978",
                "type": 0,
                "content": "I'm saying that because the client is generated in TS",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "368075764010319872",
                    "username": "F\u00e9lix",
                    "avatar": "c27b4df41546fb32c6d15c555592dcff",
                    "discriminator": "5351",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T11:41:16.206000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924990162100957216",
                "type": 0,
                "content": "IIUC, I am supposed to write the CLI for my program in typescript?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "368075764010319872",
                    "username": "F\u00e9lix",
                    "avatar": "c27b4df41546fb32c6d15c555592dcff",
                    "discriminator": "5351",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T11:40:40.131000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924989579881242654",
                "type": 19,
                "content": "yep",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "787242451240222732",
                        "username": "RustySol",
                        "avatar": "7e7e0cfb8ae81e6c2f7b4d5190d05f4b",
                        "discriminator": "2351",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T11:38:21.319000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924977548746706966"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924977548746706966",
                "type": 19,
                "content": "are they aligned with the output from `anchor keys list`?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "787242451240222732",
                    "username": "RustySol",
                    "avatar": "7e7e0cfb8ae81e6c2f7b4d5190d05f4b",
                    "discriminator": "2351",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "707604162673639504",
                        "username": "ilmoi",
                        "avatar": "f0814434562dc7752375131b7ab1b1ab",
                        "discriminator": "5651",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T10:50:32.873000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924972964326289449"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924972964326289449",
                "type": 0,
                "content": "I wonder if this might be related to the CPI call - because I keep checking the accounts (printing them out before they go into the RPC call) - and they look good to me.\n\nI have 2 programs (both mine), one calling another. Works ok on localnet with `anchor test` but somehow fails on devnet. Tried re-deploying multiple times.\n\nThe IDs in `lib.rs` match the IDs I'm using in the front end. All other instructions work ok, but this one keeps throwing:\n```\nindex.browser.esm.js?64b9:7051 Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7 \n    Program 3bUquvD6S8EQbqGnMLhK9DXA1Pxn4D3mUtPE67rfJXZd invoke [1]\n    Program log: Custom program error: 0xa7\n    Program 3bUquvD6S8EQbqGnMLhK9DXA1Pxn4D3mUtPE67rfJXZd consumed 16459 of 200000 compute units\n    Program 3bUquvD6S8EQbqGnMLhK9DXA1Pxn4D3mUtPE67rfJXZd failed: custom program error: 0xa7\n```\nand then\n```\nError: 167: The given account is not owned by the executing program\n```\n\nAny thoughts anyone?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T10:32:19.862000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924971636074119178",
                "type": 0,
                "content": "fml",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T10:27:03.182000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924971594282041354",
                "type": 0,
                "content": "typical black magic fuckery: when you run test - everything works dandy, when you run from front-end - Error 167",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T10:26:53.218000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924971433120124948",
                "type": 0,
                "content": "lol at this point I'm so desperate I will do that",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T10:26:14.794000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924968147700822056",
                "type": 19,
                "content": "I just keep commenting them until there's no errors <:kek:889992816296595456>",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "194280119710253068",
                    "username": "MinatoTW",
                    "avatar": "558459eb7c113a70373eb53b0218d687",
                    "discriminator": "9698",
                    "public_flags": 64
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "707604162673639504",
                        "username": "ilmoi",
                        "avatar": "f0814434562dc7752375131b7ab1b1ab",
                        "discriminator": "5651",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T10:13:11.489000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924963359655342120"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924963359655342120",
                "type": 0,
                "content": "when you get a `Error: 167: The given account is not owned by the executing program` - is there a way to find out WHICH account specifically?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T09:54:09.930000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924962497977532446",
                "type": 19,
                "content": "Thanks, my issue was fixed by applying the `{ ... }` brackets to make sure `RefMut`  from `load_mut` gets dropped after assigning the needed state values, and making sure `to_account_info` is called outside of this scope.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "725857328150085702",
                    "username": "hawk",
                    "avatar": "8e9a5fe90daca9beb908d171c78967a2",
                    "discriminator": "5203",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T09:50:44.490000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924385129760174141"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924946007639359488",
                "type": 19,
                "content": "Thank you very much, alan. You are mysterious. It works well. but I adjusted package versions. here is my example\n```\nanchor-lang = \"0.17.0\"\nanchor-spl = {version = \"0.17.0\"}\nspl-token = {version = \"3.2.0\", features = [\"no-entrypoint\"]}\nsolana-program = \"=1.7.11\"\nchainlink = { git = \"https://github.com/smartcontractkit/chainlink-solana\", package = \"flux-aggregator\", features = [\n    \"no-entrypoint\",\n] }\n```\nI want to use solana-program = \"=1.8.0\". How can I do?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "916187801115037728",
                    "username": "blockchaincrazy95",
                    "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                    "discriminator": "7316",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T08:45:12.887000+00:00",
                "edited_timestamp": "2021-12-27T08:45:22.410000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924836504193368085"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924915114459693087",
                "type": 0,
                "content": "I trimmed down the code to this just to get something working:\n\n```\n  const connection = new anchor.web3.Connection(\n    \"https://api.devnet.solana.com/\",\n    \"recent\"\n  );\n\n  // Address of the deployed program.\n  const programId = new anchor.web3.PublicKey(\n    \"5nqz7wPBrZiUC3GSdFyNBdNmuwp1hGa6fWnC9mgLkVWp\"\n  );\n\n  connection.onLogs(programId, (event, _) => {\n    console.log(\"Event was received\")\n  });\n```\n\nThe TX is here on devnet: https://explorer.solana.com/tx/4ckQ88KQAFmhA7RGR8ZrQhpXUJkqWkxEpYc5Hd5brzNBbgyD88sJTLTky1QMnQAQoJq92eYkAGpPGyKmBuK8hWTW?cluster=devnet\n\nI can see the program log right here:\n\n```\n> Program log: A0jnii+LZmicPvmaGXVdejHFroUpbCsTh8tngSMOjFdf5zSvsIYQAhGSjFS9IL9ByxRZiGvckUykqQX/HA4D2GNokUWczhU1yF/JYQAAAADSX8lhAAAAAA==\n```\n\nWhy isn't the code listening the event properly?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "596550081763868684",
                    "username": "gary frensler",
                    "avatar": "ca0fc9eb07c6a18763476e74c7ac59ae",
                    "discriminator": "8668",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "link",
                        "url": "https://explorer.solana.com/tx/4ckQ88KQAFmhA7RGR8ZrQhpXUJkqWkxEpYc5Hd5brzNBbgyD88sJTLTky1QMnQAQoJq92eYkAGpPGyKmBuK8hWTW?cluster=devnet",
                        "title": "Explorer | Solana",
                        "description": "Look up transactions and accounts on the various Solana clusters"
                    }
                ],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T06:42:27.379000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924891733333012522",
                "type": 0,
                "content": "After reading through the Anchor discord, it seems that there's no way to query for historical state, and querying current state is difficult unless you have an account address or you want to use `getProgramAccounts`. Is there anything out there we can use for reads (given that `addEventListener` uses websockets and it commonly drops events?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "596550081763868684",
                    "username": "gary frensler",
                    "avatar": "ca0fc9eb07c6a18763476e74c7ac59ae",
                    "discriminator": "8668",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T05:09:32.884000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924887491067117608",
                "type": 0,
                "content": "Found the Anchor tests for event listeners and I seem to be doing the exact same thing (except they use the `program` variable and don't create an event manager, unfortunately even using the `program` variable doesn't work for me \ud83d\ude2d).  Not sure why my setup isn't working. Maybe I created the `program` variable wrong in my new code? https://github.com/project-serum/anchor/blob/master/tests/events/tests/events.js#L25-L56",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "596550081763868684",
                    "username": "gary frensler",
                    "avatar": "ca0fc9eb07c6a18763476e74c7ac59ae",
                    "discriminator": "8668",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/project-serum/anchor/blob/master/tests/events/tests/events.js",
                        "title": "anchor/events.js at master \u00b7 project-serum/anchor",
                        "description": "\u2693 Solana Sealevel Framework. Contribute to project-serum/anchor development by creating an account on GitHub.",
                        "color": 1975079,
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/7b7753e86385b30b75c28cac8351c9f29961f527689c1b1f7a415f6f5c5fbb7e/project-serum/anchor",
                            "proxy_url": "https://images-ext-1.discordapp.net/external/0R0RbE_Uz-Tn-tcNYivK6sCHWXuUIuXuNdE8YnzSaK8/https/opengraph.githubassets.com/7b7753e86385b30b75c28cac8351c9f29961f527689c1b1f7a415f6f5c5fbb7e/project-serum/anchor",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T04:52:41.449000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924884970315599923",
                "type": 0,
                "content": "What is the best library method for listening to Solana events emitted with Anchor?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "596550081763868684",
                    "username": "gary frensler",
                    "avatar": "ca0fc9eb07c6a18763476e74c7ac59ae",
                    "discriminator": "8668",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T04:42:40.455000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924883357580542023",
                "type": 0,
                "content": "Does anyone know how to get event listeners on separate processes working? Wrote some code like the following in my tests:\n\n```\n  const idl = JSON.parse(\n    require(\"fs\").readFileSync(\"./solana-programs/rust/target/idl/nft_candy_machine.json\", \"utf8\")\n  );\n  const myWallet = anchor.web3.Keypair.fromSecretKey(\n    new Uint8Array(\n      JSON.parse(require(\"fs\").readFileSync(process.env.MY_WALLET, \"utf8\"))\n    )\n  );\n\n  const connection = new anchor.web3.Connection(\n    \"https://api.devnet.solana.com/\",\n    \"recent\"\n  );\n\n  const programId = new anchor.web3.PublicKey(\n    \"<program ID>\"\n  );\n\n  const walletWrapper = new anchor.Wallet(myWallet);\n\n  const provider = new anchor.Provider(connection, walletWrapper, {\n    preflightCommitment: \"recent\",\n  });\n  const program = new anchor.Program(idl, programId, provider);\n\n  const eventManager: anchor.EventManager = new anchor.EventManager(\n    programId,\n    provider,\n    program.coder,\n  );\n\n  eventManager.addEventListener('UserSubscriptionCreatedEvent', (event, _) => {\n    console.log(\"Event listener called\");\n  });\n\n  const subscription = await createUserSubscription(\n    program,\n    provider,\n    showroomMetadata,\n    user,\n    pricingModel,\n    startSubscriptionTimestamp,\n    subscriptionDuration,\n  );\n```\n\nAnd the log statement prints successfully when I run my tests. However, if I run the event listener in a separate process with the same exact code (omitted `eventManager` variable setup for simplicity), and then I run the above tests, the event listener from the separate process never logs:\n\n```\nasync function runListener(): Promise<void> {\n  eventManager.addEventListener('UserSubscriptionCreatedEvent', (event, _) => {\n    console.log(\"received an event: \", event);\n  });\n\n  while (true) {\n  }\n}\n\nrunListener()\n.then(() => {\n  console.log(\"Finished\")\n})\n.catch((error) => {\n  console.log(\"Error:\", error)\n});\n```\n\nI'm on devnet so it's a publicly available network. I'm using the same program ID. Can anyone help?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "596550081763868684",
                    "username": "gary frensler",
                    "avatar": "ca0fc9eb07c6a18763476e74c7ac59ae",
                    "discriminator": "8668",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T04:36:15.949000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924862460161310721",
                "type": 0,
                "content": "I guess that means the only way to transfer is by directly mutating the `lamports` field on the account info.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T03:13:13.616000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924862346852200478",
                "type": 0,
                "content": "TIL you can't transfer lamports from an account with data via the system program transfer instruction https://github.com/solana-labs/solana/blob/66fa8f966753b732facbbd66ff5b549be796ae3c/runtime/src/system_instruction_processor.rs#L190",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T03:12:46.601000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924837278948392971",
                "type": 0,
                "content": "You then just add some dummy features to your Cargo.toml: https://github.com/smartcontractkit/chainlink-solana/blob/develop/contracts/programs/access-controller/Cargo.toml#L15",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:33:09.947000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924837188166877275",
                "type": 19,
                "content": "Speaking of chainlink though, this is a good example of the conditional compilation approach I mentioned: https://github.com/smartcontractkit/chainlink-solana/blob/develop/contracts/programs/access-controller/src/lib.rs#L8",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:32:48.303000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924831737224237089"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924836744636018688",
                "type": 0,
                "content": "Not actually sure what people are supposed to do when they need to depend on a version of `program-solana`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:31:02.557000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924836628646752297",
                "type": 0,
                "content": "This unfortunately doesn't work though with more recent versions of anchor, since they depend on a newer version of `solana-program` :/",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:30:34.903000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924836504193368085",
                "type": 19,
                "content": "I haven't used chainlink before, but I think they must have changed some package names (the old demo program still works because of its Cargo.lock file I think). I think you'll have to do\n```.toml\nchainlink = { git = \"https://github.com/smartcontractkit/chainlink-solana\", package = \"flux-aggregator\", features = [\n    \"no-entrypoint\",\n] }\n```",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "916187801115037728",
                        "username": "blockchaincrazy95",
                        "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                        "discriminator": "7316",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:30:05.231000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924825797385150465"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924833746182619146",
                "type": 19,
                "content": "Yeah, won't be able to pay for anything with your program id, but if you really wanted to sign for it you'd have to load the `target/deploy` keypair into your tests (not totally sure you want to do that though). But at the end of the day, signing for your program id would be the same as signing for any keypair address (gotta go find the private key).",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:19:07.670000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924829275184574474"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924831907177447496",
                "type": 19,
                "content": "respected alan,  help me with chainlink solution",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "916187801115037728",
                    "username": "blockchaincrazy95",
                    "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                    "discriminator": "7316",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:11:49.217000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924831785613938698"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924831785613938698",
                "type": 19,
                "content": "Stop being rude or you're going to get banned.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "916187801115037728",
                        "username": "blockchaincrazy95",
                        "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                        "discriminator": "7316",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:11:20.234000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924831648590233630"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924831737224237089",
                "type": 0,
                "content": "damn that's a good point actually, thanks",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:11:08.697000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924831607859331122",
                "type": 0,
                "content": "lmao",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:10:37.854000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924831595981062166",
                "type": 0,
                "content": "am i actually out here getting bullied about my solana skillz by some rando online",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:10:35.022000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924831395233284096",
                "type": 0,
                "content": "bro, I understand the concept of PDAs",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:09:47.160000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924831265776078888",
                "type": 0,
                "content": "you misunderstood concept of solana structure and solana program. before programming, read documents first",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "916187801115037728",
                    "username": "blockchaincrazy95",
                    "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                    "discriminator": "7316",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:09:16.295000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924830375891578931",
                "type": 0,
                "content": "What should be in `signers: [???],` to make my program sign the transaction?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:05:44.130000+00:00",
                "edited_timestamp": "2021-12-27T01:06:02.994000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924829694417854494",
                "type": 0,
                "content": "I will move to <#889702325231427584> after",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:03:01.654000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924829275184574474",
                "type": 0,
                "content": "```\nconst tx = await program.rpc.initialize(\n      {\n        accounts: {\n          payer: program.programId, \n        },\n        signers: [???],\n      });\n```",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:01:21.701000+00:00",
                "edited_timestamp": "2021-12-27T01:01:31.018000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924828991444090911",
                "type": 0,
                "content": "but i mean in the javascript test",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T01:00:14.052000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924828777115160676",
                "type": 19,
                "content": "oh, it's a kind of beginner question. use PDA.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "916187801115037728",
                    "username": "blockchaincrazy95",
                    "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                    "discriminator": "7316",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T00:59:22.952000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924828009331064832"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924828009331064832",
                "type": 0,
                "content": "In my javascript tests, how do I make my program the signer of a transaction?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T00:56:19.898000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924825870537981952",
                "type": 0,
                "content": "what's the matter?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "916187801115037728",
                    "username": "blockchaincrazy95",
                    "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                    "discriminator": "7316",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T00:47:49.970000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924825797385150465",
                "type": 0,
                "content": "```\n[dependencies]\nanchor-lang = \"0.18.2\"\nanchor-spl = {version = \"0.18.2\"}\nspl-token = {version = \"3.2.0\", features = [\"no-entrypoint\"]}\nsolana-program = \"=1.8.0\"\nborsh = \"0.9.1\"\nborsh-derive = \"0.9.1\"\nchainlink = { git = \"https://github.com/smartcontractkit/chainlink-solana\", package = \"chainlink-solana\", features = [\"no-entrypoint\"] }\n```",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "916187801115037728",
                    "username": "blockchaincrazy95",
                    "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                    "discriminator": "7316",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T00:47:32.529000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924825705206919188",
                "type": 0,
                "content": "in my programs/chainlink-pro/cargo.toml file",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "916187801115037728",
                    "username": "blockchaincrazy95",
                    "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                    "discriminator": "7316",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T00:47:10.552000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924825216293687316",
                "type": 0,
                "content": "hello, i am having trouble with solana chainlink\ni successfully built solana-chainlink-demo project on github\nand i did the same in anchor project\nwhen i run anchor build, error occurs\n```Failed to obtain package metadata: Error during execution of `cargo metadata`:     Updating git repository `https://github.com/smartcontractkit/chainlink-solana`\nerror: no matching package named `chainlink-solana` found\nlocation searched: https://github.com/smartcontractkit/chainlink-solana```\nhelp me",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "916187801115037728",
                    "username": "blockchaincrazy95",
                    "avatar": "09eb27778b7201fec890e3a3e2c35d7d",
                    "discriminator": "7316",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-27T00:45:13.986000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924812339616833607",
                "type": 0,
                "content": "so i'll do that",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:54:03.947000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924812331773472768",
                "type": 0,
                "content": "Hmm ok, sounds like the first solution you said is the most simple & straightforward",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:54:02.077000+00:00",
                "edited_timestamp": "2021-12-26T23:54:06.174000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924812052055343135",
                "type": 0,
                "content": "Or scrap the dynamic approach and just use conditional compilation \ud83d\ude1b",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:52:55.387000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924811995616804914",
                "type": 0,
                "content": "But yeah in general you just need to check that the signer's address is some address you're ok with",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:52:41.931000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924811916285730847",
                "type": 0,
                "content": "I will do the first thing you said then. Thank you!!",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:52:23.017000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924811889119219712",
                "type": 0,
                "content": "ah gotcha",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:52:16.540000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924811847448813588",
                "type": 19,
                "content": "You can figure out the upgrade authority for the program, but it's more involved than that",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:52:06.605000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924811543835725864"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924811543835725864",
                "type": 0,
                "content": "like in the context, have `pub program: Program`\n\nAnd in the instruction, do `if signer.key() != program.owner { throw Error() } `",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:50:54.218000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924811397630660718",
                "type": 19,
                "content": "What do you mean by owner here?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:50:19.360000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924811341699637259"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924811346497916998",
                "type": 0,
                "content": "It's also possible to figure out the upgrade authority dynamically, by loading your program's account (can search the discord) but that's more involved",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:50:07.169000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924811341699637259",
                "type": 0,
                "content": "Also could I pass in a `Program` object and check its owner?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:50:06.025000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924811129073565777",
                "type": 0,
                "content": "But in general you'd just have to check that the Signer has the right address",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:49:15.331000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924811078259572736",
                "type": 0,
                "content": "You could also hardcode the address of the upgrade authority (I can't remember which address that is when you do a normal anchor deploy)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:49:03.216000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924810869320351824",
                "type": 19,
                "content": "One way would be to require the signer to be the program's own program_id (presumably only the owner of the program has access to that keypair)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:48:13.401000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924810544492449792"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924810544492449792",
                "type": 0,
                "content": "any idea <@!134416332509675520> ? \ud83e\udd14",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:46:55.956000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924808162371047464",
                "type": 0,
                "content": "Question: How can I check if the `Signer` of the program is the owner of it?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:37:28.014000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924800584257769512",
                "type": 0,
                "content": "That probably made no sense, but basically the idea is to create a new Account struct that stores the mint you want. Only the program owner can add the mint. That's how you gate people from putting in any mint.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:07:21.251000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924800529333383188",
                "type": 0,
                "content": "I want run some standard validation checks on every anchor call. \nthe authority in the program must match the caller/signer\naccounts must match recorded accounts in program\nam I supposed to use constraints or call the same checks in each call?\ni dont see something like entry point where i can gate and validate in 1 location?\nhow best to do this?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "883091208077992007",
                    "username": "xAdriel",
                    "avatar": null,
                    "discriminator": "6538",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:07:08.156000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924800390917140550",
                "type": 0,
                "content": "Ok I think this is a way around it:\n1. Create a new account struct that stores the mint... So like `pub struct ProgramMint { ... }`. \n2. Create an instruction that allows the program owner to instantiate a new `ProgramMint` with whatever mint they want. \n3. In your other instruction, check that the user passes in `ProgramMint`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T23:06:35.155000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924796271410167838",
                "type": 0,
                "content": "hmm I wonder how all the protocols limit their services to just one type of token",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:50:12.988000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924795543912337438",
                "type": 0,
                "content": "Haven't tried doing this with anchor though",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:47:19.539000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924795403218616371",
                "type": 19,
                "content": "I think it would probably be easier to use conditional compilation https://doc.rust-lang.org/cargo/reference/features.html (don't think solana exposes the cluster at runtime)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:46:45.995000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924794735418298378"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924794735418298378",
                "type": 0,
                "content": "I think I found a way around this, but it depends on this question:\n\nIs there a way to check if we're in devnet or mainnet from the smart contract itself?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:44:06.779000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924791153084219493",
                "type": 0,
                "content": "ahhh gotcha",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:29:52.684000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924790476224225280",
                "type": 0,
                "content": "I feel like it would be easier to just use a fake usdc mint/address in development, and then use the real one in production (not 100% sure the easiest way to do that logistically though, so might be wrong it's the easiest way)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:27:11.308000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924790293511938088",
                "type": 19,
                "content": "I don't think you can do that, at least not manually like that (creating an account requires signing for its address, and you presumably can't sign for the usdc mint's real address). You could clone the account from mainnet though",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:26:27.746000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924789643264802866"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924789875708932157",
                "type": 0,
                "content": "(reasoning: I want to create a replica of USDT mint to make sure my program checks if mint has `address = USDT`)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:24:48.134000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924789643264802866",
                "type": 0,
                "content": "`createMint` doesn't seem to let me do that",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:23:52.715000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924789622914023425",
                "type": 0,
                "content": "How do I create a mint at a certain address using the `spl-token` anchor library?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T22:23:47.863000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924772430491316264",
                "type": 0,
                "content": "gotcha, that makes sense. Life saver!",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T21:15:28.870000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924771998633173032",
                "type": 19,
                "content": "I actually prefer the approach you have there (there's no point using an associated token address if you already have a natural address to use)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T21:13:45.907000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924771602573443133"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924771602573443133",
                "type": 0,
                "content": "I feel like the cleanest version is to just store the vault at the associated token address though. Is it not normal for programs to store tokens at their own associated token addresses?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T21:12:11.479000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924771373073707049",
                "type": 0,
                "content": "```\n#[account(\n        init, \n        payer = payer,\n        seeds = [stablecoin_mint.key().as_ref()],\n        bump = mint_bump,\n        token::mint = stablecoin_mint,\n        token::authority = vault,\n)]\n  pub vault: Account<'info, TokenAccount>,\n```\nGotcha, so something like this?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T21:11:16.762000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924768634260324452",
                "type": 0,
                "content": "Then you can pull the same trick and have the vault (which will now live at one of your own program's PDAs) be its own authority, just like for the mint.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T21:00:23.778000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924768535970988112",
                "type": 0,
                "content": "One alternative is to not store the vault at an associated token address, but rather at another PDA derived from your own program (so use `token::mint` and `token::authority` rather than associated_token:: etc.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T21:00:00.344000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924768399937126441",
                "type": 19,
                "content": "The authority here just needs to be any address derived from your program (so, yeah, the mint would work but looks a little odd).",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:59:27.911000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924766336561856653"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924766336561856653",
                "type": 0,
                "content": "I could do `associated_token::authority = mint`, where `mint` is owned by the program, but that feels wrong",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:51:15.964000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924766270954553354",
                "type": 0,
                "content": "I just wanna do `associated_token::authority = id()` but I can't because it's not an `AccountInfo` object",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:51:00.322000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924766128025272320",
                "type": 0,
                "content": "```\n#[account(\n        init, \n        payer = payer,\n        associated_token::mint = usdt_mint,\n        associated_token::authority = ???,\n    )]\n    pub vault: Account<'info, TokenAccount>,\n```\nyeah but im not sure how to set `associated_token::authority` to the program here",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:50:26.245000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924763229236920411",
                "type": 0,
                "content": "All good, approach b) worked \ud83d\ude42",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:38:55.120000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924763203601330267",
                "type": 0,
                "content": "yeah i did that but `associated_token::mint` expects AccountInfo, and a module or ID != AccountInfo",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:38:49.008000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924762682089930842",
                "type": 19,
                "content": "from anchor try something like this https://github.com/project-serum/anchor/blob/master/spl/src/mint.rs",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "721030147871866881",
                    "username": "davidj",
                    "avatar": "bf6752dfe1faaa2f15c98ae66d60601d",
                    "discriminator": "2953",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:36:44.670000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924761435207245926"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924762356272218112",
                "type": 0,
                "content": "So I used approach b), which worked",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:35:26.989000+00:00",
                "edited_timestamp": "2021-12-26T20:36:15.890000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924761435207245926",
                "type": 0,
                "content": "`associated_token::mint = usdt::ID,`\n\nDoesn't seem to work... I think it is expecting `AccountInfo`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:31:47.390000+00:00",
                "edited_timestamp": "2021-12-26T20:34:35.120000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924760746829697074",
                "type": 0,
                "content": "oo i will try to make c) work, thanks \ud83d\ude42",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:29:03.268000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924760378724974593",
                "type": 19,
                "content": "2) I think jet protocol's jet-v1 program has a concise and easy to read example of how to use the PDA pattern you're describing. You can use the pattern in more granular ways instead of 1 PDA auth for whole program, but just giving an example: https://github.com/jet-lab/jet-v1/blob/master/programs/jet/src/instructions/init_market.rs",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "721030147871866881",
                    "username": "davidj",
                    "avatar": "bf6752dfe1faaa2f15c98ae66d60601d",
                    "discriminator": "2953",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:27:35.505000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924756376473972796"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924760108611821579",
                "type": 19,
                "content": "1. a) pass mint pubkey as arg to rpc handler, b) pass in mint account in accounts struct if you need it to read or write then grab pubkey for constraints, c) if it's a small preknown set of mint keys, then you could include them directly in the program similar to how you include your program key with declare_id.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "721030147871866881",
                    "username": "davidj",
                    "avatar": "bf6752dfe1faaa2f15c98ae66d60601d",
                    "discriminator": "2953",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:26:31.105000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924756376473972796"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924756376473972796",
                "type": 0,
                "content": "```\n#[account(\n        init, \n        payer = payer, \n        associated_token::mint = ???, \n        associated_token::authority = ???, \n)]\n    pub vault: Account<'info, TokenAccount>,\n```\n- How do I set `associated_token::mint` equal to a specific ID (e.g. USDT)?\n- How do I set `associated_token::authority` to the program itself? Do I need to use a PDA and pass in seeds and bump?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T20:11:41.294000+00:00",
                "edited_timestamp": "2021-12-26T20:16:27.521000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924745802356785243",
                "type": 0,
                "content": "yeah, the TokenAccount was created with `authority = mint`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T19:29:40.228000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924745127572946964",
                "type": 0,
                "content": "I'm not sure how token account was created, but if you assigned a pda that prog signs for program as the authority for token account during creation, then that pda is who should be used for constraint here",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "721030147871866881",
                    "username": "davidj",
                    "avatar": "bf6752dfe1faaa2f15c98ae66d60601d",
                    "discriminator": "2953",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T19:26:59.347000+00:00",
                "edited_timestamp": "2021-12-26T19:34:24.899000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924744778288091196",
                "type": 0,
                "content": "`mint` is located at a program PDA, and `authority = mint`, so authority is the program ? I think ?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T19:25:36.071000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924744696000032819",
                "type": 0,
                "content": "The authority should be the program itself",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T19:25:16.452000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924744470711377931",
                "type": 19,
                "content": "Should the authority be the user who owns the vault token account? Assuming yes, something like this should work `token::mint = mint, token::authority == user_signer`. so we confirm mint pubkey on vault TokenAccount is same as mint account passed in, and the authority on vault TokenAccount is same as user pubkey who is passed in as a signer account.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "721030147871866881",
                    "username": "davidj",
                    "avatar": "bf6752dfe1faaa2f15c98ae66d60601d",
                    "discriminator": "2953",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "912046857000194158",
                        "username": "yeetle",
                        "avatar": "12968c45dd881dcb7c1307fa84411926",
                        "discriminator": "2204",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T19:24:22.739000+00:00",
                "edited_timestamp": "2021-12-26T19:24:59.114000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "924740021821521990"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "924740021821521990",
                "type": 0,
                "content": "```\n#[account(  \n    mut,\n    seeds = [STABLECOIN.as_bytes()],  \n    bump = mint_bump,\n)]\n    pub mint: Account<'info, Mint>, \n\n#[account(\n    mut,\n    associated_token::mint = mint, \n    associated_token::authority = mint\n)]\n    pub vault: Account<'info, TokenAccount>,\n```\n\nIs this enough to make sure that `mint` and `vault` are owned by our program?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "912046857000194158",
                    "username": "yeetle",
                    "avatar": "12968c45dd881dcb7c1307fa84411926",
                    "discriminator": "2204",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T19:06:42.041000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924731232619741184",
                "type": 0,
                "content": "I actually don't know lol, I've also been meaning to read the program more carefully \ud83d\ude05",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T18:31:46.532000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "924730809292816425",
                "type": 0,
                "content": "That would be awesome, it basically sets transfer authority to a PDA right?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "194280119710253068",
                    "username": "MinatoTW",
                    "avatar": "558459eb7c113a70373eb53b0218d687",
                    "discriminator": "9698",
                    "public_flags": 64
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-26T18:30:05.603000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ]
    ],
    "analytics_id": "e0445f6995c8cc08fb3e4c4836866690"
}