{
    "total_results": 72,
    "messages": [
        [
            {
                "id": "920366210380619886",
                "type": 0,
                "content": "whenever I'm using `init_if_needed` - is there a good way to check within the handler whether the PDA actually had to be init'ed or existed before?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T17:26:44.132000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920346869580857344",
                "type": 19,
                "content": "makes sense, thank you for the clarification!",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "915682383905316864",
                        "username": "man0s",
                        "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                        "discriminator": "8230",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T16:09:52.926000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920344594842021938"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920345814352687104",
                "type": 0,
                "content": "Hi, I would like to build a smart contract which  store a list of data (like strings), but I would also like that my smart contract check if that data is not already stored. Currently I make an account to store each data added in the list, but I don't know how to list them (since multiple account could use the smart contract) in order to check if the string is not already anchored",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "307914484876312596",
                    "username": "blablabla (alf)",
                    "avatar": "d207fff641bccf733557c9dfcb5b32ad",
                    "discriminator": "7763",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T16:05:41.340000+00:00",
                "edited_timestamp": "2021-12-14T16:09:41.643000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920344594842021938",
                "type": 19,
                "content": "I think the Authority keypair would refer to the wallet of the payer here. You need SOL to deploy a program, which means you need to sign for the deployment (e.g. using a keypair to sign for it).\nYou also need an address where to deploy the program. You can specify your custom keypair to `solana program deploy` (via the `--program-id` option) if you already have keypair. If you don't, you can simply run `solana program deploy <PROGRAM>`, and a new keypair will be automatically generated and used.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "915682383905316864",
                    "username": "man0s",
                    "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                    "discriminator": "8230",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "290139937268039680",
                        "username": "monki boi",
                        "avatar": "aab71601aca211467bbda61d6399c930",
                        "discriminator": "8058",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T16:00:50.586000+00:00",
                "edited_timestamp": "2021-12-14T16:01:45.266000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920333985291325492"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920333998943768606",
                "type": 0,
                "content": "does this make sense",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:18:44.327000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920333985291325492",
                "type": 0,
                "content": "We need 2 keypairs in order to deploy:\n\nOur Program Authority keypair, and\nOur Program Keypair",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:18:41.072000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920333857843212328",
                "type": 0,
                "content": "https://github.com/DougAnderson444/solblog/#deploy-to-devnet",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/DougAnderson444/solblog/",
                        "title": "GitHub - DougAnderson444/solblog: A blog on Solana/Anchor with a Sv...",
                        "description": "A blog on Solana/Anchor with a Svelte Kit front end  - GitHub - DougAnderson444/solblog: A blog on Solana/Anchor with a Svelte Kit front end",
                        "color": 1975079,
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/75ecb4cc8e421afd4e7927c0ced75b2f0c40249b8e5849434a6e2362e710fe14/DougAnderson444/solblog",
                            "proxy_url": "https://images-ext-2.discordapp.net/external/JxraJmWyqMuhvAlcCUbONUCwQYZpwQXJcWqhiFOthMc/https/opengraph.githubassets.com/75ecb4cc8e421afd4e7927c0ced75b2f0c40249b8e5849434a6e2362e710fe14/DougAnderson444/solblog",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:18:10.686000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920333356238008372",
                "type": 0,
                "content": "one is `target/deploy/projname-keypair.json` other one is inside my client side code, probably got confused because I was following a youtube video and it was creating a separate script to deploy everything to devnet",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:16:11.094000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920333087253069824",
                "type": 0,
                "content": "Usually there's just one, in `target/deploy/probname-keypair.json`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:15:06.963000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920333031611461682",
                "type": 0,
                "content": "What are your two keypairs called?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:14:53.697000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920333010493136897",
                "type": 0,
                "content": "it should just be one keypair",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:14:48.662000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920332987126652989",
                "type": 0,
                "content": "but that makes way more sense",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:14:43.091000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920332858655125565",
                "type": 0,
                "content": "hmm how did I end up with 2 keypairs \ud83d\ude04",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:14:12.461000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920332519843459123",
                "type": 19,
                "content": "Aren't they the same keypair? \ud83e\udd14",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "290139937268039680",
                        "username": "monki boi",
                        "avatar": "aab71601aca211467bbda61d6399c930",
                        "discriminator": "8058",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T15:12:51.682000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920328999224365126"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920329166207979550",
                "type": 0,
                "content": "I understand the one for deploy is related to upgrading the program, but I'm confused what the keypair generated by anchor build is for in the life cycle of the program",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T14:59:32.113000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920328999224365126",
                "type": 0,
                "content": "can someone help me understand the conceptual difference between the keypair generated when running anchor build and the keypair used when running anchor deploy?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "290139937268039680",
                    "username": "monki boi",
                    "avatar": "aab71601aca211467bbda61d6399c930",
                    "discriminator": "8058",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T14:58:52.301000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920323828993900564",
                "type": 19,
                "content": "hmm thank you for your answer, that could be cool, but I don't see any date so I can't estimate when this might happen :/",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "307914484876312596",
                    "username": "blablabla (alf)",
                    "avatar": "d207fff641bccf733557c9dfcb5b32ad",
                    "discriminator": "7763",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "204426347764908033",
                        "username": "kevinaud",
                        "avatar": "3f81fe18b015bb59c7f5d8a238b61be1",
                        "discriminator": "7729",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T14:38:19.622000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920322594694115328"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920322594694115328",
                "type": 19,
                "content": "Not that I can find, The Graph is supposedly adding support for Solana though https://twitter.com/graphprotocol/status/1457739966457552901?lang=en",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "204426347764908033",
                    "username": "kevinaud",
                    "avatar": "3f81fe18b015bb59c7f5d8a238b61be1",
                    "discriminator": "7729",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "rich",
                        "url": "https://twitter.com/graphprotocol/status/1457739966457552901?lang=en",
                        "description": "As announced at @SolanaConf, The Graph's hosted service is integrating @solana. The integration, led by @streamingfastio, will use the Firehose, enabling faster indexing.\n\nWorking with @ProjectSerum & Solana devs, the ecosystem plans to improve the Solana development experience\ud83e\uddf5",
                        "color": 1942002,
                        "timestamp": "2021-11-08T16:01:06.159000+00:00",
                        "fields": [
                            {
                                "name": "Retweets",
                                "value": "407",
                                "inline": true
                            },
                            {
                                "name": "Likes",
                                "value": "1914",
                                "inline": true
                            }
                        ],
                        "reference_id": "920322594694115328",
                        "author": {
                            "name": "The Graph (@graphprotocol)",
                            "url": "https://twitter.com/graphprotocol",
                            "icon_url": "https://pbs.twimg.com/profile_images/1341100720943054848/C4RKAej-_bigger.jpg",
                            "proxy_icon_url": "https://images-ext-1.discordapp.net/external/a_yn_HRX_LQLbZotJEVX0bjz5inrYyrPkTtwIfJVHZg/https/pbs.twimg.com/profile_images/1341100720943054848/C4RKAej-_bigger.jpg"
                        },
                        "image": {
                            "url": "https://pbs.twimg.com/media/FDrpOx_XIAABHVr.jpg:large",
                            "proxy_url": "https://images-ext-1.discordapp.net/external/WqeqP494Cd3Qe_H5O1TvMJqwn7X8NbZB5aHqIkfLQY8/https/pbs.twimg.com/media/FDrpOx_XIAABHVr.jpg%3Alarge",
                            "width": 1920,
                            "height": 1080
                        },
                        "footer": {
                            "text": "Twitter",
                            "icon_url": "https://abs.twimg.com/icons/apple-touch-icon-192x192.png",
                            "proxy_icon_url": "https://images-ext-1.discordapp.net/external/bXJWV2Y_F3XSra_kEqIYXAAsI3m1meckfLhYuWzxIfI/https/abs.twimg.com/icons/apple-touch-icon-192x192.png"
                        }
                    }
                ],
                "mentions": [
                    {
                        "id": "307914484876312596",
                        "username": "blablabla (alf)",
                        "avatar": "d207fff641bccf733557c9dfcb5b32ad",
                        "discriminator": "7763",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T14:33:25.342000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920290241896665088"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920318909238902854",
                "type": 19,
                "content": "I got the same issue with Apple M1 Macbook pro.\nI eventually workaround the issue by restart the solana-test-validator with `--no-bpf-jit`,\nThe reason it that the BPF JIT has not been supported on arm64 yet.\nMore details in this link: https://github.com/solana-labs/solana/issues/18033#issuecomment-962718203",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "709797684613087252",
                    "username": "Kingter",
                    "avatar": "33039ba2d8dfd02aed3838a2490d1626",
                    "discriminator": "1193",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/solana-labs/solana/issues/18033",
                        "title": "Query: Deploying hello world to solana-test-validator on M1 fails \u00b7...",
                        "description": "Problem I&#39;m running Solana master with the example Hello World program and on OSX x86 things run as expected. I can deploy the hello world program to the test validator. However, when doing...",
                        "color": 1975079,
                        "reference_id": "920318909238902854",
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/8a85c2787a10bbd37cd57399a1df8d5898d303d9ef22f07ffec2f6d8d41f5714/solana-labs/solana/issues/18033",
                            "proxy_url": "https://images-ext-2.discordapp.net/external/gpn2lCvyGYXpgFJjmJ0x6zYB2YEXwZQFpPFree10HI0/https/opengraph.githubassets.com/8a85c2787a10bbd37cd57399a1df8d5898d303d9ef22f07ffec2f6d8d41f5714/solana-labs/solana/issues/18033",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [
                    {
                        "id": "605702048377470997",
                        "username": "Swaroop",
                        "avatar": "3538e624a97a8ce8c88540d5c388f91c",
                        "discriminator": "5340",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T14:18:46.661000+00:00",
                "edited_timestamp": "2021-12-14T14:21:42.181000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "919799371665670165"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920292231225692210",
                "type": 0,
                "content": "Is there any eligible way to increase the timestamp on test environment, I wrote the vesting program and want to test the release schedule so it would be great if I can increase the cluster time as the interval period",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "597977239992139796",
                    "username": "apool",
                    "avatar": "15500c8a21032cbda5df4b1dd5582d24",
                    "discriminator": "5470",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T12:32:46.127000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920291842539528232",
                "type": 0,
                "content": "How to mint NFT with image from rust smart contract ?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "219361461783363584",
                    "username": "V.",
                    "avatar": "2edba6f6cc76a2a35de6509d8ec57b33",
                    "discriminator": "1554",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T12:31:13.457000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920290241896665088",
                "type": 0,
                "content": "I have another question, is there any public or open-source indexer on solana ?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "307914484876312596",
                    "username": "blablabla (alf)",
                    "avatar": "d207fff641bccf733557c9dfcb5b32ad",
                    "discriminator": "7763",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T12:24:51.834000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920280462969143326",
                "type": 0,
                "content": "ah nice, this sounds super sensible, thanks a lot!",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "350632015852208140",
                    "username": "David | qPools",
                    "avatar": "19a8155e98df3f78d7a10548bc202b78",
                    "discriminator": "3335",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T11:46:00.356000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920265854669701190",
                "type": 19,
                "content": "I would track it outside of the target folder. Then you create a small bash script for deployment, that feeds the tracked dev private key to the deploy command's `program-id` option",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "915682383905316864",
                    "username": "man0s",
                    "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                    "discriminator": "8230",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "350632015852208140",
                        "username": "David | qPools",
                        "avatar": "19a8155e98df3f78d7a10548bc202b78",
                        "discriminator": "3335",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T10:47:57.466000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920257577340780574"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920265398258114580",
                "type": 19,
                "content": "the address/pubkey of the program is exclusively derived from the keypair used for deployment (you can check with `solana-keygen pubkey my-keypair.json`). A keypair gets automatically generated for you at deploy time unless you provide it yourself through the `solana program deploy`'s `--program-id` option.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "915682383905316864",
                    "username": "man0s",
                    "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                    "discriminator": "8230",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "350632015852208140",
                        "username": "David | qPools",
                        "avatar": "19a8155e98df3f78d7a10548bc202b78",
                        "discriminator": "3335",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T10:46:08.649000+00:00",
                "edited_timestamp": "2021-12-14T10:46:43.515000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920255588057874472"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920263095857844235",
                "type": 0,
                "content": "I will have to do some validation though I suppose since its possible that any clown could transfer a token to that pda, but other than that I think it will work. If anyone knows a more elegant way lemme know \ud83d\ude4f",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "689988071374061640",
                    "username": "AlphaPrime8 | \ud83c\udf51",
                    "avatar": "7defae5aa4c48eeccc7502bb2b8f68f3",
                    "discriminator": "4734",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T10:36:59.714000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920262861295583232",
                "type": 19,
                "content": "Sure but I wont know who the uses are apriori or their pubkeys. I have a good enough solution for this though, I am just using the same \"vault account\" (just a pda) for all users, so I can just get getTokenAccountsByOwner(vault_pda_account), and that will get me all staked nfts. Then I can lookup last owner of each of those to get the user pubkeys.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "689988071374061640",
                    "username": "AlphaPrime8 | \ud83c\udf51",
                    "avatar": "7defae5aa4c48eeccc7502bb2b8f68f3",
                    "discriminator": "4734",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "792440133483626497",
                        "username": "woody72",
                        "avatar": "468524dedff0b1835a892c112dab5190",
                        "discriminator": "5153",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T10:36:03.790000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920253448509874196"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920262148809195543",
                "type": 19,
                "content": "technically you can, but its not that easy I'd assume. just working without anchor is already a pin \ud83d\ude05",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "350632015852208140",
                    "username": "David | qPools",
                    "avatar": "19a8155e98df3f78d7a10548bc202b78",
                    "discriminator": "3335",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "307914484876312596",
                        "username": "blablabla (alf)",
                        "avatar": "d207fff641bccf733557c9dfcb5b32ad",
                        "discriminator": "7763",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T10:33:13.920000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920261179266433075"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920261179266433075",
                "type": 0,
                "content": "Hi ! I have a question of curiosity, is that possible to build a spl token without spl-token program ? Like can I code my own token in rust and deploy it ?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "307914484876312596",
                    "username": "blablabla (alf)",
                    "avatar": "d207fff641bccf733557c9dfcb5b32ad",
                    "discriminator": "7763",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T10:29:22.763000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920257577340780574",
                "type": 0,
                "content": "and when i copy a local keypair file, i guess I have to delete all `/target` folders (otherwise the build and keys are cached)?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "350632015852208140",
                    "username": "David | qPools",
                    "avatar": "19a8155e98df3f78d7a10548bc202b78",
                    "discriminator": "3335",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T10:15:03.997000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920255588057874472",
                "type": 19,
                "content": "hey guys, just checking; how are programId's determined actually? Is it based on the local keypair, or do other factors come into play as well",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "350632015852208140",
                    "username": "David | qPools",
                    "avatar": "19a8155e98df3f78d7a10548bc202b78",
                    "discriminator": "3335",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "915682383905316864",
                        "username": "man0s",
                        "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                        "discriminator": "8230",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T10:07:09.715000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "919987540587610183"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920253448509874196",
                "type": 19,
                "content": "maybe I miss some details, but I think you don't need to have a masterlist which tracks everything you can filter for example all nfts from a specific user by using getProgramAccounts(). Here you have a filter field where you can filter in the account data.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "792440133483626497",
                    "username": "woody72",
                    "avatar": "468524dedff0b1835a892c112dab5190",
                    "discriminator": "5153",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "689988071374061640",
                        "username": "AlphaPrime8 | \ud83c\udf51",
                        "avatar": "7defae5aa4c48eeccc7502bb2b8f68f3",
                        "discriminator": "4734",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T09:58:39.607000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "917755022589181952"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920238463985524746",
                "type": 19,
                "content": "`Property 'workspace' does not exist on type 'typeof import(\"/home/XXX/Solana/Project/node_modules/@project-serum/anchor/dist/cjs/index\")'`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "401799781271470092",
                    "username": "DoctorBlocks",
                    "avatar": "fa1b79ced9e75bbe7e497be3bcc9b282",
                    "discriminator": "2714",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T08:59:07.018000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920234377491922955"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920235002619387904",
                "type": 0,
                "content": "Folks does anybody know how to make sure the anchor errors (https://github.com/project-serum/anchor/blob/master/lang/src/error.rs) are also included in my IDL so that the client can decode them too?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "104313862496481280",
                    "username": "vova",
                    "avatar": "3b9bccd97c08c6d3013bc6393619f895",
                    "discriminator": "4412",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/project-serum/anchor/blob/master/lang/src/error.rs",
                        "title": "anchor/error.rs at master \u00b7 project-serum/anchor",
                        "description": "\u2693 Solana Sealevel Framework. Contribute to project-serum/anchor development by creating an account on GitHub.",
                        "color": 1975079,
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/c025c6f255c5a56935542e8182ff4c87124f6d0d06daf8052f6eb3a9a77b0c6c/project-serum/anchor",
                            "proxy_url": "https://images-ext-1.discordapp.net/external/gNT9xo5ZqZfgIPQ9NN9eDuKIxj_1urtyEyKGQfasKSM/https/opengraph.githubassets.com/c025c6f255c5a56935542e8182ff4c87124f6d0d06daf8052f6eb3a9a77b0c6c/project-serum/anchor",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T08:45:21.764000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920234377491922955",
                "type": 0,
                "content": "We just upgraded to anchor 0.19.0 and it seems no workspaces are being populated when loading the idl in tests.  Anyone else see this issue?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "401799781271470092",
                    "username": "DoctorBlocks",
                    "avatar": "fa1b79ced9e75bbe7e497be3bcc9b282",
                    "discriminator": "2714",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T08:42:52.722000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920222516356722738",
                "type": 19,
                "content": "another related question - when I factor out the `ErrorCode` enum into a separate library (shared by numerous programs in the project) - the errors stop printing correctly (eg I now get `custom error: 0x123` instead of the msg defined on it `x and y have gone wrong`.\n\nit's not the end of the world (you can still go lookup which error it is once you convert hex to `30x` code, but it makes it impossible to re-order errors in the enum (your tests start to break).\n\nany ideas if that's solvable at all?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T07:55:44.807000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920055568138399744"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920214770941038612",
                "type": 19,
                "content": "ok I see... that creates a problem then:\n\n- I have a foreign error type inside a library\n- I need to convert it to ProgramError, which also is a foreign type\n- I can't do impl From\n- the only thing that comes to mind is replacing ProgramError with a custom defined error type and doing impl there... but that feels too much overhead for such a simple problem\n- the other option is to start using map_err where no automatic conversion possible\n\nis there a simpler solution I'm missing?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T07:24:58.156000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920055568138399744"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920205552573882368",
                "type": 0,
                "content": "I'm getting the error `Error creating BaseAccount account: Error: Wrong input type for account \"user\" in the instruction accounts object for instruction \"startStuffOff\". Expected PublicKey or string.` and I don't know why. This is coming from a React frontend that's calling a deployed Solana program which I tested locally with Anchor and works.\n\nAnyone know what might be causing the error?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "437668267486740480",
                    "username": "bobtheminion",
                    "avatar": "ca498d9a4b11f1c7f528647f5dcb51bf",
                    "discriminator": "1208",
                    "public_flags": 0
                },
                "attachments": [
                    {
                        "id": "920205550770356254",
                        "filename": "71085d70-c9c9-4979-949b-bfec0ff65ab6.png",
                        "size": 361621,
                        "url": "https://cdn.discordapp.com/attachments/889577399308656662/920205550770356254/71085d70-c9c9-4979-949b-bfec0ff65ab6.png",
                        "proxy_url": "https://media.discordapp.net/attachments/889577399308656662/920205550770356254/71085d70-c9c9-4979-949b-bfec0ff65ab6.png",
                        "width": 630,
                        "height": 918,
                        "content_type": "image/png"
                    },
                    {
                        "id": "920205551001030733",
                        "filename": "230bec62-d16e-488b-b859-4b3a2547a3da.png",
                        "size": 206115,
                        "url": "https://cdn.discordapp.com/attachments/889577399308656662/920205551001030733/230bec62-d16e-488b-b859-4b3a2547a3da.png",
                        "proxy_url": "https://media.discordapp.net/attachments/889577399308656662/920205551001030733/230bec62-d16e-488b-b859-4b3a2547a3da.png",
                        "width": 748,
                        "height": 1228,
                        "content_type": "image/png"
                    }
                ],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T06:48:20.326000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920170025791422494",
                "type": 0,
                "content": "I need to verify that a user owns a specific NFT before performing an action. Would the following constraints work for verifying that?\n\n```\n    #[account(constraint=nft_token_account.key().eq(\n        &Pubkey::find_program_address(\n            &[\n                nft_owner.key().as_ref(),\n                spl_token::id().as_ref(),\n                mint.key().as_ref(),\n            ],\n            &anchor_spl::associated_token::ID,\n        ).0\n    ))]\n    nft_token_account: Account<'info, TokenAccount>,\n    mint: UncheckedAccount<'info>,\n```\n\nAlso, how can I verify the token mint account (currently using `UncheckedAccount`)? Is it a PDA as well?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "596550081763868684",
                    "username": "gary frensler",
                    "avatar": "ca0fc9eb07c6a18763476e74c7ac59ae",
                    "discriminator": "8668",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T04:27:10.081000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920164773071568928",
                "type": 0,
                "content": "https://github.com/metaplex-foundation/metaplex/blob/master/rust/nft-candy-machine/src/lib.rs#L156-L174",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "499334426828865547",
                    "username": "Dubbelosix",
                    "avatar": "2c3fc61653187f405d770f7bbfe7b174",
                    "discriminator": "2824",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T04:06:17.735000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920164764771037224",
                "type": 19,
                "content": "you can check the candymachine contract.. you use a CPI for spl-token-metadata",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "499334426828865547",
                    "username": "Dubbelosix",
                    "avatar": "2c3fc61653187f405d770f7bbfe7b174",
                    "discriminator": "2824",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "902199345103904858",
                        "username": "anhlt",
                        "avatar": null,
                        "discriminator": "1870",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T04:06:15.756000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920151195190960138"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920152195868028958",
                "type": 0,
                "content": "what is the meaning of this error msg? `A raw constraint was violated`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "597977239992139796",
                    "username": "apool",
                    "avatar": "15500c8a21032cbda5df4b1dd5582d24",
                    "discriminator": "5470",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T03:16:19.096000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920151195190960138",
                "type": 0,
                "content": "Hi All,\nHow can i create metadata account on solana from anchor?\nor Anyone have any references for it?\nthanks",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "902199345103904858",
                    "username": "anhlt",
                    "avatar": null,
                    "discriminator": "1870",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T03:12:20.516000+00:00",
                "edited_timestamp": "2021-12-14T03:13:02.833000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920128942206238750",
                "type": 0,
                "content": "https://github.com/project-serum/anchor/pull/705 added here",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T01:43:54.991000+00:00",
                "edited_timestamp": "2021-12-14T01:44:39.103000+00:00",
                "flags": 4,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920128607001661490",
                "type": 19,
                "content": "funny, that answers my question from an hour prior over here: https://discord.com/channels/889577356681945098/889702325231427584/920089061954289754",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "111233596173373440",
                    "username": "DanML",
                    "avatar": "b0e72a69e8487b30ff7117ccb3ff6a21",
                    "discriminator": "8094",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "831450660146642974",
                        "username": "Pikachoo",
                        "avatar": "3778d8c6025afe096468846a546f4bfe",
                        "discriminator": "4505",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T01:42:35.072000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920111190892498986"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920111440902357024",
                "type": 0,
                "content": "Yeah, thanks \ud83d\ude42 You know of any reason to use one or the other?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "203259322573127690",
                    "username": "VEWilliam",
                    "avatar": "5dcdde95e85e299eb07df11e96912b48",
                    "discriminator": "7840",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T00:34:22.355000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920111190892498986",
                "type": 0,
                "content": "this is the equivalent of #[account(signer)]",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T00:33:22.748000+00:00",
                "edited_timestamp": "2021-12-14T00:33:28.599000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920110616138633286",
                "type": 0,
                "content": "You mean that I don't need the  #[account(signer)] attribute if the Struct is of type Signer?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "203259322573127690",
                    "username": "VEWilliam",
                    "avatar": "5dcdde95e85e299eb07df11e96912b48",
                    "discriminator": "7840",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T00:31:05.716000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920110214764699688",
                "type": 19,
                "content": "What do you mean?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "203259322573127690",
                    "username": "VEWilliam",
                    "avatar": "5dcdde95e85e299eb07df11e96912b48",
                    "discriminator": "7840",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "831450660146642974",
                        "username": "Pikachoo",
                        "avatar": "3778d8c6025afe096468846a546f4bfe",
                        "discriminator": "4505",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T00:29:30.021000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920109928360845352"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920109957347704853",
                "type": 0,
                "content": "it will throw for you",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T00:28:28.648000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920109928360845352",
                "type": 19,
                "content": "`the_account: Signer<'info>`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "203259322573127690",
                        "username": "VEWilliam",
                        "avatar": "5dcdde95e85e299eb07df11e96912b48",
                        "discriminator": "7840",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T00:28:21.737000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920103319878402068"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920108008644706344",
                "type": 0,
                "content": "Anyone have any references to creating a sol token account for a program (that persists)?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "667387455116148766",
                    "username": "nice chute",
                    "avatar": "6b7a863e9caaf27b538377e7c857c4b8",
                    "discriminator": "0767",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T00:20:44.041000+00:00",
                "edited_timestamp": "2021-12-14T00:20:52.152000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920103319878402068",
                "type": 19,
                "content": "Out of curiosity, how would you do this?  #[account(signer)] on an Account and then just  compare that accounts pub key with a constant and throw and error if it does not match?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "203259322573127690",
                    "username": "VEWilliam",
                    "avatar": "5dcdde95e85e299eb07df11e96912b48",
                    "discriminator": "7840",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-14T00:02:06.152000+00:00",
                "edited_timestamp": "2021-12-14T00:02:23.114000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920088839282884658"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920088839282884658",
                "type": 19,
                "content": "Not directly no, but you can always require the client to pass an account with a known address + make the account sign.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "909840085577515058",
                        "username": "dataP",
                        "avatar": "16b9949025592510ee5d744ac5ec4bb8",
                        "discriminator": "7358",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T23:04:33.709000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920086356347224085"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920087605989752883",
                "type": 0,
                "content": "Since in eth this would be something simple like \n\n```       owneraddress = msg.sender ;\n   require(owneraddress == msg.sender);\n``` \n\nWondering if something similar can be done for sol programs",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "909840085577515058",
                    "username": "dataP",
                    "avatar": "16b9949025592510ee5d744ac5ec4bb8",
                    "discriminator": "7358",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T22:59:39.669000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920086422944370758",
                "type": 0,
                "content": "Do any smart devs know \ud83d\udc40",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "909840085577515058",
                    "username": "dataP",
                    "avatar": "16b9949025592510ee5d744ac5ec4bb8",
                    "discriminator": "7358",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T22:54:57.609000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920086356347224085",
                "type": 0,
                "content": "Is it possible to check in a sol program if the executor is a certain pubkey? i.e. so that only I can call my own programs?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "909840085577515058",
                    "username": "dataP",
                    "avatar": "16b9949025592510ee5d744ac5ec4bb8",
                    "discriminator": "7358",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T22:54:41.731000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920068028048228414",
                "type": 19,
                "content": "Let\u2019s dive then, thanks! \ud83e\udd3f",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "459318211192815616",
                    "username": "AlberErre",
                    "avatar": "4e007e342086c6ec400226cbae632038",
                    "discriminator": "2848",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T21:41:51.924000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920062295541948427"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920062864780320858",
                "type": 19,
                "content": "hmm... this makes sense xD",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "350632015852208140",
                    "username": "David | qPools",
                    "avatar": "19a8155e98df3f78d7a10548bc202b78",
                    "discriminator": "3335",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "915682383905316864",
                        "username": "man0s",
                        "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                        "discriminator": "8230",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T21:21:20.905000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "919987540587610183"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920062295541948427",
                "type": 19,
                "content": "In general you would need to go source-diving into the program's code \ud83d\ude2c",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "459318211192815616",
                        "username": "AlberErre",
                        "avatar": "4e007e342086c6ec400226cbae632038",
                        "discriminator": "2848",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T21:19:05.188000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920058218800119900"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920062021867819008",
                "type": 19,
                "content": "does anyone use enums like this? I am trying to find examples but havent found any good example of using enum in anchor deserialization in js. Even when i use `#[repr(u8)]` is still deserialized as an object in js",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "438874996614365185",
                    "username": "jbogle",
                    "avatar": "75044f344034a76ee77967b3456a8222",
                    "discriminator": "5816",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T21:17:59.939000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "918320492195242074"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920058642219290665",
                "type": 0,
                "content": "does sol also require a token account?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "667387455116148766",
                    "username": "nice chute",
                    "avatar": "6b7a863e9caaf27b538377e7c857c4b8",
                    "discriminator": "0767",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T21:04:34.168000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920058218800119900",
                "type": 19,
                "content": "Using Anchor we can see the defined `struct` , and set the `offset` according to that. But how can we know this structure on regular programs? in order to know what the `offset` should be.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "459318211192815616",
                    "username": "AlberErre",
                    "avatar": "4e007e342086c6ec400226cbae632038",
                    "discriminator": "2848",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T21:02:53.217000+00:00",
                "edited_timestamp": "2021-12-13T21:05:19.776000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "918095034212044870"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920057908065103882",
                "type": 0,
                "content": "<@!707604162673639504> <@!134416332509675520> just a quick dumb question, how can I know the account structure of a particular program? \ud83d\udc40  I'm trying to filter accounts from the `Token Program` (`TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`) using `memcmp` filter.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "459318211192815616",
                    "username": "AlberErre",
                    "avatar": "4e007e342086c6ec400226cbae632038",
                    "discriminator": "2848",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    },
                    {
                        "id": "707604162673639504",
                        "username": "ilmoi",
                        "avatar": "f0814434562dc7752375131b7ab1b1ab",
                        "discriminator": "5651",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T21:01:39.132000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920055728327233537",
                "type": 0,
                "content": "Rust doesn't do automatic double conversions like you're attempting to use above (from GemCommonError -> ErrorCode -> ProgramError), even if the impls are there for it to happen",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T20:52:59.442000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920055568138399744",
                "type": 19,
                "content": "`ProgramError` isn't anchor's error type, it's the built-in solana one. You might want to convert that `GemCommonError` into a ProgramError, not an anchor ErrorCode",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "707604162673639504",
                        "username": "ilmoi",
                        "avatar": "f0814434562dc7752375131b7ab1b1ab",
                        "discriminator": "5651",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T20:52:21.250000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920024057418747974"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920040381343739966",
                "type": 19,
                "content": "not a dumb question at all! I went back and checked, but unfortunately yeah it seems the enum is public and it's imported ok in the fiel where I'm using `?`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "915682383905316864",
                        "username": "man0s",
                        "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                        "discriminator": "8230",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T19:52:00.436000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920036126822133811"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920036126822133811",
                "type": 19,
                "content": "dumb question but: are these snippets and the place where you use `?` in the same file, or made `pub` and all?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "915682383905316864",
                    "username": "man0s",
                    "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                    "discriminator": "8230",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "707604162673639504",
                        "username": "ilmoi",
                        "avatar": "f0814434562dc7752375131b7ab1b1ab",
                        "discriminator": "5651",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T19:35:06.079000+00:00",
                "edited_timestamp": "2021-12-13T19:35:38.182000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920024057418747974"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920032510681944146",
                "type": 0,
                "content": "tried, it wont let me do that coz I'm implementing a foreign trait for a foreign type",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T19:20:43.924000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920032340678434816",
                "type": 19,
                "content": "sounds like a Rust issue, maybe brushing up on their docs would help? but i myself dont know :/ wild suggestion, maybe copy that first block and paste it right below it and then change `for ErrorCode` to `for ProgramError`? (like i said, im random guessing lmao). let me know if that works \ud83d\ude42",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "903369685570035822",
                    "username": "Milk Duds Professional 64bit",
                    "avatar": "6653c85724a283b4ae37946f862c7296",
                    "discriminator": "6103",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "707604162673639504",
                        "username": "ilmoi",
                        "avatar": "f0814434562dc7752375131b7ab1b1ab",
                        "discriminator": "5651",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T19:20:03.392000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "920026843694891058"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "920026843694891058",
                "type": 0,
                "content": "my impression was that I only had to convert to `ErrorCode` and from there Anchor would to the conversion to `ProgramError`. But that's not the case?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T18:58:12.809000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "920024057418747974",
                "type": 0,
                "content": "stuck with trying to implement the From trait for a custom error from a lib:\n\nthis is what I have:\n```rs\nimpl From<gem_common::GemCommonError> for ErrorCode {\n    fn from(e: gem_common::GemCommonError) -> Self {\n        match e {\n            gem_common::GemCommonError::ArithmeticError => ErrorCode::ArithmeticError,\n            gem_common::GemCommonError::AccountDidNotSerialize => ErrorCode::AccountDidNotSerialize,\n        }\n    }\n}\n```\n\nie I convert the custom error into an instance of anchor's ErrorCode:\n```rs\n#[error]\npub enum ErrorCode {\n    // --------------------------------------- generic\n    #[msg(\"failed to perform some math operation safely\")]\n    ArithmeticError,\n}\n```\n\nbut I'm still getting `^ the trait From<GemCommonError> is not implemented for anchor_lang::prelude::ProgramError` whenever I try to use `?`. What am I missing to get this working?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "707604162673639504",
                    "username": "ilmoi",
                    "avatar": "f0814434562dc7752375131b7ab1b1ab",
                    "discriminator": "5651",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2021-12-13T18:47:08.509000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ]
    ],
    "analytics_id": "76c2046bc38844a2b0cffe20be913956"
}