{
    "total_results": 53,
    "messages": [
        [
            {
                "id": "927266562006720564",
                "type": 19,
                "content": "They're all raw AccountInfos, so their data actually doesn't live on the stack *or* the heap (it's in the 0x4 part of the solana memory map https://docs.solana.com/developing/on-chain-programs/overview#memory-map)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "776510014554374224",
                        "username": "0xandrei",
                        "avatar": "0c4e621a5d8320ceeea07841fc811cf7",
                        "discriminator": "4672",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T18:26:16.162000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "927254208774832168"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "927262348052398133",
                "type": 0,
                "content": "Are the docs updated yet?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "454291700945387520",
                    "username": "AJTJ",
                    "avatar": "115ebf8b87d4604be252dd15bf4f19f5",
                    "discriminator": "8390",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T18:09:31.477000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927254208774832168",
                "type": 0,
                "content": "are the remaining accounts received in context always found in stack? or could they be sent through the heap?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "776510014554374224",
                    "username": "0xandrei",
                    "avatar": "0c4e621a5d8320ceeea07841fc811cf7",
                    "discriminator": "4672",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T17:37:10.922000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927236634733322271",
                "type": 0,
                "content": "I got it to work. I needed to use `{program name}::accounts:InstructionName`  instead of `{program name}::InstructionName` to define the CPI accounts.  \n\nThank you for taking a look at this <@!347689664855015424> <@!915682383905316864>  \ud83d\ude4f",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "801445539245719552",
                    "username": "moshthepitt",
                    "avatar": "b3912890650ffc897570f0be86fa6ef4",
                    "discriminator": "7636",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "347689664855015424",
                        "username": "paulx",
                        "avatar": "f0f52417776819a379ec501b16d461c1",
                        "discriminator": "9059",
                        "public_flags": 0
                    },
                    {
                        "id": "915682383905316864",
                        "username": "man0s",
                        "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                        "discriminator": "8230",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T16:27:20.944000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927188999016173568",
                "type": 19,
                "content": "could u share your code",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "801445539245719552",
                        "username": "moshthepitt",
                        "avatar": "b3912890650ffc897570f0be86fa6ef4",
                        "discriminator": "7636",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T13:18:03.704000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "927124859174150185"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "927170079475519509",
                "type": 19,
                "content": "Maybe you are using to_account_info on the ctx.accounts.some_account in question before passing it on to the cpi call?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "915682383905316864",
                    "username": "man0s",
                    "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                    "discriminator": "8230",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "801445539245719552",
                        "username": "moshthepitt",
                        "avatar": "b3912890650ffc897570f0be86fa6ef4",
                        "discriminator": "7636",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T12:02:52.934000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "927124859174150185"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "927124859174150185",
                "type": 0,
                "content": "hey everyone, happy new year.\n\nI am trying to invoke my other program instruction which has one of its accounts as a Program account.  When trying to create the cpi_accounts I am getting \n\n```\nexpected struct `anchor_lang::ProgramAccount`, found struct `anchor_lang::prelude::AccountInfo`\n```\n\nAnyone know how to construct the expected program account from accountInfo?  Thanks",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "801445539245719552",
                    "username": "moshthepitt",
                    "avatar": "b3912890650ffc897570f0be86fa6ef4",
                    "discriminator": "7636",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T09:03:11.574000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927123252239798314",
                "type": 0,
                "content": "How do would i call this custom program call instruction increment from the counter example with restrictions that only a specific wallet can increment\n\n```#[derive(Accounts)]\npub struct Increment<'info> {\n    #[account(mut, has_one = authority)]\n    pub counter: Account<'info, Counter>,\n    pub authority: Signer<'info>,\n}```\n\nI would use this:\n```\nallocateTransaction.add(new web3.TransactionInstruction({\n  keys,\n  programId: web3.SystemProgram.programId,\n  data,\n}));```\n\nBut what are the Keys and the data.\nI would say that the keys are:\n```\nlet keys = [\n  {pubkey: counter.publicKey, isSigner: false, isWritable:       true},\n  {pubkey: authority.publickey, isSigner: true, isWritable:      false}\n];\n```\nIs this correct?\n\nFor data i did:\n```\nlet increment = {\n  index: 2,\n  layout: struct([\n    u32('instruction'),\n  ])\n};\n\nlet data = Buffer.alloc(increment.layout.span);\nlet layoutFields = Object.assign({ \n  instruction: increment.index \n});\nincrement.layout.encode(layoutFields, data);\n```\n\nDid i get this right?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "760117293689733160",
                    "username": "Alex Lup",
                    "avatar": "d3e492156570dc3a3a80a02bcdc909ea",
                    "discriminator": "7746",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T08:56:48.451000+00:00",
                "edited_timestamp": "2022-01-02T09:18:14.673000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927116318329667614",
                "type": 0,
                "content": "I'm building a cpi context and using the `anchor_spl::token::initialize_mint` to invoke this CPI:\n```\n        // initialize the ownership nft mint\n        let creator_account_key = ctx.accounts.creator.key;\n        let init_owner_mint_cpi = ctx.accounts.into_initialize_mint_context(ctx.accounts.owner_token_mint.to_account_info().clone());\n        initialize_mint(init_owner_mint_cpi, 0, &creator_account_key, Some(&creator_account_key))?;\n```\n, and `into_initialize_mint_context` looks like this ( `mint` is signed):\n```\n    pub fn into_initialize_mint_context(&self, mint: AccountInfo<'info>) -> CpiContext<'_, '_, '_, 'info, InitializeMint<'info>> {\n        let initialize_mint_cpi_accounts = InitializeMint {\n            mint: mint.clone(),\n            rent: self.rent.to_account_info()\n        };\n        CpiContext::new(self.token_program.clone(), initialize_mint_cpi_accounts)\n    }\n```\nI'm stuck here getting a `Signature Verified Failed` error. Any help on where I'm screwing up?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "474851811422109701",
                    "username": "Doomdoom",
                    "avatar": "bdbc43cbc072753755d1a470d2b6cf06",
                    "discriminator": "7145",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T08:29:15.278000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927095737613975553",
                "type": 0,
                "content": "how do i call programs if i know the program id?\nDon't want to use the idl everytime",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "760117293689733160",
                    "username": "Alex Lup",
                    "avatar": "d3e492156570dc3a3a80a02bcdc909ea",
                    "discriminator": "7746",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T07:07:28.453000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927052563566698577",
                "type": 0,
                "content": "Is there any working examples of testing anchor rs file?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "370923897643597825",
                    "username": "Juna",
                    "avatar": "50879709a567aa7671753e1b38b699c9",
                    "discriminator": "9185",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T04:15:54.958000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927034006686535740",
                "type": 0,
                "content": "It would be amazing if rust macros allowed one to access the ast of the entire file but alas.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T03:02:10.653000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927033699944505374",
                "type": 0,
                "content": "If you provide the wrong bump, you'll calculate an invalid PDA at some point.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T03:00:57.520000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927033638946762782",
                "type": 0,
                "content": "I'm not worried about it being a footgun since tests should (almost always?) catch this.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T03:00:42.977000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927033554217607208",
                "type": 0,
                "content": "And so the api is the way it is as a quick and dirty workaround. Not ideal but it does allow us to get instruction data into the derive macro.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T03:00:22.776000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927033367327830016",
                "type": 0,
                "content": "The easiest way to do this with validation + avoid a duplicate deserialization would be to move the derive macro into the program mod. But that's a bit of a heavy lift.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T02:59:38.218000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927033243822325802",
                "type": 19,
                "content": "The derive macro is in an entire different ast subtree so it doesn't have context of the program module instruction handlers.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "347689664855015424",
                        "username": "paulx",
                        "avatar": "f0f52417776819a379ec501b16d461c1",
                        "discriminator": "9059",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T02:59:08.772000+00:00",
                "edited_timestamp": "2022-01-02T03:01:18.804000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "927005682752954368"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "927031111631114240",
                "type": 0,
                "content": "Borsh serializes a vector of Ts as 4 bytes for the length + each T one after the other.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T02:50:40.418000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927030759267651634",
                "type": 19,
                "content": "You just need to make sure you allocate enough space to handle whatever max size you're comfortable with",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "246080971965726720",
                        "username": "teejthekid",
                        "avatar": "ea9123647766891a86e5159ebdb8513f",
                        "discriminator": "0001",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T02:49:16.408000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "927025971977146408"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "927025971977146408",
                "type": 0,
                "content": "anyone have an idea how anchor/solana accounts handle vector sizes? do i have to specify the capactity of a vector in an account before",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "246080971965726720",
                    "username": "teejthekid",
                    "avatar": "ea9123647766891a86e5159ebdb8513f",
                    "discriminator": "0001",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T02:30:15.029000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927007495254331392",
                "type": 19,
                "content": "woa thank you so much! Do you guys have any experience interfacing with Mango Markets contracts?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "377286440771518465",
                    "username": "ClockworkRainbow",
                    "avatar": "cb5b7d2d45806e69b2488069d6fdfec1",
                    "discriminator": "3856",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "812755783405797376",
                        "username": "crispheaney",
                        "avatar": "915552f52f3f399d1b4d416c30318ce6",
                        "discriminator": "7514",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T01:16:49.835000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926998848038142003"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "927005682752954368",
                "type": 0,
                "content": "Idk why the api looks like it does but <@501570363566587905> will",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "501570363566587905",
                        "username": "armaniferrante | Will never DM",
                        "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                        "discriminator": "2513",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T01:09:37.701000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927004085562007552",
                "type": 0,
                "content": "is it done like this because the full struct is only deserialized later on?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T01:03:16.901000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927003760188874772",
                "type": 19,
                "content": "would be good to have some kind of validation yes, I think it might be possible to check that the endpoint ix list begins with the instruction attribute ix list",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "831450660146642974",
                        "username": "Pikachoo",
                        "avatar": "3778d8c6025afe096468846a546f4bfe",
                        "discriminator": "4505",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T01:01:59.326000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "927002992413138944"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "927003684100010065",
                "type": 0,
                "content": "Isn't borsh fine with too long a slice but not with too short a slice (indeed)?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T01:01:41.185000+00:00",
                "edited_timestamp": "2022-01-02T01:01:48.427000+00:00",
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927003230376980510",
                "type": 0,
                "content": "it creates a new struct from the given fields in the attribute and tries to deserialize that. thats why different names are ok but different order is not",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T00:59:53.009000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927002992413138944",
                "type": 0,
                "content": "potential giga footgun",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T00:58:56.274000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927002896766234696",
                "type": 0,
                "content": "or try to grab only the bump that was actually not passed in as first argument",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T00:58:33.470000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927002783993954304",
                "type": 0,
                "content": "I have seen people waste hours because they changed the order",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T00:58:06.583000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "927002736661245974",
                "type": 19,
                "content": "Also this is raw decoding i think, so it doesn't care about naming",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "831450660146642974",
                    "username": "Pikachoo",
                    "avatar": "3778d8c6025afe096468846a546f4bfe",
                    "discriminator": "4505",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "347689664855015424",
                        "username": "paulx",
                        "avatar": "f0f52417776819a379ec501b16d461c1",
                        "discriminator": "9059",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T00:57:55.298000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926973345356972032"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926998848038142003",
                "type": 19,
                "content": "prob not the clearest example but we do it here: https://github.com/drift-labs/protocol-v1/blob/master/programs/clearing_house/src/controller/token.rs#L24",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "812755783405797376",
                    "username": "crispheaney",
                    "avatar": "915552f52f3f399d1b4d416c30318ce6",
                    "discriminator": "7514",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/drift-labs/protocol-v1/blob/master/programs/clearing_house/src/controller/token.rs",
                        "title": "protocol-v1/token.rs at master \u00b7 drift-labs/protocol-v1",
                        "description": "On-chain, cross-margined perpetual swaps. Contribute to drift-labs/protocol-v1 development by creating an account on GitHub.",
                        "color": 1975079,
                        "reference_id": "926998848038142003",
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/6dae15fcd5bf9f3ac898d3d27ad196a3472ccf1a5bd90d2257c7270c3fa30767/drift-labs/protocol-v1",
                            "proxy_url": "https://images-ext-1.discordapp.net/external/hQRrHk7SPh8jCAyNoAu7B6tPTjZOi1q0V35pRAfuN1c/https/opengraph.githubassets.com/6dae15fcd5bf9f3ac898d3d27ad196a3472ccf1a5bd90d2257c7270c3fa30767/drift-labs/protocol-v1",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [
                    {
                        "id": "377286440771518465",
                        "username": "ClockworkRainbow",
                        "avatar": "cb5b7d2d45806e69b2488069d6fdfec1",
                        "discriminator": "3856",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-02T00:42:28.178000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926982145652695132"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926982145652695132",
                "type": 0,
                "content": "thank you!!",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "377286440771518465",
                    "username": "ClockworkRainbow",
                    "avatar": "cb5b7d2d45806e69b2488069d6fdfec1",
                    "discriminator": "3856",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:36:06.019000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926982006804455464",
                "type": 0,
                "content": "got it",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "377286440771518465",
                    "username": "ClockworkRainbow",
                    "avatar": "cb5b7d2d45806e69b2488069d6fdfec1",
                    "discriminator": "3856",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:35:32.915000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926981951661940776",
                "type": 0,
                "content": "E.g. take a look at the anchor_spl token module. All it does is build some spl token instructions and invoke them (so, there isn't really anything anchor specific about it)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:35:19.768000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926981747902652556",
                "type": 19,
                "content": "Basically the \"usual\" way, by building an instruction and then invoking it with `invoke`/`invoke_signed`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "377286440771518465",
                        "username": "ClockworkRainbow",
                        "avatar": "cb5b7d2d45806e69b2488069d6fdfec1",
                        "discriminator": "3856",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:34:31.188000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926981340237271071"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926981340237271071",
                "type": 0,
                "content": "does anyone know how I can make CPI calls to non-Anchor projects? The tutorial only covers the case to other Anchor projects",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "377286440771518465",
                    "username": "ClockworkRainbow",
                    "avatar": "cb5b7d2d45806e69b2488069d6fdfec1",
                    "discriminator": "3856",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:32:53.993000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926975484850475028",
                "type": 19,
                "content": "ha, all right. nice thanks",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:09:37.960000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926975267929481307"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926975267929481307",
                "type": 19,
                "content": "Ah, yeah, this came up on a different forum\u2014try_from_slice panics but `::deserialize` (what anchor uses) doesn't! That was a TIL for me too",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "347689664855015424",
                        "username": "paulx",
                        "avatar": "f0f52417776819a379ec501b16d461c1",
                        "discriminator": "9059",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:08:46.242000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926974947736301700"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926974947736301700",
                "type": 19,
                "content": "Ok interesting you can omit everything after the arg youre interested in. Borsh's `try_from_slice` panics when there's bytes left over to read so I wonder how anchor doesnt",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:07:29.902000+00:00",
                "edited_timestamp": "2022-01-01T23:07:37.055000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926973763076096053"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926973827202809917",
                "type": 0,
                "content": "(It just re-parses the arguments from scratch)",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:03:02.746000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926973763076096053",
                "type": 19,
                "content": "You need to use them in order up to the last one you care about, lol",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "347689664855015424",
                        "username": "paulx",
                        "avatar": "f0f52417776819a379ec501b16d461c1",
                        "discriminator": "9059",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:02:47.457000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926973345356972032"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926973345356972032",
                "type": 0,
                "content": "just to confirm, when using the `#[instruction(..)]` attribute on the accounts struct, I need to use all the arguments from the endpoint, not just a subset e.g. the first argument ?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "347689664855015424",
                    "username": "paulx",
                    "avatar": "f0f52417776819a379ec501b16d461c1",
                    "discriminator": "9059",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T23:01:07.865000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926967805071487006",
                "type": 0,
                "content": "Filed https://github.com/project-serum/anchor/issues/1219",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/project-serum/anchor/issues/1219",
                        "title": "lang: Error if account init payer account is not marked mutable \u00b7 I...",
                        "description": "This coincidentally works if the account is not marked mutable since the client will use the provider to pay for the transaction (and thus it is mutable). However, we should require the developer t...",
                        "color": 1975079,
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/fdd7fd8812ae6214164154c213e5d8c1325a0f86d926b84d0862920b508126f8/project-serum/anchor/issues/1219",
                            "proxy_url": "https://images-ext-1.discordapp.net/external/8KiVRWDuHLXtc8ZcnB8Q75m2CZtz3Q4DNz_KZ4NDM1g/https/opengraph.githubassets.com/fdd7fd8812ae6214164154c213e5d8c1325a0f86d926b84d0862920b508126f8/project-serum/anchor/issues/1219",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T22:39:06.958000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926967458802319461",
                "type": 19,
                "content": "yea we should add that to the parser",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "501570363566587905",
                    "username": "armaniferrante | Will never DM",
                    "avatar": "7a081b73d4de5c4f7e4f473f265731d2",
                    "discriminator": "2513",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "812755783405797376",
                        "username": "crispheaney",
                        "avatar": "915552f52f3f399d1b4d416c30318ce6",
                        "discriminator": "7514",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T22:37:44.401000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926965430831177748"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926965430831177748",
                "type": 0,
                "content": "Might be nice to throw an Err if a dev tries to use `payer` with an account that isnt mutable",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "812755783405797376",
                    "username": "crispheaney",
                    "avatar": "915552f52f3f399d1b4d416c30318ce6",
                    "discriminator": "7514",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T22:29:40.895000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926958019395346452",
                "type": 0,
                "content": "Closed the issue based on this feedback, thanks yall!",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "812755783405797376",
                    "username": "crispheaney",
                    "avatar": "915552f52f3f399d1b4d416c30318ce6",
                    "discriminator": "7514",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T22:00:13.871000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926956458229248111",
                "type": 0,
                "content": "so there is no issue with cpi, i just need to mark `authority` as mutable?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "812755783405797376",
                    "username": "crispheaney",
                    "avatar": "915552f52f3f399d1b4d416c30318ce6",
                    "discriminator": "7514",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T21:54:01.660000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926956320916140073",
                "type": 19,
                "content": "ok so the anchor client is just marking the provider wallet as writable. I was wondering how the payer ended up writable. I thought anchor might be doing it on smart contract side when it sees `authority` specified as `payer`",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "812755783405797376",
                    "username": "crispheaney",
                    "avatar": "915552f52f3f399d1b4d416c30318ce6",
                    "discriminator": "7514",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "134416332509675520",
                        "username": "cqfd",
                        "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                        "discriminator": "6977",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T21:53:28.922000+00:00",
                "edited_timestamp": "2022-01-01T21:55:09.176000+00:00",
                "flags": 0,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926938918555881513"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926938918555881513",
                "type": 0,
                "content": "Yeah. Definitely a gotcha that you can end up passing in your provider wallet as a payer and not notice that it gets automatically marked as mut since it pays the tx fees.",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "134416332509675520",
                    "username": "cqfd",
                    "avatar": "1843b8189caf8a8252ae7c78becad4ba",
                    "discriminator": "6977",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T20:44:19.876000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926937240238690355",
                "type": 0,
                "content": "I guess what I mean is that I don't understand the \"cpi module turns the `Signer` into a read only account\" part. Seems more like it was never marked writable",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "915682383905316864",
                    "username": "man0s",
                    "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                    "discriminator": "8230",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T20:37:39.734000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926936493736476703",
                "type": 19,
                "content": "According to this, `authority` is also a payer: https://github.com/drift-labs/protocol-v1/blob/master/programs/clearing_house/src/context.rs#L94\nso isn't it just that you need to specify authority as mutable?\n```rust\n#[account(mut)]\npub authority: Signer<'info>,\n```",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "915682383905316864",
                    "username": "man0s",
                    "avatar": "5db087ee6a952e5be7da6b90f06b8585",
                    "discriminator": "8230",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [
                    {
                        "id": "812755783405797376",
                        "username": "crispheaney",
                        "avatar": "915552f52f3f399d1b4d416c30318ce6",
                        "discriminator": "7514",
                        "public_flags": 0
                    }
                ],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T20:34:41.754000+00:00",
                "edited_timestamp": null,
                "flags": 4,
                "components": [],
                "message_reference": {
                    "channel_id": "889577399308656662",
                    "guild_id": "889577356681945098",
                    "message_id": "926929152995631134"
                },
                "hit": true
            }
        ],
        [
            {
                "id": "926929152995631134",
                "type": 0,
                "content": "Spent an hour or two trying to debug an issue with a cpi call. The errors I was getting was `{}'s writable privilege escalated`. The issue was i specified an `AccountInfo` as `Signer` and was using it as a `payer`. The cpi module, when it generates `ToAccountMetas` turns the `Signer` into a read only account. The workaround is to make `Signer` a `#[account(mut, signer)]`.\n\nFiled an issue in case it's a bug: https://github.com/project-serum/anchor/issues/1218\n\nJust putting it here in case somebody searches `writable privilege escalated` and has the same issue \ud83d\ude05",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "812755783405797376",
                    "username": "crispheaney",
                    "avatar": "915552f52f3f399d1b4d416c30318ce6",
                    "discriminator": "7514",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [
                    {
                        "type": "article",
                        "url": "https://github.com/project-serum/anchor/issues/1218",
                        "title": "`Signer` that's used as `payer` for `init` is read only in cpi `to_...",
                        "description": "If you specify an AccountInfo as Signer and also specify the signer as payer in #[account(init), the cpi module will create a read only AccountMeta. The AccountMeta needs to be writable for the sig...",
                        "color": 1975079,
                        "provider": {
                            "name": "GitHub"
                        },
                        "thumbnail": {
                            "url": "https://opengraph.githubassets.com/088331ee472b3defe2f511389e5400d28f589da73fed4d2e3966c2b036d3e0f0/project-serum/anchor/issues/1218",
                            "proxy_url": "https://images-ext-1.discordapp.net/external/f4Lpgwke5VfOB-1XIECw2B0IZFqouxyqNi9rjZyr31Q/https/opengraph.githubassets.com/088331ee472b3defe2f511389e5400d28f589da73fed4d2e3966c2b036d3e0f0/project-serum/anchor/issues/1218",
                            "width": 1200,
                            "height": 600
                        }
                    }
                ],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T20:05:31.585000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ],
        [
            {
                "id": "926908203227291759",
                "type": 0,
                "content": "I want to create a language where you procedural describe a \"workflow\" involving multiple users which have to act in sequence (or in parallel). Then this workflow is compiled down into separate transactions which must be executed in a particular order. Before I get started, is there already something like this?",
                "channel_id": "889577399308656662",
                "author": {
                    "id": "607998614760980516",
                    "username": "dspyz",
                    "avatar": "11338434733fa197a8994443aa7f4c65",
                    "discriminator": "4948",
                    "public_flags": 0
                },
                "attachments": [],
                "embeds": [],
                "mentions": [],
                "mention_roles": [],
                "pinned": false,
                "mention_everyone": false,
                "tts": false,
                "timestamp": "2022-01-01T18:42:16.771000+00:00",
                "edited_timestamp": null,
                "flags": 0,
                "components": [],
                "hit": true
            }
        ]
    ],
    "analytics_id": "901ff2e72002e3b17bdd5da966d31125"
}