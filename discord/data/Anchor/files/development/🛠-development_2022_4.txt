After loading this IDL, I’d like would like my application to throw an error by validating the IDL schema
I.e. looks like saber stable swap program is using outdated (or just wrong) IDL. However, `Program.at` still properly deserializes the IDL
Is there a way to validate the IDL schema in typescript?
Yeah, it would use fewer compute units
Gas is defined according to the number of signers
Is it save some gas? in case of Account<'info, T> vs AccountInfo<'info>
I've only found the rust lib: https://github.com/solana-labs/solana/blob/647aa926673e3df4443d8b3d9e3f759e8ca2c44b/sdk/src/compute_budget.rs#L44
Hi, I need to increase my computation units. How can I create the `ComputeBudgetInstruction` in js/ts?
<@!134416332509675520>
Nope, the transaction size is purely a client-side thing
<@!134416332509675520> 
The program is built from the interface but the generated idl is empty
Does using a UncheckedAccount prove good if you want to decrease the transaction size?
like blockhash
but to rely on unpredictable data
not perfect randomness
i want a way use on-chain data..
Only via something oracular like https://switchboard.xyz/randomness
Is there a way to have a deterministic randomness on solana?
In solidity, we do `blockhash(blockNumber)` to get blockhash
Can i do similar in Solana?
No other way
Then you'll have to pass the PDA in as an account 😛
No, dont want to check in client, i want to check in Anchor program.
Fetch it on the client and see if there's anything there
how to verify if PDA exists without Passing the PDA Account in the instruction?
Yep
Can I use `Vec<>` as instruction data. For example, `pub fn process_foo(ctx: Context<Foo>, foo: u64, bars: Vec<u8>) {}`?
```
the trait bound `mpl_token_metadata::state::Metadata: anchor_lang::AccountSerialize` is not satisfied
the trait `anchor_lang::AccountSerialize` is not implemented for `mpl_token_metadata::state::Metadata`rustc(E0277)
lib.rs(1, 1): required by a bound in this
lib.rs(112, 18): the trait `anchor_lang::AccountSerialize` is not implemented for `mpl_token_metadata::state::Metadata`
account.rs(226, 30): required by this bound in `anchor_lang::prelude::Account```

An example https://github.com/metaplex-foundation/metaplex-program-library/tree/master/token-metadata/js
This is the project https://github.com/metaplex-foundation/solita
I found out, it's a new thing this guy is building https://twitter.com/thlorenz
Can you show me where they do it?
As far as I know there just aren't any very convenient ways to do this—you'd be better off using the solana rust testing crate instead.
How do people generate TS SDK from Solana Rust code automatically? I saw the metplex-program-library does it
Hi everyone. How do you manage to test time-dependent logic(staking, vesting) from ts? I haven't found any endpoints for manipulating time on test validator. Is there are any way to do it?
I want to ask about which implementation is better if I want to unstake my token from some platform then update my state. (take contract size into the consideration)

1. extract unstake instruction to another instruction and called update state with postintruction from client
2. combine this as one instruction then just called this instruction

Thank you for your help
This is my handler..
const handleCreate = () => {
        if (walletAddresses.length > 0){
            // console.log(wallet);
            wallet.sendTransaction(
                new anchor.web3.Transaction().add(
                    program.transaction.createraffle(new anchor.BN(wallet.publicKey),{
                        accounts: {
                            wallet:wallet.publicKey,
                            owner:wallet,
                            escrowAccount:escrowAccount.publicKey,
                            // escrowData,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY
                        },
                        signers: [wallet.publicKey]
                    })
                ), 
                connection,{signers: [wallet.publicKey]})
        }
    };
I am trying to send an instruction to my anchor program. But instruction, rpc and transaction -- all get a cross mark across them in VS code. I checked and found out that these properties of the Program class are deprecated. I want to know what the new method to send the transaction is? Also could somebody help me with this --- I have my solana wallet adapter in the header component.. But the UI button to send the transaction is in the main component. But on console logging wallet --- const wallet = useWallet(), I get an empty object in the main component. Can that be the reason behind not being able to send the transaction as sendTransaction is a method of useWallet(). The error message previously was about the property of program --- program.instruction.create. But now it says, cannot identify property sendTransaction of wallet.. The crossed property of program is still there though.. Also how can I send the wallet as a prop or anything from the header component to the main component --- both children of the app component if at all the empty object logging of wallet is the case?? Any help is much appreciated.. I really need to move on..
The thing is, if you do it like that, the program account created will be assigned to your provider wallet key not to the PDA.
let user_account = anchor.web3.Keypair.generate();
      const tx = await program.rpc.initializePda({
        accounts: {
          testUser: user_account.publicKey,
          payer: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId
        },
        signers: [user_account],
      });
Hi team, I have a quick question, does CpiContext support two CPI signers from caller program? it is working well with only one CPI signer, but I don't know how to set two CPI signers from the caller program, pls suggest, thanks.
if i know anchor right you normally have to provide a signer if you are creating a new account. i think your transaction will work if you do it like this:
Oh I see, well the test before this one runs successfully
does your ts client compile?
this should work without the transaction passing
the code i sent isn´t supposed to fix the  transaction. It just finds a PDA and stores it into the userStatsPDA constant and should print out the PDA in the console log
got it, so I deployed it to devnet and copied the programId in the anchor.toml and in my decalred_id statement in the program but am still getting the Signature verification failed even with your suggested code. Do you have any other ideas?
i personally use the devnet cluster and had no issues with it so far. Dont have much experience with the local one
does it matter if I deploy it to devnet or my local cluster?
yes that is necessary and remember to change the address in your anchor.toml aswell
I haven't deployed it, so the program id is still the default one
ahh you know what, that is probably it....
as long as your program has been deployed once
even if the transaction does not pass
this should work i think
let seeds = Buffer.from(anchor.utils.bytes.utf8.encode("user-stats"));

const [userStatsPDA, bump] = await PublicKey
      .findProgramAddress(
        [
          seeds,
          provider.wallet.publicKey.toBuffer()
        ],
        program.programId
      );

console.log("Found PDA with Pubkey: "+userStatsPDA.toBase58());
Hello, I'm running into an issue creating a PDA account, this is my client side code.

`const [userStatsPDA, bump] = await PublicKey
      .findProgramAddress(
        [
          anchor.utils.bytes.utf8.encode("user-stats"),
          provider.wallet.publicKey.toBuffer()
        ],
        program.programId
      );

      const tx = await program.rpc.initializePda("PDA", "I'm a pda", {
        accounts: {
          testUser: userStatsPDA,
          payer: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId
        }
      });`

and this is the program side
`#[derive(Accounts)]
#[instruction(name: String, intro: String)]
pub struct InitializePDA <'info> {
    #[account(init,
        payer = payer,
        space = UserAccount::space(&name, &intro),
        seeds = [b"user-stats", payer.key().as_ref()], bump
    )]
    pub test_user: Account<'info, UserAccount>,
    #[account(mut)]
    pub payer: Signer<'info>,
    pub system_program: Program<'info, System>,
}
`


From what I understand, the payer is the provider.wallet so it does not need to be passed in as a signer and the PDA obviously cannot be passed in as a signer from the client side. I am confused as to why I'm getting this error.

`Creating account as PDA!:
     Error: Signature verification failed
      at Transaction.serialize (node_modules/@solana/web3.js/src/transaction.ts:594:13)
      at Provider.send (node_modules/@project-serum/anchor/src/provider.ts:116:22)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at Object.rpc [as initializePda] (node_modules/@project-serum/anchor/src/program/namespace/rpc.ts:25:23)



error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.`
hello, does anyone know why the token::mint_to function can overflow? thank you in advance
Let me know if my ideas have helped you
Or maybe only use:
 await web3.sendAndConfirmTransaction(connection, transaction, [payer])
So personally I have never seen the subject, but I offer you what I would have tried:

I would have done my tx with the confirmation method which will return the tx ID.

Then I would have used a setInterval which will fetch the state of the transaction with this method: https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction

I look for the commitment finalized, if it's finalized I get out of my interval and I continue my process.

I'm sure there must be another way less barbaric, but I think this method can do the trick because no matter how long Solana takes, you won't exit the interval until your tx is finalized.
Can anyone point me to a proper example of how to await a txn sent to solana blockchain? No matter what I do, it times out when using the `confirmTransaction()` method in web3. I looked at some projects like solend etc... and they all do different things to await for blockchain confirmation. Is there a standard example that someone could point to. maybe <@!347689664855015424> 🙏 ?
Do you tried to restart your mac ?
hey all! i'm trying to download solana cli again on my mac and I can't figure out why I keep getting this error after install
command not found: solana
I went through the whole process of updating my path in the ~/.profile and ~/.bash_profile files, but nothing seems to work
Just double and triple check to make sure what is on-chain and on the client side agree with each other and test often, otherwise you'll be shooting in the dark trying to figure out where you made the mistake
It's a really crappy error I wish it told you which one it couldn't sanitize instead of "figure that shit out"
I would check to make sure you are referencing accounts from the right cluster network, program IDs are set correctly etc
Hey man sorry for leaving you hanging here. So for the account sanitizing thing, I had made some changes to my on-chain code and didn't test often enough, so I didn't know which change broke my stuff. I ended up reverting everything and got myself back to working.

The sanitization error basically means your account configuration isn't set up right. That's all I can tell you. You're passing accounts, but they aren't the right ones.
is there ts instructions for  `bpf_loader_upgradable`?
i have no idea what that means
one thing you need to remember is to also load the program data account for bpf3 programs when you use `account`
👍
<@!127969511902019584>
yeah not sure myself. I would assume genesis uses `--bpf-program` which currently uses bpfloader2 whereas loading with account will preserve the bpf loader whatever that may be but Im not positive genesis uses `--bpf-program`. Ill leave checking that up to you
are they really that small??
this program, admittedly a small program, is 50 base64 characters long???
wtf
and i assume the answer is no
i guess im asking if there is any reason in particular to use test.genesis for programs instead of test.validator.account
can u elaborate
a program is an account
what about it?
[[test.genesis]]
we are specifically cloning a program

https://discord.com/channels/889577356681945098/889577399308656662/948228110153822228
what about this?
<@!127969511902019584> ^
correction: use `solana account` and then `solana-test-validator --account ...` or `test.validator.account` in Anchor.toml <@!100062204333686784>
would it be `solana program dump` in the case of a program or is there something more generic
whats the cli for dumping an account in order to do this?
but you can first pseudo-clone with `--account` and then pull those files in the Anchor.toml
kk
`solana-test-validator` doesnt support that
no
oh
at the same time
er i meant
how?
oh great
yes
Can you clone accounts from both mainnet and devnet with anchor.toml?
Got it
no, that was what was preventing the `anchor build` command from completing and generating a new idl json.
Oh so just adding /// CHECK: adds the error to the IDL? That's good to know
So in this case space = content.len() and I just add a custom error to not exceed 150 (or 600 bytes if I want to take the rare characters)
Basically I try to allocate a quantity of characters in a dynamic way, to pay the right price, but limiting the maximum quantity
Yeah, basically—you're allocating 150 bytes at any rate
So if UTF-8 = 8 bits (generally) and if I wanna allocate 150 characters, I can allocate 150 bytes ?
For example, 你好 takes 6 bytes, not 2
Between 1 and 4, depending on how "rare" the character is
ok, thanks - I got it sorted - I had an old idl json generated I think from an earlier anchor version that wasn't getting updated because of `Please add a /// CHECK:` build errors.  Once I deleted the old idl and added the check comment, it generated the ts errors. I am going to update my gen script to delete the old idl before generating code.
UTF-8
(Sort of, it depends on the character encoding!)
1 byte
What is the size of a character?

For example I want to allocate the equivalent of 150 string characters to a data
Does anyone have an idea why the following code could be giving me  `Transaction simulation failed: Attempt to debit an account but found no record of a prior credit. `

```javascript
const nftMintClient = await Token.createMint(
    provider.connection,
    // @ts-ignore
    wallet.payer,
    wallet.publicKey,
    null,
    0,
    TOKEN_PROGRAM_ID
  );
```

I have airdropped `wallet` 100 SOL, and this is running on localnet. I have confirmed that `wallet` has 100 SOL using the Solana explorer. Truly confused about what's going on
Oh ! I don't know how to do that :/ Sorry
But no errors generated to include in my idl
Here is what I was trying to get to work:
https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auction-house/js/idl/auction_house.json
https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auction-house/js/src/generated/errors/index.ts
Mmh custom errors are used by your program. So if a statement is not valid and you put a custom error inside, it is your custom error that will be sent to your client
Yes, I was looking at some generated code and it looked like it was creating ts errors from the errors in the idl when they were there
Custom error are not include in your program (i guess) but your program can use it. You wanna use this error outside the program ?
Is it necessary ?
Do I need to do anything special to have the errors included or do I just have something off?
do errors get included in the idl? https://github.com/metaplex-foundation/solita/blob/0a9137b8aca600fdd788ae2db8892018acb1fcb9/src/solita.ts#L222 I don't see them in the one that is getting generated. Set up like this in the program:
```rust
#[error_code]
pub enum ErrorCode {
    // 6000
    #[msg("Market is uninitalized")]
    MarketUninitialized,
    // 6001
    #[msg("Market is suspended")]
    MarketSuspended,
    // 6002
    #[msg("Market has ended")]
    MarketEnded,
}
```
But that means you have to be sure of your use case.  Because if tomorrow I want to add a feature where the PDA is needed, it's too late because the first tweets don't have a PDA, and I guess we can't all updates by adding the PDA
So for a decentralized twitter where the goal is to see all the tweets, a PDA is useless
Ok I understood !  So actually in the tutorial that I am following, the use of PDAs is just there so that we can see them.  But in the case of using a blog, it is totally useless since to arrive on an article, it is necessary to consult the list of articles
Oh I think I understand.  For me in the seed there was the account of the post.  But in fact no, if I send the seed string + the ref, I have the possibility of recovering it directly without having to recover the whole list!
But that won't work for all usecases
So yeah, if your use case is ok to just look up all the accounts, then sure, you maybe don't need PDAs
Or I could just use the associated token address PDA with seeds = [Swifty, AlanCoin]
Where should I send them to? I could fetch every single token account ever made, lol, and check to see if you already have any with AlanCoin as their mint
Suppose I want to send you some AlanCoins
No, think of associated token accounts as a good example
That's fine, but in general you can't rely on fetching all accounts and then finding the right one (they're might be a ton of accounts)
For me the PDA is a facilitator ONLY in the case where it has to be given authority when it has to keep a piece of data and return it later on its own
(I'm boring sorry 😭😭)
But when we see a web2 blog, we have a list of articles (so we retrieve them all) and when we select one, we retrieve an article by its ID.  Here it's the same thing, we retrieve the articles whose owner is the user, and when we click on one, we go to his normal account or his PDA account.  The process is the same
Since there's no way to "guess" keypair addresses, they're completely random
Without that, you'd need to do something awkward like fetch all posts and figure out which one is the right one
The thing is that when the client finds the address, they already know which seeds to use
But we agree that in this case, whether I call the PDA address or the account of the post, it is the same thing?  Because to look for the PDA address, the client must in any case go and find the account address


Let's say that the seed is just an additional "filter" to say, instead of looking for all the articles, we can go look for specific articles of a specific blog
(Love this address) But for example when we retrieve all the articles of a user, it also returns the account of the article. So it is not difficult to find the address of the article! 

Sorry I'm quibbling, I'm really trying to understand. The little unlocking that will allow me to say to myself "Ah there it is better to use a PDA, or there it is not util"
Otherwise with seeds you can "just know" the right seeds to use
Sure, you'd have to do an annoying fetch on the client
you just change the seeds to get the pda address
yeah you can even get the posts inside the program
Mmh but for each article, I use a seed string + the article's account. So the PDA will be different each time. But how is it easier to find it? Because if I store the article without PDA, it will also be with its own account so we search against the account directly
If you didn't use seeds you'd have to somehow just remember that that post was at address asdasdfaslkja;slkdfjas;dlkfj
E.g. they can go, hmm, where did I put the 5th post on that blog? Oh right, seeds = ["post", the_blog.as_ref(), &[5].as_ref()]
They're using seeds so that they can easily look up specific posts etc. (as <@!938658528229462126> mentioned above)
That's fine
In the case of the blog, a different seed is used for the blog and the article
Whereas with a keypair address, they're completely random
I think the tutorial is losing me on the subject. Here I don't see at all how in their blog/article cases they decide to use a PDA. Maybe it's to link the data more easily to a blog account I don't know. I'll read it all again
Yeah, sometimes you don't care—in which case, the *other* nice thing about PDAs is that they're constructed from seeds, which can be memorable/meaningful
Ok so it's giving the program the ability to sign for you. So, in which case it is interesting? There is one clear case where I can see perfectly well how it is useful, but it is a single case
Anything involving authority over an account would have to be implemented on top
They are purely a funny address, meaning their special sauce is that only their deriving program can sign for them
In general, PDAs have nothing to do with having authority over an account
Both. Find out when the PDA logic is more interesting than the case of a classic account
No
PDAs in general are purely a funny address type—they don't inherently say anything about program authority etc.
The PDA has the authority over a created account, doesn't it?
Are you referring to a specific example of PDA use, or in general?
In fact I understand that the PDA is there to be the authority of an account. I have to keep on learning to know in which case it is really useful.

For tokens it's quite clear, the PDA keeps the token, and it needs the authority to send it back for example.

But in the example of the blog, I don't see how it's useful to manage a blog/article. Or maybe it's just the tutorial that puts it there, but it's not really useful in this case.

Same for a twitter, I don't see how the PDA is useful to be the authority of a tweet
What do you mean by authority of the data account?
At the end of the day, there are more than 1 solution to most problems but I'd use PDAs as well because it's much easier to link the owner for example
I would say that security is emphasized in the PDA because it is the authority of the data account. So of course the PDA doesn't need a public/private key, but in both cases there is an authority that manages. But for me, whether the data is linked to the account or to the PDA, it's a bit the same. If tomorrow I get hacked into my wallet, well PDA or not it's all my data that is compromised
What do you think the tradeoffs are with PDAs vs keypair addresses?
Well, in principle, if we simply store a message (like a tweet) we only need the author. But in my opinion for the blog it is the same, the blog is created by an account, the article too. I send you the tutorial so you can see how it works

https://dev.to/findiglay/building-a-blog-on-solana-2pg8
You can store it but can you link it easily like you do with a pda?
You can store data without PDA, I already do this 🤔 I'm just trying to understand why in this tutorial it does that when in my opinion it's not mandatory (I may be wrong)
When you have your tx ID, you can use a solana method (i forgot it 😭) for check the status of the transaction. You can always use an interval for check the tx until the status === confirmed or finalized
No no !  On a blog tutorial, he uses PDAs for the blog account and also PDAs for articles.  I try to understand why, what is its logic, and if for example I wanted to make a decentralized twitter, does it make sense to use them
and when I try it confirmTransaction() hangs for a long time even after on the blockchain the sig looks confirmed
I was reading this: https://github.com/solana-labs/solana/issues/23949
What is the best way to wait for solana to confirm a txn
Maybe <@!857917486237220874> meant using regular keypair addresses?
you use PDA's to store data. How else are you going to store the blogs and articles?
are there any wallets that you can allow dapps to autoconfirm txs without pop-up? You used to be able to do it with Phantom but they removed the feature


///////////////////////////////////////////////////////////////////////////////////////////////

ok i think this was user error i was doing something weird, its working fine now, thanks
Nope, you'll need to pass in the account from the client
Let's say I have saved the publickey of a certain account in a struct (PDA). Is there a way to retrieve the lamports of that account, if I only have the pubkey from the struct? I.e only the PDA is in the context and not the original accountInfo
Looks like I'm gonna have to prioritize upgrading then haha thanks
oh, yes, `pub mint: Account<'info, Mint>,`
`>= 0.23.0`, you can do 
```
catch (err) { expect(err.error.errorCode.code).is.equal("DepositCapError") }
```
As far as I know there isn't any super easy way to do that yet 😬
Is `mint` an account you're passing in? Can't tell from that snippet
This worked thanks mate
bump, if anyone has a link to a large opensource project using 0.23 that would be great as well, ty
Have you find decent open source project
and is there a way to suppress the resulting console log message as well?
Is there a more idiomatic way than as follows to test that a specific error was returned by the program:
```
const depositCapErrorCode = program.idl.errors.find((e) => e.name == "DepositCapError").code.toString(16);
try {[program calls here]} catch (e) {assert.isTrue(e.message.includes(depositCapErrorCode))}
```
see https://book.anchor-lang.com/chapter_3/the_accounts_struct.html#the-account-type
Thanks! Makes sense
it uses the crate where `Loan` came from as the owner
Oh, thank you very much. But if this is not my program's account, but account of another program. How does it check?
yes. Account already does the owner check. docs.rs/anchor-lang
is it a wrong way?
yes, using like this
```#[derive(Accounts)]
#[instruction(nft_price: u64)]
pub struct ProposeLoan<'info> {
    #[account(
        owner = MY_PROGRAM_ID.parse::<Pubkey>().unwrap(),]
    pub loan: Box<Account<'info, Loan>>,

}```
are you using `owner` on `Account`?
updated, now another error ```the trait bound `Box<anchor_lang::prelude::Account<'_, loan::Loan>>: AsRef<anchor_lang::prelude::AccountInfo<'_>>` is not satisfied
   --> programs/community-pools-anchor/src/instructions/approve_loan_by_admin.rs:9:10
    |
9   | #[derive(Accounts)]
    |          ^^^^^^^^ expected an implementor of trait `AsRef<anchor_lang::prelude::AccountInfo<'_>>`
    |
``` with same code
bug in 0.22.0, update to 0.23.0
Hello. Can you please help, the owner constaint ```owner = MY_PROGRAM_ID.parse::<Pubkey>().unwrap()``` doesn't work, gives me this error ```no field `owner` on type `&anchor_lang::prelude::Account<'_, loan::Loan>`
 --> programs/community-pools-anchor/src/instructions/approve_loan_by_admin.rs:9:10
  |
9 | #[derive(Accounts)]
  |          ^^^^^^^^ unknown field
  |
  = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)```. Using anchor version ```anchor-lang = { version = "0.22.0", features = ["init-if-needed"]}```. Can you please help or give me a workaround if it was removed
Just do what it said: `solana-keygen new -o /Users/user/.config/solana/id.json"`
after "anchor deploy" I have following error: `Deploying workspace: http://localhost:8899
Upgrade authority: /Users/user/.config/solana/id.json
Deploying program "gm-anchor"...
Program path: /Users/user/Documents/gm-anchor/target/deploy/gm_anchor.so...
Error: Dynamic program error: No default signer found, run "solana-keygen new -o /Users/user/.config/solana/id.json" to create a new one
There was a problem deploying: Output { status: ExitStatus(unix_wait_status(256)), stdout: "", stderr: "" }.`
I guess my question is wrong. What i mean is i have 2 workspaces  in single anchor project, say test1 and test2 so each workspace has errors.rs module.
errors.rs
Probably, You've defined this error at lib.rs or error.rs file
0x1776
i didn’t have problem until i was performing CPI, when i invoke a CPI instruction there's conflict between messages
What's the exact hex error code
Yes same error codes in both idl's
The exact error code?
I have 2 programs in single workspace, I’m getting wrong error messages because of error code collusion. Both program's generate same error codes starting from 6000..
Got it thanks
The PDA will be owned by the program, so the program will need to decide which accounts it will allow withdrawals to. You can do this by creating a withdrawal instruction that will require the signer be a certain address.
How can i create a pda that only i can take funds out of but anyone can pass into the program so they can transfer funds to me?
here is my code:
```
pub struct ProposalRepute<'info> {
    #[account(mut)]
    pub initializer: Signer<'info>,
    /// CHECK: This is not dangerous because we don't read or write from this account
    pub proposer: UncheckedAccount<'info>,
    #[account(mut)]
    pub proposer_user_history: AccountLoader<'info, UserHistory>,
    #[account(
        mut,
        constraint = proposal.load().unwrap().proposer == *proposer.to_account_info().key,
        constraint = proposal.load().unwrap().task == *task.to_account_info().key,
    )]
    pub proposal: AccountLoader<'info, Proposal>,
    #[account(mut)]
    pub task: AccountLoader<'info, Task>,
    #[account(mut)]
    pub treasury_token_acc: Account<'info, TokenAccount>,
    #[account(
        init_if_needed,
        payer = initializer,
        associated_token::mint = mint,
        associated_token::authority = proposer,
    )]
    pub proposer_token_acc: Account<'info, TokenAccount>,
    ...
```
for anyone searching this, it's related to init'ing an ATA, haven't figured out the solution yet
could any one can help

but when i run "anchor run", my provider.wokerspace is empty
thanks i got it
hey guys,  I want to set up a js client  using anchor.   shoud i use the cmd "anchor run" to the entry js file to set up?  or there are any other better way
but when i use "anchor run" cmd, it always throw Error like this :
% anchor run ./src/server.js
Error: Unable to find script
not sure if this is a standard issue, been searching through discussion threads for a bit now, will continue searching
hey folks, i'm upgrading my anchor program to the latest version, and i've worked through most of the errors, but i still have a bunch of these:
```method `exit` not found for this```
```function or associated item `try_accounts` not found for this```
you can do like this na
`const txHash = await program.methods.xyz(.....).accounts({.......}).rpc()`
anyone know how to get it?
hey guys, I want to ask question:   how to get the tx hash when i send a tx from js client by anchor rpc method?
Think you'll just have to experiment with `solana_program::log::sol_log_compute_units()`
sweet thanks
By default anchor does it for you
Because I see on account creation that theres some SOL stored onto each generated account when initialised
Is the rent cost automatically calculated by anchor or is it something we have to do ourselves
assume the u64s are just stored unsorted in an array, this is a profiling question not a datastructures question
also: how would you go about answering the following question:

i want to find the min of N u64s. how big can N be before I run out of compute (for sake of question ignore the new compute budget stuff)
alright. well worst case scenario i just store *those* in a master list on-chain or just store them off chain. thanks
Think so, but sounds like solana might deprecate that or something? Not sure
great, thanks
can you still query RPC nodes for all accounts owned by a given program?
The remembering-it part makes PDAs much easier to use
Cool, then you're probably fine with a keypair address (just have to remember it)
in my case there is no reason i can see to care about signatures, because the only purpose of the account is to store orders from everyone
Yeah, possibly—it depends on if your program will ever want that address to sign (up to its logic, since, yeah, if it owns the account it doesn't *need* a signature for anything)
once the program owns the keypair address, though, the secret half doesnt do anything does it?
PDAs can only be signed for by their deriving program, using `invoke_signed`
Keypair addresses can only be signed for by whoever has the secret half of the keypair
Aside from size stuff really the main difference is in how they're signed for
that is true
One trickiness with keypair addresses is just that you have to actually remember them (they're random)
Run into some sort of gotcha
Screwed in what way?
I am trying to figure out whether I will get screwed if I try to use a non-PDA, program owned account for something
yeah I was aware of that difference. does Serum use PDAs for orderbook slabs?
There's also currently a size restriction on accounts that live at PDAs (10kb vs 10mb for keypair addresses)
They're just different—their main difference is in how they're signed for, plus the fact that PDAs can be "memorable", since you can pick memorable/human-readable seeds
perhaps I would do so when I want the address to follow from other parameters?
In that case, when must I use a PDA vs. a program-owned account?
Yeah, the type of address is totally independent of program ownership of the *account*.
No, that's incorrect. The program that owns an account can write to the account (regardless of what kind of address it lives at) whenever it wants—whether it requires a signature or not is up to the program's own logic.
or can any account be owned by a program even if it is not a PDA?
unrelated q: am i correct in understanding that if an account doesnt have a PDA, then the only way to write to it is with a signature from the associated private key?
is there a generic heap program on solana? you could make a lot of data structures as generic programs
have Anchor write the specification to a file of my choosing
Can I somehow set a custom directory/file for the IDL-typescript file?


///////////////////////////////////////////////////////////////////////////////////////////////

Yes, check the code
hey all, still getting errors when attempting to import Wallet into nextjs app. Is it because it's declared to TS but not exported to JS?
Link below to my question, would appreciate feedback on this:
https://stackoverflow.com/questions/71743279/attempted-import-error-wallet-is-not-exported-from-project-serum-anchor
If you're still stuck on this, my issue was that the order of the `#[instruction(...args)]` has to match the instruction args exactly. I had reversed two args accidentally so Anchor was trying to parse the bytes incorrectly. After I fixed the ordering, passing the object on the JS side worked like a charm.
So cool !
yes
and Provider is not a compulsury parameter
Guys I am trying to create a Solana Pay Transaction Request and at this point i am getting the above error for `const program = new anchor.Program(idl, programId);` this line of code I know i need to add provider but I cannot create the wallet at the server side
`const program = new anchor.Program(idl, programId);`
This is a Error I am getting
TypeError [ERR_INVALID_ARG_TYPE]: The "path" argument must be of type string or an instance of Buffer or URL. Received undefined
So the tx builder know when he need to send the SystemProgram or TokenProgram ? lol
Thanks for trying!!
maybe alan can help you here ser
Yeah did that but no luck..
idk the reason tho, one thing you can do it upgrade anchor to latest one
I believe you can define a Typescript interface and it'll cast properly
ok then it make sense
Copy paste error..
looks fine for me, don't know why it is throwing.
just crosschecking use anchor_lang::prelude::; is actually `use anchor_lang::prelude::*;`
and use super::; should be `use super::*;`
use anchor_lang::prelude::*;

declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");

#[program]
pub mod pda_example {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, vote_account_bump: u8) -> Result<()>{
        ctx.accounts.vote_account.bump = vote_account_bump;
        Ok(())
    }
    
    pub fn vote_crunchy(ctx: Context<Vote>) -> Result<()>{
        ctx.accounts.vote_account.crunchy += 1;
        Ok(())
    }

    pub fn vote_smooth(ctx: Context<Vote>) -> Result<()>{
        ctx.accounts.vote_account.smooth += 1;
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(vote_account_bump: u8)]
pub struct Initialize<'info> {
    #[account(init, seeds = [b"vote_account".as_ref()], bump = vote_account_bump, payer = user)]
    vote_account: Account<'info, VotingState>,
    user: Signer<'info>,
    system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct Vote<'info>{
    #[account(mut, seeds = [b"vote_account".as_ref()], bump = vote_account.bump)]
    vote_account: Account<'info, VotingState>,
}

#[account]
#[derive(Default)]
pub struct VotingState{
    crunchy: u64,
    smooth: u64,
    bump: u8,
}
https://github.com/project-serum/anchor/tree/master/tests/cpi-returns
I didnt find any
share you code ser/
What can be the reason behind this error?

no function or associated item named `try_accounts` found for struct `Initialize` in the current scope
  --> programs/pda_example/src/lib.rs:5:1
   |
5  | #[program]
   | ^^^^^^^^^^ function or associated item not found in `Initialize<'_>`
check anchor repo there are lot of examples
how do I return value from a anchor program function?
if yes then do `Box<Account<'info, someXYX>>`
It's our own CPI program?
<@134416332509675520>, I got an error for cpi-call
`Program failed to complete: Access violation in stack frame 7 at address 0x200007ff8 of size 8 by instruction #1063`
But for example, try to represent 9007199254740993 as a number in JS (see what happens)
As regular numbers, yeah
So all u32s, u16s, i32s, i16s can be sent as is??
The issue is that `number`s in JS/TS can only represent all integers up to 2^53 (they're doubles under the hood); that's why you need to use BN for u64s, since some u64s are too big to be represented as a JS double. But u32s and u16s etc are smaller and are ok.
Do we have to use that for just u64 or even for u16?
Anyone have pointers to resources where I could learn how to achieve this?
Hi <@150318120567963648>, I am also facing the same issue and, I can't able to send the struct type object from java-script. how can you attain that, can you share some code snippet that might be helpful, thanks.
Still does, but the new tx builder does it for you
you need to take a look at basic of rust here
https://doc.rust-lang.org/std/option/
doesnt seems to be working
can u elaborate?
try using `remaining_accounts`
im not passing customspltoken field because i want it to be an optional field
```rs
 pub fn initialize_event(
        ctx: Context<InitializeEvent>,
        create_event_info: CreateEventInput,
    ) -> Result<()> {
        msg!("Entry");
        let CreateEventInput {
            title,
            uri,
            description,
            link,
            fee,
            seats,
            date,
            venue,
            is_cut_payed_by_creator,
            custom_spl_token,
        } = create_event_info;
```
```rs
#[derive(AnchorSerialize, AnchorDeserialize, Default, Clone)]
pub struct CreateEventInput {
    pub title: String,
    pub description: String,
    pub uri: String,
    pub link: String,
    pub fee: u64, //lamports
    pub seats: u64,
    pub date: String,
    pub venue: String,
    pub is_cut_payed_by_creator: bool,
    pub custom_spl_token: Option<Pubkey>,
}
```
```Property 'customSplToken' is missing in type '{ title: string; uri: string; link: string; description: string; fee: anchor.BN; seats: anchor.BN; date: string; venue: string; isCutPayedByCreator: true; }' but required in type 'TypeDef<{ name: "CreateEventInput"; type: { kind: "struct"; fields: [{ name: "title"; type: "string"; }, { name: "description"; type: "string"; }, { name: "uri"; type: "string"; }, { name: "link"; type: "string"; }, ... 5 more ..., { ...; }]; }; } & { ...; }, Record<...>>'.
``` on client side i get this error
whats wrong with Rosetta?
try this https://hackmd.io/@ironaddicteddog/solana-anchor-escrow
anyone have any good resources on how to work with bumps and seeds on a client account that is not a pda just an associated token account? 
how do you generate/get the bump to use for signing?
Hey bro have you figured this out?
But there's still a few things that are only rosetta capable so keep that as an option
Honestly once you've done set up its completely fine
As far as I know everything works normally now (I'm on an M1 but I've been too lazy to quit using Rosetta)
anyone uses M1 mac? How much more tedious is it to develop on it?
ah! That makes sense. My VSCODE had a strikethrough it
you can use it but it's getting deprecated
and oh i see!
why not `program.rpc`?
new sytnax is ```js
await program.methods.setData(new BN(10)).accounts(...).rpc();
```
We are using `BN` because the input is type `u64`
this is my current test file that is working
would i do something like `await program.rpc.setData(10)`?
how would I run a program like this from my test file?
<@938658528229462126>
<@938658528229462126> thank you!
No need to send systemProgram in transaction now ? (0.23.0)
https://discord.com/channels/889577356681945098/889577399308656662/962361835590406215
https://book.anchor-lang.com/chapter_3/high-level_overview.html
This work too lol it should not !
Been stuck getting an error invalid blockhash whenever I try to deploy now are there any solutions to this?
And other thing, I don't understand why this call works. It should not...
nvm dumb mistake with seeds.
Get Error Message: An address constraint was violated
Hi! How to get error message from program in 0.23.0 now ?
can't see an obvious difference in the accounts
hmm i have `init_if_needed` on two accounts. it works as expected for one, but for the other, i get `XXXXX signer privilege escalated` where XXXXX is the public key of the PDA i am trying to init_if_needed
Dev Question: Is there a simple Solana Anchor Devnet hello world example? 👋 (Btw, hi everyone. I'm Qazi. A fellow developer & run a community of 1.5m devs @cleverprogrammer on YouTube)
it does. the two features are unrelated
does `init_if_needed` not work for zero_copy accounts in 0.22.0?
What would be the optimal solution for upgrading an accounts data, if the accounts' type layout has changed at some point, or rather has anyone found a proper way of dealing with this?
However, I still get the same error
Okay I think I was passing the seeds wrongly, i used a `&[u8]` in my Rust program which should have been `[u8; 1]` as returned by `to_le_bytes()` and on the TypeScript side I now pass a `Buffer.from([number])` instead of `Uint8Array.of(number)`.
Tbh I really don't know where else to get help, I've scoured the depths of the internet but everyone seems to be able to resolve this issue very trivially while I'm stuck in my confusion.
https://stackoverflow.com/questions/71807112/how-to-derive-pdas-with-multiple-seeds-in-anchor-rust

I've got more details and code in this SO question
Hello, can anyone help me with this issue I've been having in deriving PDAs? I can get it working perfectly when I only use one seed, but as soon as I add a second seed I get a "signer privilege escalated" error (something with a `Cross-program invocation with unauthorized signer or writable account`?)


///////////////////////////////////////////////////////////////////////////////////////////////

more things to note: This is a zero_copy struct
``` 
stability_spread: Decimal { val: 0, scale: 4 }, 
max_discount: Decimal { val: 5000, scale: 4 },
vault_target_ratio: Decimal { val: 10000, scale: 4 }, min_operation_quantity: Decimal { val: 0, scale: 4 }, 
auction_duration: 100000000, 
min_profit: Decimal { val: 10, scale: 4 }, 
user_wallet_dank_margin: Decimal { val: 10000000, scale: 4 }, 
bump: 254 }
```
on chain deser:

off chain deser:
how can I fix this?
hey I am running into issues with decoding nested structs in accounts. When I test the program on chain, it looks like the struct has the right values, but when I deserialize the account with the ts library the fields of the struct seem to be unaligned.
Looks like all old versions of anchor got "yanked" from crates.io https://crates.io/crates/anchor-lang/versions

If this is breaking your CI, it looks like you can still build with yanked versions but any publish will fail FYI
But still the same
I've used the `Box<Account<>>`
is it possible to pass a CPI into a context so that I can dynamically call programs?
super, thanks
Nope, in fact that's actually what that source dependency accomplishes: by depending on programA anchor will understand how its discriminator should work, as well as that AccountA accounts have to be owned by programA.
Then i would check if my idl is up to date.
Yes I have space = 8+750
see :  https://book.anchor-lang.com/chapter_5/space.html
No, use remaining accounts if you need that
Hey all,
Is there a way to have an optional `Account<'info, SomeData>>` using anchor ?
Oh its just a list of pubkey then <:think:340844434377932800>. So i would check like CQFD asked, if you have allocated enough size for the account.
#[account]  
pub struct RaffleList{
    pub contestants: [Pubkey; 7],
}

This is the struct..
and there's no problem with the discriminator for the account? (AccountA is initialized by program A and used by programB)
You can add a dependency on program A to program B's Cargo.toml, and then just do `that_account: Account<'info, AccountA>`
anybody knows how to deserialize an account from another program? In detail, let's say that program A is using
```
#[account] 
AccountA { 
  /// params
}
```
and I'm passing this account to program B, what's the best practice to deserialize the `AccountInfo<'info>` to the struct `AccountA` ?
Did you allocate enough space for the account?
If you could just copy past your structs here it would be helpful to see what is the problem exactly
I see, is the participant struct "tagged" with such macro : 
```#[derive(AnchorSerialize, AnchorDeserialize, Clone)] ``` ?
No! What I meant was I have an account and its struct has participants: [Pubkey; 7]...
You can't have an array of account in the context. If you want one you have to use remaining accounts, but i would avoid that if possible
I'm getting a Custom program error: 0x66 error. Perhaps some deserialization issue.. I am dealing with an array of Pubkeys in the function and the account that it is getting deserialized to also has an array..
This is a situation where you just have to help out rust's lifetime inference, I'm not sure I can explain it in a nice way though
I might start some work following this issue : https://github.com/project-serum/anchor/issues/673
ping me when it could work
Haha alright 🙂
hmm maybe but I want to finish the project I'm working on first, I just saw too many people having issues with deployment so I made it as an emergency situation 😄
Are you planning to merge that to Anchor? Let me know if I can help 🙂
awesome, I've been looking for this for quite some time now
yeah this is a custom deployment script, anchor is using solana-cli in the background
basically a program id is just another account
Ha ok! You need to create the wallet first then, take a look here : https://docs.solana.com/cli/deploy-a-program
<@938658528229462126> that's basically the custom RPC way that Anchor doesn't have for now right?
But this is the first time I'd be deploying.. I don't have the program id yet..
thanks !
<@938658528229462126> are you kidding me haha I started reading at the message right after yours
but you're supposed to put the ID not the name
check this out: https://discord.com/channels/889577356681945098/889577399308656662/962361835590406215
So I cleaned everything up..
Yeah I did that.. like this --- anchor deploy --program-name pdaexample.so
And it got deployed.. But I didn't get any program_id in the idl..
like that `anchor deploy --program-name <program id>`
I guess you tried to use the `--program-name` parameter in `anchor deploy` ?
Yes 100%
<@946759700421152808>  are you sure about the path of your wallet key?

wanna share your Anchor.toml config ?
I'm not able to deploy either.. Although I am trying to deploy to the devnet and even after explicitly passing the --provider.cluster flag

with the anchor.toml setup for mainnet
`anchor deploy`
What is the command you're using?
Hey ! Yes I am
Hey, are you deploying to the mainnet?
Should we only blame the low tps or could this error come from something else (mainnet deploy) ?

```
Error: Custom: Invalid blockhash
There was a problem deploying: Output { status: ExitStatus(unix_wait_status(256)), stdout: "", stderr: "" }.
```
Your screenshot shows all Windows paths
error: Invalid value for '--program-id <PROGRAM_ID>': unrecognized signer source is what I am getting when I am trying to deploy my program using anchor deploy --provider.cluster devnet
Hey would it be possible to explain a little bit more on why this solution works?
https://github.com/Niceboy0829/Solana_NFT_Marketplace/blob/main/programs/test-stake/src/lib.rs#L167-#L169                                                                                                            ***       Error***:-  cannot find type `ProgramAccount` in this scope not found in this scope
No, i don't get any error when i remove the `*` from the line
Do we not get the program_id in target/idl anymore with anchor v23.0? If not how to get it?
`AccountInfo.key` gives a reference to `Pubkey`  and state is stored as `Pubkey` so you need to deref it with `*` so that they are the same type. Are you sure you don't get type error when you remove `*`?
``` pub fn initialize_dashboard(ctx: Context<Initializedashboard>) -> Result<()> {
        let dashboard = &mut ctx.accounts.dashboard;
        dashboard.game_count = 0;
        dashboard.address = *dashboard.to_account_info().key;
        Ok(())
    }```   I was going through tictactoe program on project-serum/anchor, i want to know why we are using  asterisks with dashboard.to_account_info().key, i am getting same result without it
see if that fixes it
if you are on debian based distro: `sudo apt update && sudo apt upgrade && sudo apt install build-essential`
I've had linking issues with rust on ARM architecture before and I can't remember the exact solution but it had something to do with the libs
<@938658528229462126>
...I am using WSL on windows bro
windows is problematic with solana in general, you can use WSL on Windows
<@218650902930653186> double check these .env variables: `PAYER_KP_PATH` `PROGRAM_KP_PATH`
it means the program authority doesn't match your wallet
running anchor.exe build and getting error in linking with ld.lld
Anyone know how to fix it
Been trying to use the solana deployer program to deploy but been getting this error
Hello to all I have these function that works in devnet but don't works in mainnet, any help?
These is the link of the code:
https://stackblitz.com/edit/typescript-thzat9?file=index.ts
Does anyone have any ideas



///////////////////////////////////////////////////////////////////////////////////////////////

Hello! When you are building out your struct and you want to add in an account with an "Assigned Program Id". How would you reference this program id? I tried owner but for some reason it will build and deploy but when I try to interact with the contract, I am getting the error "Transaction loads a writable account that cannot be written". Any help would be greatly appreciated!
Is it necessary to send accounts from the frontend to a function even when the context of the function is not initializing them..  Just mutating them..
Hi, 
Can we make a transaction like transfer of sol in anchor from the program_id ?
I'm stuck.
```

            let ix = anchor_lang::solana_program::system_instruction::transfer(ctx.accounts.player.key, ctx.program_id, entry_price) ;
            anchor_lang::solana_program::program::invoke(
                &ix,
                &[
                    ctx.accounts.player.to_account_info(),
                    ctx.program_id
                    ]
                )?;
```
Thanks
I'm currently running `rustc 1.57.0` Guessing I should jump to `1.60`?
outdated rust version
Any tips?
I'm getting this compile warning when trying to build `cargo install --git https://github.com/project-serum/anchor --tag v0.24.1 anchor-cli --locked`
Thanks!
Ahh okay
But yeah be mindful that that's a bit risky, since the client can pass any program whatsoever there, so unless you have some way to validate the address in some way, it could be any program at all
If you want it to be truly arbitrary you'd have to pass it as an `AccountInfo<'info>`
what would the type be for the program u're passing in?
Ok awesome
ahhhh
But yeah, as long as you pass all the accounts you need (including the program you want to CPI to), you can do whatever you want
Can you say more? Not sure what you mean
hey guys is it possible to pass a CPI into a context so that I can dynamically call programs?
it is even fixing a new problem i had ^^ this function's way better ^^
oh nice ^^ didnt knew that function ^^ thanks again ^^
no just `arg1, arg2` without `()` but the even better way is to use `await program.methods.hostGame(arg1, arg2).accounts({..}).rpc()`
by the way is await program.rpc.hostGame((arg1, ar2), { .... the correct way to use multiple parameters ?
oh thanks ^^
there's `LAMPORTS_PER_SOL` in `@solana/web3.js` for that
lamports to sol ^^
and for ppl that don't understand i failed x) it wasnt meant to be 1xx9 but 1x(10xx9)
thanks ^^
yes
so i should be using anchor.BN() for every u64 variable ? (i think it's a yes)
it fixed it ^^ thanks
use `new anchor.BN(1**9)`
my issue: ```
TypeError: src.toArrayLike is not a function
    at BNLayout.encode (/root/wtcrpc/backend/node_modules/@project-serum/borsh/dist/lib/index.js:37:37)
    at Structure.encode (/root/wtcrpc/backend/node_modules/buffer-layout/lib/Layout.js:1263:26)
    at BorshInstructionCoder._encode (/root/wtcrpc/backend/node_modules/@project-serum/anchor/dist/cjs/coder/borsh/instruction.js:87:28)
    at BorshInstructionCoder.encode (/root/wtcrpc/backend/node_modules/@project-serum/anchor/dist/cjs/coder/borsh/instruction.js:72:21)
    at /root/wtcrpc/backend/node_modules/@project-serum/anchor/dist/cjs/program/namespace/index.js:39:100
    at ix (/root/wtcrpc/backend/node_modules/@project-serum/anchor/dist/cjs/program/namespace/instruction.js:46:23)
    at txFn (/root/wtcrpc/backend/node_modules/@project-serum/anchor/dist/cjs/program/namespace/transaction.js:16:20)
    at Object.rpc [as hostGame] (/root/wtcrpc/backend/node_modules/@project-serum/anchor/dist/cjs/program/namespace/rpc.js:8:24)
    at main (/root/wtcrpc/backend/tests/backend.js:40:21)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
root@ELSAF:~/wtcrpc/backend# ```
currently having an issue that i unfortunately can't resolve i don't know why ^^ my code: ```rs
    pub fn host_game(ctx: Context<HostGame>, bet_amount: u64) -> Result<()> {
        let base_account = &mut ctx.accounts.base_account;
        let user = &mut ctx.accounts.user;
        let temp = WaitingPlayer {
            amount: bet_amount,
            address: *user.to_account_info().key,
        };
        base_account.wait_list.push(temp);
        Ok(())
    }

#[derive(Accounts)]
pub struct HostGame<'info> {
    #[account(mut)]
    pub base_account: Account<'info, BaseAccount>,
    #[account(mut)]
    pub user: Signer<'info>,
}

#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
pub struct WaitingPlayer {
    pub amount: u64,
    pub address: Pubkey,
}

#[account]
pub struct BaseAccount {
    pub bet_list: Vec<Bet>,
    pub total_bets: u64,
    pub balance: u64,
    pub wait_list: Vec<WaitingPlayer>,
}
``` for rust and for js: ```js
  await program.rpc.hostGame(1**9, {
    accounts: {
      baseAccount: baseAccount.publicKey,
      user: provider.wallet.publicKey,
    },
  })```
It’s a Solend reserve/market/etc, maybe I just need to include those accounts (with anchor porting, as they don’t implement AnchorSerialize/AnchorDeserialize)… I’ll try tomorrow. Thanks for the support 🙏🏼
So you don't know the type of the account you're deserializing beforehand?
but where should I get the generic `T` ?
The issue might be `AccountInfo` not implementing the necessary traits required by `Accounts`
You could  `Box<Account<'info, T>` and then use `.to_account_info()` later, since `Account` really is just a wrapper around `AccountInfo`.
ofc I tried `Box<AccountInfo<'info>>` but I think is not possible, I got some errors for the `#[derive(Accounts)]`
I've boxed all the `Account<'info, Xyz>` that I can, I've left only some `AccountInfo<'info>,` but I'm stil getting same stack error: `Program failed to complete: Access violation in stack frame 7 at address 0x200007ff8 of size 8 by instruction #1104`

there's a way to "Box" `AccountInfo<'info>,` ?
thank you
You are trying to deploy to localhost, You are not running `solana-test-validator`
RPC request error when running anchor build, anyone have this before?
If anybody is trying to update `anchor` to latest version `0.24.0` and if you are facing this error below 
```bash
error: there is no argument named `rpc_port`
    --> cli/src/lib.rs:2208:40
     |
2208 |             "Your configured rpc port: {rpc_port} is already in use"
     |                                        ^^^^^^^^^^

error: there is no argument named `faucet_port`
    --> cli/src/lib.rs:2218:43
     |
2218 |             "Your configured faucet port: {faucet_port} is already in use"
```
Then please update `rust` to the latest version. You can thank me later for saving your precious hours :))
somehow I got it working by modifying Anchor.toml file but not sure what was the issue exactly
Tbh I'm confused how that Anchor.toml works, certainly at least for the candy machine program you're trying to deploy (it doesn't mention the candymachine program at all right?)
You're running out of stack space, often you can fix it by just doing a few `Box<Account<'info, Whatever>>`s in your derive(Accounts) struct
`499999991.215114832 SOL`
What does `solana balance` give?
I'm starting having this error randomly: 
`Program failed to complete: Access violation in stack frame 7 at address 0x200007ff8 of size 8 by instruction #1104`
I'm trying to re-compile from scratch (removing old .so) but it seems is not solving...
so what do you think guys, any ideas?
ok, so here is the file then https://github.com/metaplex-foundation/metaplex-program-library/blob/master/Anchor.toml
it's in the outer directory, you need to have `Anchor.toml` in order for `anchor idl init` to work
https://github.com/metaplex-foundation/metaplex-program-library/tree/master/candy-machine/program
there is no Anchor.toml file
So I wonder if your wallet is misconfigured in your Anchor.toml or something
But you don't need to transfer sol anywhere, you just need to *have* sol in your wallet
Mm, what does your Anchor.toml look like? I'm not sure how you could get that error if you're actually deploying the idl locally
here's the command that fails:
```
anchor idl init GF3NkHMsDeUxjm3XuhzsivUYS7kVR4e6R8iCdit4mrwZ --filepath /Users/knivets/Projects/solana/mtpl/metaplex-program-library/candy-machine/program/basic.json
Error: unable to confirm transaction. This can happen in situations such as transaction expiration and insufficient fee-payer funds

Caused by:
    unable to confirm transaction. This can happen in situations such as transaction expiration and insufficient fee-payer funds
```
```
$ solana config get
Config File: /Users/knivets/.config/solana/cli/config.yml
RPC URL: http://localhost:8899 
WebSocket URL: ws://localhost:8900/ (computed)
Keypair Path: /Users/knivets/.config/solana/devnet.json 
Commitment: confirmed 
```
What does `solana config get` say?
yes
You're getting that error even locally?
Ah, no, that would be something else
because the `anchor idl init` seems to be stuck with `Finalizing transaction` and fails with a `Error: unable to confirm transaction. This can happen in situations such as transaction expiration and insufficient fee-payer funds` so I thought perhaps funding an account might resolve the issue
But why would you need to transfer sol anywhere?
and I'm trying to deploy the IDL
As far as I know
You can't get that sol back
more context: I'm trying to deploy a local Candy Machine program
Ah, ok—why do you want to do that?
I deployed a program to a local Solana cluster, and trying to transfer some SOL to that program's address
Which program account? The program_id account?
Hi! Has anyone received an error when trying to transfer SOL to program account locally? Neither the `solana airdrop` nor transferring via Phantom works if the address is of the program account. For example Phantom throws an error instantly when I hit send, however if I specify another random account address it works (both in Phantom and `solana airdrop`)
okay thx
Yeah, they're 8 bytes, but probably simpler to just use u64
the solana compil is 32 bit or 64bit ?
hey the bros just simple we agree that if I specify a usize on a struct is like the same as I specify u64 right ?
I'll give that a try thank you
use `getAccountInfo` and then manually index into the data. you need to make sure to respect the padding when doing that
I found this: https://github.com/project-serum/anchor/issues/1720, but I am unsure how to implement the workarounds suggested


///////////////////////////////////////////////////////////////////////////////////////////////

It seems like the issue is that the directory it's using is wrong, which is set here: https://github.com/project-serum/anchor/blob/master/cli/src/lib.rs#L418

How can I set this to something else?
Trying to deploy my program with `anchor deploy` and getting a really weird error (have previously deployed the program before, but just upgraded to anchor v0.23).

```
Deploying workspace: https://api.devnet.solana.com
Upgrade authority: /Users/xxx/.config/solana/devnet.json
Deploying program "nft-candy-machine"...
Program path: /Users/xxx/Documents/personal/solana/metaplex/rust/target/deploy/nft_candy_machine.so...
Error: Unable to open program file: No such file or directory (os error 2)
There was a problem deploying: Output { status: ExitStatus(unix_wait_status(256)), stdout: "", stderr: "" }.
```

I think it's looking in the wrong directory for the `so` file, given that the `so` file exists in `/Users/xxx/Documents/personal/solana/metaplex/rust/nft-candy-machine/target/deploy/nft_candy_machine.so` and not in the directory it's looking for (not looking within the `nft-candy-machine` directory). How can I fix this?
Oooh...yeah that makes sense. Works now!
Think the `owner` constraint is for the *program* owner. To check the token owner, you'd need to do `contraint = token_account.owner == ...`
I'm getting an error, even tho I checked in the explorer and confirmed, that this address is listed as the "Owner" of the passed account.
Can I check ownership of a token account like this?
Okay that helps. Thanks!
They will show up as `AccountInfo`s in your program (via `ctx.remaining_accounts`). So yeah, you'll need to do all verification yourself
Are those accounts verified? Like I’m sending the PDA pubkeys of an Account which needs to be already initialised or i need to manually verify them in function?
Yep
Thanks <@!134416332509675520>, are you referring to this [https://github.com/project-serum/anchor/blob/4ebcc5fb7e37147b061ce777d4409790a6296759/tests/lockup/tests/lockup.js#L955]
I want to use `init_if_needed` to initialize a PDA. However, I want to avoid people trying to re-initialize the account once it has been initialized, especially want to avoid them re-initializing the account with a different bump seed. What is the best way to avoid this?

Can I verify that the user is not trying to re-assign the seed on the account if it equals 0 (which indicates it is uninitialized)? Or is there a better way to do it?
You'll have to use the `remainingAccounts` feature (try searching the anchor repo for examples)
Is it possible I can send array of accounts
```
{
  accounts: {
    pdaAccounts: [pda1, pda2, pda3], // <- Like this 
    systemProgram: anchor.web3.SystemProgram.programId
  },
  signers: [],
}
```
If thats not possible, then if i send Vec of Pubkeys as arguments to the function how can i verify that given pda pubkeys are indeed initialised accounts?
Happy to help.
Player is a pda and I know with `init` it's mutable but I didn't think about when I'm using the seeds again to ensure it's the same account that now I have to use `mut` since I'm not creating it or anything. Makes perfect sense and it works. Thank you so much!
pretty much...
ah ok yea as expected, so the rule of thumb is generally allocate more space than needed for a struct in case need to add new fields into it later
If you did not allocate any more space then you needed back then, afaik yes you'd have to create a new account.
seems like the only way right now is to make a new struct
I think the scenario for me is that Id like to add some flags (Option<u8>) into the current structure in my program
I think you need to mark the `player` account as `mut`.
Im not sure how this will translate into a fixed Account struct with anchor
As long as rising space requirements are your only motivator for account migration, probably not :).
New to all this so forgive my ignorance.
I’ve got an account created and I want to change some data in it. I have this method `SetPlayerName` with the context that looks like so:
```rust
#[derive(Accounts)]
pub struct SetPlayerName<'info> {
    #[account(
        seeds = [b"player".as_ref(), owner_key.key.as_ref()], 
        bump, 
    )]
    pub player: Account<'info, Player>,
    #[account(mut)]
    pub owner_key: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```

The handler:
```rust
pub fn set_player_name(ctx: Context<SetPlayerName>, name: String) -> Result<()> {
    let player = &mut ctx.accounts.player;

    player.name = name;

    Ok(())
}
```

from the client side I call it:
```javascript
const tx = await wowsProgram.methods.setPlayerName(“newname”)
.accounts({
        player: playerKey,
        ownerKey: wallet.publicKey,
        systemProgram: SystemProgram.programId,
})
/// .signers([playerKeypair])/
.rpc()

console.log(‘set player name tx:’, { tx })

const player = await wowsProgram.account.player.fetch(playerKey)

console.log(‘player:’, player)

const playerInfo = await connection.getAccountInfo(playerKey)

console.log({ playerInfo })
```

The code runs ok but the `player.name` shown in the `console.log(‘player:’, player)` is still the old name from when I  initialized the account and not `newname`. 
I’m guessing I need to commit this to the blockchain somehow with a transaction or something? Or??
wow this seems amazing!! This means in the future I might not need to migrate old accounts right?
I'll post the problem/solution afterwards
can I dm you, as it's private?
Mm, usually the sneaky way to do this is by using a HashMap, so if it's not that or a `static mut` somewhere, I'm not sure without being able to look at the code
Any tips on what to look for?
You won't actually have to do that anymore in the near future. Dynamic account data size is being introduced rn. You will be able to deduce extra space for an account  post-initialization, if you so wish. https://twitter.com/jacobvcreech/status/1508892823600439303
No type checks are performed. I suppose Anchor in this case doesn't consider other constraints or checks, no type check - > error.
Must be something in my code, as builds prior to this were fine. I'll start digging commits after I branched out. I do wonder what I am doing globaly

Just a sec
To much code tbh to share it, I can share my cargo.toml
Or maybe one of your dependencies, etc.
You're somehow using mutable global state (not allowed in solana). I'd have to see more of your code to tell how you're doing that
It's about your whole program, yeah
I don't think I've tried doing anything weird. So this can be related to any instruction in the program, not only the one I am trying to execute?
I am definitely not using a HashMap
Are you trying to use mutable global variables or something? Maybe using a HashMap?
Hey all,
Has anyone faced this error:
```
Error processing Instruction 0: invalid account data for instruction 
    ELF error: Found writable section (.data._ZN14solana_program6pubkey6Pubkey10new_unique1I17ha2b7fb560b29dc4bE) in ELF, read-write data not supported
```
Thanks
btw have you solved this, having the same warning
Thanks 👍
ok
I don't know, you'll have to read their docs 🧘‍♂️
<@!134416332509675520> how to use it?
E.g. I paired with someone the other day using https://syndica.io/
Probably use a better rpc provider

how to fix?
thanks for the info!!
Borsh will keep working fine if you allocate extra space, yeah.
Hi there, lets say I created an account struct
```
#[account]
#[derive(Default)]
pub struct Sample {
    pub key: u8,
    pub name: [u8; 32],
    pub creator: Pubkey,
    pub treasury_mint: Pubkey,
    // in percentage
    pub split: u8,
}
```
if I specify the size of it to be bigger than what it needs (above should be 8+1+32+32+32+1 I think) (reserving for future usage), will anchor still deserialise those extra bytes?
Also in the future if I'd like add new fields, I just need to add them under the `split` field and make sure it doesnt go beyond the size I initialized with right?
This kind of thing? https://github.com/project-serum/anchor/blob/master/ts/src/nodewallet.ts#L11
I saw a tutorial where the secretkey is being stored in a json file as  byte array - `fs.writeFileSync(fd,Buffer.from(secretKey.toString()))` . How to generate the wallet from the byte array? thanks
https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L47
Yeah, that only makes sense for talking to a local cluster
does it require to keep a local cluster running?
how to use - `anchor.setProvider(anchor.Provider.local())`
No type checks are performed. I suppose Anchor in this case doesn't consider other constraints or checks, no type check - > error.
`.method()`
ok how its obvious? there's no secret key involved?
Anchor.program.rpc is deprecated what is the alternative?
im trying to use TokenMetadata struct in accounts ```rs
pub token_metadata: Account<'info, structures::TokenMetadata>,
```
```rs
impl anchor_lang::AccountSerialize for TokenMetadata {
    fn try_serialize(buf: &mut &[u8]) -> Result<Self> {
        Ok(TokenMetadata)
    }
```
```method `try_serialize` has a `&self` declaration in the trait, but not in the impl

expected `&self` in impl

note: `try_serialize` from trait: `fn(&Self, &mut W) -> std::result::Result<(), anchor_lang::error::Error>```
Ok forsure. Just so weird the exact same init command works on localnet so I'll give it a shot and see
I would just try to use the debugger to see which field is giving you that error
Yea
So you're fetching the IDL from the chain?
Maybe the idl on devnet didn't deploy properly?
And I'm doing a map function and newing up the publickey from string new BN on the array of u64s
Struct is :
field 1: PubKey,
field2: Vec<u64>,
field3: boolean 
field4: u16,
field5: u8,
field6: u16
Very strange
Has anyone run into type mismatches between localnet and devnet deployment? One of handlers takes in a Vec<T> and on localnet my initialize function works fine and then once I deployed the program to devnet I'm getting TS errors saying src.ToArrayLike is not a function with the exact same JSON object
answer: https://docs.rs/solana-program/latest/solana_program/bpf_loader_upgradeable/enum.UpgradeableLoaderState.html this is the data format, the last 32 bytes are the program data address
> [[test.validator.clone]]
> address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s" # implicitly also clones PwDiXFxQsGra4sFFTT8r1QWRMd4vfumiWC1jfWNfdYT
for example in the anchor toml reference
How do I find the program data account of a bpf upgradeable loader account?
I finished my nft marketplace contract. I wanna say thank you to <@!501570363566587905> and all anchor devs. <@!134416332509675520> thanks for all your answers dude. Great ecosystem and great peoples.
Ah okay, I can look into implementing it!
not currently but happy to accept PRs for it if theres a need for it
Hey guys, is there a way to access the PDAs that are derived behind the scenes in the new ts builder api? Eg, I want to return the derived PDAs along with the instruction
got it xD
Oops, kinda obvious I guess.
I'm even checking the address.

Why is this considered to be unsafe?
okay, let me try
Mm, you're going to have to go find the source and see if you can figure out where you're raising an error
https://app.quarry.so/
I am trying to call quarry protocol
0x44c is 1100, but I don't think that's a built-in anchor error
What program are you calling?
there is not scroll
Does it not show up if you scroll up?
how to get full program log?
this is all for the log

Aight, thx 👍
Nope
Can you show the full program log?
`failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x44c`

What is this error?
Can there be multiple `#[program]`s inside of a single Anchor module?


///////////////////////////////////////////////////////////////////////////////////////////////

`signers: [escrowAccount]` probably
Make sure you're signing with the escrowAccount's keypair
Hello, I am trying to invoke a function createRaffle in my program the body of which is:
pub fn create_raffle(ctx: Context<CreateRaffle>) -> ProgramResult{
        let payer = &mut ctx.accounts.wallet;
        let escrow_account = &mut ctx.accounts.escrow_account;
        Ok(())
    }
The context struct is:
#[derive(Accounts)]
pub struct CreateRaffle<'info>{
    #[account(mut)]
    pub wallet: AccountInfo<'info>,
    #[account(mut)]
    pub owner: AccountInfo<'info>,
    #[account(init, payer = wallet, space=8+16)]
    pub escrow_account: Account<'info, EscrowAccount>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
} 
The struct is:
#[account]
#[derive(Default)]
    pub struct EscrowAccount{
        pub data: Vec<Pubkey>,
        pub length: u8,
        pub payer: Pubkey,
    }
I get an error when I try to call the fn from the frontend.. I get the notification to approve the transaction from the phantom wallet but on approving it I get the error that says "Signature verification failed"..
Any help is much appreciated..
```toml
[dependencies]
anchor-lang = { version="0.22.1", features = ["init-if-needed"] }
anchor-spl = "0.22.1"
```
is this how init_if_needed is enabled in cargo.toml ? 
``` 
[features]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
cpi = ["no-entrypoint"]
default = []
init-if-needed = ["anchor-lang","anchor-derive-accounts/init-if-needed"]
```
Any tips on how you sign a transaction with a wallet all the examples I find just autogenerate a keypair and a new wallet when they send it, cant find anyone using an actual wallet to do so
If you want to try doing this manually you'll have to CPI to the associated token program to ask it to do everything for you, since, yeah, you ultimately need a signature for that address but only the associated token program itself can provide it.
Ah, ok, yeah, you can't directly `init` an associated token account like that—but anchor knows how to, lol, so you can just do
```.rs
#[account(init, payer = admin, associated_token::mint = the_mint_account, associated_token::authority = the_owner_of_the_tokens)]
pub pool_watermelon: Account<'info, TokenAccount>
```
I think previous version of anchor gives something like `seeds doesn't match`
``` let [newPDA, _] = await anchor.web3.PublicKey.findProgramAddress([
      program.programId.toBuffer(), Buffer.from("PDAIMXYZ"), Buffer.from("2")
    ], program.programId)
```
```
    #[account(
        init,
        payer = authority,
        space = 8 /* discriminator */ + XYZAccount::LEN,
        seeds = [&id().to_bytes(), SOMECONSTANT.as_bytes(), "4".as_bytes()],
        bump
    )]
    pub domain_authority: Account<'info, XYZAccount>,
```
    ```DacG6qn4Cd24vMDnR6NNw5J4w5x9cZHcJPeoZLCHg9HA's signer privilege escalated
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
```
difference between `seeds` b/ client and program gives us,  `signer privilege escalated` which ig is not explanatory, or am i missing here something?
Any good suggestions on how I go about signing a a rpc-call from a users wallet since I do not have the full keypair. Transaction/call to function via RPC wants me to add signers for a call.
from react
Does anyone know how to subscribe to a variable in an account to update for changes?
incase if you want an example, https://github.com/project-serum/anchor/blob/23efadf08fbd9baf12aab3add014d4d78f48155b/tests/floats/tests/floats.ts
sorry my bad, it's `.methods.<InstructionName>()`

actually im not sure i can do this? in order to `init` the accounts they have to be signers, but thats not possible because i dont have a private key for them -- they are ATAs
there is `#[account(init_if_needed, ...)]`
also you can check https://docs.rs/anchor-lang/latest/anchor_lang/derive.Accounts.html
you need to use `#[account(init...)]` before every account you want to initialize
invoking initialize doesn't create the accounts. Why is that?
here's js client -
```js
async function initialize() {

    await preprocessor()
  
  
    let tx = await program.methods.initialize({
          accounts : {
            configAccount : configAccountKey.publicKey,
            stakeAccount : stakeAccountKey.publicKey,
            counterAccount : counterAccountKey.publicKey,
            authority : programInitiatorKey.publicKey,
            systemProgram : anchor.web3.SystemProgram.programId
          },
          signers : [configAccountKey.publicKey]
        
      })

      
    }


    async function fetchData(){
      preprocessor()
      console.log(configAccountKey.publicKey.toString())

       const account = await program.account.configAccount.fetch(configAccountKey.publicKey)
       console.log(account)
       // console.log(utfDecoder.decode(account.hasInit))
    }
  ```
here's my lib.rs - 
```rs
use anchor_lang::prelude::*;
use anchor_spl::token::TokenAccount;

declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");

#[program]
pub mod solanaire_stake {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {
        let config_account = &mut ctx.accounts.config_account;
        if config_account.has_init == 0{
           config_account.has_init = 1;
        }
        Ok(())
    }

    pub fn increment(ctx : Context<Increment>,count : u8) -> Result<()>{
        let counter_account = &mut ctx.accounts.counter_account;
        counter_account.count = count;
        Ok(())
    }    

}

#[account]
#[derive(Default)]
pub struct StakeAccount{
    mint : Pubkey,
    amount : u32,
}

#[account]
pub struct ConfigAccount{
    has_init : u8,    
    pub authority : Pubkey,    
}

#[account]
pub struct CounterAccount{
    count : u8,    
}


#[derive(Accounts)]
pub struct Initialize<'info>{

    #[account(init,payer = authority,space=48)]

    pub config_account : Account<'info,ConfigAccount>,
    pub stake_account : Account<'info,StakeAccount>,
    pub counter_account : Account<'info,CounterAccount>,
    #[account(mut)]
    pub authority : Signer<'info>,
    pub system_program : Program<'info,System>
}

#[derive(Accounts)]
pub struct Stake<'info>{
   pub stake_account : Account<'info,StakeAccount>,
   pub config_account : Account<'info,ConfigAccount>,
   pub token_account: Account<'info, TokenAccount>,
   pub staker : Signer<'info>,

   
}

#[derive(Accounts)]
pub struct Increment<'info>{
   pub counter_account : Account<'info,CounterAccount>

   
}


//error def

#[error_code]
pub enum StakeError {
    #[msg("Minimum stake amount violation")]
    AmountTooSmall
}

```
Yeah 😢
i just didnt find it because autocomplete doesnt work in macros :-(
Yep, that's the magic number 👍
Yep, you can do that, and good q—you kinda  just need to know the right amount of space, lol, or jump to source etc.
ive discovered TokenAccount::LEN
uh so in my instruction im using cpis to init some token accounts. i know i could do this outside of my program but i wanted to practice with cpis.

i can do this, right? and if so, how do i know how much space to allocate?
It will deploy fine, it just doesn't really make sense 😛
idk it deployed lol. I'll look again. Kinda messed up I see
Ah, ok. That doesn't look right to me—why would all three of those accounts be the same account?
btw config account was created with the same key - 
`    await program.methods.initialize({
          accounts : {
            configAccount : programInitiatorKey.publicKey,
            stakeAccount : programInitiatorKey.publicKey,
            authority : programInitiatorKey.publicKey,
            systemProgram : anchor.web3.SystemProgram.programId
          },
          signers : [programInitiatorKey.publicKey]
        
      })
    }`
All accounts are publicly accessible, you just need to know their address
Sorry, yep they *can*
Yep
so other users (or different public key ) can't access data of another account? sorry for the noob questions
And also, no need to do that new anchor.web3.PublicKey around something that's already a public key
No, it would be `await program.account.configAccount(theConfigAccountItselfsOwnPublicKey)`
giving me this error - `Error: Invalid account discriminator`
`const account = await program.account.configAccount.fetch(new anchor.web3.PublicKey(programInitiatorKey.publicKey))` is this the correct way to getting account data?
Is it possible to determine the validator executing a program instruction at runtime?
man trying to grapple with tx sizes is a pain
also does anyone know how to make mocha show entire stack traces for my tests? like i just get transaction errors but it wont show on which line this occurred, pretty annoying
i know a few ways to do this im just wondering whats the most idiomatic
i want my program to be a mint authority.
it seems like the way to do this is to make a PDA be the authority and then pass that into each instruction. but this account has no data. how do i tell anchor that an account has no data? 

using `pub my_pda: AccountInfo<'info>` generates an error that this is unsafe
`(node:14474) UnhandledPromiseRejectionWarning: TypeError: program.method is not a function`
Yep, `init_if_needed`, though you need to add `features = ["init_if_needed"]` to your anchor-lang cargo dependency
actually, is there a way to conditionally `init` an account?
1appreciate the clarification
ok, thank you!
Then you could init it again
You'd have to close that account
This is one downside to testing things on devnet—once you init an account at some address you can't do it again!
is there any easy way to get around that?
That means you're trying to init an account at an address that is already taken—there's already an account there
Can anyone help me with this error on devnet?
`Allocate: account Address { address: HnUqJ94sbHU7XrPuErTrYQw6taRqyHE9EkLBkYvrgZbk, base: None } already in use` 
In my contract that account is setup like this ```#[account(
        init,
        seeds = [mint.key().as_ref()],
        bump = vault_account_bump,
        payer = initializer,
        token::mint = mint,
        token::authority = initializer,
    )]``` 
I assume the issue has to do with the `init` but I am unsure. Any help would be appreciated 🙂
Heh yeah that error message is a little opaque 🤔
I think the error msg should have a not in it lol
Ah it was bc I was deriving `AnchorSerialize` and `AnchorDeserialize` on a struct w no fields
What does this actually mean?
Which is this line: https://github.com/project-serum/anchor/blob/v0.19.0/lang/syn/src/idl/file.rs#L412
Facing a pretty weird issue when I `anchor build`:
```
thread 'main' panicked at 'Empty structs are allowed.', lang/syn/src/idl/file.rs:412:22
```


///////////////////////////////////////////////////////////////////////////////////////////////

how do I figure out the rent that is being used for my account program and how do I withdraw it?
Yes
But if there's an account missing, the return error would be like the above one?
Jump to source on the instruction you're invoking, it will show you all of the accounts you need to have passed in
spl_token_lending.deposit_reserve_liuqidity - this CPI calls
<@!134416332509675520> 
`Instruction references an unknown account`
right. thank you ser 🙏
And you can learn that by just jumping to source on TokenAccount
`the_deserialized_token_account.amount`
where can i find the docs for these information?
and the amount as well?
Ahh ok
Using `Account<'info, TokenAccount>`
`the_deserialized_token_account.owner`
is there a way to access token account's owner (not the token program but the person's pubkey) as well as the amount in the token account?
The simplest way would be to just require person A to prove they have at least one token by passing in a token account with their name on it, with >= 1 token in it
Hey anchor dev how do I read metadata from a token ?
is there a simpler way to validate if person A owns one token Y?
hey guys, would like to your brains on a program implementation I'm tryna build. I'd like to build a program where person A interacts with the program and will **receive** a token X in token. However this should only happen under the condition of person A **owning at least one token Y.** If person A does not own any token Y, the program will fail. How would you guys implement this?

Here's what I have in mind:
1. Person A will create and transfer one token Y into a new temporary token account. The program will then create a PDA account and set the owner of the temporary token account to the program-owned PDA account. If this succeeds, we validate that person A truly own at least one token Y.  

2. Then the program will proceed to send person A one token X. 

3. Finally, program will return the one token Y (which was used for validation) back to person A's token account.
is there a method that does a similar thing to ```try_deserialize```in Anchor 20.1? I'm trying to deserialize the data from the account_info of a custom struct in rust
hi, 
When i try to use my smart-contract on a client on devnet, an error say there is to many arguments:
```Error: provided too many arguments 1000000,[object Object] to instruction createGame expecting```

But if i run tests it work perfectly.

Here is the client code : 
(I have verified that the ids is up to date and that the authority keypair has enought Lamports).
```
const game = anchor.web3.Keypair.generate();
const file = fs.readFileSync( path.join( __dirname,'keys/authority.json') ) ;
const providerKeypair = web3.Keypair.fromSecretKey( Uint8Array.from( JSON.parse( file)));
const wallet : anchor.Wallet = new anchor.Wallet(providerKeypair) ;
const provider : anchor.Provider = new anchor.Provider(connection, wallet, anchor.Provider.defaultOptions()) ;
const idl = JSON.parse(fs.readFileSync( path.join( __dirname,'idl.json') ));
const idlParsed = JSON.parse(JSON.stringify(idl)) ;
const programId = new anchor.web3.PublicKey("87C79ASuKJEHFygAnnCyeSKMrwPfJjURWENsBxLbjgyK");
const program : anchor.Program<Anchor> = new anchor.Program(idlParsed, programId, provider);
try{
    const entryPrice = anchor.web3.LAMPORTS_PER_SOL/1000 ;
        program.rpc.createGame(
            new anchor.BN(entryPrice),
            {
               accounts : {
                  systemProgram : SystemProgram.programId,
                  game : game.publicKey,
                  authority : provider.wallet.publicKey,
               },
               signers : [game]
               }).then( result => {
               program.account.game.fetch(game.publicKey).then( gameResult => {
               resolve(address);
        });
    });
}catch(e){
    reject(e);
}
```

And here my test in anchor: 

```
anchor.setProvider(anchor.Provider.env());

const program = anchor.workspace.Anchor as Program<Anchor>;
const provider = anchor.getProvider();
const game = anchor.web3.Keypair.generate();
const entryPrice = Math.ceil(0.01*anchor.web3.LAMPORTS_PER_SOL) ;

it("create", async () => {

    await program.rpc.createGame( new anchor.BN(entryPrice),{
      accounts : {
        systemProgram : SystemProgram.programId,
        game : game.publicKey,
        authority : provider.wallet.publicKey,
      },
      signers : [game]
});
```

Here the smart-contract : 
(but as i said it perfectly work with tests on local and on devnet)

```
pub fn create_game(ctx: Context<Create>, entry_price : u64) -> Result<()> {

  msg!("A new game is created with entry price of {}.", entry_price);
  let game = &mut ctx.accounts.game ;
  game.authority = ctx.accounts.authority.key() ;
  game.entry_price = entry_price ;
  game.rm = 0 ;

  Ok(())
}
#[derive(Accounts)]
pub struct Create<'info> {
    pub system_program : Program<'info, System>,
    #[account(mut)]
    pub authority : Signer<'info>,
    #[account(init, payer = authority, space = 8 + 32 + 64 + 32*3 + 32)]
    pub game : Account<'info, Game>
}

#[account]
pub struct Game {
    pub authority : Pubkey,
    pub rm : u8,
    pub entry_price : u64,
    pub players : [Pubkey;3],
    pub winner : Pubkey
}
```
Yeah but wouldn't that give me EscrowAccount's data? The EscrowAccount struct has a field called data which is a vector of Pubkeys.. But I want only three pubkeys out of the array which is what the function of get_winner should do.. I have three variables in the get_winner fn but they do not belong to any account.. Do I have to create an account for those three variables or can it be fetched directly from the fn itself?? If I have to create an account? What should the workflow be? I haven't fetched anything from the program before.. Sorry if this sounds stupid or something..
nope
await program.account.escrowAccount.fetch(PublicKeyOfTheAccount)
await program.account.escrowAccount.all()
Is there any issue with created a nonce account with solana, using it for a txn, and then closing it and getting the rent back? essentially getting nonce support for free?
Another quick question.. I am trying to fetch three variables from a function in the program. The fn is: 
pub fn get_winner(ctx: Context<GetWinner>) -> ProgramResult{
        let escrow_account = &mut ctx.accounts.escrow_account;
        let size = &mut ctx.accounts.escrow_account.data.len();
        let selected_address_one = &mut ctx.accounts.escrow_account.data[2];
        let selected_address_two = &mut ctx.accounts.escrow_account.data[4];
        let selected_address_three = &mut ctx.accounts.escrow_account.data[1];
        Ok(())
    }
How can I do that from a fn because as far as I know we can fetch the account contents using something like this: 
const winner = await program.value.account.escrowAccount.all();
but I think it's not good practise to do
na, I don't think so
I just did (8+1000). Is there any disadvantage other than the extra rent it would have to pay?
yus, sorry my bad
also need to allocate space (4bytes) for the length of the vec <@!946759700421152808>
It worked.. Thank u.. Appreciate it..
and also don't forget to add extra 8 byte for discriminator
here you are using `pub data: Vec<Pubkey>,`, here you need to define how much space you want to allocate. suppose that If, I want to store 2 pubkey, that I would allocate `32+32` bytes for this field
It generally happens when you haven't allocated enough space
How should I resolve it? This is my EscrowAccount struct:
#[account]
#[derive(Default)]
    pub struct EscrowAccount{
        pub data: Vec<Pubkey>,
        pub length: u8,
        pub payer: Pubkey,
        // pub authority: Pubkey,
    }
❯❯❯ fuck 0xbbb     
> Anchor Program
3003 | AccountDidNotDeserialize: Failed to deserialize the account
I am getting this error:
Transaction simulation failed: Error processing Instruction 0: custom program error: 0xbbb 
    Program 3F2mrkKKoUzP6yGHnUairsE1pNQHBK4KVD21G5KF51CC invoke [1]
    Program log: Instruction: CreateRaffle
    Program 11111111111111111111111111111111 invoke [2]
    Program 11111111111111111111111111111111 success
    Program log: Custom program error: 0xbbb
    Program 3F2mrkKKoUzP6yGHnUairsE1pNQHBK4KVD21G5KF51CC consumed 11740 of 200000 compute units
    Program 3F2mrkKKoUzP6yGHnUairsE1pNQHBK4KVD21G5KF51CC failed: custom program error: 0xbbb
Can't seem to find anything on that error code..
if you know solitidy,  you can't do this on solana https://github.com/pancakeswap/pancake-farm/blob/a61313bf107c7f82e1a0f5736d815041fbf8cdff/contracts/MasterChef.sol#L154
Ah ok, might just have to do it another way then
it's not currently possible but it will be possible in the future, there is currently a limit on it
So I have this situation where I would like to update alot of accounts (say 100 pdas) in one function, is that possible?
They can check creators on-chain because the creators are actually stored on-chain but other things like attributes are not. Check here: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/candy-machine/program/src/lib.rs#L1108
shouldn't be possible
yeah it's checking whether the nft you sent from client actually belongs to the nft set
Like this for instance
Is it possible to submit an array into the accounts struct?
Ok so this is a tutorial that theoretically will allow you to check if an nft is authorized or not
I took a quick look and it seems to be using the address derivation I mentioned earlier to verify nfts, I think candy machine cli had a similar functionality
nope, all accounts that get used in a solana program need to be specified in accounts. (not specific to anchor)
So what is the objective of the tutorial i sent to you ? 🤔
as far as I remember the candy machine set is derived from the creator of the candy machine
also check metaplex implementation to see how nft addresses relate to each other
there is not an easy solution for this as far as I know. For the other problem, you can use some sort of merkle-tree logic similar to this one https://github.com/saber-hq/merkle-distributor/tree/master/programs/merkle-distributor
I don’t think so
Is it possible to access an account through an anchor function without have it as part of the accounts struct
Yes, so how can I fix this problem?  Another problem, let's say I want to make a program for specific NFTs, how can my program know that the NFT is allowed or not?
say you send attribute x from client, the program cannot verify that the nft actually has that attribute
What kind of security you mean ?
since there is no way to check them on-chain
yeah but you also need to implement a security check so people cannot just arbitrary attributes they want
Mmh ok I understand. So I need to check in Web3, and send different states in my program for specific logics
you store the metadata url on-chain for each nft
nfts are just pointers for off-chain metadata, there is no attribute on-chain. It would  be too costly to store them on-chain
No Oracles yet on Solana ?
With this we can’t ? https://medium.com/@Arrivant_/how-to-verify-nfts-in-an-anchor-program-a051299acde8
as long as it doesn't exceed tx size limit
yeah you can do it by getting the instructions and put all of them in the same tx
I guess so if your instruction gets all the accounts it has to play with.  Each account of your Accounts derivative will have the macro with your seed
on-chain programs don't know anything about the outside world but you can do that off-chain
Is it possible to update multiple pda accounts within a single transaction?
Hello!  Is it possible with Anchor, when the PDA receives an NFT, that it can know the attributes it has to perform an action accordingly?
Ok, thanks. Will have to move the function off chain then
Not within the rust code, no

For instance I want to find accounts that belong to a certain public key and then update the data
Also is it possible to do an account search within the anchor program?
Yeah I think I'll have to move some of it off chain
Submitting an actual tx only makes sense if you want to change some on-chain state
You can read from accounts though
Damn
Any transaction you submit will require a signature
For instance I call it from a react function once a timer runs out
Is it possible to run a function from an anchor script without having someone sign a transaction?
or.zshrc or however its called for zsh, i forget
add the path command to your ~/.zprofile
anyone have advice on how to install solana cli on mac? I keep installing it, and then it gives me the path prompt. I proceed to run the path command, but everytime i exit and come back to run a solana command, it doesn't work and i get the error
```zsh: command not found: solana```
figured out the issue with 0x1772, if somebody stumbles into it for future reference. in my case I was foolishly trying to add something to an "array" at position 1 when there was nothing at position 0. *headdesk
You can now do things like `return err!(...)` and get line numbers etc.
Oh, sorry—I'm being dumb, 0.23 includes some helpers to get better errors, but you have to actually start using them
upgraded to 0.23.0 and still the same nondescript error output. it says "11 log messages", how could I view those? is there a flag I can use to print the trace?
but yeah, what <@!134416332509675520> said
NodeWallet is a class not a type definition so i'm not sure that would actually work (?) might be wrong
ok it worked, thanks
You can just do `new NodeWallet(theKeypair)`
just one last question, how exactly would I construct it?
I understand that I would have to do something like this:
```js
const mywallet = {
    payer: .....,
    signTransaction: ......,
    signAllTransactions: ......
} as NodeWallet
```
But what do I exactly put in those values?
ok, thanks
sort of depends how you're building/sending transactions
so you _should_ be able to skip that part
ehhhh, a better well if your instantiating the `NodeWallet` to set in an `Provider` for a program, then the RPC calls will automatically be signed by the provider wallet
Think that's only in 0.23
And I wouldn't have to add anything else?
and to sign any transaction would I just do something like: `await wallet.signTransaction(txn)`?
ok
since the export name is a quasi-alias for two different things, the typescript typings can be a bit wonky sometimes so its easier to cut straight to the class itself
yeah i would just directly import `NodeWallet` and use that. the class constructor just takes a `Keypair` instance
yep
<@!525758014150672405> so the app is non-browser?
and what do I exactly pass to it, to create the nodewallet object?
So shall I just use NodeWallet, if I wanted to easily sign transactions?
There are two different use cases:
1. if your app is **_not_** running in a browser, its simply an alias for `anchor.NodeWallet`(https://github.com/project-serum/anchor/blob/master/ts/src/nodewallet.ts) which wraps an argued keypair with transaction signing functions
2. if the app **_is_** in a browser, its sort of just a superficial class/type to assert typings with to convert to wallet API specs (only relevant if you're using typescript)
lmk if you find one. also looking for it, there's nothing that works out of the box currently.
what is `anchor.Wallet` used for? I saw that it has functions like signTransaction and signAllTransactions, but what's the exact use case. Can I sign transactions using my private key through it?
I've upgraded to anchor 0.22.1 but still getting nondescript errors such as `Error: RPC response error -32002: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x1772 [11 log messages]`. How can I see what's behind this error message in general, not just this specific case? I though upgrading to 0.22.1 would give more info on an error but not really.
👏  thank youuuu. going to look at it now
https://github.com/Aurory-Game/comptoir never looked at it but it is going live soon
repo name?
the aurory one
anyone got any leads on an open source solana marketplace repo?
I see that on ethereum it is common to approve a contract for wETH and then go to make offers on multiple things, let's say for a system where you can offer a multiple conditions to a loan. Without having to lock the wETH in the contract. It gets transferred only once the offer is accepted.
I was thinking about doing the same but this sound quite bad UX since most apps invite users to close the wSOL account.
Also it would mean if the balance falls lower than the offer amount, the offer need to disappear.

Also locking the entire capital for each offer seems quite bad.
Thank you!! I can at least get anchor build to work. Now to learn how to use Anchor, I would almost consider it the easy part now
Well generally speaking you'd first install a version of WSL (1/2) by following any guide you can find on the internet (e.g. https://docs.microsoft.com/en-us/windows/wsl/install or https://www.omgubuntu.co.uk/how-to-install-wsl2-on-windows-1. Afterwards you'd have to install a Linux distribution. Ubuntu-20.04 in my case, but there are other variants too. Finally you'd install the Solana CLI, rust & components as well as the Anchor CLI + components following this guide: https://project-serum.github.io/anchor/getting-started/installation.html#install-yarn. I had a few issues when trying to install rust on WSL2 as it gave me a BSoD at some point during the installation process. Managed to get it working after a while by manually disabling/enabling all the features related to WSL and subsequently reinstalling everything. Hope you won't have to go through that, but if needed, you can find more on that here: https://github.com/rust-lang/rustup/issues/2887. Good luck 😜
How did you do the setup for that?
Thank you kind sers
theres an `address = ` constraint somewhere that is being violated. If its not in your code, it might be in the code youre calling via cpi. Check the generated logs or upgrade to anchor 0.23.0 to get the origin program in the returned error
hmmm...I guess
Wouldnt provider automatically sign the tx bu default?
Your `user` is not signing the transaction.
thank you
```
const priceFeedAccount = anchor.web3.Keypair.generate();
const CHAINLINK_PROGRAM_ID = "CaH12fwNTKJAG8PxEvo9R96Zc2j8qNHZaFj8ZW49yZNT";
const CHAINLINK_SOL_FEED = "EdWr4ww1Dq82vPe8GFjjcVPo2Qno3Nhn6baCgM3dCy28";
const CHAINLINK_ETH_FEED = "5zxs8888az8dgB5KauGEFoPuMANtrKtkpFiFRmo3cSa9"; 
let tx = await program.rpc.execute({
   accounts: {
     data: priceFeedAccount.publicKey,
     user: provider.wallet.publicKey,
     chainlinkSolFeed: CHAINLINK_SOL_FEED,
     chainlinkEthFeed: CHAINLINK_ETH_FEED,
     chainlinkProgram: CHAINLINK_PROGRAM_ID,
     systemProgram: anchor.web3.SystemProgram.programId
   },
   options: { commitment: "confirmed" }, //start with the most recent block that's confirmed
   signers: [priceFeedAccount],
 });```
Ah, no, `signers: [escrowAccount]`
Can you show the client side code?
I would recommend using Windows Subsystem for Linux (WSL) if you want to develop on Windows. I initially tried to set it (Solana development) up on Windows but I ran into a bunch of problems.
```#[derive(Clone, AnchorSerialize, AnchorDeserialize)]
pub struct Decimal {
   pub value: i128,
   pub decimals: u32,
}

impl Decimal {
   pub fn new(value: i128, decimals: u32) -> Self {
       Decimal { value, decimals }
   }
}

#[account]
pub struct Data {
    pub sol_data: Decimal,
    pub eth_data: Decimal,
}
 #[derive(Accounts)]
pub struct Execute<'info> { 
   #[account(init, payer = user, space = 8 + 20 + 20)]
   pub data: Account<'info, Data>,
   #[account(mut)]
   pub user: Signer<'info>,
   pub chainlink_sol_feed: AccountInfo<'info>,
   pub chainlink_eth_feed: AccountInfo<'info>,
   pub chainlink_program: AccountInfo<'info>,
   #[account()]
   pub system_program: Program<'info, System>,
}```
hey there! I've been scratching my head over this error - Error: 2012: An address constraint was violated I suspect its how I’m initialising the account? Any help would be appreciated 🙏
```
const tx = await program.rpc.createRaffle({
                        accounts: {
                            wallet:wallet.publicKey,
                            owner:wallet.publicKey,
                            escrowAccount:escrowAccount.publicKey,
                            // escrowData,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY
                        },
                        signers: [escrowAccount]
                    });
```
you can't sign with just the public key as it's, well, public xD
<@!946759700421152808>   signers need to pass the entire keypair
What about the program? Should I remove the signer attribute from wallet account? Because when I am doing this from the frontend:
const tx = await program.rpc.createRaffle({                        
                        accounts: {
                            wallet:wallet.publicKey,
                            owner:wallet.publicKey,
                            escrowAccount:escrowAccount.publicKey,
                            // escrowData,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY
                        },
                        signers: [escrowAccount.publicKey]
                    });
I get the error "Cannot read properties of undefined (reading toString)"
Yep, when you create an account you need to sign with its address
In Solana, you need to define everything related to the accounts prior like whether it is_writeable, is_signer etc. That's how Solana will be able to do parallel transaction
That is the account I am actually creating on-chain to store the data..
Yeah, that was initially there. But then I removed it just to check if it goes through without it.. But no luck..
Does anyone use windows for development with Anchor?
you need to mark wallet as signer here
```#[derive(Accounts)]
pub struct CreateRaffle<'info>{
    #[account(mut)]
    pub wallet: Signer<'info>,
    #[account(mut)]
    pub owner: AccountInfo<'info>,
    #[account(init, payer = wallet, space=8+16)]
    pub escrow_account: Account<'info, EscrowAccount>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}```


///////////////////////////////////////////////////////////////////////////////////////////////

thanks!
no, using it does
just add the check comment, lol
or is that a legit case for just adding the check comment?
what type should I check against for a pubkey?
```rust
    #[account(seeds = ["metadata_auth".as_bytes()], bump)]
    pub metadata_authority: AccountInfo<'info>,
```
does implementing a new trait, (Iterator) for example consume more compute units?
I also added support for traits, so basically you decorate your trait declaration with `#[sighash]` and it will generate consts with `TRAIT_NAME_METHOD_SIGHASH`, and same style for instructions
also this check happing on types
https://github.com/project-serum/anchor/pull/1452#discussion_r809213811
read more here
just use Unchecked. It's the same, but expresses intent more clearly in the type name
Nice 😎
ok I thought you were referring to some other limitation... btw i made the macro to get the sighashes 😆
when to use AccountInfo vs. UncheckedAccount?
Ah, just that you can really only jam about 30 total accounts into a single tx before you just run out of space
i read the pr to say not if it had seeds or init in attribute https://github.com/project-serum/anchor/pull/1452, which was making sense assuming the seeds are a form of a check
no, they are present in the `Context`'s `remaining_accounts`, which is not deserialized
you need to add check comment whenever you use `AccountInfo<'info>` && `UncheckedAccount` etc
yes, because you are using `AccoutInfo` (should use `UncheckedAccount` btw)
I learned this last week:
```js
      const tx1 = await program.methods.sellTokens(quantity)
        .accounts({
          mint: mint.publicKey,
          metadata,
          mintAuthority,
          seriesParam,
          purchase,
          platform: platform,
          adminSettings,
          tokenAccount
        })
        .remainingAccounts(creators.slice(0, -1).map(c => {
          return {
            pubkey: c.address,
            isSigner: false,
            isWritable: true
          }
        }) as AccountMeta[])
        .rpc();
```

```rust
        if let Some(creators) = ctx.accounts.metadata.data.creators.clone() {
            let creators_zip = creators.iter().zip(ctx.remaining_accounts);
...
```
ish?
I'm still getting an error to add a check comment even with seeds - is that expected?
```rust
    /// CHECK: has seeds, but still requires check comment?
    #[account(seeds = ["metadata_auth".as_bytes()], bump)]
    pub metadata_authority: AccountInfo<'info>,
```
they are deserialized into, `AccountInfo<'info>` ser
<@134416332509675520> <@717956950737813594> thank you kind sirs
but they aren't deserialized?
You can use `remaining_accounts` to pass in an arbitrary(ish) number
Can an accounts context have a vector of accounts, instead of a single account? Trying to work around this
😢
No dynamic account lookups of any kind unfortunately, it's just part of solana's performance model
Nope!
Is this possible in pure solana?
yes, you need to pre-define each and every account that is going to interact with the ix on client-side itself
even if I have the seeds for the key? They just come from another accounts state
There's unfortunately no way around the client needing to pass that account in
I need my program to dynamically pull data from a PDA, the client won't have the specific account to provide in the context. I am wondering if there is an example of this? Not seeing anything obvious in anchor/tests
is there a way to get anchor to deserialize the account discriminator into the first field of an account struct rather than hiding it?
<@!717956950737813594> Thanks!
`anchor/test` repo is best place for you
yeah, but whenever you deploy your program it will allocate 2 x actual_program_size. So there will be enough room for bug fixes, and upgrades right. Think of it like this "xxxxxV1" and when do some major upgrade, then a new program address is good, right like "xxxxxV2". Though it's my personal view, could be d/f from yours
Is there an example of loading an account that wasn't in the accounts context?
Mm, yeah, as far as I know, although soon ™️ you'll be able to resize accounts, so maybe that will work for programs too?
I see. So once you deploy a program your max size is locked forever?
I can't install anchor, I get an
error: there is no argument named `rpc_port`
    --> cli/src/lib.rs:2208:40
     |
2208 |             "Your configured rpc port: {rpc_port} is already in use"
yeah, you can't open the program account itself, a.k.a smart contract account
All accounts besides actual programs can be reopened
i could have sworn pdas can be reopened
no, you can't
my assumption is no since rust won't allow you to implement external traits for external structs, but maybe there's some magic i'm not aware of to make this happen
Like the account were the executable program was deployed
is there any way to use a struct from a third party library as an anchor account?
Like a program_id account?
Does anyone know if you can reopen a program account after you close it?
https://docs.rs/anchor-syn/latest/src/anchor_syn/codegen/program/dispatch.rs.html#102 yep
Also, you need to have docker running I guess
`npm uninstall -g @project-serum/anchor`
You should probably uninstall that npm version of anchor-cli (it doesn't work on macs)
hi alan
Where I run `anchor verify PROGRAM_ID` I get this error:

```
Only x86_64 / Linux distributed in NPM package right now.
Trying globally installed anchor.
Using image "projectserum/build:v0.23.0"
Run docker image
docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.
See 'docker run --help'.
Error during Docker build: Failed to build program
Error: Failed to build program

```
time to dig into `#[program]`
sighash("global", "my_instruction") I think
the sighash calculation should be sighash("program", "my_instruction"), right?
meh it's fine, I can add a couple of things I wanted done at compile time too 😆
This is definitely one thing that sounds easier in zig 🥲
Heh yeah
or "usual" spin up a proc-macro crate and have it done there at compile time everytime 😆
Ah, hmm, at compile-time...
🤔 I guess at least I could use that to statically assert the value is updated, or I can calculate it in-program, but that could take some precious compute units
is there a way to serialize a anchor txn without blockhash <a:Hmmmm:695129200260153375>
There's this thing: https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/program/common.rs#L17
Thank you!
https://docs.rs/spl-token/3.3.0/spl_token/state/struct.Account.html#structfield.amount ?
How do I get the value from a token account? In program code
hey, is there a way to get the hash used in dispatch exposed by anchor? I'm trying to use transaction instrospection to verify that an instruction is present in the tx, but I can't find an item or a constant for the hash that the instruction should have at the start... I mean I can check the expanded macro and have it hardcoded but that's not very "clean"
Hello guys one quick question,  I am creating an PDA account to hold data, if there is no assign operation to other owner in the program, other people should not able to create a mock account with a PDA address derived from my account right? Or say the PDA account can only be controlled by program at least during the initialization right?
oright you guys just talked about it. guess not
hey guys quick qn -  can i use `#[account(mut, close = ...)]`  to close a program's PDA owned token account?
np
Oh right, just looked at my code and I am doing CPI call to close a token account! Sorry for the wrong info
It would need to take the token account authority as an argument which I didn't see in the docs
Yeah that's what I was thinking, because it's done by a CPI call right? How would anchor know how to make that CPI call?
Can you? I actually think that doesn't work—as far as I know it only works for accounts owned by your own program
Yes
Can I use Anchor constraints to close SPL token accounts?
Thanks for the answer! Yes I know but I wanted to try the macro!
though you can always use this
`Pubkey::from_str("XXXXX").unwrap()`
don't forgot to include `use std::str::FromStr;`
yeah, actually this is a bug, Ig in new version
by using `close=destinationWhoWillReceivRemainingFund`
How do I close a normal account (not a token account)?
Hi, I am trying to use the macro: `static PID: Pubkey = anchor_lang::solana_program::pubkey!("XXXXX")` but I get the error:  `failed to resolve: could not find solana_program in the list of imported crates not found in solana_program::pubkey`. Any idea how to fix this?
like if you try to deserialize a struct using a newer version from the IDL it will break? Is there an easy solution to choosing an early version of the account from the IDL or an older IDL?
is there a solution for versioning program account data structs in the IDL?
Anyone know how to create an associated token account fully on chain using `anchor_spl::associated_token::create` ? The Create struct needs the account info of the account to create but it wasn’t created yet ahah.
I see. I guess in v1 they put the name and symbol of the whole collection into on-chain metadata of each token and then had the specific characteristics in the off-chain metadata?
That was the case yes as that account is the candy machine one. 
However Metaplex came out with their v2 of the token sandard which now comes with a “collection” key in the on chain metadata. This is another NFT created after minting all tokens which links all of them together
and do I understand it correctly that a collection is grouped by the first entry in the creators array of each token?
Not really, it’s important to adopt standards even in a decentralized ecosystem. And CM is an open source tool used to facilitate NFT creation. Kinda like anchor is a tool (framework) used to speed up solana programming. These aren’t centralized.
I see. But isn’t this kind of against the concept of decentralization?
you're initializing the escrow account, so you need to pass it in the signers field
they don't deploy their own version
usually, nft projects mint through it
2
right now I am delving into NFT architecture on Solana: I have a question regarding the Metaplex Token Metadata program. Does every NFT project need to deploy their own instance of this program or is this a "central" program on the network that people agreed to refer for the token-metadata mapping?
I didn’t find the solution yet. I always have my signature problem and don’t understand why i need to have 2 times my signature
Were you able to find solution for this ?
The handler in the frontend is:

const handleCreate = async () => {
        if (walletAddresses.length > 0) {
            const participant = wallet;
            const [programAddr, bump] = PublicKey.findProgramAddress([Buffer.from("prize"), new PublicKey(participant).toBuffer()], programId);
            const tx = await program.rpc.createRaffle(new anchor.BN(bump),{
                accounts: {
                    wallet:wallet.publicKey,
                    owner:wallet.publicKey,
                    escrowAccount:programAddr,
                    participant: participant.publicKey,
                    systemProgram: anchor.web3.SystemProgram.programId,
                    rent: anchor.web3.SYSVAR_RENT_PUBKEY
                }, 
                signers: []
            });
            console.log(tx);
        }
    }
Hi!! Why do I keep getting assertion failed error? I am trying to invoke a program function from the frontend.. This is the function:

pub fn create_raffle(ctx: Context<CreateRaffle>) -> ProgramResult{
        let payer = &mut ctx.accounts.wallet;
        let escrow_account = &mut ctx.accounts.escrow_account;
        Ok(())
    }

This is the context:

#[derive(Accounts)]
#[instruction(bump: u8)]
pub struct CreateRaffle<'info>{
    #[account(mut,signer)]
    pub wallet: AccountInfo<'info>,
    #[account(mut)]
    pub owner: AccountInfo<'info>,
    #[account(init, seeds = [b"prize".as_ref(), participant.key().as_ref()], bump = bump, payer = wallet, space=8+1000)]
    pub escrow_account: Account<'info, EscrowAccount>,
    #[account(mut)]
    pub participant: Account<'info, Participant>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[account]
#[derive(Default)]    
    pub struct EscrowAccount{
        pub data: Vec<Pubkey>,
        pub length: u8,
        pub payer: Pubkey,
    }
When I run `anchor verify PROGRAM_ID` I get this error: 
```
Only x86_64 / Linux distributed in NPM package right now.
Trying globally installed anchor.
Using image "projectserum/build:v0.23.0"
Run docker image
docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.
See 'docker run --help'.
Error during Docker build: Failed to build program
Error: Failed to build program
```
Logic mindfuck me if I have to add my signature in the transaction 2 times
The initial subject was to be able to serialize the transaction to send it to the backend, to put then my signature (since in my instruction I will have 2 signers (the user and me)) and to send to my program, which will check that the second signer (me) is really me
Hope im clear..
So that means that before deserializing, I can say requireAllSignatures: false

Then later when I deserialize it, sign it with my wallet in addition to have the second signature. And all this while my instruction expects only one.

So I get lost if I add my wallet in the instruction.

(As a reminder, I want the user to sign but I want my signature to be in it too, to make sure that the program can't be called by someone else)
I mean I will need this : Keypair.fromSecretKey(new Uint8Array(bs58.decode(process.env.MAIN_WALLET_PRIVATE_KEY)))
So if I understand I must necessarily sign with the payer? But in the case where in my instruction I ask to be signed (as I had explained above), I will find myself twice in?
You mean 

tx.feePayer = messageAccountKeypair ?

I already do this and still have the error
Doesn't look like you're doing that above
You have to, at some point, deliberately sign with the feePayer
So both signatures are the same wallet ?
Yes but the feePayer === the signer
The feepayer is not the good one but its only change the signatures order
You need two signers because you have to sign for the account you're creating, but the fee payer also needs to sign
Thats weird.. In this case I need my signature, and without all this logic, only with rpc() and the user signature, the call work. And my program instruction want only one signer

Why my transaction want 2 signers ? I didn't change anything yet in my program, so I only have one account.

The null is waiting for : program.provider.wallet.publicKey
Why ?

I can't serialize
Thx
Okey !
Same with feePayer, you just set it I think
```.ts
theTx.recentBlockhash = (
      await program.provider.connection.getLatestBlockhash()
    ).blockhash;
```

Mmh ok I will try. Btw with transaction(), how I can add recentBlockhash and feePayer ?
Something like that
```.ts
const rehydratedTx = anchor.web3.Transaction.from(theSerializedBytes);
program.provider.send(rehydratedTx);
```
Basically, .transaction() finally generates the transaction for my program (createMessage). Except that on the client side, I'll have the first screenshot, with the sign in the .signers() array (I'll have to re-sign it manually since transaction() doesn't take it into account).

Once I have my transaction with my sign (partialSign, adding the blockhash etc..), I serialize the transaction (screenshot 2) to send it to my backend. 

I then deserialize and once I'm there, how do I rebuild my createMessage method to fire the missile and have the screenshot 3?
😂
Wait, what's the question lol
Yes This is what I want in my screenshot lol The rpc is added after my second sign is added
Oh, you mean how do you submit the tx?
`.rpc()` actually fires the missiles
I'm saying don't do `.rpc()` at all, do `.transaction()`
Can I reconstruct all objects from my deserialized transaction ?
What I need to do after deserialize ? For reconstruct like that :
Yep, you can do all that in mocha
I just want to experiment.

I have my program, I would like to do the first transaction, sign it, serialize it, deserialize it, add a second signers, and send it to my program
Sorry, think I'm not following—what can't you do in mocha?
Ah ok I understand
But in this case its a mocha test :/ So I can't test my idea ?
Ah, ok, just do the manual signing like I suggested above (not actually sure why `.transaction()` doesn't take signers into account)

You may need to manually sign for them, can't remember, `theTx.sign`
What's wrong with the signers?
You can serialize it doing `theTx.serialize`
I already tried but I don't have any signers inside. And how to serialize it, send it to the backend and deserialized it for send to program ??
Rather than doing `.rpc()` at the end, instead do `.transaction()`
`.get("player_account")`
Think I might not be getting the bump correctly but I can't see whats wrong with it


Does anyone know how to resolve this error with pda's?
How can I use this method (screenshot) in front for have the user signature, send it to the backend and add my signature in .signers() array ? And send the transaction in backend after added my signature
Sounds complicated. My code works with v0.16.2 but it doesn't with 23...
Anyways, I made an SO with more context and would appreciate an upvote for visibility
https://stackoverflow.com/questions/71743279/attempted-import-error-wallet-is-not-exported-from-project-serum-anchor
Mmh then I don't know how to do it but I don't think it's possible :/ Or if the user is not logged in, maybe you can create an account on the fly and put it in your provider, and switch to the user's provider when he logs in
I need a connection even when/if a user is not connected with their wallet.
No ideas guys ? And the message just bellow this one
Okey so you can do it like that :

import { useAnchorWallet } from '@solana/wallet-adapter-react';

const wallet = useAnchorWallet()
const provider = new Provider(connection, wallet, {});
I'm passing the testWallet to my provider
`const provider = new Provider(connection, testWallet, {});`
Which will err since type Keypair != type Wallet
For generate a new keypair with Anchor :

import * as anchor from "@project-serum/anchor";
    
const testWallet = anchor.web3.Keypair.generate();
const testWallet = new Wallet(Keypair.generate());
How do you call the wallet ?
This channel the right place to post this question??
any update on this?
if you come up a better way, let me know!
mhmm not ideal for sure but thanks mate!
I believe `init_if_needed` is the closest to what you want but haven't tried it for myself. It's a feature flag so you need to import it by itself, see here: https://docs.rs/anchor-lang/latest/anchor_lang/derive.Accounts.html
Also, is there something like a "get_or_init" that can be used in contexts? Like retrieve the account if it exists or make it?
0.23.0
trying to install anchor but failing on this bit
there is no argument named `faucet_port`
Can you use ‘keygen()’ to get a key pair and then ‘Solana::system_program::create_account()’ to create the account? That can then be passed in to initialize account
Hey guys! Quick question. I'm trying to intialize an associated token account on chain with `anchor_spl::token::initialize_account` however, the `account` field in the `anchor_spl::token::InitializeAccount` struct has to be an AccountInfo. 
How can I get (either on-cain or passed by the client) the account info of an account that hasn't been initialized yet? Or am I misunderstanding `account` for something else?
I mean create this (screenshot) in front, the user have his wallet popup for validate the transaction, after it, send it to the backend and add my signature inside (screenshot 2)
I hope im clear..
Sorry it's not very clear 😢

As I said to <@!134416332509675520>  above:
I imagined preparing the call to my program (after the eligibility check) with the user's signature. But not sending it to the program right away.

Once the preparation with the signature is ready, I send it to my back, which will add my signature inside and only then I send it to my program. And on the program side I check that the account sent in the second signature is my own account.

This way, whoever wants to call my instruction, has to go through my site and my validation steps.

From this logic I have a black point:

- How to prepare the call of my program on the front side and send it to my back? (with await program.rpc.method())
<@!134416332509675520> I have a question regarding `cpi` , Are there any examples of passing `remaining_accounts` from one anchor program to another anchor program ? Any examples or leads would be really helpful. Is it even possible ?
I'm using 0.22.1
IDL shows `isMut: false`
Check the generated IDL, I'm curious if it actually has the `account1` marked as mutable
What version of anchor are you using?
` I want to develop a program that will do something specific on an NFT` who can call this instruction ? 
If  anyone can call this instruction then - 
1. In the backend you could sign with a message(this message could be publickey of the user who is trying to use your instruction) with signing algo like ed25519 
2. Send it to frontend,
3. Then user in the frontend would pass the signature along with your instruction as an argument,  
4. Then verify the signature on-chain. You could existing `solana_program::ed25519_program` for verifying onchain. 
5. If verification is successful, then user could use your instruction. 

I hope this makes sense
<@!134416332509675520> 
But where I get stuck is here:

I prepare the TX, I make the user sign it, I serialize it, I send it to the back, I add my signature, I send it to the program

My first problem is :
On the web3 side, I call a program method like this: await program.rpc.method()

Inside, there is the array signers([])

Can I call: await program.rpc.method(), add the user's signature, sign it partially, serialize it, send it to the backend to add my signature in it?

After all this logic, I just have to find out how to tell my program to check that the wallet sent in mainAuthority is mine and mine only.
Besides, how can I be sure that the prepared TX will debit the right amount of SOL to the user?

He will send his NFT but he will pay the TX fees
And finally, do I do the TX before the verification? Or the verification before?
Because then:
I ask if the NFT is eligible for my backend (route 1)
My backend answers yes/no
If yes I call route 2 with the TX

But I have to secure this route
Because otherwise someone can call the route directly by preparing his tx on his side
Yep!
I had in mind to prepare the transaction on the client side, serialize it and send it to my back, to add my signature and send it to the program. Then on the program side I check that the second signature is really mine
So you could give your site a special keypair, and then guard that the invoker of your contract really did manage to sign with the keypair
In general the only way to force a caller to "prove themselves" is by making them sign with some known address
This is a Really Important Question
Mmh I don't quite understand. A program has a public IDL. So anyone can call this program. I would like to find a way to add a unique data, that only my site can deliver.

I thought of the multisig. That is to say that for the tx to go to my program, I need to get the signature of my account for example. And this signature can only be obtained after eligibility.

This idea would be perfect in theory, but I don't see how to sign a transaction with my account, then send it to the frontend which will add the client signature to send it to my program
NVM. i had error_code in multiple places in my smart contracts.
I think you do this, when you initialize your program for the first time, make sure to store the authority as you. 

Then you could call your another custom instruction which you described above with a guard here. Make sure only you could call this instruction.

Also make sure you are signer for both instructions
oh I overlooked that. looks like it's already working now then and we can revert that change. Thanks!
Oh, interesting—I was looking at this https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/program/entry.rs#L69
if i run `npm i -g @project-serum/anchor-cli`
im still getting 0.22.1
so if thats the latest one, then this above error exists
gotcha thanks.
https://github.com/project-serum/anchor/pull/1721
fyi <@!862831565503463434> ^
we already have a fallback function but anchor still requires at least 8 bytes of ix data. The next release will change anchor so it uses the fallback function if the ix data length is smaller than 8
yeah i just ran  anchor idl parse --file
going to try w/ 0.23 cli. was on 0.22. will lyk
oh alan answered 👍 I didnt see
Hello! I have a question. I just realized how stupid I am. I want to develop a program that will do something specific on an NFT. But before sending the NFT, I do a lot of client side checks with Web3. And if the NFT passes all the checks, then it is sent to the program. Except I forgot that anyone can use the program, and therefore literally override all the checks. So I have no idea how to secure my program. Do you have an idea? Also this check can't be done from my program, because it requires external off-chain tools, and since there is no Oracles, it's not possible. I'm glad I realized how stupid I was before I deployed the whole thing, now I hope I can fix it
I got this style.
that does not sound right indeed
wdym?
hey! anchor idl parse is only creating 20 errors max. is there some sort of bug?
thanks a lot for your support! super fast!.
Mm looking at the code I think this will work right now, but I'm not sure which PR paul meant
is it possible in the current version or need to wait for the next?
No, just add a function in your #[program] with that signature (think it can have any name), `pub fn your_fallback(program_id: &Pubkey, ...)`
pretty cool. so would you add any macro for that?
So it's basically back to doing low-level solana
Ok, paul is saying that you can use a "fallback" function in anchor, which has the old-school signature `(program_id: &Pubkey, accounts: &[AccountInfo], ix_data: &[u8])`
I need to define callback instruction from an existing contract. as like flash loan transaction.
Why do you want to do that again though?
I just wanna make the instruction contains 1 byte tag and n bytes data inside program module.
Actually, could you say more about what you want to do? Not sure I'm following
fantastic, nice work! how it will look for the specific method inside program module?
we just merged support for this some days ago. Will be in the next release. Any ix data with length < 8 will go to the fallback function instead of panicking
hey, guys! hope you are doing great!
Is it possible to make the instruction tag with [u8; 1] instead of encrypting sha256(namespace::method_name) inside program module? because I need to call with 1 bytes instruction from another contract. thanks.
If you want to create the account in your anchor program, might want to use the `init-if-needed` feature and do
```.rs
#[account(
    init_if_needed,
    payer = the_payer,
    associated_token::mint = the_mint_account,
    associated_token::authority = the_owner,
)]
pub the_token_account: Account<'info, TokenAccount>
```
You would check by seeing if there's already a token account at that associated token address
hello! Could anyone tell me how to check if a user has an associated token account and how to create one if they don't? What data do you need to know? Basically trying to figure out how to create a token account so we can transfer a token and an nft to a user that never held that type of nft or token. Do we need the associated token account? We are building our own marketplace and purchasing is the last thing we can't quite nail down.
Having issues importing `Wallet` from @project-serum/anchor package vs 0.23.
Getting this compile error:
`Attempted import error: 'Wallet' is not exported from '@project-serum/anchor'.`


///////////////////////////////////////////////////////////////////////////////////////////////

<@448034961652449283>  i see your are looking into this issue, has there been a workaround found ?
anchor test fails on windows(WSL) ? anyone with a similar problem is there any workaround ? ```Failed to obtain package metadata: `cargo metadata` exited with an error: error: failed to load manifest for workspace member `/mnt/c/Users/aaraN.rust/solana-proj/oracle-testing/programs/target`

Caused by:
  failed to read `/mnt/c/Users/aaraN.rust/solana-proj/oracle-testing/programs/target/Cargo.toml`

Caused by:
  No such file or directory (os error 2)```
No worries!
shit that was really nooby from my side <:KEKW:936733661666103326>  thanks for the great answers!
There's no import, it's just that Cargo.toml change
You dont happen to have a snippet import from an actual used file off this? never done this/seen this type of import or what you may call it
<:KEKW:936733661666103326>
sorry to be that guy
i just saw that
lmao
Heh, I just posted the answer to that
thanks for the response what package/crate is "init_if_needed" from?
It's just anchor-lang, but you need to turn on the feature
```.toml
anchor-lang = { version = "...", features = ["init-if-needed"] }
```
Hey, anyone here knows where "init_if_needed" propery on account is imported from?
You can use `crate::program::YourProgramModNameCasedLikeThis`
i want the user to pass the the programAccount which is the current program, so in Program<'info, T> what should be the T value ? how do i make it so its my current program ?
do i do anchor init create a workspace and use anchor new for each new program ?
hey any example repo on how how to structure multiple anchor programs in one repo
<@134416332509675520> I am getting this error on anchor init
Like in a database or whatever
It would be essentially free to store it off chain though
Not on chain, no
https://discord.com/channels/889577356681945098/889702325231427584/946565378685956126
The thing is, I don't know if there is a cheaper way to store that much data
Ah, you can clone the metaplex program account, but you *also* have to clone the derived address from the upgradeable loader—it's in discord somewhere if you try to search for it
ser other than the links provided by FiveDomain, able to direct me on spinning up metaplex locally. So that I can tap on the metaplex programs on localnet
If so you have enough money to hire someone to figure this out for you lol
And again, are you really planning on spending > $100k to store this data on-chain?
Can you be more specific about your question? To some extent the answer is just "store it in some number of accounts", so it's hard to answer without more information about what you've tried so far/what didn't work about it, etc.
I mean to store users' addresses
can't you create a PDA for each address?
https://stackoverflow.com/questions/69886067/running-metaplex-on-localhost 
https://youtu.be/NZTjUwZELNo ?
hey guys, anyone familiar with spinning up metaplex on localhost?
Drift uses pyth: https://github.com/drift-labs/protocol-v1
hey guys is there a good example of the usage of pyth oracles in a open source repo i could check out, wanted to see not only how it is used, but what is the proper way to use it
Hi, I tried to find the answer to my question but didn't find anything.

When I run "anchor test" I get the following error.
Versions of cargo, rustup and anchor on the screenshot.
I'm running WSL + Windows 10.
Yes, 125,000,000
https://github.com/solana-labs/solana/blob/master/sdk/program/src/rent.rs#L55
You can look it up in the source, but it works out to being about 7 sol/mb for rent-exemption. Can also just run `solana rent 125000000`
Blockchains aren't really intended to store large amounts of data, hence the exorbitant cost
It would be at least a minor pain in the butt—that plus the cost means you maybe want to rethink your approach?
Not that I know of—you'd just have to keep track of enough state to keep track of all the linked accounts
Also, 125MB would cost 875 sol to rent-exempt, fyi
Break it into 13 accounts 😉
It contains a bool in the struct
How do I do it?
I want to deserialize a Anchor Struct Account using getAccountInfo
awesome
Thanks
yeah could get the account address too 🙂
sure
trying will let you know
though, you can give a try
but me suspecting, if you could get the address or not?
yea
They will all be in scope?
simple, just `msg!()` the bump, and the address
Interesting. So I have this account

```
    #[account(
        seeds = [LOCKER_AUTHORITY_SEED.as_bytes()],
        bump = locker_authority_bump,
    )]
    /// CHECK: Required for program's signing authority
    pub locker_authority: UncheckedAccount<'info>,
```

If I wanna get the bump and the account address, how would I do that?
here is one quick example 
```
#[account(address = {
    let add = crate::ID; 
    msg!("Getting ProgramID from contract :: {}", add); 
    add 
}@ CustomError::AccountNotProgram)]
pub program: UncheckedAccount<'info >,
```
yeah you can, you can bind them into `{}`
Can I get anchor to be more verbose on constraints and print stuff as it's performing checks so that I can debug it better
easy to do seeing solana programs are all stateless.
ie things like a faucet
I also normally just create a devNet/testnet only program that I just dont deploy to mainNet
The workaround I did for now is setting the cfg inside the method and return error in production, but the ideal would be to remove them completely
I mainly use the feature flags for `const` and the `declare_id`
doh.
yeah i just got the same here.
Is this a correct usage?
let &mut ctx.accounts.selected_address_two = &mut ctx.accounts.escrow_account.data[1];

where escrow_account and selected_address_two are two different accounts in the same context struct..
If I expand the macro the generated code references to that function in many places but if you try to compile without it (for production) it is removed and the references broken.
```
error[E0425]: cannot find function `create_for_dev` in module `program`
...
    |
    = note: consider importing this function:
            crate::__private::__global::create_for_dev
```
show us the error?
But if you do it like that, the Anchor's `program` macro do not propagate the flag through the code it generates and then it says the instruction is missing
you need to registor the feature in your `Cargo.toml` and then use this `anchor build -- --features \"dev\"`
Hey guys, anyone else getting this error when deploying to `devnet`:```Error: Custom: Invalid blockhash
There was a problem deploying: Output { status: ExitStatus(unix_wait_status(256)), stdout: "", stderr: "" }.

```
nvm figured it out
My usecase for this is that I have a time-based program, so for testing I need an unchecked instruction to modify the accounts **BUT** I don't want them to be part of the final program.
Hello I'm trying to create an instruction behind a feature, is there any way of doing this??
```rs
#[program]
pub mod program {
  pub fn create(ctx: ...) {}

  #[cfg(feature = "dev")]
  pub fn create_for_dev(ctx: ...) {}
}
```
I must also note that the wallet signing the transaction leading to this call would otherwise be the only signer, and also payer
hmm I'd like to have a program as a delegate for spl token transfers, so when the program is supposed to transfer out of the account, how should I pass the account?
the program would do:
`invoke_signed(spl_transfer_ix, &[])` (no pda)

so in the instruction that leads to this call, if I set `isSigner: false` to the program's publicKey I get priviledge escalation at the CPI, while if I put `isSigner: true` I get signature verification...
you can check out the anchor repo `anchor/tests/float`
ig
yeah it does
Does anchor support floats
Cannot use 'in' operator to search for 'vec' in f32
Keep getting this error when trying to use floats
No i’ll test
well yeah, but this is your development app... have you tried a different wallet?
I never allowed trust or auto approve (normally)
maybe it's a setting on phantom that you allowed it to "trust" your _local_ app
oh so it was the wrong provider? gotcha
Its good, your method is not the good one (about the provider I need to use mine) so its work now.

Btw I still have my problem about the signature without Phantom popup
Yup she is finalized
hmm, are you able to inspect the transaction with the explorer?
Even without a log, it doesn't work
just don't `console.log` it! you don't need to inspect the return for what you are tying to do
but confirmTransaction return me the error above :/
so even with 
```
sendRaw
confirm
fetch
``` fetch is not able to get the data? you can try specifying commitment in the confirm, after the hash
No because once I have the result, I do a fetch. Except that the method doesn't fetch anything, or fetches too fast :/
I mean after the await the tx would be confirmed (or errored?) so you can just ignore it... does the rest of the code work now? like, can you retrieve what you were looking for?
Mmh.. I will see with <@!134416332509675520> tomorrow :/ Weird
I see, that's weird tbh. well, you don't need to log it tbh... I'm checking the types but there's not even a `data` anywhere
I 100% have it

that honestly looks like you _don't_ have the txHash, as `data`, from `result.data` is undefined...
And I have the txHash

Don't work
ah yeah, forgot to mention that
I just need to await ?
Yes I have it after the call to my program. I will test it !

I just need to found why the user can sign without the phantom popup 🤔
if you have the txhash, `anchor.getProvider().connection.confirmTransaction(txhash)`
With serialize/deserialize
Nop ! Because I don’t use .rpc(). I use custom transaction from Anchor
I have his signature ! But the popup doesn’t show and he doesn’t need to validate.. Its really weird..
you can add confirmOptions in `.rpc()` to change the commitment level required
wait how can you debit an account without getting their signature? 🤔
<@!134416332509675520> Well then, I set up with React/Node what we did.  It works !  But I have two problems.. The first is that the popup window from phantom does not open for the transaction. That is to say that we make the transaction and that we debit his account without him knowing it. My second problem is that after the transaction, I do a fetch of the messages to recover them and  to display.  Going through .rpc(), it worked perfectly.  But with our logic, there is a late call.  That is to say that when the fetch is called, I think that the transaction is not yet finalized.  Weird when with .rpc() it was instantaneous :/
also `[[test.validator.accounts]]`
perhaps `[test.validator.clone]` ? https://book.anchor-lang.com/chapter_5/anchor-toml_reference.html#testvalidator
well depends what you want to do, if you want to call it, or just their instructions... for the former, import the program as crate and use cpi, for the latter, copy-paste (https://github.com/project-serum/anchor/issues/454)
Hey guys, is it possible to use/reference sombody else's program through my own program? considering that I have the code of their program

Fast question, react send me an Uint8Array instead of buffer for serialize function. Is it normal ?
On GH I read Armani mentioning initializing the test validator with wallets pre-loaded with common SPL tokens such as USDC. did an easy way to do this ever make it in?
(Try to send a bad pubKey in admin)
I have this error 🥰
Yeah
So IF it works, no one will be able to use my program, or at least this method (I have to apply the same thing to all the strict methods) and therefore he is obliged to go through my Web3 verification to have access to my signature
No one else can fake that
Yep, don't have to do anything else—that Signer check enforces that your specific wallet signed
Ok so if I understand well, globally my code nothing changes, except that in my instruction I add admin: myWallet.pubkey

The macro will check that one of the signatures is linked to myWallet.pubkey

So in the method, I have nothing to add in terms of security ?
😭
Sure, that works too (is less efficient but whatever)
Btw I see something like :
Pubkey::from_str("XXXXX").unwrap()
use std::str::FromStr;

Otherwise you're just going to have to fiddle with it
The import would be
```.rs
use anchor_lang::solana_program::pubkey;
...
pubkey!("asdfasdfasdf")
```
I'll look into all messages here
Nein
So it worked?
No ok its not my screen
Close
Think it's anchor_lang::solana_program::pubkey!("asdasd")
Ok I need to import it lol
Do I need to import this macro ? Or Anchor found it derectly ?
Thx
Anchor/solana has a macro for this purpose
Do `pubkey!("9145asdfasdfasdf")` instead
Yes I think I understand
And I guess he's going to bug me if I do it like this?
The top-secrete part stays on your server, while the *public* key goes in your program
Ok I have to try
You're already signing with that keypair, now you just need to enforce it in your program, like I posted above
What's your question then?
Yes but I mean, he is already here
Don't do that on the client of course
You would sign with your top-secret key on the backend, where no one else has access to it
And how am I supposed to sign it? Since it is already placed in a partialSign
But they can't sign for it 😉
Mmh but someone can very well send my pubkey, it's public
You need to force your top-secret key to sign the tx
With something like this in the rust side
```.rs
#[account(address = YOUR_SPECIAL_ADMIN_PUBKEY)]
pub admin: Signer<'info>
```
Ok so now it seems to work. Now I want to add something to my instruction.

Currently, theoretically, anyone can call createMessage() from my program.

I would like to add a layer, which is that my signature is required to call the statement. How can I do this?
Okok
I'm just hacking that together in a test
Ok i will try ! You don’t use fromSecretKey ?
Maybe there's a slicker way to do that, but it should be basically the same scenario as you have above
```.ts
const randomSigner = anchor.web3.Keypair.generate();
    const tx = await program.methods
      .example()
      .accounts({
        randomSigner: randomSigner.publicKey,
      })
      .transaction();

    tx.recentBlockhash = (
      await program.provider.connection.getLatestBlockhash()
    ).blockhash;
    tx.feePayer = program.provider.wallet.publicKey;

    tx.partialSign(randomSigner);

    const serializedTx = tx.serialize({ requireAllSignatures: false });

    const rehydratedTx = anchor.web3.Transaction.from(serializedTx);
    rehydratedTx.partialSign((program.provider.wallet as NodeWallet).payer);

    const theTx = rehydratedTx.serialize();
    await program.provider.connection.sendRawTransaction(theTx);
```
Ok, I ran a local version of roughly what you have above and it worked fine:
This will work, you/we just aren't doing it right yet
It's crazy that it makes it so complex.
Initially, I could have just called .rpc()

The problem is that for my need, I do some checks on the Web3 side to be able to access the program (Smart Contract). But someone can take the program and bypass all the checks, since he can use the program just with his ID.

So I just wanted to add an information that only my wallet can provide to secure the call to the program. So I wanted to add my wallet. Then I get my wallet on the Smart Contract side, I check if it's mine, and if so, the process starts.

So to perform this action, I need my private key, which I can't put on the Web3 side for obvious security reasons. So I prepare the transaction that I serialize, then send it to my backend (NodeJS). My backend deserialize, add my keypair because my instruction ask me, then send the transaction to my program (Smart Contract)
Error: No Signers
Here the instruction I try to call with this logic
What if you just do `program.provider.connection.sendTransaction(rehydratedTx, [])`
Here the rehydratedTx
Here the full test code
Error: Signature verification failed
Nop
Wait, did it work?
I'm really scared when it works, and I want to explain the following logic to you lol
Okey I have now 2 signers, but Error: Signature verification failed
Do `rehydratedTx.partialSign(yourKeypair)`
Whoops maybe lol https://discord.com/channels/889577356681945098/889702325231427584/958507325780557884
What change ?
Oh, maybe you need to do `.partialSign` 🤔

Ok, just to make sure we're talking about the same thing, you can't send the actual keypair itself to the smart contract
I still have one signer in my array
program is Smart Contract
What fails there?
What do you mean "on the program side"? The backend or the smart contract?
(I tried to deserialized, and add my signature for send to my program
And btw this doesn't work 😢
Ok so for example, there doing my own magic, I am forced to sign with my keypair. Can I retrieve this keypair (mine) on the program side, without any instruction, and check that it is really mine?

Because as I said, I try to be as clear as possible 😢
To secure my program, I want (on the program side) to receive MY keypair to be sure that the call comes from my site and not from another one. With this security, nobody can call my program
You sign with a keypair, not with an account
You'll need to sign with each unique signer, not sure if that's what you mean by twice
Ok so in idea, I understand. So in fact you tell me that in V1, the signature is already in the heap, in V2 I have to add it myself (is tx.sign() with my wallet enough, as I did for wallet 1?)

Now for step 2, as on the screenshot I will add a second sign (authority_wallet), which will be me. So when I'll do the magic Ravenclaw technique, I'll have to send my signature twice, right?
https://tenor.com/view/awkward-harry-potter-drool-funny-gif-14773748
Pretty sure signatures get deduplicated, at least I assume they do
When you do things yourself, you have to provide your own magic 🪄
`.rpc()` automagically signs with your `program.provider.wallet`
So actually, I don't understand why if I go through .rpc() directly I only need the user's signature, and when I want to serialize/deserialize + send, I need to add my signature.

Because the next step is in my instruction, add my signature to be sure that the user goes through my site to get my signature. Since I will have to serialize/deserialize due to exchanges between the front and the back, and since the previous request necessarily requires my signature, this means that in the V2 with my signature in the instruction, my signature will appear twice
Which part? Is something erroring because of a lack of signatures?
ok im downloading that, thankss
If you're on a mac you just need to start Docker Desktop
how do i do that
I just added

`[features]
seeds = true` 

To anchor.toml and next time I ran build, it updated my IDL and it now contains the PDA seed info
why were the pyth structs re-defined in this , ```https://github.com/project-serum/anchor/blob/master/tests/pyth/programs/pyth/src/pc.rs```
instead of just using the pyth rs sdk ? any particular reason ?
Still mindfuck by theses messages 😭
could be due to this:
`WARNING: unexpected seed: Lit(ExprLit { attrs: [], lit: ByteStr(LitByteStr { token: b"seed" }) })`
I'm trying it too because I'm curious, how do you use it? it still doesn't seem to generate the pda section in my idl either
you usually run a daemon
(for `anchor verify`
```% docker start
"docker start" requires at least 1 argument.
See 'docker start --help'.

Usage:  docker start [OPTIONS] CONTAINER [CONTAINER...]

Start one or more stopped containers```
docker start requires 1 argument ? how do I start docker?
This did work 🙌
Only explanation for me would be that anchor did not build/update the contract properly after i set the accounts to mut and deployed
I dont know how I could, it uses a  impl that basicly transfers a token between two of the tokenaccounts listed..
Ah, so the seeds feature flag needs to be added to cargo.toml? Interesting, I'll give that a try and let you know what happens
hmm all accounts marked mutable? are you really not interacting with _any_ other account not listed here?
https://github.com/project-serum/anchor/issues/1004#issuecomment-1020478661
Hello guys, if an account is owned by program, does its keypair still valid for any operation? like close account, change the data or something?
https://github.com/project-serum/anchor/pull/1331

This feature in 0.21.0 is what I'm looking at. The code in /idl/pda.rs parses seeds and stores them in the IDL. I'm on anchor 0.23.0 so I'm not certain why mine isn't generating those attributes into the IDL. I've tried deleting /target, reinstalling node_modules, etc. to try and make sure everything is using hte latest version of anchor 😕
`#[derive(Accounts)]
pub struct CancelEscrow<'info> {
    #[account(mut)]
    pub initializer: Signer<'info>,
    #[account(mut)]
    pub initializer_deposit_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub initializer_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub escrow_account: Account<'info, EscrowAccount>,
    pub token_program: AccountInfo<'info>,
}`

Invocation ts - checked all the accounts they exist as they should
`  const signature = await program.rpc.cancelEscrow(
            {
              accounts:{
                initializer,
                initializerDepositTokenAccount: deposit_token_account,
                initializerTokenAccount: initializerTokenAccount,
                escrowAccount: escrowAccountKey,
                tokenProgramAccount: TOKEN_PROGRAM_ID
              }
            }
          )`

instruction -> 

`{
        "name": "cancelEscrow",
          "accounts": [
            {
              "name": "initializer",
              "isMut": true,
              "isSigner": true
            },
            {
              "name": "initializerDepositTokenAccount",
              "isMut": true,
              "isSigner": false
            },
            {
              "name": "initializerTokenAccount",
              "isMut": true,
              "isSigner": false
            },
            {
              "name": "escrowAccount",
              "isMut": true,
              "isSigner": false
            },
            {
              "name": "tokenProgramAccount",
              "isMut": true,
              "isSigner": false
            }`

` {
        "name": "cancelEscrow",
        "accounts": [
          {
            "name": "initializer",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "initializerDepositTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "initializerTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "escrowAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgramAccount",
            "isMut": true,
            "isSigner": false
          }`

let me know if you want anything more
my IDL also only has those 3 keys, so idk
the new ts builder looks for that section to derive the PDAs, my IDL only has `name`, `isMut`, and `isSigner` for each account
somethign like:
`'pda' : {
    'seeds': [ ... ]`
what section were you expecting? I also make use of PDAs but I don't have any in my IDL....?
I think I'm doing something silly here but my IDL doesn't contain the `pda` section for any of my PDAs. Any ideas?
otherwise please send a snippet of your `#[derive(Accounts)]` and how you make your instruction/transaction from .ts
checking!
perhaps you have not specified the account as writable in remaining accounts (if you make use of it in your .ts)
please share the code
is this the only reason this error might occur? because I have seriously checked everything <:KEKW:936733661666103326>
might be missing `#[account(mut)]` somewhere
You are trying to modify an account which is not marked as mutable
anyone know the reason of this error?
I have tried searching it and best answer I could find was if an account is not defined as mutable in your anchor code, I have double checked that should not be it

`Error: failed to send transaction: Transaction simulation failed: Transaction loads a writable account that cannot be written
    at Connection.sendEncodedTransaction (connection.ts:3964:1)
    at async Connection.sendRawTransaction (connection.ts:3921:1)
    at async sendAndConfirmRawTransaction (send-and-confirm-raw-transaction.ts:27:1)
    at async Provider.send (provider.ts:114:1)
    at async Object.rpc [as cancelEscrow] (rpc.ts:24:1)
    at async handleCancelListing (DetailListingPage.tsx:116:1)`
docker start requires 1 argument hmm
```% docker start
"docker start" requires at least 1 argument.
See 'docker start --help'.

Usage:  docker start [OPTIONS] CONTAINER [CONTAINER...]

Start one or more stopped containers```
ok i uninstalled it


///////////////////////////////////////////////////////////////////////////////////////////////

Pyth account validation would mean verifying that the oracle account really is owned by the pyth program
also is there any good math libraries recommended to use to make life easier 😦
I think I answered this above, you can just divide an i64 by 10^whatever, right?
I think in order to solve this they had to roll back to solana 1.18 or something
I usually have to retry several times (7 or so). But if my program was bigger it would probably be impossible. I think that <@!867369388608061470> knows about this issue somewhat
still looking out for this 😦
You in general can't, you should presumably instead by doing `program.provider.send(transaction)`
Is it possible you're transferring too little lamports? Even empty accounts have a rent-exemption minimum (it happens to be 890880 lamports)—meaning that their lamport balance needs to either be zero or >= 890880, oddly enough.
how can I get the wallet to be a signer to send a transaction like this where payer is of type Wallet?
```js
program.provider.connection.sendTransaction(transaction, payer);
```
and solana-cli
and if so, which version of anchor-cli are you on
Can anyone deploy to devnet
I'm passing in remaining accounts that get lamports tranferred to them. Do I need to initialize those accounts before passing them in?
how do I fix this?
```
Transaction simulation failed: Transaction leaves an account with a lower balance than rent-exempt minimum
```
https://github.com/solana-labs/solana/issues/2367
hey all, can anyone share a simple example on how to use pyth, not just reading the price values but its usage, as the price is constructed as price * exponent which have differnt types not exactly sure how can i multiple a positive i64 value with 10 to the power negative exponent also how does pyth account validation would look like, any code snippet covering these things is appreciated.
oh, lucky!
<@!218650902930653186> I had success using mango's old public validator https://mango.genesysgo.net/ instead of main net
ok thx will check it
Just the docs I guess, but mainly source code
execpt the source code
okay whoaou do you have ressources to learn more about the low level of solana ?
No dynamic lookups of any kind
In solana you always have to pass in any accounts of interest from the client—*all* of them
Nope (lol 😬)
ok last question it is possible from a pubkey to retrieve to a AccountInfos struct ?
I would be pretty surprised if that changed anytime soon
having all the token accounts own by a program, or the solana env made this impossible
arg ok thx, can we imagine that in the future we can get this kind of information in a rust program ?
Not possible 😬 You can only pass in about 30 at the absolute max in one transaction
and how if it's more than 1000 accounts ?
Nope
the rust program cannot do this ?
In your smart contract? You'd have to find them on the client and pass them in as accounts
hey how can I have all the token account own by a wallet in a rust program ?
Nice, cool
yep, this works as expected
thanks!
ah, that's great
The raw underlying AccountInfo type will give you the full allocation
i have a bad feeling that `account_info.data_len` just returns the len of the non-zero data in the account
is there any way to see how much space has been allocated to an account info?
okay, thank you
aah naa, you can only send upto 30 ig
is it available to send 50 pubkeys to contract from client side?
you can use remaining_accounts tho
> think converting pubkey to account info is not possible.
yeah, it's not possible. you need to pass the pubkey from the client-side itself.
hello, I have one risk for my project.
my project is game.

100 users will deposit to contract 0.1 sol.
And 25 users will get 0.4sol.
so when 100th player deposit, the game will finish and transfer sol to winners.
I have winners pubkeys. how can I send sol to winners by using pubkey in contract? (I think converting pubkey to account info is not possible.)
Hello. If I use `solana_program::ed25519_program` to verify signed messages, I need to somehow restrict people from using the same signature multiple times. In Solidity I could create a mapping and set the signature value to `true` to do this, but since Solana has no mappings, there must be another way. 
The easiest way I can think of is to create a PDA for each signed tx, but there has to be a smarter way.
Reminder to myself or anyone else who might be searching the channel: 
`'ELF error: Multiple text sections, consider removing llc option: -function-sections'` <-- If you get this with `anchor test` make sure you have your programs in your `target/deploy` up to date with the actual cargo crates you are using
thanks this worked
you need to do this
`pub child_a: Account<'info,ParentA>,`
```rs
#[account]
pub struct ParentA {
 pub child_a: ChildA
}
#[derive(AnchorSerialize, AnchorDeserialize, Default, Clone)]
pub struct ChildA {
    pub field: String
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(mut)]
    pub child_a: Account<'info,ChildA>,
    pub system_program: Program<'info, System>,
}

``` if add #[account]  above the AnchorSerialize derive then it gives an error but i cant pass the ChildA struct into Initialize without it being an account
how to make a custom struct thats also an account
https://docs.pyth.network/how-pyth-works/account-structure it says here the price is price multiplied by the exponent which in most cases is negative so how are these cases handled ?
I am wondering if the issue could be the initialization of the account in the frontend after the call to the function..
Yeah have verified on solscan as well..
are you sure the account has initialized?
But I have initialized the account in a different context struct in the same program.. In this particular one, it is just mut..
❯❯❯ fuck 0xbc4
> Anchor Program
3012 | AccountNotInitialized: The program expected this account to be already initialized
Transaction simulation failed: Error processing Instruction 0: custom program error: 0xbc4 
    Program 3F2mrkKKoUzP6yGHnUairsE1pNQHBK4KVD21G5KF51CC invoke [1]
    Program log: Instruction: AddParticipants
    Program log: Custom program error: 0xbc4
    Program 3F2mrkKKoUzP6yGHnUairsE1pNQHBK4KVD21G5KF51CC consumed 3720 of 200000 compute units
    Program 3F2mrkKKoUzP6yGHnUairsE1pNQHBK4KVD21G5KF51CC failed: custom program error: 0xbc4

What does this error mean??
<@99911938955309056> , if i wanted to implement a reward scheme for stakers, where they are rewarded for each block they stake there funds fot, meaning the reward is accumulated over blocks passed, but as we know solana block Number really does not translate directly to thereum block number if so what is a true representation of blocks passed in solana ? slots ? clock ?
10 mb
space wise
Does anyone know what the max size an account can be allocated
is it by multiplying the exponent with the price and conf ?
the values returned by pyth what format is it in ? lamports ? like how do i normalize let say the value returned for sol/usd  : `11467438000`
am doing it all on the localhost so i dont think my issue is due to the network congestion, btw my tests are running and the accounts are getting initialized, all the tests pass only the at end the after it says done it says program not found
Has anyone gotten this error when using floats before?
Just got it to deploy then
<@!218650902930653186> i think that solana is just struggling today and when the network gets clogged its really bad at deploying programs. hopefully its better tomorrow
well one thing you can do is use the solana explorer and set the cluster to localnet, and then you can see for yourself if your program really deployed
the reason am not using anchor test is because anchor test used --bpf-upgradeable flag and directly inserts the program and there is no deployment done hence no bpf upgradeable owner and no program data account.
though my understanding is that `anchor test` is not meant to be run with a pre existing validator running, it starts its own, so nevermind. though i see you said it skips that lol.
<@!445019022338031618> you might have more success using `anchor localnet` for running a local validator with your program on it
what am i doing wrong due to which at the end it gives me `program address not found ? `
oh wait i ran a local solana test validator , manually called anchor deploy and then called anchor test with skip local validator and skip deploy
Did you deploy the contract?
also my tests pass but i get this at the end ```Error: Program address not found.
``` how do i fix this 😦
^ my error and what augustus posted


Think I might just have to keep trying it
Yeah Ill change up the screenshot thanks
sometimes I get this error when deploying on devnet, but if i retry a few times it comes through. right now i can deploy to devnet no problem, but im deploying to main net for the first time and the network is just not having it.
i came here to post the same. 

by the way <@!218650902930653186> though i am unsure, it may be that you do not want to show the seed phrase shown in your screenshot
Getting this error on deploy anyone know how to fix
wonder if there's other example
I've been using this https://github.com/project-serum/anchor/tree/master/tests/pda-derivation as the reference
hello, is there documentation on v0.23?
it seems like when i deploy using anchor deploy, the program id is gauranteed to be === the pubkey of this keypair?

edit: when i use `solana program deploy` this is the case, yes
could somebody briefly explain to me the relationship between `target/deploy/my_program-keypair.json` and the programId for my_program?
Is the devnet working right now
But to test I would have to do anchor test --skip-local-validator
U mean I can do, custom_deploy = Solana program deploy command line  flags etc under [scripts]
depends how you deploy your progrm
`solana program deploy ....`
On how that pre-test would look like
and in that `pre-test` you do your deployment
Any example
so you could `anchor run pre-test && anchor test --skip-deploy`
the same way you deploy manually
Hmm how would I deploy using the script ?
you could define your own script in Anchor.toml
Is there a way to force it to deploy, otherwise I can't use anchor test
Hey I made a program with anchor but I'd like to have the CPI in a separate crate, as I'd like to keep the program closed source, does anchor support what I'm trying to do? or must I create the crate manually with the instructions I want to make public? what about the IDL?

For example, I refactored and separated the "public API" into a crate, but when I use stuff in that crate the IDL doesn't generate the types that were imported
Ah, yeah actually. If you let anchor spin up the test for you it uses the solana-test-validator's `---bpf-program` arg to just inject your program, no actual deploy
Does using anchor test, uses a non bpf upgradeable loader such that the program deployment id not using a upgradeable loader,in that case it won't have a program data account, because my tests run fine  on an external validator where I manually deploy
but even though the 2 tests pass at the end it tells me this 
```Error: Program address not found.
```
getting a super weird observation,
```it("Is initialized!", async () => {
    // Add your test here.
    //program_admin

    // let upgradeAuthority = anchor.web3.Keypair.fromSecretKey(priv)
    let upgrade_authority = program.provider.wallet;

    let controllerAccount = anchor.web3.Keypair.fromSecretKey(
      bs58.decode(
        "4tzFJt6qbMSvNCoehfEd73LmWVt8BVK9JNKAHPVYVBtWS8sLfG4TftWLs7qFTsmVtNE6eKNMd2Z1VRvxi7GKpnex"
      )
    );
    console.log("pub key is ", controllerAccount.publicKey.toBase58());
    let systemProgram = anchor.web3.SystemProgram.programId;
    let programAccount = program.programId;
    const programDataAddress = anchor.utils.publicKey.findProgramAddressSync(
      [program.programId.toBytes()],
      new anchor.web3.PublicKey("BPFLoaderUpgradeab1e11111111111111111111111")
    )[0];
    let seed = "global-admin-account";
    let [admin_account, _] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from(seed)],
      program.programId
    );
    const tx = await program.methods
      .initializeAdminAccount(controllerAccount.publicKey)
      .accounts({
        admin: admin_account,
        programAdmin: upgrade_authority.publicKey,
        program: programAccount,
        systemProgram: systemProgram,
        programData: programDataAddress,
      })
      .rpc();
    console.log("Your transaction signature", tx);
  });```
this test pass if i run it against a external local validator but fails if i just do anchor test???
am confused why wont a block be produced , in what way will a slot by not in sync with block number ?
but yes the analogy sort of work
it is an number incrementing no matter if the block is produced
similar, but blockNumber isn't exactly like slot, some slot number don't have a corresponding block
and clock is ethereums block.timestamp ?
its similar to ethereums blockNumber ?
<@831450660146642974>  i havent really ever tested using the test crate any helpfull beginner friendly resources out there to write the testing out in rust ? and is there an anchor rust alternative ?
slot is also in the Clock struct
the time is something voters submit and is averaged, stake weighed and bounded
slot is the block index, it increments by one every time there is supposed to be a block
could you explain what are slots in solana ? and how is it different from the time we get using clock ? really confused around the terminology
the warp slot on the test validator is to warp if you start from a snapshot
Only with the solana rust testing crate https://docs.rs/solana-program-test/1.10.5/solana_program_test/struct.ProgramTestContext.html#method.warp_to_slot
am seein this warp_slot command not exactly sure what are slots and what would warping slots do.
not with the test validator
btw can we warp time ? to test functionalities which are timebounded ?
Don't think so, no https://solanacookbook.com/references/offline-transactions.html#durable-nonce
aha
Yeah, the cli could check if there are any unexpected keys etc.
i mean is it even possible to handle this ?
Error handling in Anchor.toml isn't great 😬
oh wow am dumb i had it as `testnet` instead of `test`
`[[test.validator.clone]]`
trying to clone a pyth prtice account.
if i use the solana test validator and give a --clone address and --url net to clone from this works fine, but anchor test itself fails, meaning the anchor cloning feature is not working any idea why ?
Quick question: I have multiple transactions that I want to assign a durable nonce to. Can I use the same durable nonce for multiple txs?
all i do is clone the account and fetch that account but its failing
ppl who have used the clone account facility , can you point out what am i doing wrong ? 
```[test]
startup_wait=10000


[test.validator]
url="https://api.devnet.solana.com"


[[testnet.validator.clone]]
address="J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix"``` 
 this is how i set it up, 
but my anchor test keeps failing
```describe("adminV2", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.Provider.env());

  const program = anchor.workspace.AdminV2 as Program<AdminV2>;
  let connection = program.provider.connection;
  it("Cloned non-executable account", async () => {
    // Metadata program upgrade authority
    const account = "J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix";
    const [accountInfo] = await anchor.utils.rpc.getMultipleAccounts(
      connection,
      [new anchor.web3.PublicKey(account)]
    );
    assert.isNotNull(accountInfo, "Account " + account + " not found");
  });
```
alright another term i have come across is slots can u elaborate on that term too.
Yes with `Clock`, u can retrieve the current block timestamp by doing `Clock::get().unwrap().unix_timestamp`
hey in ethereum like we have block.timestamp is there something similar in solana ? to say if i wanted to lock something for a period of time say 1 day from now how is that done in solana , also what are slots ? pyth also returned values from a certain "slot"\
Mm, doubt it, you're probably going to need to use `fs`
is there a convenience function to write the new keypair to a file ? or i should do it using the fs library and write the private key to a file using that ?
oh ya nvm sorry xD
`theKeypair.secretKey`
the issue is am not able to get the private key from the generated keypair
And then do `bs58.encode(thePrivateKey)`
Think you'd need to add a dependency on the bs58.js package
when i do anchor.web3.keypair.generate() and its generates a keypair , how do i get b58 of its private key
ok thx mate
ok Token Account and see how they deserialize data right ?
Not off hand, but try jumping to source on TokenAccount and basically do the same thing
and if I success I will made this Open Source
do you have ressources that can help me for achieve this
You need to write your own deserialization logic (tbh I'm surprised this isn't already open-sourced somewhere 🤔)
Oh ok I see
You can't just stick a #[account] on top of it and have things work
I know, but it's not from an anchor program
that I try to deserialize
it's account owned by the token metadata program
mean it's not a token account
It's not an anchor struct. You're going to have to write your own deserialization logic, kind of how anchor's wrapper around TokenAccount works
Oh but is for deserializing the data
Ok, that's not going to work, you can't really just copy paste this https://github.com/metaplex-foundation/metaplex-program-library/blob/master/token-metadata/program/src/state.rs#L111
```
pub token_metadata_program: UncheckedAccount<'info>,
```
the token_metadata_program :
```    #[account(owner = token_metadata_program.key(), seeds=[b"metadata", token_metadata_program.key().as_ref(), mint.key().as_ref()], seeds::program = token_metadata_program.key(), bump)]
    pub metadata_account: Account<'info, DataV2>,```
this account is owned by the token_metadata_program
I'd actually have to think about whether that will work
Ok, is the account you're passing in actually owned by that metaplex id?
I just copy paste
from metaplex program
```rust
use anchor_lang::prelude::*;

pub fn _find_metadata_account(mint: &Pubkey, metadata_program: &Pubkey) -> (Pubkey, u8) {
    const PREFIX: &str = "metadata";
    Pubkey::find_program_address(
        &[PREFIX.as_bytes(), metadata_program.as_ref(), mint.as_ref()],
        metadata_program,
    )
}

// use in v1 and v2 candy machine
pub use tknmeta::Creator;
pub use tknmeta::DataV2;
pub use tknmeta::ID as TKNMETA;
mod tknmeta {
    use super::*;
    declare_id!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");

    #[account]
    pub struct DataV2 {
        /// The name of the asset
        pub name: String,
        /// The symbol for the asset
        pub symbol: String,
        /// URI pointing to JSON representing the asset
        pub uri: String,
        /// Royalty basis points that goes to creators in secondary sales (0-10000)
        pub seller_fee_basis_points: u16,
        /// Array of creators, optional
        pub creators: Option<Vec<Creator>>,
        /// Collection
        pub collection: Option<Collection>,
    }

    #[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Eq)]
    pub struct Creator {
        pub address: Pubkey,
        pub verified: bool,
        // In percentages, NOT basis points ;) Watch out!
        pub share: u8,
    }

    #[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Eq)]
    pub struct Collection {
        pub verified: bool,
        pub key: Pubkey,
    }

    #[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Eq)]
    pub struct Uses {
        // 17 bytes + Option byte
        pub use_method: UseMethod, //1
        pub remaining: u64,        //8
        pub total: u64,            //8
    }

    #[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq, Eq)]
    pub enum UseMethod {
        Burn,
        Multiple,
        Single,
    }

    impl Creator {
        pub const MAX_SIZE: usize = 1 + (4 + 10 * (32 + 1 + 1));
    }
}
```
Where is that DataV2 coming from?
Ok this is why I trying to do: 
Deserialize the metadata from the token account
```rust
mod utils;
use utils::Creator;
use utils::DataV2;

use anchor_lang::prelude::*;
use anchor_spl::token::Mint;

declare_id!("WPesyGPnm3dStY71PketwvEGMp5EgCSXZbMcSQJfGdR");

#[program]
pub mod read_metadata {
    use super::*;

    pub fn initialize(ctx: Context<InitPool>) -> Result<()> {
        let creators = &ctx.accounts.metadata_account.creators;
        let my_account = &mut ctx.accounts.my_account;
        my_account.creators = creators.clone();
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitPool<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    pub mint: Account<'info, Mint>,
    /// CHECK: read access and verified with the constraints
    pub token_metadata_program: UncheckedAccount<'info>,
    /// CHECK: read access and verified with the constraints
    #[account(owner = token_metadata_program.key(), seeds=[b"metadata", token_metadata_program.key().as_ref(), mint.key().as_ref()], seeds::program = token_metadata_program.key(), bump)]
    pub metadata_account: Account<'info, DataV2>,
    #[account(init, payer= user, space = utils::Creator::MAX_SIZE)]
    pub my_account: Account<'info, MyAccount>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct MyAccount {
    creators: Option<Vec<Creator>>,
}
```
What are you putting there for Whatever?
That implies that the account is (probably) owned by your program 😛
yes
That means you're doing `Account<'info, Whatever>`, right?
The Account macro specified that the account is own by the program himself, but even if I try to specify a different owner with ```owner = ...``` I get this error
```
Error Code: AccountOwnedByWrongProgram
```
Hey how we can fix this kind of issue ?


///////////////////////////////////////////////////////////////////////////////////////////////

<@!445019022338031618> I would just represent it as something like 958/1000. So you multiply the value you want to cut by 958 and then divide by 1000. Might be a better way I am not aware of
alright so i get the 95.8 % but how do i represent this number in rust for example if i wanna cut 95.8 % of a value
To meditate on:
115*10000 / 120 --> 9583 --> 95.83% etc.
Or if you wanted to be extra accurate you could do `115*1000 / 120` and get 958 --> means 95.8%
sort of think 120 as the target to calculate what % of the target i have achieved would i do 115*100/120 ?
i guess now that i think of it i dont need the token decimals.
so let say i set a target price in usd of 120, and the oracle gives me 115, i want to get a percentage i.e 115/120
sol/usd oracle, it gives the price in usd for 1 sol
so this is the price in dollar for sol
They're telling you, fyi, that number is really supposed to have 5 decimal places—the number means 113.34500
Basically the point is just that you're going to get a number, 11334500—the question is what does that actually mean?
11334500 would be [113.34500,-5]
oh ya my bad xD
And no, to be precise, 113.345 would be [113345, -3]
1.23 = 1x10^0 + 2x10^(-1) + 3x10^(-2)
for example to represent 113.345 dollar price it would say [11334555,-5]
num_decimals are always negative exponents
why is that ?
That's the same thing
the oracle usually give negative exponents like -8 or -5
If you get 5 decimals from the oracle, multiple the number they give you by 10—now you've got 6 decimals (you added a zero to the end). Do that again—7 decimals. Again and again—9 decimals
the goal i set a target price of a token, and i get the actual price of the token and get a ratio of the 2 things, and i want to do it preferably in terms of the decimals the spl token returns for example 9
yes sort of
You mean how would you compare them?
say spl token has 9 decimals, and pyth oracle has exponent of -5 how am i gonna go on about matching it
they said this is what mango does but looking at the source code i dont understand how are they doing it
also, this is what the pyth discord told me ```I am not sure you can use float in solana at all. People usually try to convert it to a number matching the token decimials. (or if they want to use non-integer, they use u64 as fixed point precision number,```
Have you tried just using a fallback function now?
Paul said that, but I said that it looked like anchor already supported it, and I thought he ended up agreeing
at that time, you said this feature would be in the next releases.
I think the result of that convo was that anchor actually already supports this 🤔
https://discord.com/channels/889577356681945098/889577399308656662/960628346130165801
Which feature?
ho, friend. when could I see the feature in the upcoming releases? I cannot wait.
Oh thanks!! I'll try it, thanks.
yes, `try_from` seems to be the way to go, I checked it's implementation and it has all the checks. How do I do it though?
https://discord.com/channels/889577356681945098/889702325231427584/961609876482691134
yeah I realized that after I read the docs 😬
Yeah, try_from will check the owner though
No, it's actually not the same thing, in a pretty important way! The `UncheckedAccount` thing you're doing isn't checking that the account is actually owned by the spl token program, which you really need to do!
can anyone explain how does mango normalize the decimals according to the decimals retrieved from the spl token program ?
```
            let decimals = quote_decimals
                .checked_add(price_account.expo)
                .unwrap()
                .checked_sub(base_decimals)
                .unwrap();

            let decimal_adj = I80F48::from_num(10u64.pow(decimals.abs() as u32));
            if decimals < 0 {
                value.checked_div(decimal_adj).unwrap()
            } else {
                value.checked_mul(decimal_adj).unwrap()
            }```
https://github.com/blockworks-foundation/mango-v3/blob/main/program/src/processor.rs#L6683
<@134416332509675520>
I'm guessing the best way to do this would be using `try_from`, because that's what it internally uses. But how would I do that? Trying the following but seems like it's invalid syntax

```
Account<'_, token::Mint>::try_from(&collection_mint)?;
```
The above is in reference to this conversation
Are

```
collection_mint: Account<‘info, token::Mint>
```


and 

```
collection_mint: UncheckedAccount<‘info>
```

```
let mut data: &[u8] = &collection_mint.try_borrow_data()?;
token::Mint::try_deserialize(&mut data)?;
```

equivalent?
Thanks!
Cool I'm going to take a look, it would be great to be able to change the config in Anchor.toml to point to a custom RPC
Mm, I paired with someone who did a deploy using https://syndica.io/, but other than that I'm not sure
<@134416332509675520> any tip on custom RPC endpoint to upload a program? Can't find much in github or here
Yeah, it's ed25519
mean there is another name for ED25519 ?
```
openssl list -cipher-algorithm
```
and if it's Ed25519 why openssl does not implement this
hey do anyone know the algorithm use for generating the keypair in solana ?
Am I the only one who can't publish a program through a custom RPC node? 😄
The only check you need to do is to check ownership (/ maybe an address check to make sure it's the right oracle you expect etc.)
Then you can do much more in depth security checks to make sure you dont get spoofed.
i think anchor/tests/pyth does this ? anyone has checked it out ?
Yeah, in real life you need to be checking that the pyth accounts have the correct owner
Best to use the account clone I found.
The problem with that is you can also then work out ways to spoof the accounts in mainNet I found.
Your fake oracle program can then update those accounts, since it owns them
You make your own whole program that owns some accounts that otherwise look exactly like pyth accounts
how is it done exactly ?
I didnt mock pyth, but I used the account cloning that you can do in a localnet validator to clone down a product and price access and use it as if its a mainNet/devNet account
If you want to fiddle around with actually updating the oracle account you're gonna need to do some hacky mocking stuff (ew)
Pyth is for cross testing of smart contract data. I haven’t used it personally though.
Cloning is great but you won't be able to actually *update* those accounts yourself (since they're owned by a different program from yours)
https://github.com/pyth-network/pyth-client-rs
uptill now i was cloning accounts but it would be cool to mock those accounts just need a sort of brief on how drift and other protocols do it.
a lot of protocols have a file named `pyth.rs` whose contents are like of the pyth state rs any idea why do they do this ?  i have read about mocking accounts etc, how is this all done, the mocking part ?
There are a lot of great open source utilities on Solana but many of the developments in this space have been money grabs and behind the curtain code. We need more emphasis on open source and I like that you are bringing that community testing logic and workflow to the table from other ecosystems!
but hey, all good
however I find this kind of strange that no ones done this in the solana world seeing as this is pretty normal in other ecosystems
So at the moment looks like ill just build one for what I need.
k
don'tknow
yeah the question orgainlly was has anyone already built something like this in the open source world.
that bundle all the hash of the public key of your community
you can do whitelist via merkle tree
and if you want that some users can get faucet other not
bro it's just all about code, you have many way to achieve this, you can create a contract that act like reserve get his idl and from the client do the stuff for requesting token via a button
Its more how do you distribute these to test users within your community.
creating a new mint and tokens is easy.
just need to create a copy cat of the usdc contract and it's good
mmh
you can build your own faucet with your own token
with pretend usdc devnet tokens
So far I think ill just build my own.
well that would be better but I havent found any yet.
you want faucet for token already established like usdc and so on right ?
or similar.
ie as there is no faucet for usdc in devNet
These tokens have premissioned mint addresses in the pooling system I have built.
ie they can get say 100 tokens sent to them.
So I want to have a contract in devNet with a UI for users to get access to the test tokens Ive minted .
<@341381788620423168>  this is what you need right ?
and mint as much as you want of token
bro the solana program library have documenation for creating your own token
and pooling system Ive built
for what you need facuet token ?
custom mints.
I dont need it for sol tokens.
there is may-be other option
of course in the devnet
you can request sol token via the cli or via Js package
I need it for my custom test tokens.
how to ensure there is only 1 signer in the transaction in the Anchor program Rust's code?
Are there any plans to extend the IDL generation functionality? I folded a bunch of Anchor code into proc_macro_attributes but it seems like the IDL only processes the pre-expansion files.
Okay I'll try thanks you 🙏
Slightly wrong syntax there, it's
```.ts
 const newVersion = program.methods // => Latest version
  .createMultiIndexFarmUser(arg)
  .accounts({...})
  .instruction();
```
hey <@595567283028623362> I have the same problem, Have you resolved it ?>
const oldVersion: any = program.instruction // => Version 0.18.2
  .createMultiIndexFarmUser(arg, {
    accounts: {....},
  });
=> I receive an TransactionInstruction (keys: Array, programId: PublicKey, data: Uint8Array)

 const newVersion: any = program.methods // => Latest version
  .createMultiIndexFarmUser(arg, {
    accounts: {...},
  }).instruction();
=> I receive an object (_accountStore, _accounts, _args, _idlIx, _programId, _provider)

How I can get Transaction like old version?
Hi, I have upgratedable @project-serum/anchor from 0.21 to 0.23.0
I would also like to know that.
is there any solana nft staking tutorial/githubb repo?
```Failed to obtain package metadata: `cargo metadata` exited with an error:  Downloading crates ...
error: failed to download `solana-frozen-abi v1.10.6``` running into this while doing anchor build, any idea on this?
Hey everyone, I'm having a tough time deploying my programs since a couple days. Anyone got a hint on how to use my custom RPC endpoint to do so?
The cli does not do the job ?
Yo, anyone built a faucet contract at all? Need something like this for testing out our code in devNet with our community?
I assume each slot has a different time stamp
Thinkig the clock unix timestamp will be a better approach
Basically just https://docs.solana.com/terminology#slot
I still don't understand what a slot is, trying to understand it's theory and how it can be used, u have any helpful pointers ?
I'm actually not sure if you have access to the actual block number in your contract, the `Clock::get()?.slot` might be the closest equivalent
Still looking out  for this.
^ don't ask me how I know that lol
You're not passing in one of the accounts correctly: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auction-house/program/src/lib.rs#L1164 (scroll all the way to the right)
Specifically getting it when using `execute_sale` on the AuctionHouse contract
Running into this error now. What does this error mean? Specifically, what does the error `index out of bounds: the len is 0 but the index is 0` mean?
is this meant to happen or is this a bug?
it turns the token to lowercase

if you anchor deploy this

when you do anchor deploy, the provider URL becomes lowercase
<@!501570363566587905> have a fix for you
ok i figured it out
this is the error i keep getting 😦
```Error: RPC request error: cluster version query failed: HTTP status client error (401 Unauthorized)```
when using a syndica node as the cluster url in `Anchor.toml`
does anyone get this when running ```anchor deploy```
Error: RPC request error: cluster version query failed
Yeah, Thanks <@134416332509675520>
No, don't think so—I'm not sure how anchor could help much here with this kind of thing, you kind of just have to get to know the rust solana testing library
Are there any plans for including that in Anchor, in future?
You'll just have to write the solana rust test code yourself basically
Nope!
Okay, i guess i have to try out myself! Is there any better way to do that in Anchor, either through client sdk or rust itself?
No, not as far as I know, sorry!
Yeah thats right. And I have to advance time for my test case scenario so an example for using warp_to_slot could really help, are there any example in the repo tests?
Sure, you could pass them in as args (but it will be annoying with the lifetimes)
I have impl for my Accounts struct(Payout), so is it possible i can send remaining accounts as args instead of to and iterate through them in impl itself?
```
impl<'info> Payout<'info> {
    pub fn transfer_ctx(&self, to: AccountInfo<'info>) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>>{
        CpiContext::new(
            self.token_program.to_account_info(),
            Transfer { 
              from: self._token_account.to_account_info(), 
              to: to.to_account_info(), 
              authority: self._token_account.to_account_info(),
            }
        )
    }
}

```
Meaning in a function you're defining in there?
Thank you so much <@134416332509675520>, is it possible i can get remaining accounts in impl<'info> YourContextThing<info>?
Try doing that ^
```.rs
pub fn your_instruction<'info>(ctx: Context<'_, '_, '_, 'info, YourContextThing<'info>>, ...)
```
When i iterate through remaining accounts i get that error for token program. "Lifetimes are really very confusing" 
```
for account in remaining_accounts {
    let transfer_ctx = CpiContext::new(
      token_program.to_account_info(), // <- lifetime mismatch ...but data from `ctx` flows into `ctx` here
      Transfer { 
        from: token_account.to_account_info(), 
        to: account.to_account_info(), 
        authority: token_account.to_account_info(),
      }
    );
    token::transfer(transfer_ctx, 1)?;
}
```
also what is solana equivalent of blocknumber from ethereum ? for example in my staking program i wanna reward users for how many blocks they have staked.
aah, thanks!
Just write `bump,` no equals sign etc.
The new way in anchor is to *not* provide bumps when doing `init`
Anyone know why I am getting this 
"bump targets should not be provided with init. Please use bump without a target"
should work, right? 

`#[derive(Accounts)]
#[instruction(initializer_token_bump: u8)]
pub struct InitializeEscrow<'info> {
    #[account(mut)]
    pub initializer: Signer<'info>,
    #[account(mut)]
    pub initializer_token_account: Account<'info, TokenAccount>,
    #[account(
        init,
        seeds = [&escrow_service::ESCROW_PDA_SEED, escrow_account.key.as_ref()],
        bump = initializer_token_bump,
        payer = initializer,
        token::mint = deposit_mint,
        token::authority = deposit_token_account
    )]`


///////////////////////////////////////////////////////////////////////////////////////////////

No problem! I made it mainly because of dropped txs in mainnet, especially when there is a lot of congestion your txs can literally never get processed and get dropped.
i see, thanks for that ser
yeah not exact but around that time
so your script updates the blockhas every 30 seconds?
You have ~1.5 mins to send and confirm all txs on solana. If the blockhash was earlier than that then the tx fails. Devnet and mainnet have been getting congested so deployment sometimes take a lot longer than that. And hence the fail.
what do you think is the cause of causing the error when deploying?
if anyone's encountering `Error: Custom: Invalid blockhash` while deploying your program. use this library here
awesome!
legend 💯
holysh this works
let me try
thats neat
you just build from source and change `.env` file for your needs. You can copy `.env.example` to `.env` and use it
Don't think you can use the solana sdk at all on-chain
how does it work?
I'll play with it today
Based on the code you posted I think if I can use the Solana sdk functions for write and create from the bpf library with some cpi calls I could be in business but I remember Solana-sdk not being serializable by the bpf loader binary
can you try the program I've sent? I didn't have any problems with default solana devnet rpc
thanks!
yea maybe, ah wells
Idk, could be solana just having trouble
im using genesysgo's 🤷‍♂️
unfortunately discord doesn't accept my phone number so I can't talk in solana
Also <@161709591220977664>  buffer accounts aren owned by the upgradeable loader program, not yours
lmao
This one? That's different, just your rpc being crappy
buffer account just has the program data written into it , it's not radically different. Not sure how you could zero copy from anchor to build it as txs have a limit on how much data they can process
any  idea on whats causing my error above? my `.so` size is 433kb
Have you asked on the solana discord about this?
Or at any rate, your code will go live in an account, and account's have a max size of 10mb
Yeah
Is a buffer account radically different than a regular account ? Could I not just use zero copy from anchor to build an appropriate buffer account ? (Also bless you for code examples !!!)
deploying to local works fine
has anyone encountered below when deploying program to devnet?

```
Error: Custom: Invalid blockhash
There was a problem deploying: Output { status: ExitStatus(unix_wait_status(256)), stdout: "", stderr: "" }.```
I just made a deployment program, you can check to see how deployment works if you don't want to take a look at solana-cli which is much longer https://github.com/acheroncrypto/solana-deployer
yeah pretty much anything in solana is more complicated to work with, deployment is one of them
I don't suppose it's as simple as passing in the data to a pda and marking it as executable (trying to make a parent/child model like in eth )
It's max limit on an account
if the buffer has already been written then yes, but deployment from scratch takes 100s of txs
are you referring to the `.so` file?
ah ok thanks for the pointer!
10 mb
Gotta keep jumping to source 🧘‍♂️ https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auction-house/program/src/utils.rs#L354
hey guys, is there a max program size?
but this seems to be like an iterator object, why will iter() throw such error?
Can you cpi into the bpfloader program to deploy a program ?
oh got it!!
that is not a program-specific error you need to check solana program code
They use remaining_accounts, so you'll need to read their docs and/or source code to see what extra accounts they require (it's for paying creator fees or something)
https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auction-house/program/src/lib.rs#L725
Ig it's a generic error from solana itself
Hmm I guess to reference in the instructions though I would need to provide the program account 🤔
I see the error came from this `hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk` account, the metaplex auction house program, but I cannot find the error message in the codebase
here
You should be able to see at least something in the program log
How are you getting the error then? Like, what is printing to show it to you?
I checked the program I invoked I cannot find this error message either
what Im confused with is that I dont seem to be able to find where that err message is coming
oh right
But it's practically impossible tho haha
It's working fine for me but looking for a tester other than myself 😄
Why is solana in such secrecy? Why is it that hard to verify a program?
You'd have to reverse-engineer/guess stuff
Nope
sheeeaat, can you get any other info at all?
Why depends on what program(s) you're invoking
You're not passing in enough accounts
Only anchor contracts have IDLs, and not even all anchor contracts upload their IDLs
are you getting any errors?
are you still failling to deploy?
anybody doing mainnet deployment can dm me?
it's from solana
great thank you 🙏
Hi there, does anyone know where this error message come from
```The instruction expected additional account keys```
I think its either from anchor or solana, but I couldnt find
&id()
Is there a way to safely reference the current executing program account so I can assign e.g. `token::authority` to be the program itself?
And If you know what the function does, then you would probably be able to use the contract
And then using the idl you can see all the funcs + all the accounts that are supposed to be supplied into the function?
But can't you fetch the idl of any collection through anchor?
then what do I need to have in order to repeat someone's transaction? or call a method of another program?
you can't do it via solscan
Mm, not totally sure—you can definitely send a tx from solana's version of web3.js, yeah, but I'm not sure if you can figure out how to do that purely from solscan
I want to send a transaction using web3 by calling a method of someone else's program in the blockchain. In Ethereum, this is very easy to do, where you can send any transaction to a smart contract using etherscan and web3js. Is it possible to do the same but in solana?
Not sure what you mean
Good evening, can I use only the information from the solscan site, create and send my transaction? Or repeat someone else's transaction with only data from the scan
anchor is using solana's bpf to build the project, you don't need anchor cli
Can you say more? Not sure what you mean
I'm reading the cli code https://github.com/project-serum/anchor/blob/master/cli/
is it possible to compile and output deployable anchor program without starting from an anchor project ?
I know that. but game logic is not that.

when deposit last player, contract will know winners.
So, it is not possible to know destination when deposit last player.
tho, instead you can do batch tx. form client-side itself
To convert pubkey to account info, need to pass transaction.
As you know my issue(calling contract with 50 accounts), I want to call contract methord with(20, 20, 10 accounts) in contract.
didn't get you sorry, what do you mean by transaction here.
Is it possible calling contract method in contract as transaction?
is this related about devnet?
getting this error

Do any of the core devs do consulting work? We need a bit of help on some development and really need a few hours of dedicated help/guidance.

anybody having problems deploying mainnet?
now i got this error and can´t find any documentation on how to fix it or what causes it exactly, because i never call the function "n.send"😅  thx in advance 🙏
thank you 🙂
Just a random question, do you have any guide on staking, or just generally turning a contract into a vault which saves users tokens or something, idk
Nope
(Every transaction is 1232 bytes, but how many of those bytes am I using up?)
how do I check the size of my transaction?
is there anyway to bypass that?
that's sad
Interestingly, no, since candymachine uses instruction inspection to prevent that as far as I understand it: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/candy-machine/program/src/lib.rs#L418
yes
You mean CPI to a candymachine?
<@134416332509675520> Do you know if there is any way to interact with a candy machine through a program? Is there some metaplex dependecy that I could use?
Which doesn't actually do what you might guess in JS: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator
Slightly unfortunate error message, you've got some extra parens in the `program.rpc.initialize` call
Does anyone of you know why the generated account does not count as valid argument even though i can read out its publickey?  thanks
how do i buffer a pubkey that i get from the url params in react?
Can programs in Solana deploy a program ?
solved, thanks
sweet 🙂
https://book.anchor-lang.com/chapter_5/space.html
where you define this size? can i see an example of defining vec size?


///////////////////////////////////////////////////////////////////////////////////////////////

