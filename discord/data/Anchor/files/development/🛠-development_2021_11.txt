thx you 2
right
oh lol
Yes. `account.key()`
if i need the pubkey address of the mint for a seed elsewhere in the context, is there a simple way to get it from an `Account<'info, Mint>`?
and pt. 2 above
ty!
forgot about that
ohh right
```
#[account(constraint = COption::Some(mint_authority.key()) == mint.authority)] 
```
You a regular constraint
Hmm, I guess the existing `mint::authority` annotation currently only works if you provide `init` with it as well 🤔
hey all, is there a way to use anchor's access control checks to verify that a `pub mint_authority: AccountInfo<'info>` is the mint authority for a `pub mint: Account<'info, Mint>`? there are 2 complications i'm seeing with this approach:

1. a mismatch between `COption<Pubkey>` & `Pubkey`, since an authority isn't guaranteed to exist for the mint, &
2. i need the pubkey of the `Mint` as a PDA seed, which iiuc it doesn't have if it's passed in as a `Mint` `Account`.

instead, i'm passing in the mint as an `AccountInfo` in the context, and then deserializing manually in the fn, where i then do the access control check explicitly:
```
// ... in Context
pub mint: AccountInfo<'info>,
#[account(
    init,
    seeds = [mint.key.as_ref()],
    bump = bump,
    payer = mint_authority,
    ...
)]
pub pdaAcct: Account<'info, MyPDAAccount>,

// ... in entrypoint_fn
let mint_account = &ctx.accounts.mint;
let mut data: &[u8] = &mint_account.try_borrow_data()?;
let mint = Mint::try_deserialize(&mut data)?;
// ... do the access control check explicitly
```
not really, maybe if I store a keypair as an environment variable on the website, and on each call this keypair has to sign. Like this I limit all calls to people coming from the website. But this doesn't seem like the best approach, security wise
In general anyone can invoke your function.
Are there other kinds of proof the caller can provide that they're the right thing?
mhmm interesting approach but seems overkill. What I have is a function that updates the combat points of an nft, stored in a PDA. What I'm trying to avoid is to have any owner of one of the nfts call this update function and provide whatever value they desire. Maybe there's another way, other than blocking all calls to the function?
Not totally sure if this is a good approach, but one thing you could do is require callers to sign with a PDA derived from whichever programs you whitelist. Only those programs can sign those PDAs. It would be a little awkward since the caller would have to pass their program_id and the seeds + bump for the PDA, so that that the callee could verify the address, but I think it would more or less work?
well u could run a p expensive query to get all the names owned by a particular wallet, but i don't think there's anyth built in for the wallet to say like -- this is my name
Yo guys! Anyone know how I could go about restricting access to a program so that only programs I decide can call it's functions through CPI? So that no one else could invoke them?
Yep, there isn't really anything anchor-specific about how you do so—take a look at e.g. https://github.com/project-serum/anchor/blob/master/spl/src/token.rs, where anchor communicates with the spl token program (just a bunch of `invoke_signed`s, as usual)
since you can just make the address itself a PDA seed that links back to the name
lol, it would be dumb if they didn't do that
does solana name service only have one-way mappings (eg, name -> address)? like, u can use a name to get an address but u can't use an address to get a default name? or am i missing someth
Hi guys, I was wondering if there's a way to interaction with on-chain programs that weren't written using the anchor framework from programs that are?
30 seconds should be acceptable. I was just thinking if there's a way for the instruction to pass around without web2 tech (API call etc). But seems not :\
then it is only a matter of adding a signature to the transaction for the signer
otherwise the window is ~30 seconds max before the blockhash is too old
I think you need the durable nonce, as a first step
Did anyone write anything that require signing from multiple parties in real time? Trying to have multiple instruction in same transaction.

 Curious what's the best way to pass the instruction around
yes, it can all be rebuilt sanely
ahh I see for each instruction we send an index into the sorted account list
hmm not sure how the order is reconstructed on the other side
https://github.com/solana-labs/solana-web3.js/blob/7f97574753dc9086c09bcdf91654c82cccf64e7c/src/transaction.ts#L261
ahhh I see, web3 js sorts it
what order is this array in if not the order the instructions were sent?
for sol balances it's just an array of numbers
which mapping?
I don't think they have to be but you shouldn't rely on the order and find out the indices from the mapping
they don't seem to be in the same order as the order they were sent in the transaction
when a transaction is finalized and I call e.g. `getParsedConfirmedTransaction` (or look in the explorer), what order do the account/token balances come back in?
Post more code so we can see the details
The context accounts are all UncheckedAccount
I'm not doing anything with sysvar variables as far as i can tell
Mm, weird. Possibly dumb question, but are you doing anything with sysvars?
what are the parameter accounts?
Sure! I'll remove all the random prints, 
```
Transaction simulation failed: Error processing Instruction 0: Unsupported sysvar 
    Program 6my13dgzwF8HM1Trs2MkfhcqFPDfTNP4jcuUbR5mU4e2 invoke [1]
    Program log: Instruction: myinstruction
    Program 249z8gAKdX41bjfz7SFUxGmbAqDtSLU2tsSYzb7MkUCN invoke [2]
    .
    .
    Bunch of prints...
    .
    .
    Program log: End of myFunction reached.
    Program log: Unsupported sysvar
    Program 6my13dgzwF8HM1Trs2MkfhcqFPDfTNP4jcuUbR5mU4e2 consumed 106636 of 200000 compute units
    Program 6my13dgzwF8HM1Trs2MkfhcqFPDfTNP4jcuUbR5mU4e2 failed: Unsupported sysvar
Translating error SendTransactionError: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Unsupported sysvar
    at Connection.sendEncodedTransaction 
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at Connection.sendRawTransaction 
    at sendAndConfirmRawTransaction 
    at Provider.send
    at Object.rpc [as myFunction] (xxx/node_modules/@project-serum/anchor/src/program/namespace/rpc.ts:24:23)
```
Can you post more of your program log? That sounds like its still coming from the rust side
Does anyone know what could cause a `Program log: Unsupported sysvar` error? I get it at the end of an rpc call. The function completes and returns Ok(()) on the rust side but somewhere before it returns the tx in ts, this error gets thrown. Just upgraded to anchor 0.18.0.
will make a pr with the update
this specifically
anyone getting errors when integrating this https://github.com/project-serum/swap-ui/tree/master/example/src on a dapp scaffold template?
The PDAness of the address doesn't really matter—what matters is which program owns the account. If your own program owns the account (not the same thing as saying the address is derived from your program) then you can just grab its lamports, as above ^. If the account belongs to some other program though, you'll have to ask that program to do the transfer, by invoking it with a CPI somehow (will depend on which program owns the account).

Is there any example on how to transfer lamports stored in a PDA?
is it significantly faster to use pubkey.createWithSeed vs. findProgramAddress? such that u should just use pubkeys from seed for accounts that your program doesn't need to sign txns with


///////////////////////////////////////////////////////////////////////////////////////////////

Any ideas why my invoke_signed is failing? https://gist.github.com/ronanyeah/145e364ffac3ad10ef68d1cdd9e9e14d
`Cross-program invocation with unauthorized signer or writable account`
I am implementing a test for a call that I expect to fail:
```javascript
await assert.rejects(async () => {
      const tx = await program.rpc.myInstruction(...);
    },
    {
      name: "Error",
      message: "failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x3e9"
    });
```
Everything works as expected (the test is passing) but Anchor (?) still writes the error message and logs to the console. Is there anyway to omit it?
no Im on mac 2019, this issue is resolved after I restarted some software.... actually <@!134416332509675520>  was totally right, it couldve been some stale file not being refreshed
Are you working on a M1 mac ?
(I guess not, considering the solana programming model)
Does `#[account(close = <target>)]` still closes the account if my instruction returns an Err?
Can someone explain to me what this code is doing? It's in several of the anchor tests: 
```
cleanup() {
    pkill -P $$ || true
    wait || true
}

trap_add() {
    trap_add_cmd=$1; shift || fatal "${FUNCNAME} usage error"
    for trap_add_name in "$@"; do
        trap -- "$(
            extract_trap_cmd() { printf '%s\n' "${3:-}"; }
            eval "extract_trap_cmd $(trap -p "${trap_add_name}")"
            printf '%s\n' "${trap_add_cmd}"
        )" "${trap_add_name}" \
            || fatal "unable to add to trap ${trap_add_name}"
    done
}

declare -f -t trap_add
trap_add 'cleanup' EXIT
```
gm.
https://github.com/solanacryptodev/doorman/blob/master/programs/doorman/src/lib.rs
Sure. There are a few, so here's the Github page of the libs.rs
I dont think so, I removed the `target` directory  and rebuilt the whole thing. Is there a way I can follow to make sure my program isnt running on stale sutff?
As far as I know this means that the sighash of the instruction you're trying to run doesn't match anything in the program. Is it possible you're trying to call a stale version of the program or something?
is #[state] still usable or deprecated ?
could it be possible that in the struct I used for the `Context` I ordered the accounts wrongly, so it failed to reference the variables? E.g. `tokenAccount` declared above its `Mint` Accounts (both using `#[account(init]` as I want the PDA to own them)
also any ideas on this one? 🙏
so I guess the rule of thumb here is to 
1. `#[account(init...]`, only when necessary like creating token account/mint account for PDA
2. otherwise use `instructions`
does it sound right?
Another difference is that if you want to `init` an account that will live at a program-derived address, you can't do it with the `instruction` version (there's no way for that PDA to sign—you'll necessarily have to do it within your program)
They're similar in effect but not quite the same thing. Using `#[account(init, ...)]` creates the account with a cross-program invocation to the system program, wheres the `instructions` route doesn't (it just directly runs an instruction against the system program). Maybe surprisingly, this isn't quite the same thing (e.g. via a CPI you can only allocate 10kb of account space, but the direct route can go all the way up to 10mb).
also got a question regarding the `#[account(init...` usage, would like to know the difference between using `#[account(init` in the program, and putting the  `instruction` in 
```
    await program.rpc.command(...args,
         {accounts: {...}, instructions: [here]}
          
```
Do they have the same effect and I simply have to pick either? Thanks!!
Hi there, Im running into an issue where my program was built correctly and deployed, but when I invoke the program it keeps returning
```
Error: 101: Fallback functions are not supported
```
Ive gone through previous related threads as to why this can happen, but still it didnt really solve my issue. 
Any ideas will be appreciated. Thanks
Correct, writes to the `AccountInfo` persist automatically, but you'll need to do the exit stuff for writes to your PriceOffers thing (under the hood it writes to the underlying AccountInfo—that's the only thing solana itself cares about)
What's the reason for some of Anchor/Serum instructions name end with v0, v1, v2, etc?
Maybe this is supposed to work like this. Because in my Accounts definition price_offers_account is just an `AccountInfo`, thus Anchor cannot serialize the changes from the `Account<PriceOffers>` (since it knows nothing about it)
What I write directly to `AccountInfo` (the discriminator) is indeed being saved. But after that I convert the `AccountInfo` to `Account<MYTPE>` and write on that, but that is not saved. The code is like this:

```rust
let price_offers_account = Account::<PriceOffers>::try_from_unchecked(&ctx.accounts.price_offers_account).unwrap();
let discriminator = PriceOffers::discriminator();
price_offers_account.as_ref().try_borrow_mut_data().unwrap()[..8].clone_from_slice(&discriminator); // write directly to account info data
price_offers_account.add_offer(offer); // these are not saved without `exit` call below
price_offers_account.exit(&bdex::ID).unwrap();
```
Amazing ... bro...
`solana airdrop` also not working 
I'm using `solana-cli 1.8.0`
and `anchor-cli 0.17.0  `
To just get a u64: `let amount = **ctx.accounts.the_account.to_account_info().try_borrow_lamports()?;`
`ctx.accounts.the_account.to_account_info().lamports` (it'll be wrapped in some RefCell Rust stuff though)
Awesome champ... Thanks a lot for the help. Also, do you know how I can get lamports balance of solana program account?
If you've already got an `Account<'info, TokenAccount>`, then you can do `ctx.accounts.token_account.amount`
Hi Friends. Any idea how can I get the balance of a token account inside an anchor program?I am parsing it as token_account: Account<'info, TokenAccount> but not sure now I can access token account data.
pass user's token account and check whether they have tokens or not, and if you need to make sure that tokens stay there for a while, transfer this acccount's ownership to pda
```
Deploying workspace: https://api.devnet.solana.com
Upgrade authority: /Users/swaroopmaddu/.config/solana/id.json
Deploying program "tasks"...
Program path: /Users/swaroopmaddu/blockchain/github/tasks/target/deploy/tasks.so...
=================================================================
Recover the intermediate account's ephemeral keypair file with
`solana-keygen recover` and the following 12-word seed phrase:
=================================================================
kid dove silver love dizzy rich logic good width foam will foster
=================================================================
To resume a deploy, pass the recovered keypair as
the [PROGRAM_ADDRESS_SIGNER] argument to `solana deploy` or
as the [BUFFER_SIGNER] to `solana program deploy` or `solana write-buffer'.
Or to recover the account's lamports, pass it as the
[BUFFER_ACCOUNT_ADDRESS] argument to `solana program close`.
=================================================================
Error: RPC response error -32601: Method not found 
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```
Why anchor deploy fails on devnet ?
Hi guys, I want to ensure that whoever calls a function, the txn should execute only if the caller holds a particular token, and if I check that outside of the program it would be prone to attacks, and if I could check that inside the program using some API calls I can ensure that the caller is approved, how can I do this?
Anyone has encountered typescript compile errors when calling program.rpc functions in react app? Calling in test works fine.
Argument of type [number, BN, BN, …] is not assignable to parameter of type […unknown[], Context<Accounts<IdlAccountItem>>]
weird even with that still dyin <a:aPES_Think:493353113332219924>
im using `20000` will try your suggestion
if you haven't tried that
under [test]
could try chucking startup_wait = 100000 or something in Anchor.toml
it might just be timing out
<a:aPES_Think:493353113332219924>
i'm loading raydiums amm liquidity v1 and v4 programs, serum dex, as well as the spl token lending program and can load all of them fine, but attempting to use this switchboard program makes it croak
also works fine loading other programs as well
works fine
that doesn't look right, what do you get when you just run `solana-test-validator`?
contents of `validator.log`

```
[2021-11-10T02:52:55.816490522Z INFO  solana_ledger::blockstore] Maximum open file descriptors: 500000
[2021-11-10T02:52:55.816504825Z INFO  solana_ledger::blockstore] Opening database at ".anchor/test-ledger/rocksdb"
[2021-11-10T02:52:56.231918129Z INFO  solana_ledger::blockstore] ".anchor/test-ledger/rocksdb" open took 415ms
[2021-11-10T02:52:56.317387635Z INFO  solana_metrics::metrics] metrics disabled: SOLANA_METRICS_CONFIG: environment variable not found
[2021-11-10T02:52:56.317455525Z INFO  solana_metrics::metrics] datapoint: shred_insert_is_full total_time_ms=0i slot=0i last_index=2i num_repaired=0i num_recovered=0i
[2021-11-10T02:52:57.219813108Z INFO  solana_runtime::hardened_unpack] Extracting ".anchor/test-ledger/genesis.tar.bz2"..
```
attempting to load this program (https://explorer.solana.com/address/DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM) into anchors localnet genesis isn't working. It continually makes `anchor test` crash on startup with


```
Unable to start test validator. Check .anchor/test-ledger/test-ledger-log.txt for errors.
```

there's nothing particularly helpful in that log file which indicates what hte error is

```
Ledger location: .anchor/test-ledger
Log: .anchor/test-ledger/validator.log
Initializing...
Error: failed to start validator: Failed to create ledger at .anchor/test-ledger: blockstore error
```
Could you show the rust side? The `#[derive(Accounts)]` part
I think it's erroring out somewhere around here because it says it runs the InitializeAccount part and that it's successful, so it must be the part right after that that's throwing the error
Getting error 0x12b which is Error: 299: The API being used is deprecated and should no longer be used
I'm having an issue running some code that uses Anchor from a repo I forked...not sure what the issue is and I don't know of an obvious solution...
hmm, so it's impossible to express "buy 2 SRM", I have to say "buy 20 USDC worth of SRM" on Serum?
I will review it and then I put the code here if I still don't get it. Don't worry for now
(without the exit, my own data is not saved)
But what I was writing directly to AccountInfo data was the discriminator and that was being saved. But I convert that AccountInfo into an Account using the try_from_unchecked, write my own data to it, then I call the exit, and finally call to_account_info assigning that to the ctx.accounts.myaccount
No. I also don't understand why I was forced to call exit to see it concretely saved. But the code is a mess, I need to review it
If you're already working with just an `AccountInfo`, you should be able to just write directly to its `.data` bytes (don't think you need to do any exit stuff). Does that not work?
I used that and then write it directly to account info data. Then to serialize things concretely I needed to call `exit` on the Account (because in my Accounts definition I had an AccountInfo, not an Account). Don't know if it is the right but it is working
do I have to express the max in `max_coin_qty` on asks and `max_native_pc_qty` on bids?
but when I try to set `max_coin_qty` to infinity and `max_native_pc_qty` to a reasonable number, trade always fails with 0x22
when I make a Serum `ask` trade (e.g. selling SOL), it succeeds when I set `max_coin_qty` to less than I have and `max_native_pc_qty` to infinity
Yesssss, it worked for me. <@!134416332509675520> You are so cool. thank you
`new NodeWallet(theKeypair)`
yup, I just loaded keypair but I don't know how to convert it to wallet.
On the backend you would need to load its keypair. Similar to how this works: https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L233
so my idea is to run cron job in backend.
In the frontend, I can get "wallet" using useWallet() but I have no idea in backend

Hi, in anchor, how can I get wallet in the backend (nodejs)?
to write the correct discriminator bytes
You can do
```.rs
use anchor_lang::Discriminator;
MyAccountType::discriminator()
```
Also, my instruction runs OK because after I create the account with the system program, I convert it to `Account` using the `Account::try_from_unchecked` (if I use `try_from` instead it fails)
My instruction runs ok, but because I create/initialize the account using the `solana_program` directly the discriminator is not being written. Afterwards, when I try to fetch the account I get `Error: Invalid account discriminator` naturally.
I want to do it inside an instruction, on-chain
There's anchor.instructions.createInstruction(account) iirc
Another question. I want to create an account within an instruction (not with the `init` on Accounts definition). Does Anchor offers such functionality? I am creating it directly with `solana_program` but now I am into issues because of the discriminator (which obviously is not being written on creation). If anchor does not offer such functionality, how could I write the discriminator myself?
ah it implements debug
`msg!("{:?}", my_error)` should work I think
Or write it explicitly to the logs
Just want to see them in the logs
I want to print the ProgramError message in msg!
Print in the program? You can use `msg!` https://docs.rs/anchor-lang/0.18.0/anchor_lang/prelude/macro.msg.html
But what should pass as `E`?
`impl PrintProgramError for ProgramError {
    fn print<E>(&self)`
I want to use this
How to print a `ProgramError`?


///////////////////////////////////////////////////////////////////////////////////////////////

oops missed that. thx
(Your anchor cli will also need to be up to date)
What do you have for `anchor --version`?
this Anchor repo also fails to build for me - https://github.com/project-serum/anchor/blob/master/tests/errors/programs/errors/src/lib.rs
getting build error: `'Code not parseable: Error("expected `,`")', lang/syn/src/idl/file.rs:338:58`
Hmm, don't think I'm familiar enough to answer, maybe someone else knows?
Yep, `constraint = something @ YourCustomError` (need 0.18.0 I think though)
is it possible to provide custom error messages to `constraint=`
So, Alan, then why do we need token approvals, really? I noticed that Orca finance has a pattern of:
1. [Token program] Approve Orca's PDA account to transfer tokens from my token account
2. [Orca's program] Invoke CPI to withdraw funds to liquidity pool

Why not simply do
 1. [Orca's program] Transfer funds to liquidity pool from my token account
For example, in Ethereum (my reference), a smart contract cannot simply call `Token.transfer()` since there is a distinct difference between "account making the CPI call" and "account that initiated the transaction"
This is why you always always need to verify the program_ids you CPI to
(^ This is one reason why you have to be extremely careful about sending accounts through CPIs if they've signed—if you send them to a rouge program then it can use that signature to do all kinds of bad stuff!)
`and that signature carries through any cross-program invocations`

Wow, I didn't know this. So I could be using a program that simply transfers all my tokens on my behalf?
If I'm reading that right, your wallet is owned by the system program (in the sense that only the system_program is allowed to mutate it/spend its money). Your wallet signed the tx when it submitted it, and that signature carries through any cross-program invocations. So that's why the system_program is happy to let you pay for the new account initialization (you signed and the system_program owns the account, so it can happily take some of its money)
yes correct, my wallet is the fee payer
Who is the payer here? Your wallet?
thank you 🙏
okay even better than running the test deployment, thank you!
<@!134416332509675520> a small question for a pro like yourself:

Here is a section of transaction: https://explorer.solana.com/tx/4BPp2EqY5dgWfgmsUN8uCBLDhFBjF2m4Zo9Q8DtBjSWN7x36nUa3nGX6FzTHvtDEUaVHUZHkHyLmGLT7mrFKx6MK?cluster=devnet

I call `Create` instruction for `AssociatedAccount` and it's unclear to me "how" rent is being paid for the Associated PDA account. It looks like the `AssociatedAccount` is calling `create_account` under the hood (https://github.com/solana-labs/solana-program-library/blob/master/associated-token-account/program/src/tools/account.rs#L52), and that causes the `SystemProgram.transfer()` that appears in the screenshot. However, how can this be possible? I thought that only my account can issue `SystemProgram.transfer()` and I thought that no other program could transfer lamports on my behalf. Is my suspicion incorrect?
For estimation, check how big your compiled `.so` file is for your program. The current rate is very close to 0.7 sol per 100kb of rent-exempted storage, then multiple by 2 because the upgradeable loader allocates 2x space so any subsequent deploys have room.
that's what I was thinking, but wanted to confirm...more expensive than I was expecting 🙂
awesome
You can do a deploy to devnet, that should be ~identical I think to deploying to mainnet
is there a way to determine cost of deploying a program before doing it?
Thank you Alan, yeah that's pretty resource constrained
Oh wow...
As far as number of accounts: I think you're only constrained by the fact that the entire tx has to fit in 1232 bytes :/ That's not a lot of room given that each account pubkey is 32 bytes by itself --> max of roughly 30-ish accounts I think?
I'm a little fuzzy on transaction fees, but as far as I understand it they don't depend on number of accounts/mut etc. https://docs.solana.com/transaction_fees
One quick question about limitations when submitting a transaction: are there any constraints that I should be aware of when sending a transaction with many accounts?

- Is there any guideline on # of accounts used within a transaction?
- Are there any guidelines or limitations on # of `mut` accounts used within a transaction?
- Are transaction fees correlated with instruction execution or storage (like EVM) or do they also factor in num accounts that are being used?
https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/accounts/constraints.rs#L406
I will. I have already added support for Map, VecDeque, and LinkedList for the IDL. For this it is just make another fork and spend some days 🤣 you don't know where exactly in the code this is being handled/resolved?
It would need to do something like that, yeah (but isn't currently). Tbh my guess is this is kind of a pain to get right lol so not sure when someone will implement it—welcome to give it a shot!
If the `payer` is not already signed, Anchor should try to see whether it is a PDA (by seeing wheter `seeds` is present?) and sign it?
Yes, that's what it seems 😭  could you point me to the Anchor code where you are handling this?
Right, what you're trying to do totally makes sense, my guess is that the `payer =` annotation just isn't smart enough to do it yet, hmm.
The client cannot sign for it, only the program
I tried with `signer` on the vault account but that result in error saying that the client did not signed (i understand this)
😭
Ah, interesting, maybe not 👀
It seems that the vault account is not being signed by the program
These are the logs:
```
logs: [
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS invoke [1]',
    "BtWhNzGgdC9aX14VfQtYQuiqvxidMSAzParX6UUXzgn2's signer privilege escalated",
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS consumed 200000 of 200000 compute units',
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS failed: Cross-program invocation with unauthorized signer or writable account'
  ]
```
Is not possible to create a new account with the payer being a PDA? I have this 
```rust
#[derive(Accounts)]
pub struct MakeAndResizeOffers<'info> {
    #[account(mut)]
    pub prices_account: Account<'info, OutcomePriceOffers>,
    #[account(mut, close = vault)]
    pub current_offers_account: Account<'info, PriceOffers>,
    #[account(init, payer = vault, space = 2 * current_offers_account.as_ref().data_len())]
    pub new_offers_account: Account<'info, PriceOffers>,
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut, seeds = [b"vault".as_ref()], bump)]
    pub vault: AccountInfo<'info>,
    pub system_program: Program<'info, System>,
}
```
and call it on the JS side like
```javascript
await program.rpc.makeAndResizeOffers(
        bdex.utils.double2BN(price),
        new anchor.BN(quantity),
        {
          accounts: {
            pricesAccount: outcomePriceOffersKeypair.publicKey,
            currentOffersAccount: priceOffersKeypair.publicKey,
            newOffersAccount: newOffersKeypair.publicKey,
            user: otherClients[0].publicKey,
            vault: vaultPda,
            systemProgram: anchor.web3.SystemProgram.programId,
          },
          signers: [newOffersKeypair, otherClients[0]],
        }
      );
```
But I get the error `Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account`
anyone know of any sample repos to index serum orders with an rpc
Fix :
Upgrade rust.
Install anchor cli from source.
Install the javascript project-serum/anchor @0.18.0, not 0.18.2 that will be installed if just running the classic npm install.
Not that I'm aware of. You just have to add an init data function to your tests
Then how to invoke other non-system programs without using  #[interace]? I'm new to here and would like to get help. Thank you.
this worked quite well.  Thank you
thanks for your answer <@!134416332509675520> , basically Im trying to create a token account for PDA based on the mint also created by the PDA in the same transactions. The mint instruction seems to go through just fine
```
    'Program GNdwLDohnrWNcN89esm3HEzj81w6m3TzS7cK5jaY1p1W invoke [1]',
    'Program 11111111111111111111111111111111 invoke [2]',
    'Program 11111111111111111111111111111111 success',
    'Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [2]',
    'Program log: Instruction: InitializeMint',
    'Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 2280 of 185483 compute units',
    'Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA success',
    'Program 11111111111111111111111111111111 invoke [2]',
    'Program 11111111111111111111111111111111 success',
    'Program 11111111111111111111111111111111 invoke [2]',
    'Program 11111111111111111111111111111111 success',
    'Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [2]',
    'Program log: Instruction: InitializeAccount',
    'Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 3412 of 153043 compute units',
    'Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA success',
    "9xqNoGpaosiGZZpZB6KcfnJsVCpKTEnRkhijNDcLAC2e's signer privilege escalated",
    'Program GNdwLDohnrWNcN89esm3HEzj81w6m3TzS7cK5jaY1p1W consumed 200000 of 200000 compute units',
    'Program GNdwLDohnrWNcN89esm3HEzj81w6m3TzS7cK5jaY1p1W failed: Cross-program invocation with unauthorized signer or writable account'
```
but the create token account instruction failed as you can see in the logs
```
    #[account(init, 
        token::mint = token_mint,
        token::authority = authority,
        seeds = [campaign_name.as_bytes(), b"token_account"],
        bump = bumps.token_account,
        payer = authority)]
    pub token_account: Box<Account<'info, TokenAccount>>,
``` 
I think this is the part I see failing currently
Anyone know how to store arbitrary data at some specified address when running tests on anchor localnet? Basically test.genesis but for non-executable data. I'm trying to mock data I would find on devnet/mainnet on localnet, but that I don't own.
`solana-cli 1.9.0 (src:devbuild; feat:2420900513)` I'm using this
Update solana cli
`Error: RPC response error -32601: Method not found`, why am i getting this ??
It's sort of optional, you can specify it without an equal sign + right-hand side, `#[account(..., seeds = [...], bump, ...)]`
Seems optinal
Thought it was optional
seeds and bump go together
there is an constraint called `bump` just like the ones you have listed there that is used to either calculate or provide a pre calculated nonce for the seed derivation of the accounts pubkey
```rust
#[account(init, payer = oracle, space = 4096, seeds = [b"vault".as_ref()])]
pub vault_account: AccountInfo<'info>,
```
I am getting the error "bump must be provided with seeds"
I guess you could always just use a raw `AccountInfo`?
Thanks, the issue I am having with zero copy is that the account size is fixed.  I am looking for a solution where the accounts can be of different sizes.  Any ideas?
Zero copy
Hey guys, any pointers (especially to some code) on how I can store data as bytes in an account but not have that data automatically be deserialized when anchor reads the account?
Is there any way to edit Serum market information?
what is the best way to decode anchor instruction raw data? I see the doc on how it is structured:
`Sha256(<namespace>::<method_name>)[..8] || BorshSerialize(args)`

but how do you say get the method_name without doing the sha256 and compare?
What are the events thing? I have not seen any event thing in solana documentation
Is it through the simulateTransaction?
Is there any way to know in advance from the client side how much a transaction will cost?
You're either messing up the `signer` seeds stuff (maybe you forgot to also include the bump?), *or* you might have forgotten to mark an account as mut (for example, for a token transfer the source and destination both need to be mutable; for minting some tokens, the destination needs to be mutable *and* the mint itself needs to be mutable, etc.)
Fantastic!
okay, thank you. It is working
Try Updating solana-cli ``` sh -c "$(curl -sSfL https://release.solana.com/v1.8.3/install)" ``` thanks to <@!605702048377470997>
Update the solana cli
Hi, there. Did you solve it?
hey guys, are the programs in the `project-serum/stake` repo for staking in spl tokens? 
is it the `registry` or `lockup` I should use. 
my use case is analogous to the staking as we have on evm chains. user stakes in some token and receives rewards in some token based on a staking period window.
Updating solana-cli solved the problem for me `sh -c "$(curl -sSfL https://release.solana.com/v1.8.2/install)"`
hi, is there any way to edit the info on a serum market?
Hi there, 
Im trying to make my PDA account call the token Account via
```
   let cpi_context = CpiContext::new_with_signer(cpi_program, cpi_accounts, signer);
```
but kept getting
```
     Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
      at Connection.sendEncodedTransaction
```
may I know what Im possibly missing?
Ownership only matters for mutating an account's data or *spending* its money; you can send money to whatever account you want, no need to think about its ownership (just the ownership of the source account)
I went from version 11 to 18 and got this error

Edit:
Tried with a completely new anchor init and its broken. The package.json even reference the version 0.18.2 from anchor that isnt out yet. Still searching.
There seems to be a lot of problems with the package.json mocha version, they are not compatible between one another it seems.
```
tylo:~/work/solana/wetesting$ npm install
npm ERR! code ERESOLVE
npm ERR! ERESOLVE unable to resolve dependency tree
npm ERR! 
npm ERR! While resolving: undefined@undefined
npm ERR! Found: mocha@9.1.3
npm ERR! node_modules/mocha
npm ERR!   dev mocha@"^9.0.3" from the root project
npm ERR! 
npm ERR! Could not resolve dependency:
npm ERR! peer mocha@"^3.X.X || ^4.X.X || ^5.X.X || ^6.X.X || ^7.X.X || ^8.X.X" from ts-mocha@8.0.0
npm ERR! node_modules/ts-mocha
npm ERR!   dev ts-mocha@"^8.0.0" from the root project
npm ERR! 
npm ERR! Fix the upstream dependency conflict, or retry
npm ERR! this command with --force, or --legacy-peer-deps
npm ERR! to accept an incorrect (and potentially broken) dependency resolution.
npm ERR! 
npm ERR! See /home/tylo/.npm/eresolve-report.txt for a full report.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/tylo/.npm/_logs/2021-11-10T23_13_34_929Z-debug.log
```
Tried removing the ts-mocha for it does not support version 9 yet it seems, i could run the anchor test but the anchor.workplace is now empty.
Anyway, maybe my global dependencies are totally fucked up i dont know.
If anyone has any idea, that will be greatly appreciated
Were you able to solve the problem ? I'm getting this exact error even in node:16...
anchor test =>
```
ws error: connect ECONNREFUSED 127.0.0.1:8900
^Ctylo:~/work/solana/samak$ node --version
v16.13.0
tylo:~/work/solana/samak$ anchor --version
anchor-cli 0.18.2
```
Can someone help me demystify some account ownership question?

Here is a TX: https://explorer.solana.com/tx/2eDVSeY8UqMZ8tk6RbG3W9Nj1fZ3KeH6s6yWiWd6d8Kryv514xrDq4fMy6LyBw6e1Fts5qQyQRnZQm4W789LPkCP?cluster=devnet

The transaction batches 3 instructions:
- 1. Allocate a new Account and assign it to the Token program
- 2. Use token program to initialize new account
- 3. Send SOL to the new account using System program

In my frame of mind, statement #3 should fail, because the new account is not owned by the SystemProgram any more, it’s owned by another program (Token program). Would anyone be able to explain to me why I can send SOL to an account that is not owned by SystemProgram?
gotcha
Ah, ok, that error happens if you have a BN and try to turn it back into a regular JS number, but it's too big
I only learned today that the order doesn't matter, not sure about duplicates though
Also, does the ordering of accounts in this vec matter?
apparently it worked for them after switching to another wallet address 😂
<@194280119710253068> have you tried using BigNumber?
I see people putting duplicate accounts into the second argument of invoke_signed. Is this required?
this is it sadly, it's on prod, I can't reproduce
But I'm not sure what's throwing it
Can you show any other code? That error message is true (js numbers can only store integers up to 2^53)
anyone had this issue in browser? `Error: Number can only safely store up to 53 bits`
apparently only in MaxBook 2019 bigsur
Just the source I think 😛
In general, is there any good resource to understand how SOL (token) works from an implementation standpoint?
I see! Then how does “native” SOL wrapping work? Token accounts are owned by Token program, how can my EOA (non-allocated account) “fund” an account that can then wrap the SOL into token?
But if the program that *does* own the account doesn't expose any instruction to send the money further along, then yeah, I think it's stuck there.
Sort of—not strictly as you wrote above (if the account is owned by a program other than the system_program, then it actually *can't* send sol from it using the system_program, because the system_program doesn't own it—only the program that owns an account can decrement its lamports).
Small question: say I send 1 SOL from my own personal Account to another Account owned by a program, and say that the program in question does not have any functionality to call `SystemProgram.transfer` and send any SOL, does that mean that the 1 SOL is permanently lost?


///////////////////////////////////////////////////////////////////////////////////////////////

hello did anyone use swap-ui with WalletAdapter ?? 
Anchor Provider doesn's take adapter
Right, good to think through api-wise why `invoke_signed` won't let any other program sign for an address derived from your own program.
Ill take a look, I really appreciate the help haha My intuition is that the signers are what give the invoked_sign the authority to send the instructions, not the program calling the invoke_signed. But I think I need to do more research to fully grasp this! Thank you again! haha
I keep posting this example, but it's a somewhat related idea, a program controlling a mint: https://github.com/cqfd/anchor-token-studies
It's just that the mechanics are a tiny bit more awkward than you expected, you'll just have to pass an extra account, the thing with the PDA address.
Basically you're totally on the right track—there aren't any security issues with PDAs (well, at least not in the current design you're thinking of), since *only* your program can sign for them (knowing their seeds + bumps isn't enough, it has to be your program calling `invoke_signed`—so the only security thing is whether or not someone can trick your program into calling `invoke_signed`, but that's the same danger you ran with your original plan of signing with the program_id)
Right, I am trying to figure out how I could make this work. I was planning on giving my program authority to update metadata. I was hoping I could just use invoke_signed, and use the program itself as a signer since it has update authority. I am just afraid of security problems if I use auxiliary/helper PDAs. But I need to think this through a little more haha
<@!134416332509675520> hey just a huge thanks for answering so many questions here, have been reading your answers to others and they've been answering a lot of my beginner questions. Your time is seriously appreciated ❤️
Haha, sure, it's a little tricky at first, happy to keep answering qs!
I see, let me wrap my head around this for a little haha I appreciate the help!!
working with BNs
E.g. you could use empty seeds, `const [address, itsBump] = await anchor.web3.PublicKey.findProgramAddress([], program.programId)`
Yeah, you can't actually sign for the program's literal program_id (it's not a program-derived address, it's a keypair address from when you deployed). You'll have to use some auxiliary/helper program-derived address and sign that.
Sorry, I think I understand what I am trying to ask now. I was wondering how you would get the signer seed of the program itself.
thanks a ton! great to know im not just looking in the wrong place
And yeah, gonna have to get used to source-diving 🤿 lol, at least for now
E.g. can try doing `Math.pow(2, 53) === Math.pow(2, 53) + 1` in a node console
`BN` = big-num, for arbitrarily large integers (in particular, a u64 in Rust can't always be represented by a regular JS number, because JS numbers are doubles and can only represent integers up to 2^53, or 53 bits, not the full 64, much less a bigger type like a u128)
I am building a feature to swap across tokens within my program? Are there sample projects you'd recommend taking a look
i figured for dynamically sized things it might not work, thanks for the heads up 🙂 Another question i have is what does BN stand for? Binary Number? And what are the best docs to use when looking at anchor, just reading source? The anchor docs (https://project-serum.github.io/anchor/ts/classes/accountclient.html) don't seem to have descriptions of anything, so they're not that useful for a beginner like me.
Just making sure you saw that in general Default doesn't always work (but it often does, so might be fine)
Thank you, I will look into this approach!
You're program can sign for any of its derived address (PDAs, from find_program_address)
In general no, that won't work (often it will, but not always). For example, if any of the members of the struct have some non-static size, like a `String` or a `Vec`, the `Default` approach won't work (it will only allocate enough space for their defaults—ie empty values :/)
Hey guys, this is one of the last pieces of the puzzle for me haha How would I have the program itself sign an invoked_signed?
cool, good to know! I was wondering why the macro couldn't check the types and autocompute space for me lol 🙂 thanks!
Then you can drop the `space` field on the other stuct
Do you need to do this any more? If you are using Anchor 18 and types are pretty deterinistic, I think you can just add `#[derive(Default)]` to your Account
Hey all, noob question - how do I determine the amount of space my instruction requires? In this tutorial the account macro looks like 
```
#[account(init, payer = user, space = 8 + 40)]
pub counter: Account<'info, Counter>,
```

because the values for the following account are getting set. 
```
#[account]
pub struct Counter {
    pub authority: Pubkey,
    pub count: u64,
}
```

I know a u64 is 8 bytes, so I'm assuming the space is the 8 byte discriminator + the 8 byte u64 + the 32 byte pubkey? (by process of elimination)

Where can I look in the future to help myself figure out the space requirements for all the different types in the accounts I'm using?

following the default anchor tutorials here: https://project-serum.github.io/anchor/tutorials/tutorial-2.html#defining-a-program
(mainly for UI hosting)
is there a common implementation pattern for doing something like Serum does for directing fees on transactions to certain known wallet addresses?
you had to type something in the console
<a:Hmmmm:695129200260153375>
does anyone remember how we could enable the setting in sollet which allowed you to delete token accounts
wow works!
use `init_if_needed`
is it possible to use an existing PDA within the same instruction if already `init`ed?

I have an instruction that `init`s a PDA. I want to use the same instruction if the PDA already exists.
^ this ended up being a sneaking missing step, if you're running against an actual validator and you change your `declare_id!` , you need to remember to re-run `anchor build` before `anchor deploy`ing again.
Do you have this repo available anywhere? I could probably debug it locally
the strange thing to me is that it actually works, but it requires multiple deployments on the same program Context
Ok, so maybe init-ing a mint and one of its token accounts in the same go doesn't currently work?
pretty strange behavior tho
things then seem to work
yea and one by one
then I add the other accounts back
```
pub struct Commit<'info> {
    #[account(mut)]
    pub nft_authority: Signer<'info>,
    #[account(mut)]
    pub nft_mint: Account<'info, Mint>,
    // nft account
    #[account(
        mut,
        constraint = nft_account.owner == nft_authority.key(),
        constraint = nft_account.mint == nft_mint.key(),
    )]
    pub nft_account: Box<Account<'info, TokenAccount>>,
    // program vault account
    #[account(
        init,
        seeds = [campaign_name.as_bytes()],
        bump = bumps.vault_account,
        payer = nft_authority,
    )]
    pub vault_account: Box<Account<'info, VaultAccount>>,
    #[account(init,
        mint::decimals = OWNERSHIP_TOKEN_DECIMALS,
        mint::authority = vault_account,
        seeds = [campaign_name.as_bytes(), b"ownership_token_mint"],
        bump = bumps.ownership_token_mint,
        payer = nft_authority
    )]
    pub ownership_token_mint: Box<Account<'info, Mint>>,
    // ownership token account nft owner owns
    #[account(init,
        token::mint = ownership_token_mint,
        token::authority = nft_authority,
        seeds = [campaign_name.as_bytes(), b"nft_authority_token_account"],
        bump = bumps.nft_authority_token_account,
        payer = nft_authority)]
    pub nft_authority_ownership_token_account: Box<Account<'info, TokenAccount>>,
    // ownership token account vault account owns
    #[account(init,
        token::mint = ownership_token_mint,
        token::authority = vault_account,
        seeds = [campaign_name.as_bytes(), b"vault_token_account"],
        bump = bumps.vault_token_account,
        payer = nft_authority)]
    pub vault_ownership_token_account: Box<Account<'info, TokenAccount>>,
    pub vault_ownership_token_account: Box<Account<'info, TokenAccount>>,
    pub system_program: Program<'info, System>,
    pub token_program: Program<'info, Token>,
    pub rent: Sysvar<'info, Rent>,
}

```
Got it, so no `init`s
e.g.  I started simple with this
```
pub struct Commit<'info> {
    #[account(mut)]
    pub nft_authority: Signer<'info>,
    pub vault_ownership_token_account: Box<Account<'info, TokenAccount>>,
    pub system_program: Program<'info, System>,
    pub token_program: Program<'info, Token>,
    pub rent: Sysvar<'info, Rent>,
}
```
deploy then tried call the function, seems good
Not sure I'm following 🤔 Can you post more code? That feels like a huge hint but I'm not able to picture it
just basically slotting these back in. I deploy the program without these, and then add these back, then upgrade the program by deploying once more. Then the test seems to work
How are you declaring the new account?
<@!134416332509675520>  another interesting behavior I found is that, for the same program I can keep deploying on the same program, each time add a new account into the already existing Context, to avoid this horrendous from popping up
```
Error: 167: The given account is not owned by the executing program
```
obviously this is not the way to develop the program, but just sharing some observation I found when debugging the whole thing
let me try it out
`cargo install cargo-expand`, `cd programs/your-program` then `cargo expand` and poke around (not super easy to read but also not impossible)
You could also use `cargo expand` to just see what order things end up running in
Have you tried reordering the mint and the token account?
I was kind of wondering about that too—the constraints try to "linearize" themselves into a good order, but I do kind of wonder if there could be a bug there given that you're initializing both the mint *and* a token account with for that mint
<@!134416332509675520>  got another question here, regarding the macro used for `#[account(...)]` does it mean in order to make some constraints to work, I need to order the accounts in a specific fashion?
sounds a bit painful but ok let me try 😆
Fwiw my nuclear debugging strategy here would be to just edit the anchor macros, to log extra information about the ownership check—not sure how comfy you are making that change, but it would definitely reveal the issue quickly!
I guess the same argument holds for `Mint` also?
Yeah, e.g. `Account<'info, TokenAccount>`—it's just the the `Whatever` needs to specify who its intended owning program_id is (you can hop to source on TokenAccount for example and see how that's implemented)
Im seeing the example  in https://github.com/project-serum/anchor/blob/54f24e55960a5452e2bb8a33086aa85e8e9f1bc6/tests/ido-pool/programs/ido-pool/src/lib.rs#L288
<@!134416332509675520>  for Accounts that the program has no ownership over, can I also use `Account<'info, Whatever>`?
I think it could be `Account<'info, Whatever>` cuz programId in console log looks ok
Well, any other `Account<'info, Whatever>` could trigger that ownership error
You could `console.log(program.programId)` in your tests, just to double check, but should be fine if Anchor.toml is up to date
1. deploying with local test validator
2. yes Anchor.toml  file programId looks aligned
3. how can I check if test is running with staled version of files
Where are you deploying the program? Does that id also match what you have in your Anchor.toml file? (Wondering if maybe your tests are talking to a stale version of the program, not sure)
```
anchor keys list
tokenized_vault: 72pgC9A8nMjcsXYtM9oZEM3s9Gpuve8nbhoCVCJ8hMDj
```
it does align with whats in my declare_id!
yes I also updated
`anchor keys list`
Redeploying like that could have easily changed your program_id (you deleted the program keypair in the target directory)
up until the point where I deleted target and rebuild deploy the program
Ok, is your `declare_id!` definitely correct?
yes exactly, cuz somehow I got a period of time the whole program was running ok
```
    #[account(
        init,
        seeds = [campaign_name.as_bytes()],
        bump = bumps.vault_account,
        payer = nft_authority,
    )]
    pub vault_account: Box<Account<'info, VaultAccount>>,
```
That's failing really early, before it talks to the token program etc.
Are you init-ing anything else?
<@!134416332509675520> 
```
  logs: [
    'Program 72pgC9A8nMjcsXYtM9oZEM3s9Gpuve8nbhoCVCJ8hMDj invoke [1]',
    'Program 11111111111111111111111111111111 invoke [2]',
    'Program 11111111111111111111111111111111 success',
    'Program log: Custom program error: 0xa7',
    'Program 72pgC9A8nMjcsXYtM9oZEM3s9Gpuve8nbhoCVCJ8hMDj consumed 15633 of 200000 compute units',
    'Program 72pgC9A8nMjcsXYtM9oZEM3s9Gpuve8nbhoCVCJ8hMDj failed: custom program error: 0xa7'
  ]
```
Can you post more of the program log?
Mm, that looks pretty plausible
<@!134416332509675520> how do I make Mint or TokenAccount owned by SPL token program? Im currently having something like
```
    #[account(init,
        mint::decimals = OWNERSHIP_TOKEN_DECIMALS,
        mint::authority = vault_account,
        seeds = [campaign_name.as_bytes(), b"ownership_token_mint"],
        bump = bumps.ownership_token_mint,
        payer = nft_authority
    )]
    pub ownership_token_mint: Box<Account<'info, Mint>>,

    // ownership token account nft owner owns
    #[account(init,
        token::mint = ownership_token_mint,
        token::authority = nft_authority,
        seeds = [campaign_name.as_bytes(), b"nft_authority_token_account"],
        bump = bumps.nft_authority_token_account,
        payer = nft_authority)]
    pub nft_authority_ownership_token_account: Box<Account<'info, TokenAccount>>,
```
Annoyingly there are two ways this could happen: 1) if you forgot to update your `declare_id!` to match the actual running program_id, or 2) because some account really doesn't belong to the program its supposed to. E.g. any Mint or TokenAccount needs to be owned by the SPL token program
Hi there, would like to check in on the error message
```
Error: 167: The given account is not owned by the executing program
```
Im trying to make my program create its own mint account and token account based on that Mint. Any ideas why this error message can happen? Many thanks
Thanks so much man, tests passed!!!
nioce, good luck!
gotta go put a light in, ill test in about 2 hours and let you know what happens!
okay that looks great actually - at least in the IDE
`?` should cause the underlying error to bubble up
just some warnings
yes
it looks better after adding Ok(())!
add the ? after invoke?
then you can add those question marks
just `Ok(())`
no semicolon and the end
yeah, because your code should finish with `Ok(())`
but then at `-> ProgramResult` i get a mismatched types error
```pub fn send_sol_and_commission(ctx: Context<SendSolAndComm>, amount: u64) -> ProgramResult {
        let commission_amount: f64 = amount as f64 * 0.10;
        let trans_amount: f64 = amount as f64 * 0.90;

        let transaction = anchor_lang::solana_program::system_instruction::transfer(
            &ctx.accounts.from.key(),
            &ctx.accounts.to.key(),
            trans_amount as u64,
        );
        let commission_transaction = anchor_lang::solana_program::system_instruction::transfer(
            &ctx.accounts.from.key(),
            &ctx.accounts.commission.key(),
            commission_amount as u64,
        );
        anchor_lang::solana_program::program::invoke(
            &transaction,
            &[
                ctx.accounts.from.to_account_info(),
                ctx.accounts.to.to_account_info(),
            ],
        );
        anchor_lang::solana_program::program::invoke(
            &commission_transaction,
            &[
                ctx.accounts.from.to_account_info(),
                ctx.accounts.commission.to_account_info(),
            ],
        );
    }```
this is how i had it before:
and i can do one of those transfers fine, but since each transaction returns a result when i perform 2 of them i dont get the right type for `ProgramResult`
right
```
let transfer_ix = 
anchor_lang::solana_program::system_instruction::transfer(&ctx.accounts.from.key(), ctx.accounts.to.key(), trans_amount as u64)
```
lemme post that code, gimme a sec
i tried that first, but then i get a different error
since you are executing everything within a program, it will still happen atomically
yeah can you just do 1 transfer at a time?
it expects `Instruction` but instead gets a `Vec` of instructions
so im getting an error at the `&transactions` line
yes
but
does your function return `ProgramResult`?
nope!
hahaha
did you add the semicolon?
hmm vscode screams at me when i add a ? after invoke
`?` basically equals to "or OK or throw error"
can you try passing all 3 accounts? also, can you add a `?;` at the end of the `invoke()`?
```
        anchor_lang::solana_program::program::invoke(
            &transactions,
            &[
                ctx.accounts.from.to_account_info(),
                ctx.accounts.to.to_account_info(),
                ctx.accounts.commission.to_account_info()
            ],
        )
```
you are def on the right path
just looking at the code
I tried it with multiple individual transfers at first, and got hung up in the same spot though
i just found it in the docs! not even sure if it does what i think, but we'll see i guess lol
except the program::invoke wants a single transaction
oh lol I didn't know Transfer Many 🙂
```pub fn send_sol_and_commission(ctx: Context<SendSolAndComm>, amount: u64) -> ProgramResult {
        let commission_amount: f64 = amount as f64 * 0.10;
        let trans_amount: f64 = amount as f64 * 0.90;

        let transactions = anchor_lang::solana_program::system_instruction::transfer_many(
            &ctx.accounts.from.key(),
            &[
                (ctx.accounts.to.key(), trans_amount as u64),
                (ctx.accounts.commission.key(), commission_amount as u64),
            ],
        );
        anchor_lang::solana_program::program::invoke(
            &transactions,
            &[
                ctx.accounts.from.to_account_info(),
                ctx.accounts.to.to_account_info(),
            ],
        )


    }```
i think im on the right track with this:
input account sends 1 SOL, 0.9 SOL go to destination account, 0.1 SOL go to commission account
so the flow would look something like:
correct
OK, and just to make sure the "input" account that has the SOL is signing the tx right?
at least for now, im still super green to all this so im trying to start super simple
just need to send monies
<@!265256084556480513> nice nice, do you need to do any validation on the destination addresses, or do you just need to send the moneys?
Well the CPI returns a set of instructions, so now I am trying to figure out how to send those instructions
passing in an `amount` argument, then for now just splitting that up in the program
I see, how are you defining how much money to send?
and yes, using my program to make the transfers
SOL
what are you transferring? SPL or SOL?
Are you relying on your program to make the transfers?
Do you mean using CPI?
hey guys, super new here so try to bare with me! I'm trying to write a program that takes a transaction amount and sends a certain percentage to one account, and the rest to another. i think i have all of the pieces working individually, but I'm not sure how to call two separate anchor_lang::solana_program::program::invoke functions in my singular program. Anyone have pointers to resources where I could learn how to achieve this?
Hey, guys, I was wondering if anyone has tried to send/add instructions from within the Anchor program.
imo, upgradeable contracts + closed source contracts (example: Saber finance) + CPI superpowers = drama and disaster 💣
Transaction simulation goes some way, but it does not really prevent bad things from happening
<@!134416332509675520> if Solana contracts can be upgraded, and if any Solana program can use a signature of a user to call any other program via CPI (therefore, being able to use a user's credentials in many ways) how do you prevent the worst from happening?
Works! Thanks!
Probably more like `constraint = token_from.owner == signer.key()` (maybe missing an &)
Does anyone know how I can enforce that `token_from.owner` is the signer?
Alright, thank you very much!!!
Ok. Trick didn't work. And it is not trivial to make Anchor support "a PDA as payer", it seems
Yeah.
This is a Anchor validation, right?
Ah... ok, bummer, guess that `seeds = ` hack won't work, I forgot it also verifies the seeds against the address of the account you're trying to create :/ So it's just not designed to do what you're trying to do.
The creation seems to be 'success'
But the logs are slightly different:
```
logs: [
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS invoke [1]',
    'Program 11111111111111111111111111111111 invoke [2]',
    'Program 11111111111111111111111111111111 success',
    'Program log: Custom program error: 0x92',
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS consumed 19691 of 200000 compute units',
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS failed: custom program error: 0x92'
  ]
```
Now, I am getting `Error: 146: A seeds constraint was violated`
wait a moment
ah
In the meanwhile, this is still failing with the same errors, even though the payer is now owned by the sys_program
Yeah, so honestly maybe it's clearer to just initialize the account lol, the way you started with 😛
Thanks!!
Hm, so I think I need to send the rent-exemption amount initially (because the amount of SOL that goes to the account after depends on the clients, and they can send less than the rent-exempt)
Since even an empty account requires rent
I just deleted the code where I was creating it and all tests still pass (and they use the PDA)
You have to be slightly careful though, since if you send an account too little money the rent collector will just nab it 🤑
Yes, it's not necessary to create it
It's like in some of the tests where you create a keypair and then airdrop it some sol—there wasn't any explicit account creation in there, it just happened behind the scenes
I will test it immediately
I should double check I'm not just making that up, but I'm pretty sure it's ok 🤔
Ah, (this is just me getting distracted/nerd-sniped, doesn't actually matter)—I think you can skip account creation entirely, even on the client side (but whatever, creating the account is fine too)
Was just creating the vault account. You are right. It is unnecessary. I can do it directly from the client side
But this works. We can define the owner using the `owner`.
Which account is that instruction creating?
Ah, I understand. I can generate the PDA on the client side and issue the creation instruction directly from the client. Yes, indeed it was weird that my create_vault instruction was simply a `Ok(())`. 🤡
That's my understanding (I think the upgradeable_bpf_loader is the default in solana, and you have to explicitly turn off the ability to upgrade)
And the fact that its address is one of your PDAs means you can subsequently sign for it
I'm actually not sure you even need to create the account at all though, you can just send money to an address without creating an account there
I have to specify the owner upon creation. Now I will try another trick: using the `owner` 🤣
Basically my account is just going to hold some temporary SOL (it's like my program vault or safe box). My program will use SOL from that vault to pay the creation of some other accounts, and the SOL from closed accounts will also go to the vault. Because it needs to pay those account creations, it needs to be a PDA.
or does it just go by the size of `.so` file
does anchor deploy double program space by default in case for future program upgrade?
(Though you have to be careful to remember that even empty accounts require a minimum balance for rent exemption)
If it doesn't need any data I'm not even sure you need to initialize it at all, you can just send it money and it will pop into existence (I think)
How is this account getting its money? I think I'm not super clear on how you're going to use it.
It was nice that adding something like `owner = SYS_PROG` to
```rust
#[account(init, payer = oracle, space = 4096, seeds = [b"vault".as_ref()], bump)]
    pub vault_account: AccountInfo<'info>,
```
works. But `owner` is used for checking
Hm, I will search about it
Actually not sure you can change the owner 🤔 I think that's only settable once
Now I have to see how change the owner of a PDA to system_program. Never did that. Maybe Anchor has some 1-line way of do it? 🤣
Lol
Ah I am just retarded. I am not using the space, just put some value 🤣
Out of curiosity, how come it has space = 4096?
Yes! I remember that 2x2 table about signing and changing its data. Nice, in my case I am not using the PDA data, so I can make the system_program the owner. After that probably my trick will work. Thank you!!
Strictly speaking no (meaning yes, it's possible), since it's possible to have an account live at one of your PDAs while still being owned by the system_program.
That means that I cannot create an account with the payer being a PDA?
Ok thanks. I'll try that
Ah!
I'm saying that as far as I can tell (hadn't thought about this before), the payer has to be owned by the system_program, not your program.
The payer is a PDA of my program.
I created it with this:
```rust
#[derive(Accounts)]
pub struct CreateVault<'info> {
    #[account(init, payer = oracle, space = 4096, seeds = [b"vault".as_ref()], bump)]
    pub vault_account: AccountInfo<'info>,
    #[account(mut, address = Pubkey::from_str(ORACLE_PUBKEY)
    .unwrap())]
    pub oracle: Signer<'info>,
    pub system_program: Program<'info, System>
}
```
Isn't the PDA owner my program?
I really like that seeds trick, going to remember that 😆
(No quotes, just `constrain = ...`)
Ah, ok, I guess the syntax was different than I thought, the issue is that string constraint, `"payer_mint_account.owner == *payer.key"`, change it to be `constraint = payer_mint_account.owner == *payer.key`
Oh, funny, I guess that would work to add seeds there! Hadn't thought of that. I think you're probably running into a different issue—I guess the payer account has to be owned by the system_program 🤔 (since the system_program is what tries to decrement its balance).


Here are the parts with derive account
This seeds https://github.com/project-serum/anchor/blob/62fcd75401d3140d8e324655da144aaf41f632b8/lang/syn/src/codegen/accounts/constraints.rs#L287 depend on the payer `ConstraintGroup` which is not available there. Not trivial. 

In meanwhile I tried this
```rust
pub struct MakeAndResizeOffers<'info> {
    #[account(mut)]
    pub prices_account: Account<'info, OutcomePriceOffers>,
    #[account(mut, close = vault)]
    pub current_offers_account: Account<'info, PriceOffers>,
    #[account(init, signer, payer = vault, space = 2 * current_offers_account.as_ref().data_len(), seeds = [b"vault".as_ref()], bump)]
    pub new_offers_account: Account<'info, PriceOffers>,
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut)]
    pub vault: AccountInfo<'info>,
    pub system_program: Program<'info, System>,
}
```
I was expecting that this ("hack") would work since I am passing the seeds to sign the account creation. However it fails and I don't understand why. Looking at the logs it seems that there some transfer happening, which seems to me that the code is reaching this line https://github.com/project-serum/anchor/blob/62fcd75401d3140d8e324655da144aaf41f632b8/lang/syn/src/codegen/accounts/constraints.rs#L613. Maybe I am wrong, could you give your analysis on this (is the code reaching that line?)? I tried to debug, but `msg!` inside `quote!` seems not to work.

The logs:
```
logs: [
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS invoke [1]',
    'Program 11111111111111111111111111111111 invoke [2]',
    'Transfer: `from` must not carry data',
    'Program 11111111111111111111111111111111 failed: invalid program argument',
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS consumed 200000 of 200000 compute units',
    'Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS failed: invalid program argument'
  ]
```


///////////////////////////////////////////////////////////////////////////////////////////////

I found the chart on tt
Yes, I think that's the name on Twitter. I follow him, good content
cc <@!327282414118240257> haha 😄
Thanks for the clarification!
I will put here on #resources maybe
Oh ok
There is a very good 2x2 chart
Program has authority, can sign for it. But is not necessarily the owner, and if it is not the owner it can't change its data.
*Usually* but you can also e.g. `init` a token account with `token::mint = some_mint` + `token::authority = the_logical_owner` and the account itself will belong to the spl token program
If it is init by the program, it then belongs to it right ?
Hahaha
(Sorry if I'm being pendantic, people keep asking about this so I'm trigger-happy lol)
For that there is `owner`
yes yes
Have to be slightly careful, the address will be derived from your program but the account itself might belong to some other program
Yes, it will belong to your program
yes?
I know `seeds` verifies the seeds of the account that is going to be created with `init`. Does it also verifies when receiving an account that is `mut`? (i.e., does Anchor validates that the given account is a PDA of my program with those `seeds`?)
I think it would be if you want to initialize an account that was created in a separate instruction (e.g. suppose you've got an account that's too big to init via CPI, then you'd use `zero` + `AccountLoader`'s .load_init)
What is use case of `zero` attribute for `#[account()]`? I understand that error will be thrown if discriminator is not a zero, but do not understand for what this can be used 😐
I've already made the change, just trying to test it before I submit PR.
Relearning the APIs for all the different non anchor clients is a big productivity killer as well.
The built in functions aren't great
Just need to have `Coder` as a plugin and manually create the IDL.
I find myself doing every manually with spl token primitives anyway
Should be doable.
Was just going to say this.
It would be more fun to replicate the spl token program library inside anchor
Yeah I think everyone agrees that library is a little funky lol, I think they'd be happy to have PRs
just add a mintAccountPubkey parameter and change ... three lines of code...
can probably just rewrite that function to pass in a pubkey to be used. That seems like something that I might be able to introduce in the spl with a non-breaking change.
thx!
Yeh, if you have a vanity keypair you can just load it up
E.g. can just do this stuff manually (tedious but easy): https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L406
Trying to find an example
Well, if you run the create account isntructions yourself you can specify the address
I should just be on devnet at this point TBH...
yes, but there's no way to specify the mint address (I have vanity keypairs) which are needed in the serum and swap UIs.
You can just run the create mint instructions yourself (check out the source for Token.createMint)
no way to specify the mint address in js from what I see, so I'm running shell script after anchor localnet.
Nope, you just have to add init mint to your JavaScript tests
Is there a way to deploy a token-mint as part of the config setup? Like I know I can deploy Serum or swap programs in the genesis config, but can I create token mints the same way, specifying the pubkey to be used for it? That way I can run my front end off of anchor localnet without having to deploy my mints via shell script. (I don't see a way to use a pubkey in the spl-token TS API, maybe I'm missing something?)
wow fascinating, yeah that doesn't totally make sense to me either from a design perspective (maybe they had their reasons), but it's a great peek into some of the lower level considerations 👍  thanks again
But at any rate, you can "fix" it by forcing the close account ix to care about a wider set of accounts:
```.rs
        let mut close_account_ix = spl_token::instruction::close_account(
            &ctx.accounts.token_program.key(),
            &ctx.accounts.seller_current_token_account.key(),
            ctx.accounts.seller.key,
            ctx.accounts.seller.key,
            &[],
        )?;
        close_account_ix
            .accounts
            .push(anchor_lang::solana_program::instruction::AccountMeta {
                pubkey: ctx.accounts.dev_royalty_account.key(),
                is_signer: false,
                is_writable: false,
            });
        close_account_ix
            .accounts
            .push(anchor_lang::solana_program::instruction::AccountMeta {
                pubkey: ctx.accounts.treasury.key(),
                is_signer: false,
                is_writable: false,
            });

        anchor_lang::solana_program::program::invoke(
            &close_account_ix,
            &[
                ctx.accounts.seller_current_token_account.to_account_info(),
                ctx.accounts.seller.to_account_info(),
                ctx.accounts.dev_royalty_account.to_account_info(),
                ctx.accounts.treasury.to_account_info(),
            ],
        )?;
```
This ended up having a super interesting/weird explanation. I asked one of the solana core devs about it, https://twitter.com/jstrry, and he had run into the same issue before + could point me in the right direction. It turns out that there's an imbalance check before you do a CPI (in this case, to close the token account), but it's a weird imbalance check: it checks whether the current pre-cpi instruction has imbalanced *just the accounts the cpi instruction cares about*. That basically just doesn't make sense to me/jstrry said they want to fix it.
Does `program.rpc.accounts.myAccount.fetch` can receive multiples pubkeys? Or does Anchor offers any way of fetching multiple accounts of some type? (underlying using the solana getMultipleAccounts RPC)
you should focus on sunproofing first
More likely to be eaten and/or hacked by a stray wolf than have a collision
Ok, that convinced me to just ignore the collision problem.
the chance of a collision is hundreds and hundreds of trillions of times smaller than a sunray fucking up a computer and breaking the code
Alright, thanks a lot for the feedback! I will still calculate the odds before going into production 🤣
No, highly doubt anyone does
Do you (yourself and project-serum) design your projects to handle the situation of a collision? (If you don't I won't design mine and then if my program crashes I will just say I was unluckier than you)
If collision risk were actually a problem most of modern life would collapse 🤞
Collision risk just isn't a problem, don't stress 😌
To many digits indeed
One day I will calculate the odds of those events. I have seen many devs relying on PDAs to index things. I am afraid of this, even though the odds are very low, it might fail due to a collision. In part that's why I added support to BTreeMaps, to create my own indexes... What's your opinion or experience? Assuming you already need to index somethings within your Dapps
To get a feel, 2^256 ~ 10^77, and there are only about 10^80 atoms in the universe 😛
Have been on that page moments ago, but since I have no knowledge about cryptographic just left. Easier to ask here 🤣
It's a good math exercise to get a feel for why this isn't a problem (256 bits is just a stupendously, impossibly large number)
If you're curious, solana uses the ed25519 curve (https://en.wikipedia.org/wiki/Curve25519)
Today we might not worry much about these things, but once Solana has 7 billion users we might need to worry (or not, maybe 1 million and 7 billion makes not many difference, I don't know how many digits 2^256 even has)
Alright, thank you for clarify me! Anchor > Solana
4) Possible but it's equivalent to a hash collision, so extremely unlikely to happen.
3) Practically, however many you want. Literally, there are "only" 2^256 *possible* addresses for solana (32 bytes = 256 bits), but that's an incomprehensibly large number.
2) Collisions are nearly impossible, so don't need to worry about this.
1) A PDA address is just a sha256 hash of the seeds + bump + the program_id (plus one other fixed string), so technically yes, you could have collisions with another program, because hash functions can have collisions, but practically speaking no.
I asked this on Solana Discord but got no answer yet. So asking here because I see to many professionals online.

I have some question about PDAs (maybe some don't make sense, please clarify me). 
1) Given two different programs, it is possible that findProgramAddress generates two equal PDA for the two (each could use any seed)? 
2) Assuming that findProgramAddress does not probe the blockchain when generating the address (it just verifies whether is it on the curve), how reliable is that the address it generates is not already in use by other program? (This question only makes sense if the answer to the first is true) 
3) If it is not possible that the PDA of two different programs collide, how many unique PDA each program has available?
4) For one program, is it possible that findProgramAddress generates two equal PDA for different seeds?
This way if they try to directly call the program without the whitelisting stuff, it will fail
front end -> click -> server checks the user is legit -> send token or whitelist in a pda -> front end receive the ok & proceed with the program call
Or you could temporary whitelist the user address in a pda (your server authority commits this change) and then check against it on your program
Basically the actions require your token
You could a prior verification happening on the server side, checking if the user is legit on "click", you then drop them a whitelist/game token which you then send when calling your program
There’s a PR to support BTreeMap https://github.com/project-serum/anchor/pull/916
if anyone runs into this, the solution I arrived is to trigger a node api which will handle validation and then trigger the program using an authority account
haha amazing, yeah you should have one
I was editing + recompiling solana source to help me debug and was thinking, ugh, gonna need a new M1 for this 🥴
Ah, good call 🙏  I'm definitely past the point of adaptive stubbornness at this point 😴
i lied, i'm curious: https://github.com/solana-labs/solana/issues/20348
I meant more as in IDL/TS decoding support for BTreeMap, Vec/BTreeMap aren't that difficult to use IMO, just have to add more space on account gen
for the moment though i might just internalize the learning as: order really matters
woah, first off thanks so much for digging in!! 🙏  second: yeah that seems super weird and i'd be very curious to understand the reason why that works
Huh, interesting, I figured out a way to make the close token stuff work: move the `//ship sol` section to *after* the `token::close_account` part 🤔 I honestly have no idea why that works differently though.
all good, thanks for looking
Yeah, not sure yet why those close account ixs don't work 🤔
cool, thanks
You can `cd programs/balancer` and then run `cargo expand`
there's a way to view the plain vanilla rust/solana code that is generated from anchor right? where is that kept?
ah ok, thanks
No, that regular keypair account will have had to already have signed from the client (if it has, then that signature carries across the CPI automatically)
https://gitlab.com/cooperative-dev/nft-balancer/-/blob/main/programs/balancer/src/lib.rs#L110
is there a way to sign with a regular account when transitioning into a new cpi context? i know how to do it for PDAs...
Is having them sign enough? Hard to fake that
yeah there's a bunch happening, but it all seems to work when i comment out the close account section
https://gitlab.com/cooperative-dev/nft-balancer/-/blob/main/programs/balancer/src/lib.rs#L52-99
Yes but it seems it ends in the same problem, how can I use a PDA to add progress to players programatically without leaving the program open for someone to do the same
What you've got there looks pretty plausible to me 🤔 Is anything else happening in the instruction?
They'd have to sign (proving it's really them, the owner of their tokens) when they go to click/burn
Yep, could mint them some kind of token as they play/do stuff, then burn it in exchange for the reward?
You could maybe store some state over the course of the game that's associated with the user's public key, and then when they click the button, they'd have to sign with that key (proving that they're themselves) and pass along that state proving they're already active
Like maybe a token to trade for the reward?
You'd have to have some way for the user/clicker to prove they're an active player of the game, otherwise, yeah, someone could just "click" all the sol away.
Gn. Firstly, I'm really enjoying using Anchor, so thank you to everyone who's building it.

I'm building a game, and I'm building an Anchor program to handle treasure chests.

The simplest idea is that the users will `click` the chest and receive some `reward` in SOL.

The newbie question that I have is:
```
How to `prevent` ANYONE from using the same `program_id`, setting up a client script, and `emptying` the treasure chest account that has some balance in SOL, `without ever having to enter` my game?
```

If anyone has an idea about it, it can be just in theory because I'm trying to grasp something. I really appreciate it.
i'm attempting to close an empty token account owned by a regular user account, with the following, but getting a weird `instruction spent from the balance of an account it does not own` error, any thoughts?
```
token::close_account(
            ctx.accounts
                .into_close_old_token_account()
        );

...

impl<'info> SellNFT<'info> {
    fn into_close_old_token_account(&self) -> CpiContext<'_, '_, '_, 'info, CloseAccount<'info>> {
        let cpi_accounts = CloseAccount {
            account: self.seller_current_token_account.to_account_info().clone(),
            destination: self.seller.to_account_info().clone(),
            authority: self.seller.to_account_info().clone(),
        };
        let cpi_program = self.token_program.to_account_info();
        CpiContext::new(cpi_program, cpi_accounts)
    }
}
```
And vectors are hardish to use
Btreemaps are hardish to use because they're kind of like vectors
Hashmaps aren't supported by Solana
Non existent
How is the BTreeMap/HashMap support on anchor?
Also this would be a fantastic feature: https://github.com/project-serum/anchor/issues/1001
Good to note to not modify named account ordering in program upgrades
Probably correct based on the IDL file
Ordinarily you wouldn't be calling that function yourself, but I think the expectation is that accounts come in according to the order in your `#[derive(Accounts)]` struct
Is there documented requirements on the ordering of `accounts` here
https://docs.rs/anchor-lang/0.18.0/anchor_lang/trait.Accounts.html#tymethod.try_accounts
would make me feel so much more comfortable in using crypto lol
now if only someone can solve spectre :/
Awesome. I think more educational resources about this would be super valuable. A stream/video going through the exploits would be awesome.
i didnt do a deep dive, but it seems like anchor solves all of the things that were exploitable out of the box from that workshop lol
I'm going to do a study group stream about them at some point and talk about them relative to anchor (there was a bunch of stuff in anchor where I knew at least in theory why anchor did something security-wise, but it was pretty awesome to actually write some of those types of exploits from scratch!)
I think they're actually a pretty awesome advertisement for anchor haha (without giving away too many hints 😛)
(I should really go through them myself, but you know...infinite time and all that)
<@!134416332509675520> anything stick out from the neodyme workshop that suggests we should make changes or add features to Anchor?
But yeah unfortunately it looks one way
https://github.com/project-serum/anchor/blob/HEAD/tests/permissioned-markets/programs/permissioned-markets/src/lib.rs#L98
It looks like anchor lets you specifiy with AccountInfo slices rather than contexts so it lets you go from &[AccountInfo] -> Context at least
https://github.com/project-serum/anchor/blob/HEAD/tests/permissioned-markets/programs/permissioned-markets/src/lib.rs#L37-L41
https://www.youtube.com/watch?v=z0TL7eFbJX4
so you're essentially creating a NonRandomState struct locally and initializing the hashmap to use that within the scope of the initialize function itself?
ah
Ah, I'm not sure actually—that was just me messing around (was curious why the standard rust hashmap doesn't work—turns out it uses some mutable global state under the hood, which isn't allowed in solana)
<@!134416332509675520> also, the hashmap code you pointed to, is there a reason not to use it?
I gonna share my code screen via dm.
Would you like help me?
Think you'll just have to do it manually, `&[ctx.accounts.first.to_account_info(), ...]`?
(which is fine I guess, for my usecase)
<@!134416332509675520> I mean, I wouldn't be able to do a .get() on that data unless I took the sequence of <k,v>s and converted to a map somewhere..
How come they wouldn't be useful?
Is there a way to transform accounts from a `Context` to get an [&AccountInfo] array. (In the exact order the accounts would be ordered for the tx)
<@!134416332509675520> .
I hope to make a friend you and hope to learn about anchor and rust. Could you please to keep get in touch with me?
eek. so the key value pairs aren't really useful I guess, unless the client converts them to a hashmap?
Your custom errors start at 300 (I just happen to know that/it's where anchor starts them at)
<@!134416332509675520> 
Could you tell me how I can match the code with my errors? I just defined few custom errors.
<@!134416332509675520> oh interesting re the hashmap. could you describe what that piece of code is actually doing?
0x8f = 143 = a raw constraint failed `constraint = something`
<@!675444300586287134> . My error is custom program error.
I faced with 0x12e, 0x8f, 0x130.
Anyone know the mean?
You'd probably have to just store a sequence of key-value pairs.
0x12e = 302 = the third custom error you/someone else defined
Just for fun, you actually kind of can use hashmaps, just have to tweak them a bit: https://discord.com/channels/889577356681945098/889702325231427584/899740156423176235
seems like 0x12 would be InvalidInstruction
errors are defined here https://github.com/solana-labs/solana-program-library/blob/ea354ab358021aa08f774e2d4028b33ec56d4180/token/program/src/error.rs#L16 (eg, 0x1 is InsufficientFunds error)
i understand that hashmaps aren't supported yet
how does one store key value pairs in account.data fields?
Who know what does the 0x12e Transcation error mean? please help me
`Transaction simulation failed: Error processingInstruction 4: custom program error: 0x12e`
`Program 11111111111111111111111111111111 invoke [1]`
hello


///////////////////////////////////////////////////////////////////////////////////////////////

You can use `Box` around of `Account`
I am using anchor 0.15.0 to work on a project right now. I keep running into this error when I add accounts to the context ```Stack offset of -4336 exceeded max offset of -4096 by 240 bytes, please minimize large stack variables``` Is there a way I can shrink down my context?
Sorry what do you mean??
but not solana specific
rustlings maybe
gotchu ty
https://www.youtube.com/watch?v=z0TL7eFbJX4 usually it means you dont have enough solana in the account to deploy it
what is this error when deploying Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1
Hi Folks, I am looking for a tutorial similar to cryptozombies but for solana, I just found candy machines. Do you know some step by step tuto to create NFT by code?
this is cryptozombies, just in case>
https://cryptozombies.io/en/course
ok cool, i think that fixed it, thanks 🙂
oh ok, will give that a shot
Can you try with v0.18.2.
happening when trying to fetch account data for a pda
i can't get rid of this error here `Unhandled Rejection (Error): Invalid account discriminator`, i saw there was an issue in github, and i upped all my versions, but still not sure what the problem is
Hey all just wanted to point out that if you're running into error: `Translating error Error: failed to get recent blockhash: FetchError: request to http://localhost:8899/ failed, reason: connect ECONNREFUSED ::1:8899` , it's due to incompatible Node.JS version. You need to be on/around Node.JS v16. You can do this by installing `nvm` from https://github.com/nvm-sh/nvm. Then switch to version 16 and then run your anchor app. Hope this helps.
https://twitter.com/armaniferrante/status/1458490295708966918 is relevant. but only applies if you use `anchor build --verifiable`
at least that's my understanding
without getting into some byte-code deciphering black-magic i don't think there are currently good tools for this. there is a mechanism for verifying that a projects code is what they say it is (if they've published it)
Hi, how can I see an unreleased program? I'd like to see what procedures a site is running before interacting with it
@soscoder
what's your twitter handle?
<@!327282414118240257> Followed !
I agree, some nice & tough mental gymnastic
drawing diagrams is one of the most helpful things for understanding Solana programs imo. otherwise, it's super hard to keep all the accounts in your head
glad people find it helpful haha


///////////////////////////////////////////////////////////////////////////////////////////////

these seem like questions that are fair game for the main solana discord
thank you Alan!
Mm I'm pretty unfamiliar with all of those qs unfortunately, would like to know too though!
Hey <@!134416332509675520> sorry to bug again and again! By any chance did you see my last question? I think it got batched with the rest of the convos.

https://discord.com/channels/889577356681945098/889577399308656662/909820284297707520

Totally fine if you don't know the answer or cannot answer now! I just wanted to make sure that you heard it
One think you could do is check out is this example from neodyme's poc framework, from the security workshop: https://github.com/neodyme-labs/solana-poc-framework/blob/main/src/lib.rs#L270
anchor deploy just delegates to the solana deploy, so think you'll have to look at solana
Would it be better to look at anchor deploy? Or the pure solana-cli deploy?
Good luck!
I will work on going that route then. Have been working on a Gnosis for Solana 🙂 

This is the last step 🙂
sounds painful
You would have to interact with BPF loader program, I assume
I suppose you could mimic what the actual deploy does? Haven't actually tried that myself though so not sure if there's something sneaky I'm missing
I would say purely from browser then
Relevant material: https://www.reddit.com/r/solana/comments/ply7xs/is_it_possible_to_deploy_a_program_with_solana/
I would guess that doing a deploy *within* your program would be a nightmare if it's even possible, given the super tiny solana tx size—regular deploys from the cli take hundreds of transactions because you can only upload ~1k of program code at a time.
From web3 (like, purely from the browser) or from within your own program?
I guess not exactly that. I am more looking for deploying a program from web3.
Does anyone know how full nodes work in Solana?
- Does every node retain access to every single transaction?
- Is there an easy way to listen for changes on a specific account? for example, if I wanted to monitor a Solana account, that is an Orca pool, for any change in the metadata, could I do that via some smart RPC method, or do I need to poll?
Are you referring to using `CREATE2` instruction like Uniswap does? where they deploy a new LP using an existing LP?
Hey everyone,

I haven't seen anything about the possibility of deploying programs in a program. Sort of like a eth clone factory. Anyone know if this is possible or at least where to start.
Awesome, thanks guys!
I think part of the confusion is that the `to:` arg is maybe misnamed, in the underlying spl token function the corresponding arg is just called `account_pubkey`, so you're not burning any tokens "to" somewhere, you're burning the "to" arg's tokens.
but yeh, the SPL token program will allow you to burn your tokens
not an anchor function (explicitly)
it's an spl token program function
does it allow you to send your tokens to incinerator ?
Does anyone know what the `burn` call does in anchor? 

https://docs.rs/anchor-spl/0.18.0/anchor_spl/token/fn.burn.html

there's no docs on it
We added that for the associated token account
But sure, maybe the token and mint constraint tokens should also be allowed to be used as possible validation
The mint constraint tokens are for initializing not for validating after init
hey
I'm trying to validate that the mint that got passed on has a specific authority with this code
```
    #[account(
        mut,
        mint::decimals = 0,
        mint::authority = authority,
    )]
    pub parent_1_mint: Account<'info, Mint>,
```
and I get some really funky errors
```
13 | #[program]
   | ^^^^^^^^^^ function or associated item not found in `breeding::Breed<'_>`
13 | #[program]
   | ^^^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `breeding::Breed<'_>`
13 | #[program]
   | ^^^^^^^^^^ method not found in `breeding::Breed<'_>`
```
ps. if I have that - it works
```
    #[account(
        mut,
    )]
    pub parent_1_mint: Account<'info, Mint>,
```
am I doing something wrong?

I know I can do 
```
    #[account(
        mut,
        constraint = parent_1_mint.mint_authority.unwrap().key() == *authority.key
    )]
```
but it seems ugly XD
i see
using `remaining_accounts`
right, but if you're manually initializing an account then there would be no discriminator the first time you initialize since the account has no pre-existing data
but if non-zerocopy why not read it the usual way?
This will read the account without checking the discriminator.
i read zerocopy
That's for zero copy.
load_init?
`anchor_lang::Account::try_from_unchecked` seems to be the replacement
whats the proper way to manually initialize non-zerocopy accounts? previously `anchor_lang::ProgramAccount::try_accounts_init` worked but this function doesnt exist anymore
magic 😂
Ok, I found the issue. You couldn't find it in the code, because I re-formatted it... The reason for this error was the fact, that originally the function that creates a new status had a number at the end. Apparently this is not allowed, getting rid of the number in function name solved the issue
Hi!
I have what may be a silly question... I'm trying to call a pretty simple funcion, and I keep getting this error:
`Error: 101: Fallback functions are not supported`
My implementation:
```
#[program]
pub mod combiner {
    use super::*;

    pub fn create_status(
        ctx: Context<CreateStatus>,
        status_bump: u8,
    ) -> ProgramResult {
        instructions::create_status::handler(ctx, status_bump);
        Ok(())
    }
}
-----------------
#[derive(Accounts)]
pub struct CreateStatus<'info> {
    pub authority: Signer<'info>,
    pub status: Account<'info, Status>,
    pub mint: Account<'info, Mint>,
    pub system_program: Program<'info, System>,
}

pub fn handler(
    ctx: Context<CreateStatus>,
    _bump: u8,
) -> ProgramResult {
    Ok(())
}
```

And my test:
```
describe('test', () => {
    const program = anchor.workspace.Combiner as Program<Combiner>;
    const provider = anchor.Provider.env();
    anchor.setProvider(provider);
    const sdk = new Sdk(program);

    const authority = provider.wallet as NodeWallet;

    it('initialize one status account', async () => {
        //given
        let mint = await Token.createMint(
            provider.connection,
            authority.payer,
            authority.publicKey,
            authority.publicKey,
            0,
            TOKEN_PROGRAM_ID
        );

        const [statusAddress, statusBump] = await sdk.statusPda(mint.publicKey);

        //when
        await program.rpc.createStatus(
            statusBump,
            {
                accounts: {
                    authority: authority.publicKey,
                    status: statusAddress,
                    mint: mint.publicKey,
                    systemProgram: SystemProgram.programId,
                },
            });

        //then
        ...
    })
});
```
Could anyone enlighten me why I'm getting this error?
ok
like <@!134416332509675520> said - the mint was not initialized
you might not be providing the right account, or the error is on another line, but we can't guess with that one line alone
please provide the entire Accounts struct
that was it, thanks! ❤️
Yep, you're correct, you can transfer stuff just fine (the owner of the source account has to sign, but that's it)
That error message here would mean that you didn't actually pass a mint to the program (maybe it hasn't been initialized yet?)—it's trying to say that the account's `.owner` isn't the spl token program
Huh, I guess that error message is slightly misleading <@!501570363566587905>, maybe it should say something like "The given account is not owned by the *expected* program"? Since it can get raised for e.g. a TokenAccount
`Account<'info, Mint>`
provides additional validations
```
        mint::decimals = 6,
        mint::authority = authority,
```
and also makes transferring tokens easier (it wraps some of the clunky solana code)

so I think that trasnferring USDC is a perfectly fine example for that.
you cannot mint it, because you're not the authority - obviously, but transferring should be possible.
or am I getting this all wrong?
It doesn't depend on the mint, right? Essentially its about the program that is transferring the said mint. Does it have the rights to do it?
what if you want to transfer USDC or wrapped SOL?
Shouldn't that depend on the program? You can't allow any program to transfer your coins?
another stupid question 😉 
`pub parent_1_mint: Account<'info, Mint>,` (with no other modifiers like mut or anything)
based on anchor examples - should work perfectly fine
but it throws 
`     Error: 167: The given account is not owned by the executing program`

why does it have to be owned by the program?
AFAIK - it makes no sense, because programs should be able to transfer coins of mints that they don't own
thank you ❤️
ohhh, that seems pretty straight forward haha let me give a shot
You can have it be `pub program_authority: AccountInfo<'info>` (in fact, you don't even need to create an account at that address, you can just pass the address from the client and it will show up in your program in an uninitialized/empty state—but your program can still sign for it!)
Ah, yeah, that's me being cute (the mint in my example already lives at a PDA so I can reuse it to be its own authority, just for fun)
alright, I am back lol I think I understand a little better what I am trying to do. I just want to create a PDA that will sign transactions for my program. I saw your anchor-token-studies example, I see you use `pub mint: Account<'info, Mint>`, but if I didnt want to use the Mint type, I was wondering what would be the best way to define my own simple signing account. Or if there is another type I can import that will stand as a simple signing account.
😂 
yeah, it was my teammates' home!
amazing, thank you!
What does your Anchor.toml say about your provider wallet?
hey guys
I started getting this error all of a sudden:
```
To deploy this program:
  $ solana program deploy /home/wooha/work-unix/blockchain/the-slow-patrol/combiner-blockchain/target/deploy/combiner.so
The program address will default to this keypair (override with --program-id):
  /home/wooha/work-unix/blockchain/the-slow-patrol/combiner-blockchain/target/deploy/combiner-keypair.json
Error: Unable to read keypair file
```
a couple of things to note:
- anchor init tests work
- my teammates run the same exact code (the same commit) and it works for them
- the keypair file exists in the deploy directory and has proper content
- if I do a fresh clone of the repo - the problem persists

any idea where to start debugging?
hey, has anyone here successfully done CPI against the candy machine program? trying to call the mint function from a program i'm working on, but running into issues trying to pull in the the candy machine:
```yml
name: Release

on:
  workflow_dispatch: {}
  push:
    tags:
      - "v*.*.*"

jobs:
  programs:
    runs-on: ubuntu-latest
    name: Build and publish the SDK
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
          registry-url: "https://registry.npmjs.org"
      - run: yarn install
      - run: yarn build
      - name: Publish
        run: yarn publish ./ts/dist
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
```
This can look something like this? Not sure. Never done this before. If anyone can help out it would be great! 🙏
I use omnigraffle
Also! Shouldn't we write a github action to take care of pushing the npm anchor thing automatically? Like say parse a commit tag and if it says some version run like `0.18.2` that should trigger and push it to npm.
Idk how the current flow is but I did come across a tweet in which armani mentioned he forgets to push it 😛 
Thoughts? Could be a cool little exercise to write one too! Know nothing about it, but willing to learn and work with someone who is up for it!
thanks!
what diagram software do you use
Opening a issue right away
A check while creating projects to not allow keywords?
Ran into a very trivial problem or maybe not. 
Tried to run `anchor init try` -> Project gets created. 
Fails obviously when I run `anchor test`
```js
error: expected identifier, found reserved keyword `try`
 --> programs/try/src/lib.rs:6:9
  |
6 | pub mod try {
  |         ^^^ expected identifier, found reserved keyword
  |
help: you can escape reserved keywords to use them as identifiers
  |
6 | pub mod r#try {
  |         ^^^^^

error: expected expression, found reserved keyword `try`
 --> programs/try/src/lib.rs:6:9
  |
6 | pub mod try {
  |         ^^^ expected expression

error: aborting due to 2 previous errors

error: could not compile `try`
```


///////////////////////////////////////////////////////////////////////////////////////////////

Thanks!
my fomo would've been sky high
I wanted to get a pic of me and armani to send ya, but he remained elusive.
i use the custom error on constraint all the time, such a good addition
yo, long time no chat.  missed ya in PT
oh hey there buddy!
Especially now that you can custom err in there
FWIW, I prefer throwing it all in constraints 😆
right, ok that makes sense
And so all other checks that yhou would have, e.g., in Solidity, would go into `#[access_control]` or `require`.
In my mind, the primary goal of `#[derive(Accounts)]` is to make it impossible for a client to inject unexpected data/accounts.
i guess thats a good line to draw...if validation is relevant to account data values, throw into access controls...account relationship or ownership goes with `constraint`
true
I would put the last one in a `constraint`.
Yea but they are related to program lifecycle state. Rather than account  relationship validation.
^those could all go into `constraint`s hahah
but that's also removing all the `constraints` from the account declarations in an attempt to consolidate
Yea that looks nice.
at the moment, i've been doing something like:
```rs
impl<'info> Init<'info> {
    pub fn prevalidate(ctx: &Context<Self>) -> ProgramResult {
        require!(
            ctx.accounts.listing.open,
            CustomErrorCode::ShipListingIsNotOpen
        );

        require!(!ctx.accounts.offer.active, CustomErrorCode::OfferIsActive);

        require!(
            ctx.accounts.fee_escrow.owner == ctx.accounts.borrower.key(),
            CustomErrorCode::TokenAccountOwnerMismatch
        );

        Ok(())
    }
}
...
...
...
#[access_control(Init::prevalidate(&ctx)]
pub fn init(...) -> ProgramResult {...}
```
yeah i'm trying to come up with the best pattern for utilizing them. 90% of requirement validation can be done with `constraint` . just can't decide what the cleanest approach is for complex instructions with lost of validation
I try to use constraints for all account validation. Access control for specific instruction invariants. E.g., this function can only be called under certain conditions. And require for other misc invariants similar to an assertion.
is there any good reason to use either `constraint` vs `access_control` with `require!`'s over the other? (expect for when a requirement isn't related to an account)
The alternatives in the meantime are to figure out the actual pubkey bytes (slightly annoying) like `Pubkey::new_from_array([1, 2, 3, ...])`, or to just hardcode the string itself
Not 100% sure how useful it is, I just run into wanting it every now and then
No, I realized I never made one (davoclavo and I paired on implementing it at some point)
🤔 do we have issue for this?
Pretty sure is the Token Metadata Program haha I just trying to load and modify NFT metadata on chain and its been a headache
The other one I want (for anchor at least) is `find_program_address!` for when you have static seeds (idea curtesy of <@!103986638320861184> a while back)
Sick
Yeah 🎉 `pubkey!` also was backported to 1.8, so we should able to use it soon.
Ah, ok, got it. Which program does own it?
Looks like <@!448034961652449283> got this merged 👀 https://github.com/solana-labs/solana/pull/21245, so at some point you'll be able to just do `pubkey!("asdkla;sdf")` 🙇‍♂️
But its not lol thats what makes it weird haha
Yeah, assuming it's supposed to be an account that your program owns
I guess defining TheAccountType is what is weird to me. I guess I could just do something like this ```#[account]
pub struct TheAccountType {
    pub data: u64,
}```
I want to make sure there is a central authority in my contract, so I want to hard code that authority's pubkey on chain
`static authority: Pubkey = "3sqYF5JAHWgQqCX8F9Q2PVHMHK2y5QS7YE8cTDQSypL7"`
How do I save a pubkey on chain like this?
Can not use `Account<'info, TheAccountType>` and have anchor deserialize it for you?
I cant seem to deserialize my account data. I basically have an `pub base_account: AccountInfo<'info>` I am trying to use try_deserialize with ctx.accounts.base_account.try_borrow_data()?. But not matter what combination of * or & I use, I cannot seem to get the data types to match up. I figured I am probably misunderstanding something haha
let me see if I can get it
Like, what does its entire account state look like, not just the mint. The mint is currently all zeros (sort of funny that that prints as all 1s in base58 🙃), so I wonder if everything else is zeros too
Hmm, I'd be curious to see what the `otBuyerAccount`s `.data` looks like
my observation is that `otBuyerAccount.mint` is `11111111111111111111111111111111`, but should have been aligned with `mint.pubKey`
this sounds plausible, but I checked my code the mint `mint.pubKey` should've been initialized already. I managed to print its pubKey and its not `11111111111111111111111111111111`
Oh, think I misread your q, hmm
Have you initialized the mint? I bet what's happening is that the mint hasn't actually been initialized yet, so it shows up in your program as an empty/uninitialized account, which will be owned by the system program.
Hi, Im writing some testcases and seem to be bumping into a wall. Basically I want to create a token account based on existing  Mint. I did 
```
    const otMintClient = new Token(
      provider.connection,
      mint.pubKey,
      TOKEN_PROGRAM_ID,
      buyer
    );

    const otBuyerAccount = await otMintClient.createAccount(
      buyer.publicKey
    );

```
However when I get it tested against the rust program, `ctx.accounts.otBuyerAccount.mint` seems to be `11111111111111111111111111111111` but not the `mint.pubKey`  does anyone have any ideas? Thanks!!
amazing, thank you!
`program.account.myAccountType.all()`
https://project-serum.github.io/anchor/ts/classes/accountclient.html#all
Ah, neat! I didn't know that 👀
See anchor js `AccountClient`
You can use the anchor method to automatically filter program accounts by discriminator
oh actually, i think this is exactly what i need, i think the filters will do it (`memcmp` and `dataSize`, even if it takes some low-level testing), probably a case of RTFM 😅 
sorry for the confusion, thanks
Basically you either have to "fetch everything and check" or have some other way to keep a list of the desired addresses 😬
Yeah, to get the different types I'm not sure there's an easy way to filter beyond that `filters` arg :/
So guessability of addresses doesn't really hide much I don't think (as far as I understnad it)
haha yeah that's what i'm doing, but there are different account types!
Not sure if this matters, but at the end of the day you can always fetch all accounts owned by a given program with https://docs.solana.com/developing/clients/jsonrpc-api#getprogramaccounts
True!
i think the problem is not knowing the list of users that have interacted with the system, i'm trying to create a sort of social/reputation program
By bumps do you mean seeds here? (Not sure why you need to reconstruct the bumps rather than just using the seeds to `findProgramAddress`)
I know what user i want to look at -> I derive his account address to fetch the bumps -> I reconstruct each PDAs by taking the account and the bump corresponding to the action I want to look at
How come other clients couldn't look up actions for other users?
ok yeah that's my understanding as well, so then in my use-case the client couldn't look up the actions of any other users, which is my goal
Like "user XXX did action YYY"? Given a small list of action and a precise user, it only requires one account per user storing one bump for each possible action.

From my understanding, bumps (coupled with seeds and program id) are used to find to first address that CANNOT have private keys. Knowing that, solana allows signing from this address if everything matches
in my use-case the PDAs would be generated from user activity, so it wouldn't be possible to know what users have done in the system as a client -- does that make sense? bumps are unique per seed as i understand it and limited to 255 (tbh i don't fully understand them but i think i understand their effect/limitations)
I have no idea what your PDAs are for, but most PDAs should be easy to recreate being given the bumps, which are compact in size
i remember something about an account type as the first byte but can't find it anywhere
i think that might be tricky with a very large list, and cost a lot
I often find code storing bumps and/or seeds to recreate the address. You could store these in an account that you retrieve to reconstruct the addresses you want
i wrote some weird code that effectively tries to decode them all and then filters out errors, i assume there is a better way though
let's say i have a program with many types of PDAs (built in anchor), what is the best way to pull a list of only a specific type from the client?
One thing you can try: https://discord.com/channels/889577356681945098/889702325231427584/906661496220704778
Any ideas on how to debug `Unable to start test validator. Check .anchor/test-ledger/test-ledger-log.txt for errors.`? `solana-test-validator` works fine and the log has nothing
super grateful for your help <@!134416332509675520>
ahh okk thanks for the clarification 🙏
Ah, so yeah, I guess at the end of the day you need to bake something in no matter what
That's one advantage to just baking the pubkey into the program I guess. Otherwise, yeah, you'd have to run an instruction post-deploy
> I'm saying you'd store the admin pubkey in the account
is there a way to do this before deployment tho? Or its like we will need to create a handler and real admin needs to call it to make this logic work
Right, no way to prevent that in general, hence the need to produce a valid signature (that proves the caller knows the required secret info)
Ah, I'm saying you'd store the admin pubkey in the account—you'd still ultimately have to produce a signature from that pubkey though, which (hopefully!) no one else can produce
cuz essentially anyone knows the handler function signature will be able to access
> e.g. store the current program's authority in a PDA
My concern with this approach would then be someone trying to frontrun the real admin
I guess it will depend on how the accounts mapping is structured then
yes good point
So I should amend what I wrote above, you don't need to hardcode the authority pubkey, but you do need some way for your program to know what it's supposed to be (so could have your program write it down in an account it owns)
Otherwise I suppose you could do something with accounts, e.g. store the current program's authority in a PDA
If you've made the program upgradeable (it is by default), then would be easy, just swap in the new pubkey
will that be possible?
interesting, another follow up question. Having need to hardcode admin pubkey in the program, lets say if someday I want to transfer the admin ownership to another pubkey
Yes
thanks. Will this mean I will need to hardcode the admin_pubkey in the program?
and then doing
```.rs
accounts: {
  admin: ADMIN_PUBKEY
  ...
}
```
Not that I'm aware of, but it would be as simple as having a
```.rs
#[account(address = ADMIN_PUBKEY)]
admin: Signer<'info>
```
I see. let me try it out. Are there any examples for this in the anchor codebase?
As far as I know, only in the way I outlined above, by forcing a known public key to sign
I think my question comes from a more managerial perspective of the program. I'd like to have some handlers that only the program owner can call. Is there a way to achieve that?
But basically if you want to double check its person X calling you, you need to verify that person X's account (based on their public key) signed the tx, not sure how else you can do it
And the program_id isn't a PDA, it's just a regular keypair address (so not 100% sure how you're planning to sign for it from the client...)
Ah, no, I mean literally `program.program_id` (definitely weird, but not sure how else you'll verify the caller is the owner—pretty much the only way to verify who someone is is to force them to sign something)
do I use this function?
```
await anchor.web3.PublicKey.findProgramAddress(
    [Buffer.from(seed)],
    programId
  );
```
The thing is if its a program itself (not PDA), do I still need to pass the seed in?
do you mean I pass the program as an account to the program itself?
I suppose you could have the caller pass the program_id as an account, and check whether they signed?
Hi there, does anyone know if there is a good way to check in solana program whether the caller of a handler is the program owner (the person who deploys/owns the program)? Many thanks!
Got it! Thanks a lot, Alan!
But overwriting the account data might be a good idea because of the sneaky thing I mentioned above, that the account doesn't actually get closed until the end of the transaction—so in principle someone could stick another instruction in the end of the tx that gives that account a lamport lifeline and somehow keeps it alive :/
Not strictly speaking, no. You just need to drain its lamports.
Isn't enough to just remove all the lamports from it?
Just another question. I read somewhere that I need to clear account data for the account to be closed. Is this right?
Yeah, since you'll have transferred some lamports to the vault (but yeah, like you said above, sounds like you could just send them directly to the user and skip sending them to the vault)
But if I do that close manually at the beginning of my instruction, then I could pay the user from the vault, right?
Ah, got it—yeah, the close happens at the end
Ok, sorry. So, let me rewrite my question. The scenario is this: my program has an account called "ledger" that holds X lamports and have another PDA account called "vault" that has 0 lamports. **Now if I use close = vault, will I be able to pay part of X to user from the vault in my instruction? I think the close only happens at the end of my instruction, so the answer is no?**
How are you using `close`? You have to say `close = who_to_send_the_lamports_to`
When I use `close` in Anchor, the lamports that are in the accound are not transferred automatically? Maybe not since I specify no receiver. I am confused, what does `close` does?
The scenario is this: my program has an account called "ledger" that holds X lamports and have another PDA account called "vault" that has 0 lamports. Now, within a transaction I want to remove the X lamports from the ledger to the vault, after that I want to pay part of that X to a user who's address is specified in ledger data. Ok, now that I am writing it I can just send the lamports directly to the user.
But yeah, in general the account isn't really "closed" until the end of the *transaction*, not the individual instruction
What I want to say is removing that lamports at the beginning of my instruction
Whether or not the other program zeroed out the accounts data is up to that program I think
If you're closing it via CPI, then I imagine that that other program made sure to drain the account's lamports (you probably had to specify where to send them).
If I close an account at the beginning of my instruction (through CPI), will I be able to use the lamports that were on that account in my instruction? But still read the closed account data?
there is a typescript file in anchor to translate those error codes, that is usually where i go to map anchor errors to what it is
If you decide to dig in further, in general the way you have to debug these kinds of errors is just go source-diving and see if you can spot where an error could be getting raised (I'm not sure in this case, would have to see more code)
Probably something related to method not supported or etc. It works after I switch out the devnet program id for the mainnet program id.
I am running into `0x63` as well, but i have not found any docs on it. Were you able to find out?
It doesn't seem to specifically say in the docs
Does marking an account as a ProgramAccount enforce automatically that owner == programId?
Then again I also can't get it to work for closing accounts that are owned by the executing program
Nevermind I'm pretty sure it's a no
Hi guys, I'm looking at the #[account(close=<target>)] attribute. Is it possible to close token accounts automatically with this?
It's not possible to use 'Keypair' on-chain.
Is it possible to deserialize an instruction with a different method?
Is there any way to conditionally run code if running on localnet?
check this that i made. otherwise would have to see your code
https://discord.com/channels/889577356681945098/889606719829835816/909947411550580766
It inits the account, only if needed.
It's from the account already being in use
replace `load_init` with `load_mut`..
Any advice on decoding acountInfo data on chain?
what is `init_if_needed`?

Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 1: custom program error: 0x0
Has anyone seen custom program error: 0x0?
Hi, does anyone have any experience using the serum-ts library?
hell yeah...  `init_if_needed`.  Armani is the best.
Hey!
I'm trying to create a new (metaplex) metadata account with `process_create_metadata_accounts_logic()`, but I have issues with accounts lifetime:
```
cannot infer an appropriate lifetime for borrow expression due to conflicting requirements

note: ...so that reference does not outlive borrowed content
note: expected `&anchor_lang::prelude::AccountInfo<'_>`
         found `&anchor_lang::prelude::AccountInfo<'info>
```

Here's the code snippet:
```
fn create_new_sloth_metadata(&mut self) -> ProgramResult {
        process_create_metadata_accounts_logic(
            metadata_program_id,
            CreateMetadataAccountsLogicArgs {
                metadata_account_info: &self.metadata,
                mint_info: &self.mint.to_account_info(),
                mint_authority_info: &self.authority,
                payer_account_info: &self.owner.to_account_info(),
                update_authority_info: &self.authority,
                system_account_info: &self.system_program.to_account_info(),
                rent_info: &self.rent.to_account_info(),
            },
            data,
            true,
            true,
        );
Ok(())
}
```
Could anyone enlighten me how to deal with the accounts lifetime?
ya, im not the one to ask lol
`signer::keypair::Keypair`
Mind if I ask which class you need? I ran into the same problem, so I just avoided using it
This feels like either a dependency conflict or a rust configuration issue to me
I just asked this in the Soalana discord and they said the sdk can also be used for on-chain. I need access to some of the classes that weren't ported over
I think you can only use solana-program for onchain stuff, but someone can correct me if I am wrong
Anyone have thoughts around why adding the solana-sdk to my Cargo.toml would result in a build failure? Here's a gist of the build log and relevant Cargo file: https://gist.github.com/theycallmeswift/e095e2e5510c749df10dbbcb98184267
Thanks!


///////////////////////////////////////////////////////////////////////////////////////////////

`fn new_order_v3(&self, _ctx: &mut Context, _ix: &mut NewOrderInstructionV3)`
<@!501570363566587905> how about making the instruction data mutable in the permissioned market middleware?
Got it, thank you! 🙂
The tokens don't live directly in your wallet, they live in other accounts that are just associated with your wallet somehow
Your wallet's sol lives right in your wallet's account (the one that lives at your wallet's pubkey)
And yes
Okay this makes sense, thank you
Your wallet's sol?
Like, whose sol
What sol are you referring to here?
Each token account is owned by the spl token program (owned in the sense that only the spl token program can mutate those accounts or spend their lamport balance).
Think I'm getting confused: A user has a wallet, they have different SPL tokens in their wallet. Their SPL tokens are stored in separate token accounts and owned by ?? a program? Then where is SOL stored?
Just double checking, are you expecting the program itself to have an interesting sol balance?
How can I retrieve the SOL balance of a program within the program itself and not on the client side?
I needed to add
```
use std::str::FromStr;
```
nevermind its there hahaha. doing too much at once. thanks
ok cool. i'll look around more. i dont see that method in the docs tho? https://docs.rs/solana-program/1.8.4/solana_program/pubkey/struct.Pubkey.html
Ok, it definitely works haha, that's how I would do it
hmm I may not have the right use statement. I didn't play around with it too much
What didn't work about `Pubkey::from_str`? Definitely works for me 🤔
scratch that, this is also a no go
I'll try that out too. no luck with from_str but i did get this to work
```
let correctAuthority = Pubkey::new(b"MY_PUB_KEY");
```
Or if you wanted, you could also just do `updateAuthority.to_string()` probably
Try `Pubkey::from_str("asdfasdfa").unwrap()`
simple ? for you guys, trying to find the correct syntax to turn a string into a PubKey in rust code
```
if (updateAuthority != "PUBKEY") {
   return Err(ProgramError::InvalidArgument.into());
}
```
simple question for you all, trying to find the correct syntax to turn a string into an pubkey in rust code
(i also think i'm not running up against the limitations that would require me to use `zero_copy` in the first place, fwiw, but was running into issues not using it)
curious to know the outcome once you figure it out 🙂
hm i suspect then i'm not doing this correctly. gonna dig in a bit
So e.g. if you want a really big account, bigger even than the 32kb heap, you'd be forced to use zero_copy (or a raw AccountInfo, etc.)
Yeah, the underlying data will stay wherever it is (I'm actually not sure where that memory is haha, about to run an experiment to check)
at a higher level, is `zero_copy` supposed to deal with these limitations of the stack? since it doesn't try to move memory over from where it's originally located, does that mean the stack shouldn't be introduced in the first place? or am i misunderstanding
got it, that makes sense
Only sort of ^. When you do `Box::new(something())`, something() uses the stack real quick before getting moved to the heap :/
Box actually (interestingly) *doesn't* help with this 4kb issue necessarily, since any deserialization you do before boxing still happens on the stack :/
i need `Box` explicitly to avoid the stack, right?
I wouldn't expect box to help with zero_copy 🤔 Are you even inadvertently letting that array get on the stack?
i guess that's the point of `Box`
feel like i'm doing this wrong though. this still sets a 4kb max size on the struct i'm `zero_copy`ing, right?
(`#[inline(never)]` on the `default()` impl helps)
hm seems to be a result of the size of one of the structs i'm `zero_copy`ing. it has an array attribute, if i reduce its size it works
I found on Solana Discord that 128 is just a number they hardcoded for rent calculations. Currently metadata does not take that space, but it might in the future.
kinda surprised, stripped my fn down to simplest form to debug. am using `zero_copy` though, does that make it necessary?
was running into the `Access violation in stack frame ...` issue
lol playing around with `Box` right now myself
Is it possible there's an explicit system program function for closing accounts which differs from just removing the Sol rent
thanks <@!134416332509675520>, will check that
Or https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/, famous escrow example (in pure solana, not anchor)
Can also search the anchor repo for `anchor_spl` for tons of examples
Mm, I feel like most anchor examples online do a token transfer haha—I pushed this to gh the other day, it's yet another escrow example (tons of them if you search online): https://github.com/cqfd/quidproquo
<@!134416332509675520> Do you know any example of that in rust?
Yes, I want to make a regular token transfer.
Can you say more? What does safeTransferFrom do that a regular token transfer wouldn't in solana? As far as I understand it (not an eth programmer), safeTransferFrom just aborts on failure, which solana already does automatically
That's more clear. (The prints i sent are from solana docs)
Hey,
Does anyone know any library in rust which provides fn similar to `safeTransferFrom`?
This suggests that accounts with zero balance get removed at the end of the tx, not epoch, fwiw: https://solana.wiki/zh-cn/docs/account-model/#zero-balance
Just curious about what that 128 bytes are for
Sorry, maybe it does though
Ah, ok, I'm not sure that's supposed to directly correspond to the size of AccountInfo (not sure though)

Where are you getting 128 bytes from?
I'm actually pretty confused then about what an epoch is, I've definitely witnessed accounts getting closed at the end of a single tx in tests. Hmm.
is_signer and is_writable is not write on account metadata
But
Maybe bools take 8 bits
```
    pub key: &'a Pubkey,
    /// Was the transaction signed by this account's public key?
    pub is_signer: bool,
    /// Is the account writable?
    pub is_writable: bool,
    /// The lamports in the account.  Modifiable by programs.
    pub lamports: Rc<RefCell<&'a mut u64>>,
    /// The data held in this account.  Modifiable by programs.
    pub data: Rc<RefCell<&'a mut [u8]>>,
    /// Program that owns this account
    pub owner: &'a Pubkey,
    /// This account's data contains a loaded program (and is now read-only)
    pub executable: bool,
    /// The epoch at which this account will next owe rent
    pub rent_epoch: Epoch,
```
These altogether do not seem to take 128 bytes
yes
Probably easiest to see that by jumping to source (you mean on AccountInfo?)
Anther basic question: what attributes account metadata holds? address, owner, lamports, what else?
Ooh, interesting, thanks for finding that
Didn't understand very well. But seems until the end of current epoch
Although hmm, I've never actually verified that 🤔
Until the end of the current tx I think
anyone knows what Ian meant by this tweet:

`Warning users of program upgrade keys that are not PDAs`

https://twitter.com/simplyianm/status/1459962237309890568?s=20
I was thinking, maybe us who are making games can come together with a uniform standard for on chain metadata accounts
Are you interested in trying to have things like phantom wallet and solanart display the data in your PDAs in the future?
anchor will change the discriminator to mark account as deleted otherwise I belive to the end of a block
I have a rent-exempt account. I remove all lamports from it, the account will still be available until the end of the current epoch, right?
yeh, i guess it's a sign to not use intermediate structs for storing accounts when preparing for a CPI
ugh, i finally updated to using `Account` and `Box<>` everywhere. But now I can't apply `.clone()` to those accounts anymore
maybe they didn't understand your question
but like, serum dex gui is a very specifically serum question and serum doesn't even use anchor
ah ok

they send me to anchor discord, and anchor discord send me to serum
<https://discord.gg/5tkHmYC4>
Try asking in the serum discord. Plenty of devs there who might be able to help
any help¿?
a simple question.. if you deploy the dex-ui ( adding the referal accounts ) i'm able to trade, BUT not able to settle the funds and retrieve them to my wallet
eerror says InitializeAccount.. but the referal account and my account is above 0.1 sol
steps on the serum docs to host a UI a pretty simple, but something additional might be missing
hi devs!
Thanks a lot and np at all! DM'd
Ohhh nice haha Looks really well done! You should also dm me the Twitter. I appreciate you taking the time to throw ideas back and forth haha
A game, I posted a few previews in the <#895018937161510993> channel !
Can I ask what you are working on?
This is looking like the the easiest way to go haha
On our side we have the initial metaplex standard + our own pdas for the nft stats/level etc...
Just build on top of metaplex with your own pdas and hopefully some kind of supports come sooner or later
Right, which isn't too much work, and maybe the would be willing to do it for a project generating enough attention. But if I can just do this without changing the standard, it will be easier lol
Yes the solution would be having them support this, like they parse the initial metada url, get the pda they have to query and display its data
But that wouldn't be trivial on their part
If I could convince them to read from my pda instead of the metaplex pda, then everything would be solved haha
Yes haha
The issue is simply having phantom & other services to display your updated data right ?
Thanks! I'll check it out haha Another quick solution is to store mutable character information in a PDA and the other main attributes that don't change in the standard metadata structure. People won't be able to see the mutable characteristics in their wallet or on an exchange, but they will technically be on chain. And who knows, maybe I can convince  them to support displaying the metadata from my pda lol
Might be a solution
Have a look at https://aleph.im/
Ya, well the end goal is to allow anyone to call my program from anywhere. Since the program follows specific rules, it won't matter how or where they call it. If I start bringing in web2 development, it kind of defeats the purpose in my eyes. But this goal might be silly, considering the limitations I am dealing with.
You are in control of everything this way, that's the solution that will the least expensive and give you more control. It all depends on how you want to generate your character and update the data.
Hmm better would be then what Afro suggested
Right, so you are just saying host the url on my side and change it on my side haha
My first concern is, how do we make sure the arweave done at runtime is legitimate. Someone could try to pass a malicious link with the wrong metadata and I wouldn't be able to check that on chain.
Ofc, if you also have your own PDA with your own data you will need to find a way to also have them in it
I think you still can do. Upload the file to arweave at runtime and then change the metadata onchain and on response of that tx do a updateMetadata call to change the URI with new arweave file. Check the mintNFT.tsx on metaplex repo it does everything runtime
It won't be an issue, you will have the correct data in your metadata file, the url will just be hosted on your side
Well the next problem becomes displaying the attributes since most things like phantom wallet and solanart parse through the URL, but this does have me thinking about using a different hosting option.
Arweave/ipfs is cool for keeping files "forever" but if you need to do that do it + nothing prevents you from uploading to ipfs/arweave when you detect changes on these urls & re-updating the metadata file url with the correct data
Not really, arweave isn't the default hosting option, you could use your own backend & generate the metadata file by checking the arguments/parameters passed in the url ```https://myserver.com/metadata/?level=1&power=blablaba&color=333``` and so on
Well actually, I just want to change the metadata onchain, but I have to go through arweave to do it lol
Ya pretty much.
You wanted to have the metadata file generated on chain & uploaded to arweave ?
Ya defeats the point tbh I want to have a 100% blockchain NFT game, but kind of hard to do when the NFTs themselves are half off chain hahaha
On chain ? Not really doable, you can "talk" to the outside from within a program, one way would be to store something in an account and have an outside script querying it
Thank you! I actually realized everything I'm doing is pointless unless I can upload date to arweave on chain or convince everyone to change their metadata standards lol
Here is how I do mine on top of metaplex.
```#[instruction(bump: u8, mint_key: Pubkey, _mint_bump: u8)]
pub struct MintNFT<'info> {
    #[account(init, seeds=[PREFIX.as_bytes(), &mint_key.to_bytes()], bump = _mint_bump, payer=payer, space = 8+16+8)]
    ows_metadata: Account<'info, NftData>,```

I use a prefix + the mint pubkey
Im on to the next stage of my project. Does anyone know if it is possible to upload data to arweave on chain or seen it done? lol
true. now u can simply do 
```
Metadata::from_account_info(ur_account_into)
```
lol
my snippet dates from when the metadata wasn't even a crate
the best code is the one that you don't have to write 😄
for the js part - just use this: https://github.com/metaplex/js
for the rust part - just use this: https://crates.io/crates/metaplex-token-metadata + what <@!831450660146642974> told you 😉
if the called has to pay - no 
but you can reserve more space when creating the PDA (or any other account for that matter)
Hey guys, is it possible to upgrade a PDA with new variables similar to how you extend table structure in a db with the caller of the upgrade paying for the  incremental rental for the larger memory space?
thank u ser
ur a life saver
but that should be it
also don't forget to check account.owner
```
use solana_sdk::borsh::try_from_slice_unchecked;

let md: nft::Metadata =
            try_from_slice_unchecked(&account.data).unwrap();
```
That is from a piece of code i have that is inspired from metaplex contracts
it is one function, let me find one example
or any starting point really. not exactly sure what to even google for 🙂
Fantastic. ive been looking desperately for an example of how to write a custom deserializer. happen to have a link that i can read through?
you can decode quite easily
but
correct #[account]
Thank you! meaning the structs in the metadata program are not defined with anchor [Account] tags?
So you would have to deserialize and check it yourself i think, still you can use the borsh i believe
The Metadata program is not an anchor program
you can very well deserizalise what you don't own provided it has the traits
I don't think that is the reason
what I have so far: 

app.js:
Finding the PDA of my NFTs metadata in js via
```let [metaDataPubKey, _bump] = await PublicKey.findProgramAddress(
      [Buffer.from(anchor.utils.bytes.utf8.encode("metadata")),
      METAPLEX_PROGRAM_ID.toBuffer(),
      new PublicKey("MY_NFT_MINT_ADDRESS").toBuffer()], 
      METAPLEX_PROGRAM_ID
    );
```

lib.rs:
I defined the metadata and Data structs
```
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct Data {
    /// The name of the asset
    pub name: String,
    /// The symbol for the asset
    pub symbol: String,
    /// URI pointing to JSON representing the asset
    pub uri: String,
    /// Royalty basis points that goes to creators in secondary sales (0-10000)
    pub seller_fee_basis_points: u16,
}

#[account]
pub struct Metadata {
    pub update_authority: Pubkey,
    pub mint: Pubkey,
    pub data: Data,
    // Immutable, once flipped, all sales of this metadata are considered secondary.
    pub primary_sale_happened: bool,
    // Whether or not the data struct is mutable, default is not
    pub is_mutable: bool,
}
```

and added the accountinfo to my instruction account
```
#[derive(Accounts)]
#[instruction(bump: u64)]
pub struct Stake<'info> {
    pub metadata: AccountInfo<'info>
```

Now just trying to figure out how to deserialize the metadata:AccountInfo to the Metadata struct. Bummer that Anchor doesn't allow me to use Account<'info, Metadata> since my program does not own the metadata account.
Hey I'm working on exactly this same thing. Looks like using AccountInfo<'info> might be the way to go, since the metadata account isnt owned by my program. Very curious to see what you ended up with here, if you wanna compare notes let me know happy to send a DM
you can do `anchor test -- --features my-cargo-feature`
How do I enable a certain cargo feature when running anchor tests?
More of a #random question.
i know i miss something
Step 1: we have order book, great lol
Step 2: we need liquidity, let's post liq into the order book
Step 3: we now have a perfectly convoluted system that looks like an AMM to users
got it haha I think I was over thinking it
Whenever you create an account in solana you *always* have to specify its address, so if you get to pick the address (or the seeds at least, for the PDA), then you know where the account will live
But I can look around haha
Ya, i think we are on the same page, off the top of your head, is there an example of someone creating a deterministic address? I am just not sure of the mechanics haha
a bit like metadata itself, it is derived from the mint, you can only have 1 account per mint
no you can create it and then there can be only 1 per NFT, at a deterministic address
Right, can you assign a specific address at creation?
so it can be found deterministically
a PDA, with your own scheme
On this same line of thought, I wonder what would be the best way to associate an account with the initial NFT. Is there a way to create an account with a specific pubkey or specific id that lets you reference it later from the NFT address.
That means you're passing the wrong kind of account someplace (the code expects it to be a Foo but you're passing a Bar)
Any of you good gents seen this error before? Error 162: 8 byte discriminator did not match what was expected.
A lot of extra work, but I am not sure if there is a better way haha
Well I am thinking of just creating a secondary metadata account  for each NFT and attaching it to each NFT haha That way I can access the data on the secondary metadata account and update the primary metadata account so the protocol can still interface with everything out there.
lol
maybe `sol://<PubkeyBase58>`
like if you wanted to make some sort of on-chain NFT generation, alteration. Then you could point to another program account and do some stuff with that
but that is a string, so a bit smelly 😒
I am wondering if it would make sense to be able to point to another account, like on ETH the NFT can be fully on-chain
Welp, everything I have done so far is out the door haha Didnt click in my head that NFT metadata is saved inside a uri and there is no way of getting uri data haha At least it was a good learning experience lol
sorry for that
yeah looks like you nailed it!
Ok, interesting—I thought that 0x1 meant insufficient funds but wasn't sure
cause if i mimic the balances it doesnt go through, then after airdrop it does
hmm it is something with the balance
yeah that sounds annoying
Yeah, if I were you I would probably have to start editing the solana cli source to see if I could get better error messages 🙄 Which is pretty annoying to do because I'm not sure how to do so without it taking 5 minutes to rebuild.
yeah lemme move back to devnet and mirror the mainnet balances
hahahaha
Hmm. Lol, it is kind of silly how terrible the deployment error messages are, wtf.
but the same error happened on devnet with over 5 balanace
I mean on devnet haha
can't airdrop on mainnet 😅
Just to double check, what happens if you re-airdrop yourself some money?
but program only takes 1.17 to deploy
ish
1.2
What is your account balance? I'm not sure then what would cause that error (or why anchor test would fix it)
anchor build, solana address..., anchor build, anchor deploy
```
===============================================================================
Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```
okay so just tried all the steps the same way but i get the same error:
and trying for mainnet
oh im doing these on devnet
Fwiw this is why I do all of my tests without a local validator running (just letting anchor test spin one up for me), since it's very easy to make mistakes like this!
maybe i just wasn't running another anchor build and i thought i was
oh shit
i get a very specific "not enough funds" error when i dont have funds
Tbh I'm not sure why you're getting that specific error (isn't that when you're out of funds for the deploy?)
i do think i was doing another build before deploy, but let me try again quick
Ah, ok, hmm
oh damnit i thought i typed that
Right, you're missing an extra step, *another* anchor build
then i get that error, but if i run test first all is well
clear build folder, anchor build, solana address -k target/deploy/... , replace declare_id and anchor.toml file with the output, then anchor deploy
so my flow is:
```
===================================================================================
Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```
What's the actual error?
so my flow should be:
The reason why anchor test sneakily "fixes" things is that it reruns anchor build under the hood for you
right i've done that and i hit the same error
Ok, the issue you're probably hitting is that if you change your deployment id (so you change it, then edit declare_id!), you need to *rerun* anchor build before doing anchor deploy.
yes
Are you changing your `declare_id!` a bunch?
for some reason i'm unable to deploy my program before running a test
hey guys, anyone have a free minute to help me troubleshoot a deploy issue?
Is there a QR code reader for wallets such as Phantom or even FTX and things to send money to


///////////////////////////////////////////////////////////////////////////////////////////////

I would use Clock::get() instead of passing an account  in the instruction  and getting the Clock from it though.
I would think it is safe enough
Could this be related to my issue (https://discord.com/channels/889577356681945098/889577399308656662/910897381011226645) ? The error I'm getting is different though.
Also using `zero_copy` but I am not using `#[account(zero)]`. My code is based on the chat app in the tests
Hey all, is using Clock::get().unixtimestamp in some critical logic safe? My spidey sense is tingling that it can be gamed somehow
Right I didn't think so. I am trying to think of a way where you could find an account for a program without having to know the programID or by having a constant one haha But I don't think this is possible
Which is fundamentally baked into the address itself
Er, maybe depends on what you mean—not the `invoke_signed`-ability
No, not possible to transfer the signing ability
This is what I was trying to figure out, thank you! haha Is there a way to transfer the signing ability to another program? Or would creating a CPI be the way to go.
Sticking the program_id in there is used to ensure that only that program_id can sign for the address (just talked about this lol in beginner-questions, `invoke_signed` etc.)
findProgramAddress under the hood is just a sha256 hash of the seeds + the program_id, plus the bump (plus a fixed string, not important really).
I was wondering. in `findProgramAddress`, what does the programId do? Does this essentially make addresses that only the program can use?
got it!! I think this could be the cause!! thanks
That means anchor was expecting an account's data to start with a certain 8 bytes, but it didn't. That could be because you passed in the wrong kind of account (so the first 8 bytes were totally wrong), or maybe because you're trying to use zero_copy and haven't actually written those bytes yet (need to use `#[account(zero)]` before you've run `.load_init()`)
Are you familiar with what the 8 byte discriminator is?
HI there, has anyone run into issue 
```
Error: 162: 8 byte discriminator did not match what was expected
```
Im on `anchor-cli 0.18.2`
Am pretty much following this example to build my thing https://github.com/project-serum/anchor/tree/master/tests/zero-copy
Hi all, is anyone here an admin in the Solana Tech server? I am trying to join but it says I am banned (I've never joined it before)
okay, thank you. let me try
I agree tbh
That's just imo
A single transaction with multiple instructions to transfer is probably better than a single instruction with a vector of accounts
so, do you mean, making single transaction and calling several time in frontend this is good way?
I'm having the same error (`range end index 8 out of range for slice of length 0`) when calling my instruction:
```
#[derive(Accounts)]
#[instruction(bumps: Bumps)]
pub struct Create<'info> {
    /// The account used to store data about a collection
    #[account(zero)]
    pub collection: Loader<'info, Collection>,

    ...
}
```

I suspect it's related to `zero_copy`, but the Anchor API has evolved since the post I'm answering to.
Tests are running fine, deploying to devnet is okay, but I get this error when calling `Create` for the program on devnet
Anyone has an idea about this?
Honestly you're better off making an atomic function for transfers and batching together a bunch of instructions in a single transaction like potatoe suggested
You can only fit a small number of accounts in there though
`remaining_accounts`
I believe there is a way to combine all your instructions off chain and then send them all as one transaction.
yes, for bulk transaction
Do you really need all those accounts at the same time on chain?
feel free to keep posting any more error messages you get in <#889702325231427584> and we can try to work through them
yeah, correct
Ohhhh you want to pass an array of Accounts. Interesting question, not sure how you would do this.
No, I going to build bulk transaction.
But need to send receivers address to solana program. As you can see, it is looping like this `receivers[i]` .
`#[derive(Accounts)]
pub struct BulkTransferToken<'info> {
    payer: Box<Account<'info, TokenAccount>>,
    receivers: Vec<Account<'info, TokenAccount>>,
    token_program: Program<'info, Token>,
}`
I hope to use like this. But this is error code. what is solution? 🙂
ok thanks ,i'll read the docs more detailed and hope to fix it.
Ohhh are you trying to figure out the test / client side of this? https://project-serum.github.io/anchor/tutorials/tutorial-1.html#update-instruction. You can look at the JS example of how to pass arguments into your Solana program.
<https://docs.rs/anchor-lang/0.18.2/anchor_lang/derive.Accounts.html>
so not exactly sure at what stage of the errors you're at
it's because you're not using the constraints correctly
init is not work ,but zero is ok , i don't know why is happen
check out the existing code, they would use system program and other program in the account context
right?
In rust, when send token transaction, will use tokenaccount for `from, to`?

`let cpi_ctx = CpiContext::new(
        ctx.accounts.token_program.to_account_info(),
        token::Transfer {
            from: ctx.accounts.payer.to_account_info(),
            to: receivers[i],
            authority: ctx.accounts.payer.to_account_info(), //todo use user account as signer
        },
    );
token::transfer(cpi_ctx, *amount)?;`
I would think that first you call TokenAccount outside of the Solana Program then pass whatever you need as arguments into the solana program.
How to send TokenAccount array to solana program via JSON RPC and how to receive that info in anchor?
you mean dependencies? i don't got what you meaning is.
did you add the programs
also confirm the version all is 0.18.2
i copy these lines code from anchor-escrow and tests/misc/programs/misc/src/context.rs to a minimal demo and still not work
try to copy what they do
have you looked at any examples which use `Account<'info, Mint>`
then add those programs
great
same result, the vscode remind like this
also mint here isn't a PDA, so I'm not sure if `init` works or if it should be `zero`, alan will probably know
if you're initializing the mint you will need to uncomment those lines above it
yes. use anchor_spl::token::Mint;
did you import `Mint`
```
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init,
        // mint::decimals = 0, 
        // mint::authority = payer, 
        // mint::freeze_authority = payer, 
        payer = payer)]
    mint: Account<'info, Mint>,
    #[account(mut)]
    payer: AccountInfo<'info>,
}
```
#[derive(Accounts)]
   |          ^^^^^^^^^^^^^^^^ function or associated item not found in `Mint`

no function or associated item named `default` found for struct `Mint` in the current scope

hi, how to fix this error, i use anchor 0.18.2. Actually i still dont fix it.
ok
helps with bolstering the discord search results
just fyi it's better to leave errors up and answer them yourself if you figured out the issue rather than deleting the original post
It worked 🤔 probably I can increment without own it.
Hm but I think that after all my CPIs it remained with the same lamps as it has in the beginning
🤔 Actually I think I've done that moments ago for a PDA that was own by the sys program and it worked
Guess not because I cannot change its data
<@!134416332509675520> Can I use that strategy of decrement and increment to make transfers if the incremented account is not owned by the program?
Thanks!
It's working
Just got it
Did u try allocating a PDA?
Does anyone have some good pointers as to how to safely upgrade a solana program? Like changing hardcoded admin address and stuff. Or since Solana program is stateless so I can upgrade it however I want.?Thanks a bunch in advance
Ah, that makes sense
Allocate requires the account to already have enough money for rent, yeah.
Ok, this silly approach does work! Tried it locally
Seems to have the same goal as CreateAccount, but requires no funding account, however for an account to be created someone has to pay for it.
Why it exists and how it exists
I don't understand that instruction
How can allocate work without funding?
That's right. Have log the new_account address and is the same that it complains about already existing
Never get that allocate instruction. How does allocate works without specifying any payer? Or it only works if the account we try to allocate already has lamports?
Alright got it. Let me try other hacks now that I understand the logic behind
Yep. (Doesn't make sense really but that's how things currently work.)
So you try to add the decremented one so that the check works
So the check that is done is the balance of the accounts being passed to the CPI measured at the beginning of the current instruction and the balance of them measured at the moment that we call the CPI?
It's a silly hack.
So you have to explicitly pass the decremented account in order to convince solana everything is ok
So in the situation above, you added some money to the account you want to create. When you do the cpi to create the account, solana looks at the accounts passed to the cpi and says wait, these got imbalanced by the current instruction (who cares, there's another account that got decremented, everything is fine)
I tried explaining this in that thread, but this is just sort of a bug/restriction in solana at the moment. When you do a CPI, you pass some set of accounts to it. Oddly, solana looks at *those accounts only* and makes sure the *current* instruction (not the cpi one, the current one) hasn't imbalanced them (weird, doesn't really make sense).
Maybe you could try just using the `allocate` instruction + then reassign the account to your program? So would have to do two instructions (not sure if this is worth it, I'm just curious now—will try locally myself at some point)
I understand that actually total lamps before == total lamps after. But solana seems not to understand that. I don't understand why and dont understand what you were trying to do in order to make solana understand that total lamps before == total lamps after
But I did not understand the logic behind. Could you explain? How would this solve the problem of total lamps before != total lamps after?
When I fix the bug locally everything works fine:
```.rs
        Ty::SystemAccount => quote! { #ident.to_account_info() },
```
This the log error : 'Create Account: account Address { address: B1WLdg1xk5L8a6R4aoGRr4iDvhehd5AieKscTgFATvFD, base: None } already in use'
Not sure if there's some *additional* hack to try lol.
Ohh. Bummer. I guess create_account says nope, that account already has money, so it's already in use 😔
I am getting the error account already in use, which seems it is trying to create the account `current_account`, which in fact already exists. What I am doing wrong? `current_account` is the account that I decrement from, `payer == new_account` is the one I increment from.
```rust
let mut ix = solana_program::system_instruction::create_account(
        payer.key, 
        new_account.key,
        anchor_lang::solana_program::rent::Rent::default().minimum_balance(new_space), 
        new_space as u64, 
        program_id);
    ix.accounts.push(
        anchor_lang::solana_program::instruction::AccountMeta {
            pubkey: current_account.key(),
            is_signer: false,
            is_writable: false,
        }
    );
    solana_program::program::invoke_signed(&ix, 
        &[payer.clone(), new_account.clone(), current_account.to_account_info()], 
        &[&[payer_seeds, payer_bump], &[pda_seeds, pda_bump]])?;
```
Meaning you tried fixing the bug?
Ok but still without the constraint signer, it crashes
Yes.
Bug is here in case you want to fix it 😛 https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/accounts/constraints.rs#L212
in accounts.push?
I'm saying you need to add in the *actual* payer, the thing you manually decremented
They are the same PDA!
Since the payer is creating itself as you suggest
They are ==
I am so confused
Wait
payer is PDA, new account also. But different PDAs
Ah, sorry, that actually does seem like a bug, interesting
Ignore, payer != new_account lol
I have v0.18.2
It is
Ah, so payer isn't the PDA?
Note: payer == new_account **EDIT payer != new_account**
~~Ah, you need to update your anchor cli (`anchor --version` will need to be 0.18.2 I think)~~
Have done this:
```rust
let mut ix = solana_program::system_instruction::create_account(
        payer.key, 
        new_account.key,
        anchor_lang::solana_program::rent::Rent::default().minimum_balance(new_space), 
        new_space as u64, 
        program_id);
    ix.accounts.push(
        anchor_lang::solana_program::instruction::AccountMeta {
            pubkey: payer.key.clone(),
            is_signer: false,
            is_writable: true,
        }
    );
    solana_program::program::invoke_signed(&ix, 
        &[payer.clone(), new_account.clone()], 
        &[&[payer_seeds, payer_bump], &[pda_seeds, pda_bump]])?;
```
Also tried with is_writable = false, since it was false in the example you point me
if I keep signer constraint  `Invalid syntax: signer cannot be specified.` and if I removed it, `thread 'main' panicked at 'Could not resolve Accounts symbol', lang/syn/src/idl/file.rs:452:22`
sum of account balances before and after instruction do not match
Getting the same error: sum of account balances do not match
What goes wrong?
It's not working. But let try to understand you we are thinking. Because the payer and new_account are the same, the instruction sees an incoming total lamps equal to payer.lamps + new_account.lamps, but after the instruction the total lamps will only be new_account.lamps, which is different (more concretly, half) of the lamps before isntruction. Is this?
And neat, I hadn't noticed that got added
What goes wrong?
Hey folks! I am updating my code with the latest Anchor version, from my understanding `SystemAccount` is any wallet address or address owned by the systemProgram, why cannot I change my signer from `AccountInfo` to `SystemAccount` then?
"add on", with the `ix.accounts.push` part
Alright I will give this a test and will report back
"tack"?
I will be so pleased lol if this works 😛
You'll need to hackily tack on an AccountMeta for the PDA (where the funds are coming from)
Presumably the wallet will tell that the tx will fail though, since the simulation won't have the auction house's signature
You can do `const tx = program.transaction.theInstruction(...)`, then ask the wallet to sign it with `await program.provider.wallet.signTransaction(tx)`
Hmm I guess this actually does make more sense. Thinking about it there is the extra step of deserializing but thats ok. 

Do you have an example in ts to show the step of creating a tx object?
Ok, try doing something like I explain here: https://discord.com/channels/889577356681945098/889577399308656662/909082157471907901
Sorry, not run rustfmt yet
```rust
fn resize_account_space<'a, T>(current_account: &Account<T>, new_account: &AccountInfo<'a>, payer: &AccountInfo<'a>, payer_seeds: &[u8], pda_seeds: &[u8], program_id: &Pubkey, new_space: usize) -> Result<Account<'a, T>, ProgramError>
where T: Discriminator + AccountDeserialize + AccountSerialize + Owner + Clone + BaseSpace {
    let empty_slice: [u8; 0] = [];
    let payer_bump_slice: [u8; 1];
    let payer_bump = {
        if payer_seeds.len() > 0 {
            let (_, bump) = anchor_lang::solana_program::pubkey::Pubkey::find_program_address(&[payer_seeds], program_id);
            payer_bump_slice = [bump];
            payer_bump_slice.as_ref()
        } else {
            empty_slice.as_ref()
        }
    };  
    let pda_bump_slice: [u8; 1];
    let pda_bump = {
        if pda_seeds.len() > 0 {
            let (_, pda_bump) = anchor_lang::solana_program::pubkey::Pubkey::find_program_address(&[pda_seeds], program_id);
            pda_bump_slice = [pda_bump];
            pda_bump_slice.as_ref()
        } else {
            empty_slice.as_ref()
        }
    };
    solana_program::program::invoke_signed(&solana_program::system_instruction::create_account(
        payer.key, 
        new_account.key,
        anchor_lang::solana_program::rent::Rent::default().minimum_balance(new_space), 
        new_space as u64, 
        program_id), 
        &[payer.clone(), new_account.clone()], 
        &[&[payer_seeds, payer_bump], &[pda_seeds, pda_bump]])?;

    let discriminator = T::discriminator();
    new_account.try_borrow_mut_data().unwrap()[..8].clone_from_slice(&discriminator);
    let mut new_account = Account::<T>::try_from_unchecked(new_account).unwrap();

    new_account.deref_mut().clone_from(current_account.deref());
    Ok(new_account)
}
```
```rust
pub fn double_account_space<'a, T>(current_account: &Account<T>, new_account: &AccountInfo<'a>, payer: &AccountInfo<'a>, payer_seeds: &[u8], pda_seeds: &[u8], program_id: &Pubkey) -> Result<Account<'a, T>, ProgramError>
where T: Discriminator + AccountDeserialize + AccountSerialize + Owner + Clone + BaseSpace {
    let new_space = 2 * (current_account.as_ref().data_len() - T::BASE_SPACE) + T::BASE_SPACE;
    resize_account_space(current_account, new_account, payer, payer_seeds, pda_seeds, program_id, new_space)
}
```
and resize is
```rust
let new_space = 2 * (current_offers_account.as_ref().data_len() - PriceOffers::BASE_SPACE) + PriceOffers::BASE_SPACE;
let lamports = anchor_lang::solana_program::rent::Rent::default().minimum_balance(new_space);
**current_offers_account.as_ref().try_borrow_mut_lamports()? -= lamports;
**new_offers_account.as_ref().try_borrow_mut_lamports()? += lamports;
let new_offers_account = double_account_space(
            current_offers_account, 
            new_offers_account, 
            new_offers_account, 
            pda_seeds.as_slice(), 
            pda_seeds.as_slice(), 
            &bdex::ID)?;
```
Where the double_account_space function is:
So yeah, I guess that's what you wrote above lol.
No comment on if this is actually the best setup to accomplish your broader goals etc, I'm not sure.
Hmm, I'm a little fuzzy on your setup, but if the timing is that quick (<< 1 minute) then I guess maybe you could construct the tx object on the client, have the user sign it (but don't submit it), and then ship the signed tx to your server so you can add the extra signature (you'd have to serialize/deserialize it I guess?).
Can you post the code you're trying to use? I'll send you an edit to try
Aha! Interesting, I wonder if I know the magic hack to fix that lol
Getting this error `sum of account balances before and after instruction do not match`
and the server holds the auction house keys to allow the writes
The actual auction house is a program on-chain. But the server acts as the gateway to on-chain writes
So the backend server is the auction house?
The idea is that the user will want to e.g. submit a buy offer to auction house. But the auction house has to sign it.

The user will sign and submit to a backend server (stuff happens over 2 seconds) then transaction is signed in the server and submitted
Even if that does work (I'm not sure, but I doubt it) how much time will pass between the two signatures?
Mm, I'm not sure but I'm guessing it's going to be more complicated than that :/
Magic! Thanks!
Ok double dereferenciation
Do they have a replace method?
Something like `**ctx.accounts.the_account.to_account_info().try_borrow_mut_lamports()? -= the_amount`
Still not dominate this Ref and RefMut stuff
By the way, how do I just the value from try_borrow_mut_lamports in rust
Yes essentially. Signer 2 will need to "approve" it before signing and submitting. Signer 2 is also the fee payer
So you want both signers to have signed the eventual transaction?
I will try that. It's simpler that having an intermediary
If I want to sign a transaction and send it to another wallet to sign and send, do I need to do the following:

1. SimulateTransaction with signer 1
2. Send transaction to signer 2
3. Signer 2 signs transaction
4. Signer 2 submits transaction
So use `try_borrow_mut_lamports` to transfer, and then create the account with itself as the payer
Actually pretty curious if that will work
Maybe you could do something goofy like: transfer the lamports *to the account you're about to create*, and have it pay for its own creation 😛
Ah
Before the Transfer call it to Assign it to the sysprogram, and after the Transfer/account creation assign it back to my program.
Don't think that will work (because it's not owned by the system program, so the system program can't mutate it 😉)
Yes
Do you mean call Assign on the account owned by your program?
It seems simpler than calling Assign before and after the account creation
In this case I am thinking in decrement the lamports from the owned PDA and increment another PDA (which is own by system_program) and pay the account creation with the latter.
But I would need to use it before the transfer and after the transfer because I need to own the account after it to change its data later. But if I try it I tell you
That plus "who can sign for this address"
But yeah, just need to be careful to think about which program owns the account—pretty much everything else follows from that
I'll double check if there's a way to use `Assign` like you said above 🤔
Will try that! Thanks!
Jesus, it will be 2030 and I will be learning new things about programming in solana.
Yes, assuming you own the source account (don't need to own the destination, it just needs to be mutable)
Ah so if my program receives two mutable accounts, it can decrement the lamports from one and increment the lamports from the other?
Yes, because *your* program owns that PDAs account, so it can just take the lamports and give them to someone else
If you own it then you can transfer lamports from it by just decrementing them from the AccontInfo (try searching for `try_borrow_mut_lamports`). But I'm not sure that will help you create the other account
But considering that how does close works on my PDA? (it's been working and they are own by my program 🤔) Doesn't the close requires a transfer from the PDA?
Yes, it's owned by my program. So, how could I transfer lamps from it? Do I need to do an Assign to change the owner before the Transfer?
So, assuming that it's not the system_program who owns that account, you won't be able to use it to pay for the account creation 😦 Only accounts owned by the system_program can do so, as far as I can tell, because the system_program does the debiting—and that can only work if the system_program owns the payer account (since otherwise it wouldn't be allowed to debit, per the usual solana rules of account ownership).
Which program owns that account with data? My guess is that it's not actually owned by the system_program (not sure when you'd ever have an account owned by the system_program that actually has data in it).
I am trying to pay the creation of an account using another account that has data and I am getting this log error `'Transfer: ``from`` must not carry data'`.  So the funding account on any instruction cannot have data?
`getProgramAccounts` and filter for accounts that match the serum market format / number of bytes
a more brutal approach would be to getPas for all markets then filter active markets with some criteria on the order book
each platform has its own API to provide active markets, we get those then dedup but also remove low liquidity markets
there must be more markets, but I have no idea how to find them
there is a list on ts-serum I think, but it's fairly limited
where can I find a good list of Serum markets?
Easily haha
Is there a way to give another program mutable access to your PDA?
ooh ok it makes sense. Ty, I will try it
`invoke_signed` only executes a single instruction at a time, so I imagine you'd have to loop over the vec returned by `transfer_many`
Hello everyone, does anyone have any example with the `transfer_many` method? I'm trying to use it, but when I pass on the invoke , I receive the error: expect `Instruction` instead `Vec`

code: 
```rust
let transactions = anchor_lang::solana_program::system_instruction::transfer_many(
   &ctx.accounts.from.key(),
   &[
     (ctx.accounts.streamer_address.key(), amount as u64),
     (ctx.accounts.me.key(), tx as u64),
    ],
  );

anchor_lang::solana_program::program::invoke(
 &transactions,
 &[
   ctx.accounts.from.to_account_info(),
   ctx.accounts.streamer_address.to_account_info(),
   ctx.accounts.me.to_account_info(),
  ],
)?;
```
I'm trying to implement token-based voting on Solana (e.g. 1 SOL = 1 vote) - is the best way to have users stake their tokens in a contract that holds the tokens until the vote is over?
Alright. Passing program.rpc.myInstruct would just call it inside tx.add which does not make sense. Got it. Thanks!!
There's also `rpc.transaction.yourInstruction` to build a tx object I think
The rpc stuff goes ahead and actually runs the tx
You can do `program.instruction.yourInstructionName(...)` to get just an instruction
Can I pass `program.rpc.yourInstructionName` to `tx.add` without the await keyword? (Kind of dumb on javascript)
Given a `tx`, you can do `tx.add(someOtherIx, yetAnotherOne, ...)`. You can also use the `instruction: [...]` argument to `program.rpc.yourInstructionName` to add instructions that will run before your rpc one
Nope
How do I pack two instruction calls in a single transaction in Anchor?
Is it possible to receive an Account which is not writable and make it writable when passing it to CPI?
you do:

```ts
await program.rpc.instruction(..., {
          accounts: { ... },
          signers: [...],
          remainingAccounts: [
            {
              pubkey: <publicKey>,
              isWritable: <true or false>,
              isSigner: <true or false>,
            },
            ...
          ],
        });
```
On JS code, how do I specify remaining accounts? 
```
accounts: {
  myFirstAccount: somePubkey,
  ...,
  remainingAccounts: [aPubkey, anotherPubkey, ...]
}
```?
Hello, quick question! Is there any possibility to extend Anchor.toml similarly as with `[scritps] tests` anchor build`  to execute `anchor build -t path_to_idls_ts` or should I just do that with yarn instead?
Hey there, I'm trying to use Anchor events like this https://github.com/project-serum/anchor/tree/master/tests/events, it works fine in the tests, I suspect its due to the tests running in node. Looking at this https://github.com/project-serum/anchor/blob/master/ts/src/program/event.ts#L268 it seems like Anchor is using the native node assert library, meaning that I won't be able to use this to listen to events from the client side without some sort of polyfill.

Has somebody already dealt with this? Any recommendations?

TL;DR: I'm trying to listen to Anchor events from a dapp.


///////////////////////////////////////////////////////////////////////////////////////////////

Cool, let me look into this haha This is my first time messing with borsh stuff, so I am still wrapping my head around how to deal with it all. You guys have all been such a massive help, and I really appreciate it!.
There's maybe a way to do this with anchor's help, but borsh's schema for a Vec<String> is pretty simple, 4 bytes for the number of elements in the vec, then each string is 4 bytes for the length (in bytes), followed by the bytes of the string.
Ok, sorry. Just understand what's happening (I have a Wallet with a payer, then I clone that and clean the payer property, so probably some of the assign methods is accessing the property, not Anchor).
yes haha thats basically all it is haha
So is there still a Vec<String> in your program under the hood?
The wallet type you have to pass to the provider is an interface, and doesn't directly refer to a payer
Where does it directly access the payer?
I was trying to pass a browser-like wallet (without `payer`) to the provider but anchor accesses that property when calling program instructions. Does this only happen on Node?
I also dont want to use program -> fetch because I want this to be easily access across programs haha
Can you say more about what you're trying to do? I thought you didn't want to have to have a payer (useAnchorWallet doesn't)
No on the JS side haha
Within your program? Can you just let borsh do it for you? Borsh will handle a `Vec<String>` just fine.
I am running this on node and it is accessing the `payer` property. Won't this happen on browser?
Pass this to the provider? This also does not have `payer`
Anyone have any ideas on how I would set up a schema to decode a vector of strings? I have used TextDecoder without the schema, but I wanted to do something a little cleaner.
(the exact names of the package/api might be slightly different)
`@solana/wallet-adapter` has a `useAnchor` wallet API that will give you such a thing.
Need to use a different wallet class that implements the interface.
Why does `Wallet` requires a `payer` keypair? On the browser we don't know the user keypair. How do I set the anchor provider on browser?
Can try doing this: https://discord.com/channels/889577356681945098/889702325231427584/906661496220704778
I am getting this error when I try to run `anchor start`(unable to start test validator)
Think I found it: `fetchMultiple`
Does Anchor offers any fetch alternative to fetch multiple accounts at once?
form where I get SRM token faucet
Thanks, will look into it.
You ordinarily wouldn't need to implement that trait yourself (but can search the anchor repo for it and find examples of internal types using it)
https://docs.rs/anchor-lang/0.18.2/anchor_lang/trait.AccountsClose.html
I saw this one and was wondering if there was an example for this..
Hi Friends. I am facing some problem while deploying anchor program on mainnet. Its working perfectly fine on Devnet. Any ideas?
If your program owns the account, you can also just use the `close = who_to_send_the_rent_to` attribute
Is there an example I can refer to for this? The program which owns the account is the same one from which the address was derived. I am making a sort of recruitment program. When user registers, it creates a new PDA where his data is stored. After the gameplay, the user has an option to resign, so that he can get the rent he paid back.
Closing an account is always the same process (regardless of whether it lives at a PDA). The important question is which program owns the account (not the same thing as from which program was the address derived!). You'll need to drain the account of its lamports.
Hi guys, how to close a PDA which has outlived its usefulness so that the payer can get his funds back?
https://blog.neodyme.io/posts/solana_common_pitfalls although most of these are avoided by idiomatic anchor
is there any list of patterns that could lead to an exploit?
what this error mean
```Program 2Di3HFxAYwQGkSncLECWQHDmsoGawsyF5ihdf3wweyiT failed: invalid account data for instruction
Transaction failed: Error processing Instruction 5: invalid account data for instruction```
nice - thanks all
<https://github.com/project-serum/anchor/blob/master/CHANGELOG.md>
i think that 0.18.2 includes the pre and post logic
then build the tx and send manually 😒
but the workaround is to do anchor.instruction.<bla>
which is quite limiting
currently it is only pre
i think there is a github issue about having pre/post
Does anchor let you "sandwich" instructions in a transaction? i.e. something like:

```anchor.rpc.doThing(accounts: {...}, signers: [...], instructions: {pre: [...], post: [...]})```

I guess if not I can create my own instructions array like this:

```
const instructions = [
  ...pre,
  anchor.instruction.doThing(accounts: {...}, signers: [...])
 ...post,
]
```
Yes I already integrated serum proper, but if the speeds good I’d totally switch when I have some downtime
Specifically a social/group trading app where instead of doing it alone you do it with friends in a dao
if you want swaps in app you can come discuss the npm package alpha release, in jupiter discord
I’m working on a trading app of sorts
raydium has a similar cache but without any filtering https://api.raydium.io/cache/rpc/market 2k markets
You guys should advertise this better it’s a huge community service
yes
These are all serum markets correct?
what are you trying to do?
and with compression you end up being able to load hundreds of AMMs/markets for only 250 kB
Oh man you just saved me a ton of work
yes, it is done like this to speed up the loading. Because rpc nodes are limited to 100 accounts in 1 req and anyway those are all static
What’s the format of the json file? Is ‘data’ literally the data stored in the account?
The code says: at least 5 bids and 5 asks in the orderbook. That is quite arbitrary
not sure why not getProgramAccounts, but if you really wanted to reach them all that is how you could do it
Do you have a sense for what the filtering criteria are?
Ah got it
it is loaded from multiple apis: raydium, dexlab ....
lol
ah no sorry
🙏
yes
Ah so the data comes from getPas and then it’s filtered based on some criteria?
some are removed, dead, or near empty
no
how this thing is made is buy loading the markets into the serum-ts Market class and fiddlign with them
This is all the markets returned through getPas?
<@831450660146642974> 😍
https://api.jup.ag/api/markets/cache/mainnet
does Jupiter expose this list anywhere?
right I think ideally there is an api/front-end to pull out all the markets, get basic data on them (e.g. order book depths), and then pick/validate them manually
lol
ohh
is that a serum instruction?
getProgramAccounts
<@!831450660146642974> -- `getPas`?
but marinade is a anchor stake pool
No, anchor is not implementing any program specifically, only examples and tests
and getPa is the highest level API, up to you to build your own criteria
I think that is why serum list was manually built, but very limited
On Jupiter we try to put all active markets, but some tokens are rug tokens almost and the order book ends up empty one side at some point. So quite unstable overall
The problem is what do you want? getPas will give you every markets, then up to you to decide what is good or not
can anyone here help?
bump! would love to be able to join the solana tech server
So unless it's already part of the TS packages library for serum, it's unlikely
Serum has a dev shortage at the moment
someone must have built a higher-level api for this
ah interesting
My gut also says no, but I am also not sure. Maybe I just need to play with it haha
in one of the anchor::token packages?
did anchor implement the solana `stake-pool`  program? https://github.com/solana-labs/solana-program-library/tree/master/stake-pool
My gut is to say no, just store borsh, but I don't actually really know if it would be all that much better.
I think the potential downsides are serialization size (not actually sure how much bigger it would be than e.g. borsh) and serialization compute (also not sure about that). But if those don't seem to be an issue maybe it's ok?
But I wasnt sure if anyone had any gripes about it lol
I am thinking of the best way of holding NFT metadata on chain haha I was thinking of following the same standard, which is a json that isnt too big
Totally depends on WHY.  Example: Anchor (optionally) stores the IDL json on chain as a means of simply exposing a programmatic interface.
Guess it depends on what you're going to do with it/how big it is?
hey guys, does anyone know how I can programmatically do delegated staking for SOL?
I was wondering if anyone has an opinion on storing a json on chain lol
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/state.rs#L88
`.mint`
I can't seem to find a way to get the Mint Account from a TokenAccount. Maybe this isn't possible?
thanks!


///////////////////////////////////////////////////////////////////////////////////////////////

Is my contract going to poop out on me if I pass it in a vec of 20 strings (each string is a name so like 8ish characters)
some weird thin ghappen?
I upgraded from 0.14 to 0.17 and my deployment is nwo throwing Transaction failed: Error processing Instruction 4: Unknown instruction error
how do I skip preflight and sent the transaction with the rpc call of anchor
it appears there's a couple of similar cases
and see what other issues people have had
the first thing you can do is discord search for `Error: failed to send transaction: invalid transaction: index out of bounds`
lol <@!853976307720257536> stop @ing and friending people, you will get help here if there are others around who see your problem and can help
<@!248066053161222144> here it is.
getting this:
running this:
hi guys!,  i am trying to interact with a deployed contract  i get the error  Translating error SendTransactionError: failed to send transaction: invalid transaction: index out of bounds, do you have any idea please?
just a design choice to make it more explicit
Why `bump` attribute needs to be specified with `seeds` even when `bump` is not provided?
Yeah, I ran into that today too—logging can be expensive!
https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/accounts/constraints.rs#L187
What exactly checks `has_one` constraint? Where can I found implementation?
Does `SysVar` validate program id ownership? like this: `pub rent: Sysvar<'info, Rent>,`
`cargo test --lib`
ok, thanks
Need to use explicit lifetime annotations.
trying to make sense of this change here:
https://github.com/project-serum/anchor/pull/351/commits/dcaeca2a68227d98ef28c8c116c088ba4e9062a3
yes, it is a limitation, it decodes it as being the first byte if only u8....
how do you get info from remaining accounts after a cpi context switch?
`ctx.accounts.into_distribute_context()`
i see there is a `with_remaining_accounts` function, but every permutation i've tried results in:
```
70 |                         .into_distribute_context()
   |                          ^^^^^^^^^^^^^^^^^^^^^^^ ...but data from `ctx` flows into `ctx` here
```
ran into this today, wondering how others hae dealt with this. My rpc call below failed because the transaction excceeds size limit. Is there a magic anchor setting that can split the txn or will I need to split the txn manually ?
`program.rpc.callSomething(param, {
    accounts: [],
    signers:[]
    instructions:[x,y,z]
})`

Is there a way to call Anchor just to return the transaction without sending it over the wire ? I'd like to split the txns evenly, including the anchor encoded txn, and x,y,z
it seems I either need to list all args and types, or just put bump first
yes, #[instruction(...)] on Accounts
Are you using #[instruction(...] on Accounts?
*initiate a PDA, sorry
if i'm using seeds + bump to initiate a bump account, does bump need to be the first non-account arg to the entrypoint function? it would appear to be the case
LOL, too much bla bla bla logging... now it works!
`'Program failed to complete: exceeded maximum number of instructions allowed (2738) at instruction #16066',`
I've been staring at this computer for hours coding all day lol...I need to go do something else. Thanks for catching my obvious mistake
😫
Never mind... it is not the program that owns the tokens, but the program_authority
This returns []

How do I get the token accounts a contract owns???
Did you accidentally delete a `[dependencies]` header?
I'm confused, it looks like those dependencies are all under the `[features]` heading?
Or am I getting conflicts because I don't need some of these dependencies with Anchor?
This is what I see. Everything from solana-program to num-traits I copied from a Solana Rust repo....and it doesn't want to build, but if I delete them and only use what I got from anchor init...it builds
Sorry yes, I mistyped...I am in cargo.toml
I was using too many u128's I guess.
Figured out the issue... seems that using too many local variable uses up limited call stack space
Ah right that makes sense! Cheers : )
`Error: Function _ZN13swap_contract13swap_contract4swap17hf24a4bfa43dd4667E Stack offset of -4152 exceeded max offset of -4096 by 56 bytes, please minimize large stack variables`
Seems to be related to this on build:
`    let acc_root_expected = Pubkey::create_program_address(&[ctx.program_id.as_ref(), &[inp_root_nonce]], ctx.program_id)
            .map_err(|_| ErrorCode::InvalidDerivedAccount)?;`
This is the code where this happens:
When using: "Pubkey::create_program_address"
`'Program failed to complete: Access violation in stack frame 5 at address 0x200005ff8 of size 8 by instruction #18561',`
Anybody seen this error before:
For context this occurs if lib.rs is inside a folder with the name my_program (which seems like the standard), changing the name also fixes it
What's up with "Box" in that example? Is that a way for anchor to load data of other programs?
How do I fix this annoying error I get during Rust testing: ```#[program]
pub mod my_program {
    use super::*;

    pub fn some_instruction(ctx: Context<Whatever>){
        //etc
    }

}

error[E0659]: `my_program` is ambiguous (name vs any other name during import resolution)
  = note: `my_program` could refer to a crate passed with `--extern`
   = help: use `::my_program` to refer to this crate unambiguously
note: `my_program` could also refer to the module defined here
  --> /somepath/my_program/src/lib.rs:6:1
```
Ooh that makes sense, I appreciate you taking the time to type out the example! Thanks 🙏
https://docs.rs/anchor-lang/0.5.0/anchor_lang/struct.CpiContext.html#method.new_with_signer
and if the authority of the token account is not the signer of the transaction (or a pda) you'll need to use `CpiContext::new_with_signer` which also requires the seeds of the address for the PDA that will be masquerading as the authority/signer
you want to make sure the balance is transferred out prior to closing first though
```rs
use anchor_lang::prelude::*;
use anchor_spl::token::{close_account, Token, TokenAccount, CloseAccount};

#[derive(Accounts)]
pub struct MyInstruction<'info> {
    pub authority: Signer<'info>,
    #[account(mut)]
    pub acc_to_close: Box<Account<'info, TokenAccount>>,
    #[account(mut)]
    pub rent_destination: UncheckedAccount<'info>,
    pub token_program: Program<'info, Token>,
}

pub fn handler(ctx: Context<MyInstruction>) -> ProgramResult {
    close_account(
        CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            CloseAccount {
                account: ctx.accounts.acc_to_close.to_account_info(),
                destination: ctx.accounts.rent_destination.to_account_info(),
                authority: ctx.accounts.authority.to_account_info(),
            },
        ),        
    )?
}
```
ah ok, gimme a second to type an example
In an instruction
are you trying to close the token accounts in an instruction or an external script?
add your dependencies to the `Cargo.toml` of the individual program crate, not `Anchor.toml`
invalid type: map, expected a sequence for key `features.spl-associated-token-account`
But the error says...
spl-associated-token-account = {version = "1.0.1", features = ["no-entrypoint"]}
For example I'm trying to use this...
How should we import dependencies for Anchor? I'm getting build errors because of the way I'm trying to add dependencies to anchor.toml
<@!248066053161222144> did you figure out how to close pda token accounts? i'm getting an error that: `instruction modified data of an account it does not own`
Hello, does anyone have some tips or examples about running GitHub Actions for CI on anchor programs?


///////////////////////////////////////////////////////////////////////////////////////////////

Currently not easily doable.
How would I implement a custom decoder for a given type that isn't supported by anchor idl?
ok
Almost, the sighash should be sha256("global:methodname")[..8], so first *8* bytes and you're missing a ":"
by the way , i use golang client to recall it , i just add sighash("global"+methodname) as the first byte in data field, is this the right way?
yeah, i tried it and got 0x64😩   InstructionMissing

```
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, 
        payer = user, 
        mint::decimals = 0, 
        mint::authority = user)]
    pub mint: Account<'info, Mint>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}
```
err: rpc response error: {"code":-32002,"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0x64","data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":100}]},"logs":["Program 9bqHL8SkPFh9KhW9yvyUsrH6gc7azuo8fuypVBkZUJth invoke [1]","Program 9bqHL8SkPFh9KhW9yvyUsrH6gc7azuo8fuypVBkZUJth consumed 1607 of 200000 compute units","Program 9bqHL8SkPFh9KhW9yvyUsrH6gc7azuo8fuypVBkZUJth failed: custom program error: 0x64"]}}.
You won't be able to initialize a mint quite like that (the mint needs to be owned by the spl token program). Try doing `#[account(init, payer = user, mint::decimal = num_decimals, mint::authority = some_authority)]`
```
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = user, space = 8 + 82)]
    pub my_account: Account<'info, Mint>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
}
```
rpc response error: {"code":-32002,"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7","data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":167}]},"logs":["Program 9bqHL8SkPFh9KhW9yvyUsrH6gc7azuo8fuypVBkZUJth invoke [1]","Program 11111111111111111111111111111111 invoke [2]","Program 11111111111111111111111111111111 success","Program log: Custom program error: 0xa7","Program 9bqHL8SkPFh9KhW9yvyUsrH6gc7azuo8fuypVBkZUJth consumed 9689 of 200000 compute units","Program 9bqHL8SkPFh9KhW9yvyUsrH6gc7azuo8fuypVBkZUJth failed: custom program error: 0xa7"]}}

hi, i want to know what's the problem of  my struct lead to this error, i have do nothing with business logic yet, just input parameter is not work.
Yep, should work fine!
Related question - can I use a fixed-size array in my account?
Thanks - I like that last option.  I don't want to have to pass in _all_ of the accounts to get their info.  I just want to inspect the values of the attrs in  `Things` and see whether they've been set
Or you could also make each pubkey `Option<Pubkey>`, etc.
Otherwise you could add a flag to the account, `has_been_initialized:  bool` etc.
Account data that has been allocated but not actually written to yet will be all zeros. So in this case you could check that a given pubkey has all zeros in it (unless you deliberately wanted to use the all-zero address, aka the system_program's address)
How do I detect an _empty_ (or uninitialized) value in an account?
I have a naive "array" of pubkeys that I want to fill:

```rust
#[account]
pub struct Things {
  pub thing0: Pubkey,
  pub thing1: Pubkey,
  pub thing3: Pubkey
}
```

In my instructions, I want to iterate through my `Things` account info, and set a value when I find a "null".

```rust
pub fn init_a_thing(ctx<...>) -> ProgramResult {
  let things: &mut Things = &mut ctx.accounts.things;
  let new_thing_key = ctx.accounts.new_thing.key()
  if is_empty(things.thing0) { // HOW?!
      things.thing0 = new_thing_key;
  } else if is_empty(things.thing1) {
     etc . . .
```

How do I check that value in my account struct has not been set before?
Yep, take a look at the basic-3 example in the anchor repo/tutorial, or the way the anchor_spl module works (many examples in the tests/ directory)
Hi, Is it possible to interact with another program using anchor ? Thanks
oh looks like it is! neat
is borsh ok with nested structs? Can I define a schema like 
```
      fields: [
        ["substruct", SomeOtherStruct],
      ],
```

where SomeOtherStruct is another struct within the same schema?
figured my borsh problem out, I tried to decode into the wrong type, whoops

```describe('token_cc', () => {

  let provider = anchor.Provider.env();
  let mint: Token = null;
  var splAssociateTokenAddress = null;

  anchor.setProvider(provider)
  const program = anchor.workspace.TokenCc as Program<TokenCc>;

  before(async () => {
    const wallet = program.provider.wallet as NodeWallet;
    mint = await Token.createMint(
      program.provider.connection,wallet.payer,
      wallet.publicKey,
      wallet.publicKey,
      0,
      TOKEN_PROGRAM_ID
    );
    splAssociateTokenAddress = await mint.createAssociatedTokenAccount(program.provider.wallet.publicKey);
    await mint.mintTo(splAssociateTokenAddress, program.provider.wallet.publicKey, [], 10000);
  });

  it('Is initialized!', async () => {

    const prefix = "vault";
    const [vault, bump] = await PublicKey.findProgramAddress([Buffer.from(anchor.utils.bytes.utf8.encode(prefix))],program.programId);

    await program.rpc.initialize(new anchor.BN(bump), new anchor.BN(100), {
      accounts: {
        authority: provider.wallet.publicKey,
        vault: vault,
        systemProgram: SystemProgram.programId,
      }
    })
    let vaultPda = await program.account.initializeData.fetch(
      vault
    );

    assert.equal(vaultPda.authority.toBase58(), provider.wallet.publicKey.toBase58());
  });

  it ('Add funds to vault', async () => {
    const prefix = "vault";
    const [vault, bump] = await PublicKey.findProgramAddress([Buffer.from(anchor.utils.bytes.utf8.encode(prefix))],program.programId
    );

    await program.rpc.fund(new anchor.BN(1000), {
      accounts: {
        from: splAssociateTokenAddress,
        vault: vault,
        owner:provider.wallet.publicKey,
        tokenProgram: TOKEN_PROGRAM_ID,
      }
    });

  })
});
``` Tried writing test case for the program getting error -  Error: 167: The given account is not owned by the executing program
Ok. Well, it ought to be pretty debuggable (there's only ~1-ish place in the solana codebase where this error is raised, so you could always just recompile the solana source and add a bunch more logging there—that's what I'd probably do, just to figure out what this weird instruction is)
Oh, this is private repo
Not sure, I think without being able to run your code myself (can it go in a github repo?) I won't be able to help.
why is 12884933014 bytes?



Program failed to complete: Instruction passed to inner instruction is too large (12884933014 > 1280)

This error where in: create(ctx.accounts.create_wrapped_account_context())?;
I create wrapped account, and transfer sol to wrapped account


Mm, not sure off the top of my head, sorry!
because the idl.program.types part already has the entire schema in it
any idea if there's a quick way to unborsh the arguments when I have the anchor idl? Instead of manually converting it into a schema + class
That check in the solana source just does this:
```.rs
    let size = num_accounts
        .saturating_mul(size_of::<AccountMeta>())
        .saturating_add(data_len);
```
let's start speculation
Ooh interesting
sol has 9 decimal places right
maybe it's the amount of sol they were trying to move
lol
so what is that
GB
ah yes
oh, google told me 12884933014 bytes is 12 GB
Also isn't it 12 gigabytes lol (I can't read)
over the max
12 MB
probably only an account data can be that big
i was wondering how to allocate that much
oh good one
to the CPI call
yeh, they must be passing an entire account's data somehow
indeed, that is a huge fucking amount of bytes
Yeah, it's funny, that's such a goofily gigantic ix, I'm not sure how you could do that even if you were trying lol
Oo
oh it fails in the cpi
i bet the data field of the instruction contains bloat it shouldn't have
what is [instruction] ? There is something not right client side
Hmm, I'm a little confused by those log messages actually, since it looks like you're *also* running out of compute units.
lol

create wrapped sol account, Instruction passed to inner instruction is too large (12884933014 > 1280)



look at the IDO pool examples in `/tests` there are PDA token accounts
oh wait I have the idl. I just noticed it's all defined in there
I think I can work with that. Thanks for the tips!
Ah, then I guess how you borsh that individual arg will depend on its definition in rust
oh you're right, the signature I'm looking at looks like 
`doSomething(x, {a: "foo", b: "bar"}, { accounts: {} })`
So x y z is ordered there, not in an object
Ah—why are the params in an object? I'm thinking of the syntax `program.rpc.doSomething(x, y, z, { accounts: { ... } })`
writing borshing and unborshing unironically feels weird lol
since borsh is sensitive to struct field position, does it do any ordering before borshing it? I have the parameter javascript object here and want to turn it back into a schema I can use to unborsh the data
E.g. if you're doing normal ix handlers, the sighash will be `sha256("global:your_ix_name")[..8]` (pseudocode)
ahh borsh
Plus there are 8 bytes at the beginning of the instruction data for the sighash
It basically just borshes them (under the hood it makes a little struct per instruction that collects the args in the order you specify them)
hey guys! how does anchor encode parameters when sending through the RPC? Trying to make sense of a data blob and see if I can decode it back into a readable state
Thanks !!!
I have to make some mints etc. in the tests.
Oh, I see. Yeah, that's actually kind of annoying (I think, maybe there are easier ways). Can see some examples here https://github.com/cqfd/quidproquo
So ya I checked initialize instruction and it seems fine but not sure how to mint SPL token and call the fund function to test this funding part
You could test this by fetching the vault account in your tests and checking that it has the right kind of data in it.
That seems fine so far?
```use anchor_lang::prelude::*;
use anchor_spl::token::{TokenAccount};
use anchor_lang::solana_program::pubkey::Pubkey;
use anchor_spl::token::{self, Transfer};

declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");

#[program]
pub mod token_cc {

    use super::*;

    pub fn initialize(ctx: Context<Initialize>, bump: u8, set_reward: u64) -> ProgramResult {
        let vault = &mut ctx.accounts.vault;
        vault.bump = bump;
        vault.set_reward = set_reward;
        vault.authority = ctx.accounts.authority.to_account_info().key();
        Ok(())
    }

    pub fn fund(ctx: Context<Vault>, amount: u64) -> ProgramResult {
        let cpi_accounts = Transfer {
             from: ctx.accounts.from.to_account_info().clone(),
             to: ctx.accounts.vault.to_account_info().clone(),
             authority: ctx.accounts.owner.clone(),
        };
        let cpi_program = ctx.accounts.token_program.clone();
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
        token::transfer(cpi_ctx, amount)?;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Vault<'info> {
    #[account(mut, has_one = owner)]
    from: Account<'info, TokenAccount>,
    #[account(mut, constraint = from.mint == vault.mint)]
    vault: Account<'info, TokenAccount>,
    #[account(signer)]
    owner: AccountInfo<'info>,
    token_program: AccountInfo<'info>,
}


#[derive(Accounts)]
#[instruction(bump: u8)]
pub struct Initialize<'info> {
    #[account(init, seeds = [b"vault".as_ref()], bump = bump, payer = authority, space = 8 + std::mem::size_of::<InitializeData>())]
    vault: Account<'info, InitializeData>,
    authority: Signer<'info>,
    system_program: Program<'info, System>,
}

#[account]
pub struct InitializeData {
    bump: u8,
    authority: Pubkey,
    set_reward: u64
}
```

This is my program trying to initialize a vault and store the SPL token inside it but not able to understand how to test the fund part and not sure if its right or not
What have you tried? It shouldn't really be different than storing tokens inside a non-PDA account, so that makes me think you're asking about PDAs in general maybe?
How can we store SPL tokens inside the PDA ? Any examples ?
PDA can only be signed by the program, using the seeds. PDA are out of the curve so normal users cannot have the private key of them, not even by chance.
Only the program can sign
Cause then anyone would be able to pass it as a signer haha
If I use findProgramAddress to get the address of a PDA, is there a way to pass it as a signer account? I am guessing not haha
what does that mean? The same as any other rpc node? Are you talking about having a front layer of  caching before the rpc node gets hit tho?
How does a custom RPC node work under the hood?
That was it. Thanks!
i agree though that `#[state]` doesn't quite jive with (at least my current understanding of) everything else
nvm i see: https://github.com/project-serum/anchor/issues/456#issuecomment-964839760
```
anchor_lang::solana_program::program::invoke(
            &ix,
            &[
                ctx.accounts.campaign_account.to_account_info(),
                ctx.accounts.authority.to_account_info(),
            ]
        )?;
```
i think you need a question mark after your invoke statement
Hello I am getting this warning: 

```
unused `std::result::Result` that must be used
`#[warn(unused_must_use)]` on by default
this `Result` may be an `Err` variant, which should be handled
```
when trying to perform a sol transfer. This in the code I'm using:

```
    pub fn withdraw(
        ctx: Context<Withdraw>,
        withdraw_amount: u64
    ) -> ProgramResult {
        let campaign_account = &mut ctx.accounts.campaign_account;

        if campaign_account.amount_donated < withdraw_amount {
            return Err(ErrorCode::ExceededWithdrawAmount.into());
        }

        let ix = anchor_lang::solana_program::system_instruction::transfer(
            &ctx.accounts.campaign_account.key(),
            &ctx.accounts.authority.key(),
            withdraw_amount,
        );
        anchor_lang::solana_program::program::invoke(
            &ix,
            &[
                ctx.accounts.campaign_account.to_account_info(),
                ctx.accounts.authority.to_account_info(),
            ]
        );

        Ok(())
    }
```

```
#[derive(Accounts)]
pub struct Withdraw<'info> {
    #[account(mut, signer)]
    authority: AccountInfo<'info>,
    #[account(
        mut,
        seeds = [authority.key().as_ref()],
        bump = campaign_account.bump,
        has_one = authority,
    )]
    campaign_account: Account<'info, CampaignAccount>,
}
```

What does it mean?
hey all, i'm starting to mess around with interfaces, just wanted to double-check that the example in `tests` is still the suggested approach? not super familiar with the `state` piece https://github.com/project-serum/anchor/blob/master/tests/interface/programs/counter/src/lib.rs#L17-L42
it looks like they've been making decent cash
<https://solscan.io/account/2YbB88p9EBTJijsxAkmaUjenTXJnmrJvp6MRyT5LiBiM>
it's a different kind of farming lol
free money
yea there is prolly some guy out there just hunting for unintialized accounts so he can make some $$ lol
but if it's still owned by the system program you're ok
because if you make the owner some program other than the system program, then anyone can hijack it
thanks, this is helpful, i never fully understood what the issue was with not running `init` functions in the same transaction as an account is initialized
yea we need to add that lol
it should always be in the same transaction really
we generally dont leave the open orders account uninitialized for that long but this time it was left for like >24hrs
well at least you know now that you should run init open orders at the same time
<:CringeGrin:745021388896862248>
yeh that'll do it
lol
yup
and don't actually run init orders
then wen the first position is opened the owner is set as the vault pda
so you init an empty account owned by serum
what are the steps that happen in your contract?
we just create an empty account when we create a new vault
i'm really curious to understand what is going on here
oh we arent calling init open orders since it gets set on first use <:CringeGrin:745021388896862248>
<a:Hmmmm:695129200260153375>
doesnt look like it does anything
https://github.com/project-serum/serum-dex/blob/master/dex/src/state.rs#L2598
does init open orders really not assign the owner?
i don't really understand <https://github.com/project-serum/serum-dex/blob/master/dex/src/instruction.rs#L449>
there's an instruction
somehow we arent alone there were like 32 accounts like this
how do u set the owner
no this wasnt created thru GUI but thru a contract
this is really bad
but i guess that some of the GUIs don't do this
well you can actually set the open orders owner before the first order
lol
and i guess if there is an unintialized open orders account it can be closed by anyone?
idk the exact logic behind it 
but for serum the owner is set when the first trade happens afaik
i thought you need to have the private key to sign
i have heard that when you're initing an account with space you should put something on it in the same transaction because otherwise someone can do something to it but i didn't know this was actually the case
what?
someone has been closing unintialized accounts lol
what a legend
nvm
<:facepalm:882326902520561714>
oh
https://solscan.io/tx/ES7YPa1fN51sxRFQQCTN6mj4LdoMf7NsyzY5FSt4RfidiLB41EVNyzwZazqLXn73HUasEgqudZ2JBc4tBC4Z7cv
<:ConcernFrog:883964100412071967>
somehow the open orders account we had got deleted
oh wtf
<:Rope:696497945234898994>
so did decimal of 0x195 -> 405
Haha
<:tired:749581377044742164>
i was readiing that 95 as 195 <:Rope:696497945234898994>
oh damn <:facepalm:882326902520561714>
I think that's supposed to mean line 0x95 = 149 in the state.rs file (the leading 1, https://github.com/project-serum/serum-dex/blob/master/dex/src/error.rs#L142), so probably here assuming the latest tag is actually the latest deployment: https://github.com/project-serum/serum-dex/blob/v0.4.1/dex/src/state.rs#L149
https://github.com/project-serum/serum-dex/blob/v0.4.0/dex/src/state.rs#L405

found this but this isnt the error
<a:Hmmmm:695129200260153375>
does anyone know what this serum error is `0x1000095`


///////////////////////////////////////////////////////////////////////////////////////////////

How worried should I be about this error
```
Running: $CARGO_HOME/bin/sdk/bpf/scripts/strip.sh $HOME/proj/target/bpfel-unknown-unknown/release/zo.so $HOME/proj/target/deploy/zo.so
Running: $CARGO_HOME/bin/sdk/bpf/dependencies/bpf-tools/llvm/bin/llvm-readelf --dyn-symbols $HOME/proj/target/deploy/zo.so
$CARGO_HOME/bin/sdk/bpf/dependencies/bpf-tools/llvm/bin/llvm-readelf: warning: '$HOME/proj/target/deploy/zo.so': invalid PT_DYNAMIC size (0xd8)
$CARGO_HOME/bin/sdk/bpf/dependencies/bpf-tools/llvm/bin/llvm-readelf: warning: '$HOME/proj/target/deploy/zo.so': PT_DYNAMIC dynamic table is invalid: SHT_DYNAMIC will be used
```
I also noticed that having 'system_program: UncheckedAccount<'info>' instead of 'system_program: Program<'info, System>' saves me about 5k operations. Does this come at a cost of some account checks that I'm not aware of? Or can I use UncheckedAccount safely?
Hey guys! I have a couple of general questions I feel you might be able to help me with 🙂
 - I want to limit the number of operations done by my program. Are there any general rules what I can do to achieve that? I know that having mutable accounts is quite expensive, as well as conditional checks. Are there any other things I should keep in mind not to hit the operations limit?
 - Is there a way for me to increase the limit of operations above 200k?
 - Are instructions sent to instruction block that are executed ahead of transaction increase the operation limit or not?
```
let TOKEN_METADATA_PROGRAM_ID  = new anchor.web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");
const [metaDataAcc, metaDataAccBump] = await anchor.web3.PublicKey.findProgramAddress(
        [
          Buffer.from("metadata"),
          TOKEN_METADATA_PROGRAM_ID.toBuffer(),
          mint.toBuffer(),
        ],
        TOKEN_METADATA_PROGRAM_ID
      )```
<@!832140329301311488> 
I get the below error. Thank You
`×
Unhandled Rejection (TypeError): object is not iterable (cannot read property Symbol(Symbol.iterator))
initializeContract

  79 | let TOKEN_METADATA_PROGRAM_ID  = new anchor.web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");
> 80 | const [metaDataAcc, metaDataAccBump] = anchor.web3.PublicKey.findProgramAddress(
     | ^  81 |  [
  82 |    Buffer.from("metadata"),
  83 |    TOKEN_METADATA_PROGRAM_ID.toBuffer(),`
Got it thanks
```anchor.web3.PublicKey.findProgramAddress(
        [
          Buffer.from("metadata"),
          TOKEN_METADATA_PROGRAM_ID.toBuffer(),
          mint.toBuffer(),
        ],
        TOKEN_METADATA_PROGRAM_ID
      )```
where mint is the token id
```
const TOKEN_METADATA_PROGRAM_ID = new PublicKey(
  "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
);```
I am doing the above method , is it correct
const [metaDataAcc, metaDataAccBump] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from("metadata")], program.programId);
How to calculate the above PDA is typescript ?
Metadata's key must match seed of ['metadata', program id, mint] provided
Ok  solved, another stupid issues, literally the needle in the haystack. Programming is ruthless, thanks for this kind of lifesupport channel
Also they can be calculated one and for all in the client side and then always be stored in account and never change right? If they work once (the bumps), they should always work the same after ward for a same programId and seed
not sure, it means your account is owned by a different account than expected
how to debug? i remove all constraints to test and still receive error
I see
No (just a potential gotcha if you accidentally mix up your bumps, since things might erroneously keep working with one choice of `program_id` but not another 😬)
So them eventually being the same is not an issue
For any given choice of seeds, each possible bump has about a 50/50 chance of producing an off-curve hash. So yeah, you'll often wind up with a bunch of different bumps that are all 255, or 254, etc.
```
    [Controller debug info]
        * pda:                                     BHQRPY82N...ug3FfHzHBz
        * bump:                                    255
        * mintPda:                                 5gMvbbc...3LRuTA3iXPL
        * mintBump:                                255
```
Is it normal that too calls return the same bump value? (255) , I assume yes cause it's paired with different seeds, but the other calls seems to behave differently.

```Typescript
        [this.pda, this.bump]
            = findAddrSync([Buffer.from("CONTROLLER")], programId);
        [this.redeemableMintPda, this.redeemableMintBump]
            = findAddrSync([Buffer.from("REDEEMABLE")], programId);
```
Might just be the PDA I get from ts code
Yep, half sorted... Idk work at init then doesn't work for verifying constraints in other instructions I'm not sure what's up. 
Will keep digging and find eventually
Sounds like you already figured this out, but the seeds are totally arbitrary bytes (well, they can only be up to a certain length I think, but otherwise they're arbitrary)
Damn it was a parameter order thing, getting tired and missing obvious things.. for 10+ hours <:trollface:552227154390286376>
Although the name seems more about permissions, but that's the best place I found for now to keep it out of business logics
I don't think so, usually I do it in a `access_control()`
Does anyone know how to write account access constraints in context for a dynamic array of accounts? I am recieving a vector of mint addresses and I want to make sure that their PDA matches the program they should come from, is there any way to write this as a constraint dynamically in context for all the mints in the vector?
This could be it let me try
Worry about this too
Yep indeed, been painful. But it is how it is, will solve and forget as I did for the last months 😁 
Indeed I also think it's undeeded, but I'm running out of ideas
I'm at that point where I've tried too many permutations and I rather ask cause I'm not sure another side effect isn't misleading my searchs
My TS code 
```Typescript
        [this.pda, this.bump] = findAddrSync([Buffer.from("CONTROLLER")], programId);

// then being passed as BN(bump) to the anchor call

```

```Rust
pub const CONTROLLER_NAMESPACE: &[u8] = b"CONTROLLER";

//... I also worry that the fact I call it simply `bump` it collides with something else in anchor?
   pub fn initialize_controller(
        ctx: Context<InitializeController>,
        bump: u8,

//....
    #[account(
        init,
        seeds = [CONTROLLER_NAMESPACE],
        bump = bump,
        payer = authority,
    )]
    pub controller: Account<'info, Controller>,
```
Yikes that does not sound fun :/ wish I could help I don't know whether it *always* needs a public key since it just gets converted to a slice of bytes when you use it as seeds to find a valid PDA
I'm going crazy with invalid seed after a refactor and cannot find the seed issue for like 12+h, I'm trying to worry about weird side effect and incoherent things 😦
Does a findProgramAdress always need the seed to contain at least a PublicKey?
Whoops, what donderper said 😛
Yep, I would say be pleasantly surprised if you get to use docs for solana stuff—expect to just source-dive, it's much easier.
Just read the code
Cause you don't want a separate validator running at the same time. Can't have two
Thanks, that helps. I'll try and understand that.
https://github.com/project-serum/anchor/blob/master/tests/pyth/programs/pyth/src/pc.rs#L101-L111

Should be something relatively simple like this
Got it. So just have to create the same account structure in my program as well to deserialize it and use the data 🙏
otherwise you can just deserialize it however the non anchor code does it
Anchor accounts can be deserialized if you have access to the source code - see 
https://project-serum.github.io/anchor/tutorials/tutorial-3.html#defining-a-puppet-master-program
So conceptually, when you pass an account into a transaction, (any pubkey), you have access to the raw data already
<@!117243115676499972> Sorry dont know let me point to core-dev
Yeah sorry I don't think there's a good one.
°
CPI is for program invocations. I don't need to call a function from the other program. I just need to access the data  from that account 🧐
Been trying to downgrade to 0.18.0, but i keep getting this error ``Package binary version is not correct. Expected "anchor-cli 0.18.0", found "anchor-cli 0.17.0".``
You use a CPI https://docs.solana.com/developing/programming-model/calling-between-programs#cross-program-invocations
Hi, how to access the data of another program account that I do not own from my program function?
<@!117243115676499972>
Where are the docs to see find these method descriptions. Or do I need to look throughh the githhub code for thhis 🙂
Thanks, but I mean to better understand the methods thhat occur. Like Token.createMint...
Official docs are ok - https://spl.solana.com/token for understanding
<@!117243115676499972>
Okay cool, and then do we have any  @solana/spl-token api docs?
Hi it's just the key that has authority to mint more tokens.
<@!117243115676499972>
Does anyone understand
What is mintAuthority when creating Token.createMint??
Where can one find the @solana/spl-token api docs? <@!831450660146642974>
And is it after i run the anchor test command that I restart the test validator
Whhy is the case?
ohh sorry lol. What I mean is when you anchor deploy your program, the text I am reading suggests to terminate the solana-test-validator before running anchor test
i don't run the test command 😄
Any ideas <@!831450660146642974>
Hi all, why do you make sure to terminate the solana-test-validator before you run the test command
I'm just thinking ahead for executing arbitrary instructions using anchor. The sig hash should make it easy to filter out incorrect functions
Or something like that
So anchor uses an 8 byte sig hash and Solana core uses a 1 byte u8 for the enum?
Ah right
Yeah. It's just the 8 byte sighash and then serialized arguments, so not *that* different from the usual instruction enum approach.
So the main differences must lie in the data
Instructions are really just:
Program index + account indices + data
Do serialized transactions / instructions look very different between anchor and solana core?
Weird, I do most of my local dev with 1.57, so not really sure why you're getting that (really doubt anyone here is using 1.44 for any anchor dev)
is anchor not compatible with latest rust?
```
error[E0514]: found crate `cfg_if` compiled by an incompatible version of rustc
 --> /Users/prikshetsharma/.cargo/registry/src/github.com-1ecc6299db9ec823/dashmap-4.0.2/src/set.rs:8:5
  |
8 | use cfg_if::cfg_if;
  |     ^^^^^^
  |
  = help: please recompile that crate using this compiler (rustc 1.44.1 (c7087fe00 2020-06-17))
  = note: the following crate versions were found:
          crate `cfg_if` compiled by rustc 1.56.1 (59eed8a2a 2021-11-01): /private/var/folders/96/df02xppj77g7dx698gtmwmrw0000gn/T/cargo-installVlysVM/release/deps/libcfg_if-eaa82b43cd08793a.rmeta

error: aborting due to previous error

error: could not compile `dashmap`

To learn more, run the command again with --verbose.
warning: build failed, waiting for other jobs to finish...
error: failed to compile `anchor-cli v0.18.2 (https://github.com/project-serum/anchor?tag=v0.18.2#1319dc65)`, intermediate artifacts can be found at `/var/folders/96/df02xppj77g7dx698gtmwmrw0000gn/T/cargo-installVlysVM`

Caused by:
  build failed
```
getting:
trying to install anchor
let parsedPrice = parsePrice(price);
export function parsePrice(price: string, mantissa: number = LAMPORTS_PER_SOL) {
  return Math.ceil(parseFloat(price) * mantissa);
How do I change this line from accepting SOL to accepting any spl token
Friend
ah haha, ok sorry
solang is actually solidity not go
Is it better to develop solana on rust or solang and why?
what i'm really going for is a decay function, i can probably figure out something
Oh, sorry, like floating point exponentiation stuff? I wonder if solana doesn't support that or something
if there is no generally accepted approach then i'll just charge ahead, thanks for the response
well, not yet, but i think i will, i sort of (maybe totally incorrectly) assumed that exponent math was a non-starter
i see jet doing some things
https://github.com/jet-lab/jet-v1/blob/master/libraries/math/src/functions.rs
Are you running out of compute? I guess I had never thought about this before, I sort of figured exponent math was already optimized 🤔
Owner constraint
No it's the one below that
could fudge it with a dictionary...
are there any good libs for optimized math, like exponents?
would it be this https://github.com/project-serum/anchor/blob/master/lang/src/error.rs#L29
thank you
Check the anchor error.rs file
Anchor does
0x90 is 144 but my program has no error 144
Convert from hex to decimal and look up in error.rs of the program giving the error
how do i debug error 0x90


///////////////////////////////////////////////////////////////////////////////////////////////

Would appreciate any help 🐒
I am trying right now to initialize them outside of accounts context because it's an unknown amount of mint addresses and I don't know how to dynamically initialize in the accounts
When I receive addresses for mint accounts as parameters for instructions, do I have to initialize all of them in the accounts context, if so what are the correct constraints is it #[account (zero)] I am not mutating account data just sending burn instructions
but it seems broken in the current version
in the preivous version of Anchor you could get `{code: XXX, message: "..."}` objects from program errors
just wondering if parsing program errors is fixed?
I think it should just be like `{ fieldOne: theValue, fieldTwo: ... }`
I feel like i'm just missing something simple. I have an instruction that takes a struct as an argument, and the struct type is included in the IDL. I can't figure out how to properly send an object from the typescript side...
yeh, just use u64/u128s and keep track of decimal places separately
https://github.com/Synthetify/synthetify-protocol/blob/master/programs/exchange/src/decimal.rs
or you can check this out meanwhile.
Ok, could do what I want using `round`
https://docs.solana.com/developing/on-chain-programs/overview#float-support
(method called on `f64`)
Why this `'Program failed to complete: ELF error: Unresolved symbol (trunc) at instruction #7143 (ELF file offset 0xde50)'`?
Hey, guys, Is there any DEX/Farming made by anchor? can you please recommend any github link or site?
```Typescript
   const controllerAccountResult = await   
   this.provider.connection.getParsedAccountInfo(controller.pda, options.commitment);
    console.log(controllerAccountResult.value);

    let controllerAccount = path<ControllerAccount>( // ControllerAccount mimic my rust structure, seems flimsy, maybe can get that from IDL instead
      ['value', 'data', 'parsed', 'info'],
      controllerAccountResult,
    );
    if (!controllerAccount) {
      throw "controllerAccount not found";
    }
    return controllerAccount.redeemable_global_supply_cap
```
(been using `getParsedAccountInfo` with a TS interface that's supposed to mirror the rust layout, if that's the right way?)
I want to read some info of a PDA account from the front end, been trying for a moment now I don't have the right keywords to find the good way to do so
Anyone have a link to how to parse a abritrary PDA account from Typescript?
deref the box, get a mutable reference to the account
yes, you're right
but isn't it operating on two different things? one on the Box and the other on account itself?
but it doesn't seem confusing to ref and deref at the same time? Assuming that `&`  is a reference thing
this fixes it
```
        let category = &mut *ctx.accounts.category_account;
        category.authority = ctx.accounts.category_authority.key();
```
was just failing to understand what Box actually does
yeh
ah ok, i have to just use `*` to deref
Don't think so (Rust's Deref magic should seamlessly deref through the box)
do we have to start unboxing boxed accounts when loading them? I can't find any examples in the `tests/` directory that do this
getting this funny error 
```
no field `authority` on type `&mut Box<anchor_lang::Account<'_, account::CategoryAccount>>`
```
```
        let category = &mut ctx.accounts.category_account;
        category.authority = ctx.accounts.category_authority.key();
```
I got it
from a rust client?
all token accounts?
https://docs.rs/anchor-spl/0.18.2/anchor_spl/associated_token/index.html
https://docs.rs/spl-associated-token-account/1.0.3/spl_associated_token_account/fn.get_associated_token_address.html
like an anchor wrapper for this
is there a method to get a TokenAccount from a pubkey and owner?
Does anchor.BN support sqrt?
i think i spent 40 minutes in 2 instances looking for a way to do it, but the dirty hardcoding was like a 5 minutes job
I can't seem to find some withcraft to make all that for me
I am given an IDL json and want to cpi to that program, is rebuilding the sighash, data, and accounts meta the right thing to do?
They just call it The Edition, I guess that means the edition metadata account

😛 me too appreciate the help -> the Edition account i think I am going off this sentence in the metaplex docs
and this actual address is it the Editions mint address or the Editions token account address
Bleh, think I'm too tired to effectively help with this tonight—I'm a little confused (does the *mint* have this PDA address, or the corresponding metadata account? Not the same thing)
Or, sorry, create_program_address could also fail if you have the wrong bumps (late night, not writing clearly)
No, I think what you'll have to do is use create_program_address to calculate what the address *should* be, and then compare it with the actual address.
I will try that. But ok, just thought there was some weird serialization limitation but in the end the only limitation is my intelligence. Thank you!
🙏  🙂 been trying to build an NFT upgrade mechanism but this is where my conceptual understanding is shallow
doing experiments with different sizes?
Ok
i have take in control, when that happens I use another account with twice the size
But not sure off the top of my head how likely that is (you could measure though)
I guess you could *also* run out of compute budget
If the vec grows too big for your account allocation, you'll run out of space.
Sorry, think I misunderstood your question—what do you mean by the vec being too big?
Don't borsh serializes each element one by one?
Out of space? Why
Mm, not sure (you can definitely run out of space obviously), I don't have much intuition for the compute budget costs though.
probably because computation budget?
WIll I have problems with serialization if the vec is too big?
But anyway
Jesus
Ok, it was very very likely that with not enough space lol iam retarded
Or, like, how are you calculating how much space you think you need?
Let me see
Hm, don't know. Would be nice if rust let me specify an allocation spot for vec elements (in this case would be the account data memory spot). But probably not possible
How much space are you allocating for your account when the serialization fails?
So basically Vec is inherently not living in the accountinfo itself
What do you mean? I think you'll have to—how are you going to stick the vec's data into the account/pull the data out? Vec storage is in the heap, not in the accountinfo
so to understand if the mint addresses passed in are not valid metaplex Editions, then when I try create_program_address with the mint edition as a seed, will it fail to find a valid program address? what I am trying to do here is to validate that the mint addresses I am recieving are valid Editions
I will not even serialize it probably
Oh, maybe it could be 🤔
Right, but how will that get fixed with an AccountInfo?
don't know why
if the vec is too big
serialize fails
I think I'm confused about what you're planning on doing—if you use a vec you can definitely serialize it into a raw AccountInfo, but then why not use a regular Account?
Being able to use a Vec field
The point of AccountLoader is that it lets you keep the data living in the AccountInfo (no stack stuff *or* heap stuff), while pretending that its a nice struct rather than just bytes.
You definitely can do that but you'll have to work with raw bytes
What's the advantage?
Or just use AccountInfo, right?
But yes, large accounts will have to use zero_copy + AccountLoader
Money 🤣
What goes wrong with just allocating an appropriate amount?
zero_copy is basically using an AccountInfo under the hood, so don't think that will help unfortunately
I have some account structs with a Vec field, which can grow a lot. What I am doing is doubling the account size when necessary to fit more values (by doubling I mean create a new Account with twice the size and copy the contents from the older). But as soon as my Vec grows more than 80 or something I get a Serialization error. It seems the only way to handle large accounts in anchor is through zero_copy, but that requires fixed size structs. Guess my left chance is to use raw AccountInfo
Sorry, I mis-wrote, you'll probably want to use Pubkey::create_program_address, not find_program_address, assuming you already know the seeds + bump (find_program_address just takes the seeds, but the problem is it has to *find* the bump, which costs compute)
right and the address I get from find_program_address is the address of the token account of the edition then right? I was dealing with an issue where I dont know how to get the accountInfo from the address of the token account after find_program_address
Ah, ok, you'll have to use Pubkey::find_program_address with the right seeds + bump, but also using the metaplex program id (not your own program id).
From the metaplex docs an edition is dervied as *The Edition has the same PDA as a Master Edition to force collision and prevent a user from having a mint with both, ['metaplex', metaplex_program_id, mint_id, 'edition'].* So putting in the mint_id from the vector would return the address of the token account of the edition?
so the find program address function returns the address of the token account of the mint that I pass in as a seed right? if it is a valid PDA etc.
For the seeds + bump stuff? It's doing `Pubkey::find_program_address`
ty! could you point me to the code that the anchor macro abstracts over? couldnt seem to find the exact Pubkey::findprogramAddress etc.
Don't think there's an anchor macro way to do that, you'll probably have to validate that manually, yeah.
is there any way to do this currrently in anchor? or should I try and do this loop and PDA derivation in the program instruction logic?

hey all how make sure all the mint addresses in a vector are valid PDAs (they are all editions) through using anchor macros?
Yep.
Ah, no, because Vec uses the heap for its storage (zero_copy has to store everything directly in the account storage itself)
?
so whatever it's initialized at would then be the size
No. Accounts in solana (currently) get one shot to pick their size, so that will ultimately cap how big your vec can grow.
Is it possible to use `zero_copy` on accounts of dynamic size, e.g., accounts with Vec fields?
i cant use an unbounded vec ? <@!693486673606082580>
vecs are unbounded so it can fit any number of values
you can't, you need to decide on the size of the vec upfront, use arrays instead
Now I am getting the error Error: 164: Failed to serialize the account
i have a few structs that appear there but they are purely internal
hi, is there any way to skip a type from going into the IDL?
I am not sure. Do you know <@!134416332509675520>

```
#[account]
pub struct Proposal {
    pub proposal_owner: Pubkey,
    pub proposal_id: Pubkey,
    pub depositors: Vec<Pubkey>,
    pub token_types: Vec<Pubkey>,
    pub pre_token_balances: Vec<u64>,
    pub post_token_balances: Vec<u64>
}
```
how can i calculate the space required for this struct
does anyone have any project that properly implements a staking contract with anchor
Yea thank you so much for trying to help... I am very lost lol
That new error means someone is trying to pay for something but they don't have any money (not sure why though)
Tbh I'm not sure why they're using the `zero` stuff.
Yeah, the `zero` annotation expects the account to have been set up in a prior instruction (like the above)
<@!134416332509675520>
What is interesting, is that the program created by <@!771049362658426910> tests formats his call to the instruction like this

```
await program.rpc.initializeEscrow(
      new anchor.BN(vault_account_bump),
      new anchor.BN(initialAmount),
      new anchor.BN(takerAmount),
      { 
        accounts: {
          initializer: initializerMainAccount.publicKey,
          mint: MintA.publicKey,
          vaultAccount: vault_account_pda,
          initializerDepositTokenAccount: initializerTokenAccountA,
          initializerReceiveTokenAccount: initializerTokenAccountB,
          escrowAccount: escrowAccount.publicKey,
          systemProgram: anchor.web3.SystemProgram.programId,
          rent: anchor.web3.SYSVAR_RENT_PUBKEY,
          tokenProgram: TOKEN_PROGRAM_ID,
        },
        instructions: [
          await program.account.escrowAccount.createInstruction(escrowAccount),
        ],
        signers: [initializerMainAccount, escrowAccount ]
      }
    );

```

He includes an instruction array. I was unaware you can include another instructions array. When I include this back into my code the resulting error changes tto 

  1) escrow
       Instantiate Escrow Program:
     Error: failed to send transaction: Transaction simulation failed: Attempt to debit an account but found no record of a prior credit.
Yea so I am using exactly the same program they createtd
Ah, ok, that snippet is pretty different actually—they're using the `#[account(zero)]` attribute. Are you?
I guess it must not be a PDA based on how you're calling it above
Ah, ok, so it's a PDA? I thought you didn't change anything lol
Line 89 is the call
https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts
EscrowAccountt is a PDA
{
          "name": "escrowAccount",
          "isMut": true,
          "isSigner": false
        },
(Assuming it's not a PDA)
The idl ought to say that escrowAccount needs to sign, so something is odd if it doesn't say that
no, however I am using this person <@!771049362658426910> program which is pratcially the same https://github.com/ironaddicteddog/anchor-escrow/blob/master/programs/anchor-escrow/src/lib.rs
Probably worth trying to upgrade (that's pretty out of date)
anchor-cli 0.16.2
Or, actually maybe that's irrelevant—did you make any changes to the program?
Ah, what does `anchor --version` say?
only initilaier has isSigner as true. However, this instruction creates thhe EscrowAccount requiring me tto provide the escrowAccount as a signer I believe
If you open up the idl for that instruction (in `./target/idl` from the root of your anchor repo), which accounts are expected to sign?
<@!134416332509675520> any thoughts :/
```
 signers: [ escrowAccount ]

```

Along with diff variations of this but it didnt work. Any thoughs
I have gotten rid of initializerMainAccount and just had
I am quite certan the error is the way I am organizing my signrs
Hey so I am following the escrow example instructions from Anchor's repo. I am trying to test the instantiaion of the Escrow Program. For some reason, when I send a request like this, my test fails with the error of (Error: unknown signer: ATGEEDFXXZKHG1HFePfSjcBhQioks3iUEYeDaPCWTDAF). The error signer value isn't any of the public keys from the acconts. I checked

```
  await program.rpc.initializeEscrow(
      vault_account_bump,
      new anchor.BN(initialAmount),
      new anchor.BN(takerAmount),
      { 
        accounts: {
          initializer: initializerMainAccount.publicKey,
          mint: MintA.publicKey,
          vaultAccount: vault_account_pda,
          initializerDepositTokenAccount: initializerTokenAccountA,
          initializerReceiveTokenAccount: initializerTokenAccountB,
          escrowAccount: escrowAccount.publicKey,
          systemProgram: anchor.web3.SystemProgram.programId,
          rent: anchor.web3.SYSVAR_RENT_PUBKEY,
          tokenProgram: TOKEN_PROGRAM_ID,
        },
        signers: [initializerMainAccount, escrowAccount ]
      }
    );
```
Actually maybe it could work with Vec? 🤔 Not totally sure how much stack borsh will use when populating a big Vec (on the stack itself the Vec will only take 24 bytes)
With `zero_copy` etc.
Ok, that's already too big to fit on the stack, you're going to be forced to use `AccountLoader` I think.
Yes, one with a field of type [u64; 512] (I actually want to use [u64; 350] but borsh trait serialize and deserialize are not implemented for it). But just replace that with a Vec<u64>, even tough it's size is always fixed...
Some of those stack offsets are quite large (each individual stack frame is only 4kb, so I'm not even sure you'll be able to fix this with Box—using Box still has to briefly use the stack before moving things to the heap). Are you using some big accounts?
`UncheckedAccount` does nothing (so in general, no, you can't necessarily use it safely—depends on what you're doing!), whereas `Program<'info, System>` verifies that the account really is the system program.
One way you can currently sneak around the 200k limit is by breaking your tx into multiple separate instructions: https://jstarry.notion.site/Transaction-Fees-f09387e6a8d84287aa16a34ecb58e239
That solve the error on my functions, but some remain on other fucntions
What do you mean by mutable accounts being expensive?
Just found out the common account struct between those functions
Is this where I should use Box? How do I know which variables require Box
Getting into these errors. What should I do


///////////////////////////////////////////////////////////////////////////////////////////////

is it possible to cpi into current program?
<@!501570363566587905> what is the best way to call a permissioned market middleware from another middleware? For example, i want to call `settle_fund` instruction on post `new_order_v3` instruction.
thanks a lot <@!134416332509675520> !!!
Yep.
is this understanding correct?
interesting, so to clarify here
1. if try to send from an account owned by system program, use 
```
anchor_lang::solana_program::program::invoke_signed(
         &anchor_lang::solana_program::system_instruction::transfer( ...
```
2.if try to send from a program owned account to external account, use `try_borrow_mut_lamports` for source and destination accounts
So you'll have to calls two `.try_borrow_mut_lamports()`
Ah, yeah, you'll do the same kind of thing (any program can *send* money to any account, no need to own it)
e.g. if Im transfer from my program owned PDA to an external account
but how about its counterparty account?
so I should use this on the program owned PDA
thanks <@!134416332509675520> for explanation, a follow up question on this `.try_borrow_mut_lamports()`
But I think the key point to understand (people get super confused about this) is that at the end of the day, any time you want to spend an account's money or mutate its data, *only* its owning program can do so—so you have to figure out who that program is and convince it to make the change. If that program is your own program then you have to do it yourself.
Yep.
do you mean instead of using 
```
   anchor_lang::solana_program::program::invoke_signed(
         &anchor_lang::solana_program::system_instruction::transfer( ...
```
I should simply do something like this https://github.com/solana-labs/solana-program-library/blob/master/examples/rust/transfer-lamports/src/processor.rs#L24?
That only works for accounts owned by the system program
The key point is that the a given program can only spend money from an account that it owns—so if the account is owned by your program, it won't work to ask the system_program to do the transfer for you
It can be owned by the program itself, but in that case you have to transfer the lamports yourself with e.g. `.try_borrow_mut_lamports()`
can it not be owned by the program itself? I initialized it with 
```
    #[account(
        init,
        seeds = [campaign_name.as_bytes(), b"revenue_account"],
        bump = bumps.revenue_account,
        payer = authority,
    )]
    pub sales_revenue_account: Box<Account<'info, RevenueAccount>>,
```
Only if the source account is owned by the system_program (doesn't matter if it lives at a PDA)
Im currently looking at using
```
        anchor_lang::solana_program::program::invoke_signed(
         &anchor_lang::solana_program::system_instruction::transfer( ...
```
wonder if this is the correct way
Which program owns the account that lives at the PDA?
Hi there, is there any example to do PDA transfer lamports to some account?
On it
Is it possible to get the `UpgradeableLoaderState` enum from a deployed programs `data` field? This enum has the `upgrade_authority_address` that I want to access to perform some checks
Ok thanks, I will try to dig into serum repos and see if there are any examples of deserializing..
You could add your own `constraint = ...` to accomplish the same thing, if you really want
Not sure of any examples off the top of my head, but you'd just need to work directly with the `.data` part of the AccountInfo (the raw bytes)
oh ok. Thanks. Was hoping to not have constraints in the main function.
You'd have to do that check yourself.
Any examples available for this in anchor source or somewhere?
I don't think anchor yet supports checking PDAs that have been derived from other programs (owner isn't the right attribute to do it)
Ok, cool (I'm also not sure that the `owner` thing you're doing will work either, btw, when trying to check the seeds)
It was from another project that shared the struct definition and the seeds for the init so that we can read it's data and actually verify that the account address is derived from the correct seeds.
You won't be able to use `Account` (it does too much in this case)
But if you really don't have that source, then yeah, you'd have to declare the account as an `AccountInfo` / `UncheckedAccount` (same thing) and do the deserializing yourself
Ordinarily you'd do something like the basic-3 anchor example
How do you know the struct definition?
Just to make sure I follow, you don't have access to that program's source etc.?
That program is not owned by me. I only have access to the Struct information as well as the init for the account to know how it was created. So I will not be able to import it.
Does it come from the other program? Can you depend on that program and just import it?
Oh okay, I have defined it in the same file with #[account] 😅 .. Where can define it so that it be deserialized correctly?
Where have you defined `AAccount`? If you did it in this file with `#[account]` then you're telling anchor that your own program is supposed to be the owner.
Hi, I need to ensure that data in account A on a program X is greater than 0, to be able to call function B in my program Y.
So I have done it this way. I have stored program X pubkey in my main program account at initialize (so that it can be updated if needed later)
Now I have set conditions on the account in my function B context as below. I have also defined the full struct of Account A in my Program Y for serializing data.
#[account(seeds = [user_authority.key().as_ref(),main_account.x_program_name.as_ref().trim_ascii_whitespace(),b"x_generate",],
        bump = x_bump,
        owner = main_account.x_program
    )]
    pub a_account: Box<Account<'info, AAccount>>,

However, this fails with the message "The given account is not owned by the executing program". I was not modifying any data here, just reading it. What is the correct way to do it?
https://github.com/project-serum/anchor/pull/838
https://github.com/project-serum/serum-ts/pull/177
<@!501570363566587905> we need these prs merged. it is somewhat urgent for our protocol launch.
anyway, are there other ways that we can prevent people from liking their own posts by writing a script that creates. millions of accounts?
and then posting the inferred address on the program?
so you mean doing the inference in a centralized manner? <@!248066053161222144>
why can't this be done using a regular API?
and the addresses will only be valid if they have done a proof of face through the iphone truedepth ir camera
i feel like building a successful social network is the harder task here
basically the idea is that the program will maintain a list of addresses that can post in the social network's protcol
so that people don't write automated scripts to like their own content
for a social network
I'm thinking of building some kind of proof of face
why do you need to do ML inference on the blockchain?
lol
are there any blockchains conducive to ml inference?
machine learning inference isn't so compute heavy, it's the training that's bad
no floats
<@!134416332509675520> what do you mean barely? Can you use floats or not?
Guess not 😬
I'm very skeptical it will work unfortunately, but I haven't tried it. (You can barely use floats on solana, lol.) ML stuff isn't generally known for being low on compute, and solana has a very tight compute budget.
the following functions are undefined and not known syscalls ["ceil", "floor"].
Are these float functions not available on Solana runtime?
Is there a way I could estimate whether inference on solana would be feasible?
Before building the inference pipeline of solana, I'd like to know whether its feasible at all
Hi guys, I'm thinking of doing machine learning inference on solana
Thanks a ton
To create vanity wallet address - https://smith-mcf.medium.com/solana-vanity-address-using-gpus-5a68ad94d1d4
Keypair on address?
If address then you can try to use https://github.com/fanatid/solana-nice-address
Hey guys, how can i generate a fancy keypair in anchor, like one that starts with "1234"
ty 🙂 will do that
One way you can check this is by computing that address and sticking it in explorer.solana.com
hey all I am a bit confused as to exactly what the above code returns, it uses find program address, with a mint address, does it return the address of the token account of the Edition?

It says in the error, inside `.anchor/test-ledger`
https://discord.com/channels/889577356681945098/889702325231427584/906661496220704778
no idea...how to do that?
What do the program logs say?
no
Have you tried increasing the validator timeout?
I don't think the directory should matter 🤔
any workarounds?
I think the problem is the validator is only running in the (~) directory. otherwise the validator is not starting. similarly here in `anchor test` validator is not starting because it is not in ~ directory
when i run `anchor test`, i get this error  "Unable to start the test validator". any idea on whats the issue?
Oh I'm actually struggling to send a `Vec<MyType>`. If I limit it to a single `MyType` it is able to deserialize the instruction correctly
Does anyone know if `Instructions` are themselves a serializable type in anchor / borsch?
Got it, is this just because of how the code is setup? Not understanding why the error message strings can’t be populated with info specific to where the error is raised from
Yes an no. We can return only error code. There was pull request or issue about adding logs before returning such errors 😐
Hmm I thought it was this and wasn't able to get it to work. I had a pubkey as one of the fields of the structs. I wonder if that was causing it to serialize incorrectly...
Super useful anchor feature request: Can program error messages be more informative? 

e.g. 
```
  code: 167,
  msg: 'The given account is not owned by the executing program'
```
Can the account in question be listed?


///////////////////////////////////////////////////////////////////////////////////////////////

The market state account is definitely larger.
It does!
So when programming using the latest version of serum permissioned markets I ran into this error
`     Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 3: custom program error: 0x1000c85`
```rust
                let market_hdr: &mut MarketStateV2 =
                    try_from_bytes_mut(cast_slice_mut(market_view)).or(check_unreachable!())?;
```

The solution was to increase the size of the serum market account. Previously serum market accounts only needed to be 388 bytes to store the MarketState struct. 

But now serum market accounts need to have space = 1476 (bytes), to accommodate the MarketStateV2 struct. This is required if you plan to use open order authority, prune authority, and/or crank authority

This got rid of my error but just double checking with you <@!501570363566587905> if this sounds right
hmm, i would just use Option, Coption seems kind of awkward
anyways, interesting stuff!
since COption is a drop-in replacement for Option I don't see a reason not to use it (unless you get errors or something)
I think you're right
at least that's my reading of it
yes
it's so that if someone writes a C++ program, they can still CPI into your program
fuck that imo
ah, it's just so that people can write non-rust interfaces with your program
foreign function interface
what's FFI?
The token program has the same id across clusters I believe
<@!248066053161222144> <@!134416332509675520> 
`COption is part of our SDK. It's just an option where the discriminant serializes to one byte instead of four `

`COption is one way to make a program's account data more FFI friendly.  We use it for token and we recommend it as one possible solution.  In general Rust does not support Option for FFI so this is a workaround for that.`

`not necessary to use COption. But if you expect other people to interact with your program with non-Rust languages, you might consider using COption`

`Rust's Option is not FFI compatible so using this FFI compatible option allows clients/programs written in non-rust languages to deserialize token state and instructions `

found some relevant quotes on COption vs Option
Hi guys, any preferences of using the same public id for your program on devnet/testnet/mainnet, any experience on this? It could maybe lead to confusion not sure, interested in what other people are doing, all different addresses or all the same on all envs
If you have more resources about orderbook technical details send me, please
I have to  admit you are right, sorry I am just a kid 😭
Thanks
i feel like if you're trying to build a better orderbook without actually understanding what serum have already had to do, it's a poor use of time
<https://docs.google.com/document/d/1isGJES4jzQutI0GtQGuqtrBUqeHxl_xJNXdtOv4SdII/edit#>
you just have to read about
lol
<@!248066053161222144> responding to you on <#889606719829835816>, what's "the cranker" in serum?
what are the benefits of using `COption` instead of `Option`?
thanks as well 🙂
aha interesting
<https://github.com/blockworks-foundation/ido-pool/blob/main/programs/ido-pool/src/lib.rs#L198>
i just imported it from solana program library
it's from a long time ago though
in Anchor? so you just implemented the trait yourself?
i've used Coption before
alright thanks! yes I'm very curious as well. it's not really explained in the documentation
No, regular Option is fine (not actually sure why solana uses COption in various places—would like to know though!)
as in you have to use `COption` instead of `Option` for some reason
You can use Option in your anchor accounts (I guess you could also use COption, would just have to teach borsh/AnchorSerialize how to do it)
What do you mean by a hard requirement?
`COption` isn't supported by Anchor it seems
`the trait anchor_lang::AnchorSerialize is not implemented for anchor_lang::solana_program::program_option::COption<u64>`
I know `COption` is used throughout programs in the solana program library and that `COption` is just a FFI friendly version of the built-in Rust `Option` but is there a hard requirement for using `COption` instead of `Option` in programs?
Thanks, got my answer.. Needed exponential function on float.
Free anchor dev needed 😈
And it would be trivial to implement both ceil and floor
I'm not sure about float functions, but you should be able to implement your own Decimal with u128 types
Any Paid course to learn Anchor Project development for Solana ?
Apologies
It's Sundeep 🙂 And yeah will keep an eye on my DMs.
Hey Sandeep! Would love to get in touch. check DM 🙂
what a noob cant even autopost into all channels at once <:kekwsmell:662816691394183189>
https://tenor.com/view/damn-you-skeletor-gif-11747628
Oh FFS
NGMI
Spammer
kick him now
damned
spam
hi seems like ceil and floor float functions are not available on solana runtime? Am I correct in this? How to achieve a similar effect?
Is it possible to deserialize the program code stored in the program_data PDA to get the UpgradableLoaderState defined in the bpf upgradable loader program?
hey been curious looking at this
https://github.com/project-serum/anchor/blob/master/lang/src/idl.rs#L91

im trying to determine which program owns the IDL accounts. Or are they just top level accounts like programs - owned by BPFUpgradeable? Seems like that is the case just wanted to make sure im understanding
Go look at that
I know Pyth has good documentation
Does anyon eknow
So for instance, if I want to find Live price of SOL in my progrram, how do I embedd an Oracle in Anchor to do this
Hi guys question: How do you use an oracle on an OnChain program?
Both are useful. The keypair for deploying at whatever address you want and the Anchor.toml setting so that you don't have to pass around the keypair file among devs.
Yea the cli will embed at address in the Anchor.toml if you spin up a local validator. If you deploy, it will use whatever keypair file you have locally.
Anyways guess that's presumably not a bug, but thought it was interesting
But if you don't deploy, the program code goes right in the program_id account.
When you deploy, the program_id account basically just stores a pointer to another account, the one with the actual code in it (it lives at a PDA derived from the bpf upgradeable loader program, with seeds = program_id).
I just noticed that the account where your program's code is stored changes depending on whether you deploy the program or just let anchor spin up a validator for you. Is that expected?
Anchor uses a library called borsh: https://borsh.io/
and any resource around serialization and deserialization if you could suggest any.
was curious what serialization library does anchor use
They remain alive 🧟and as far as I know you'll need an instruction in your program to close them
How do I generate a new program key?
if they remain alive, is it possible to close them without having to implement an instruction in our program to close them and call that  instruction?
when we close a program account, what happen to the accounts owned by the program? remain alive or are also deleted?
it's intimidating thinking about passing the context to another function
I haven't tried CPI-ing to the current program (why do you need to do that, versus just calling another function in your current program?)
Yep, in the `basic-3` tutorial example
is there any example to make cpi call to an anchor program? ideally current executing anchor program?
Is this the way to go https://www.npmjs.com/package/@heavy-duty/ng-anchor ?
I did some research and this seems to be due to the usage of non-browser libraries, such as assert, fs, path, process, etc
Did anyone tried to use anchor with Angular 12? I got many errors about "polyfills"
Should be possible, yes.


///////////////////////////////////////////////////////////////////////////////////////////////

In general it's easier for us to debug if you post text/a screenshot of the error you get
What actual error do you get? This seems to work for me as far as I can tell
i am getting error because there's no field in the struct.
https://github.com/saber-hq/stable-swap/blob/master/stable-swap-math/src/bn.rs#L48
<@!501570363566587905> is there any way to make `U192` derive `zero_copy`?
I actually fixed it, it was a miss named variable in one of the functions.
Interesting, never seen that one before! Will probably have to show more code
Hey guys, anyone have an idea what might cause this error on #[program]? 
```
custom attribute panicked

help: message: removal index (is 0) should be < len (is 0)rustc
anchor-lang-0.18.0/src/program.rs
```
Thx I was missing the conversion to slice 🙂
Could you show what the corresponding `derive(Accounts)` stuff looks like?
TThhey Match 🙂
i am having issues using U192 with zero_copy because it doesn't have any fields in it.
yup I chceked 🙂
Try doing something like
```.rs
TokenAccount::try_deserialize(&mut &account.try_borrow_data()?[..])
```
Would a simple closeAccount work?
What's the easiest way to unwrap wsol program side?
since like you said, you have an AccountInfo, which is a solana primitive. It's just a matter of deserializing it
or even just any other solana program which uses TokenProgram
it's probably not a helpful comment but you could look at the anchor source to see how it deserializes token accounts. Though maybe it will too obfuscated to be of any help
Yeah I've tried but the trait `From<anchor_lang::prelude::AccountInfo<'_>> is not satisfied`. I also tried using `TokenAccount::try_deserialize(account.try_borrow_data()?)`  but the borrowed data are behind a `Ref`
my fault i thought you answered me 😢
yeah oh sorry
i don't think you're replying to the correct message
I tried another project listed in Anchor docs and I get the same error
This error happens to me on this line https://github.com/sosol-gmi/sosol-program/blob/main/tests/sosol.js#L25
i'm not 100% sure but when i needed to deserialize a program account from accountinfo i used
```
ProgramAccount::try_from(&self.program_account).unwrap()
```
maybe something similar could work for `TokenAccount`?
Hi folks, I have one question: how can I convert a AccountInfo into a TokenAccount to get the mint attribute?
sometimes the IDL and other things can be out of date somehow
and check that it matched your declare ID
did you look at the program id listed in the createInstructions?
`instruction illegally modified the program id of an accountError: failed to send transaction: Transaction simulation failed: Error processing Instruction 1: instruction illegally modified the program id of an account`
lol i am sttuck thanks for the help
yea man i am just trying to send as much info to figurre this out
none of this is related to the error you're getting
Yea this should be a relative simple call the initializebaby simply creates state for each account. Like
```
  pub fn initializebaby(_ctx: Context<InitializeBabylon>) -> ProgramResult {
        let b_data = &mut _ctx.accounts.b_data;
     

        b_data.c = 0;
        b_data.t = 0;
        b_data.tr = 0;
        b_data.bby = 1;
        b_data.cux = 1;
        b_data.tens = 0;
        b_data.rieury = 1;
        b_data.outds = 0;
        b_data.tosses = 0;

        Ok(())
    }
```
alrighht thanks so much for the suggestion. All the accounts are initialized in the program or in this case of inititalizeBaby in that instruction 🙂
10kb is the max for PDAs
this solution won't work if you have to store very large data on accounts, but for 90% of situations it should work fine
if i were you, i would do all account initialization inside the program and use PDAs everywhere
the error you're getting is that the accounts you've created are not owned by the program
it could mean anything
it indexes the instructions from 0, 🤷
is incorrect then?
so this could mean my actual program code
the fourth one is the actual program call
the first three instructions are the create instructions
no
The instruction 3 is creatinginstruction right?
same error logs over and over again

```
 Error processing Instruction 3: custom program error: 0xa7
```
Yea you right
`    #[msg("The given account is not owned by the executing program")]`
it's the same error you posted before
<https://github.com/project-serum/anchor/blob/master/lang/src/error.rs>
<https://www.rapidtables.com/convert/number/hex-to-decimal.html?x=0xa7>
```
  logs: [
    'Program 11111111111111111111111111111111 invoke [1]',
    'Program 11111111111111111111111111111111 success',
    'Program 11111111111111111111111111111111 invoke [1]',
    'Program 11111111111111111111111111111111 success',
    'Program 11111111111111111111111111111111 invoke [1]',
    'Program 11111111111111111111111111111111 success',
    'Program 1288yUgqW6vMbJhVmgdBESPmsa6ZTVGyQHNpErBYfXdT invoke [1]',
    'Program log: Custom program error: 0xa7',
    'Program 1288yUgqW6vMbJhVmgdBESPmsa6ZTVGyQHNpErBYfXdT consumed 2667 of 200000 compute units',
    'Program 1288yUgqW6vMbJhVmgdBESPmsa6ZTVGyQHNpErBYfXdT failed: custom program error: 0xa7'
  ]
}
```
Yea ofc
this might not solve your problem, it's just the next debugging step i'd probably try if i were you
you'll need to look up the instructions object details in the web3 docs to see how you can double check what program it's using
it returns an Instructions object
ohhh
just make it it's own line
don't do it like that
no
```
instructions: [
      console.log(await program.account.bData.createInstruction(bData)),
      await program.account.aData.createInstruction(aData),
      await program.account.utData.createInstruction(uData),
    ],
```
We have red marks when doing tihs
yea id didnt like that
you might need to access different variables on the object though to find out what program id it's being assigned to
```
instructions: [
      await console.log(program.account.bData.createInstruction(bData)),
      await program.account.aData.createInstruction(aData),
      await program.account.utData.createInstruction(uData),
    ],
```
something like that
`console.log(await program.account.bData.createInstruction(bData))`
but hohw would i console.log it. Would it be
soryr stupid qustions
ohh okay
i don't know what else would cause a "wrong program owner" error
you could try printing out the createInstructions to the console to double check
make sense. I just checked programid in anchor.toml and lib.rs and the 

declare_id!("1288yUgqW6vMbJhVmgdBESPmsa6ZTVGyQHNpErBYfXdT");
matches my 
[programs.localnet]
baby = "1288yUgqW6vMbJhVmgdBESPmsa6ZTVGyQHNpErBYfXdT"
so when you use `createInstruction` it must be assigning the ownership of the program account to a different programId than your actual program ID
just checked
they are the same
your program and your anchor.toml / cargo.toml have different public keys in them
it's a declare id issue
but yes it is a diff error luckily
yea lol I hhave no idea what tihs error means hahahah
that's a different error
great
That was the error ^
Error: 167: The given account is not owned by the executing program
will share
though
different error
Yea it didnt go throughh
yes this looks fine
yea I tried creating an instruction with this method. Is this not the right method? 

```
  await program.rpc.initializeBabylon({
    accounts:{
      bData: bnData.publicKey,
      aData: aData.publicKey,
      uData: uData.publicKey,
    },
    instructions: [
      await program.account.bData.createInstruction(bData),
      await program.account.aData.createInstruction(aData),
      await program.account.utData.createInstruction(uData),
    ],
    signers: [bData, aData, uData],
  });

```
i don't really follow what's going wrong for you
or don't include signers for accounts that aren't signers in the program
just switch from preInstructions to instructions
did you read the issue you posted
does that make sense? Thanks for the hel p
I have a suspicion the issue is surrounding the solana-keygen pair when anchor ttest is run
My solana addrerss command tho produces a different pubkey... hhowever, whenever I run anchor deploy I have to create a new solana-keygen and then seed it for the deploy to go through... sooooo
I believe the unknow signer could be my solana-keygen being updated everytime a run anchor test and it produces a key that simply has no funds to execute the program.rpc call
I printed out aData, bData, uData and those public keys dont match the unknown signerr above
Been stuck on this for like 5-6 hours lol
So for a specific function like

```
await program.rpc.initializeBaby({
    accounts:{
     
      bData: bData.publicKey,
      aData: assyrianWhitelistData.publicKey,
      uData: uData.publicKey,
    },
    signers: [bData, aData, uData],
  });
```

and
```

  await program.rpc.updateBaby(
    new anchor.BN(A),
    new anchor.BN(B),
    new anchor.BN(C),
    new anchor.BN(D),
    new anchor.BN(E),
    new anchor.BN(F),
    {
      accounts: {
        bData: bData.publicKey,
      },
      signers: [bData],
  })
```

I get the same errors over and over agian for bothh RPC calls 

```
  Error: unknown signer: AoH4wXgy5i56XsXVsVPe7UR3H1PEUzRySERgbkps5J6m

```
it is a keypair address
I have a backend service that listens for events in my program - im using `program.addEventListener` - as is known the socket hangs or fails sometimes.  I was wondering if it is safe or what the expected behavior would be if i periodically ran `addEventListener()` to reconnect in case of dropped ws.  would it add the listener multiple times? (it doesn't look so from my testing) would it not actually reconnect?
it looks like a keypair
Is that address a PDA or a keypair address?
in the RPC call
https://github.com/project-serum/anchor/issues/1060
I am just not sure how to structure the instruction call
I think this may provide guidance
Hi all, I am working on basic RPC calls for tests. Each RPC call is either
1) creating an account (which needs a signer) but the account itself is not a signer in the actual program
2) updating an account without a signer

I continously get "     Error: unknown signer: 7CNZgMVynXBYMsAYM7aVPsW4sxvUJ9TajSMdBwDF8gf1 " with different signer erros whenever I run the command. Any thoughts on what is causing the issue
Hey guys. Does anyone know why this is happening?
BPF SDK: /Users/jivinvaidya/solana/bin/sdk/bpf
cargo-build-bpf child: rustup toolchain list -v
cargo-build-bpf child: cargo +bpf build --target bpfel-unknown-unknown --release
   Compiling anchor-lang v0.18.2
error[E0463]: can't find crate for `std`
Hi I'm getting this error:  instruction illegally modified the program id of an account  why this happen ?
did you just look at the codegen stuff?
Ok thanks
Just how solana works, it's not possible to dynamically look up an account based on its pubkey from within your program, you have to always pass accounts from the client
That's unfortunately not possible in solana, you'll have to pass every one of those user accounts in from the client 😬
Yes
So you're trying to convert the `user` pubkey to an account info?
Hey Guys, 
I have a function where I am trying to loop through a Hashmap which includes a list of Public keys, each time paying some Lamports to that public key. This is the code I have so. 
```
for (user, &stake) in win_dict.iter(){
                // calculate % of staked bal they put in and pay that amount to them 
                let per = (stake / win_stakes) as f64;
                let amount = base_account.pool_list[i].pool_balance as f64 * per;
                // now transfer the ammount in lamports to the winners 
                let ix = anchor_lang::solana_program::system_instruction::transfer(&base_account.key(), &(user as Pubkey), amount as u64);
                anchor_lang::solana_program::program::invoke(&ix, &[
                    base_account.to_account_info(),
                    user.to_account_info(),
                  ]).unwrap();
            }
```
However I get errors wherever I reference the 'user' which is of type PubKey. I guess I am missing the full account info but I am not sure how to get the full account info?
Hey, guys! How do I approach testing a contract that has different permissions for several different accounts, while the provider object only has one wallet? What is a canon way to test a call not from provider wallet, but from a separately generated Keypair?
Thanks for the info. So basically write something like an admin handler and call it to migrate account schema one by one by using something like a v2 seed right?
It's possible but not necessarily going to be easy—you'll have to do everything yourself, e.g. convert each account from V1 to V2 via an instruction your program provides.
`Rent::get()?.minimum_balance(dataLen)`
Hi, if I want to transfer some funds out of an account and still want to make sure the account is rent-exempted. Is there an easy way in anchor I can get the minimum amount to keep my account rent-exempted? Thanks
I did it the Yolo way
No
> I am given an IDL json and want to cpi to that program, is rebuilding the sighash, data, and accounts meta the right thing to do?
<@831450660146642974>  did you figure out how to do this in a nice way?
```
pm ERR! While resolving: undefined@undefined
npm ERR! Found: mocha@9.1.3
npm ERR! node_modules/mocha
npm ERR!   dev mocha@"9.1.3" from the root project
```
```
 Could not resolve dependency:
npm ERR! peer mocha@"^3.X.X || ^4.X.X || ^5.X.X || ^6.X.X || ^7.X.X || ^8.X.X" from ts-mocha@8.0.0
```
I tried npm i mocha... but just errro
any advice on how to fix this
for the test tto run properly
Hi 🙂 I am tyring to run anchor test, but I am having issues with my nodemodules not accepted mocha, or ts-mocha
Many thanks for anyone who can help out 🙏
Im thinking of a scenario where I might need to remove/add new fields into an account. Would it be possible?
Hi there, got a question regarding upgrade of a solana program. Is it possible to also upgrade Account structure?
really helps out 🙂
ok amazing really appreciate it
Borsh serializes enums by using a single byte at the beginning to denote which variant you're doing, so you'd just have to count down from the top of the list (the one you're doing is the 12th one, so counting from zero = 11)
For what it's worth, the way you'd determine that 11 is by looking here: https://github.com/metaplex-foundation/metaplex/blob/master/rust/token-metadata/program/src/instruction.rs#L46
lol sitting on a super old repo
ffs I shouldve pulled
Haha sure 😛
ty so much haha
Lol
how did I not see that function
oh my god lol
^
There's a super similar one in the metaplex repo, or am I being dumb: https://github.com/metaplex-foundation/metaplex/blob/master/js/packages/common/src/actions/metadata.ts#L831
Sorry, getting late and I'm struggling to follow lol—so you're saying you wrote that function above?
main issue is I have no idea how to get that instruction number for the instruction, and I dont know what format to use to serialize data into a buffer (ie. le deserialization etc.)
It uses the the class I am replying to (MintNewEditionFromMasterEditionViaTokenArgs)

ikik haha srry will isoalte the main section
Sorry, I'm on a tiny monitor and these screenshots are huge lol 😛
nono my bad 🙂
Ohhh, sorry 🤦‍♂️
Ah ok so that typescript function above is one I wrote, and its not working shouldve been clearer. I had to write that TS function by looking at the corresponding rust crate. The issue is that the way I am encoding that instruction data is wrong (I have underlined it in the function).
I think I'm maybe still confused about your q, but you would call that TS function above, and get back an instruction. You could then run that instruction by sticking it into a transaction and running it
how would I call an instruction like that in js is my confusion 🙂
above is the link to the metaplex section where they do smth very similar for a function like UpdateMetadataArgs thats implemented in rust ie. https://docs.rs/spl-token-metadata/0.0.1/spl_token_metadata/instruction/fn.update_metadata_accounts.html
https://github.com/metaplex-foundation/metaplex/blob/master/js/packages/cli/src/helpers/schema.ts
i cant really include it in a js file, am unsure how would I call the function
because I think the mint_new_edition function isnt implemented in js yet, like its a rust crate for now, so I dont know how to call it other than manually?
Why do you need to serialize etc. anything yourself?
Mm, I'm confused, can't you just call that function above and get an isntruction back?

What is an instruction number?
sorry if its not super clear I dont totally understand how the the runtime knows which instruction this function corresponds to since its not implemented in a nice solana web3js package or anything yet

I am just copying down the same function wth the same keys but I have two issues, how do I know the instruction number (I have it written in a class elsewhere) and how can I know how to serialize the data when I pass it as instruction data
Thats the complete function implementation in typescript


I mean its the function called mint_new_edition_from_master_edition_via_token (here is the rust crate -> https://docs.rs/spl-token-metadata/0.0.1/src/spl_token_metadata/instruction.rs.html#388-442)
tried doing ANCHOR_WALLET=usb://ledger but getting ``` no such file or directory```
is it possible to use a ledger with ANCHOR_WALLET and ts-node in the cli?
Think you may need to post some code
Is it for an anchor program?
What do you mean only implemented in typescript?
Also, I have seen in other JS code that they specify the instruction number for which instruction they call in the data but I have no idea where to find this number, I am trying to call mint_new_edition_from_master_edition_via_token
Has anyone dealt with a borsch schema IO error? I am trying to write a custom instruction that is only implemented in rust in typescript but I don't understand how instruction data has to be encoded in a buffer
so wondering if there are alternative ways to deploy it
someone in solana tried it as well and ran into the same issue
I'm curious if it's like way off or just a tiny bit too small, etc.
Have you checked how large that buffer account is? Versus how big your program's .so file is
so it should be the correct size
solana program write-buffer <PROGRAM_FILEPATH>
used this to init the buffer account:
That's what will lead to that error
Did you initialize the buffer account with too small an amount of space?
since im writing the program directly into this account
hmm, yeah, naturally but I dont get how this can happen
That error suggests that your program file size is large than the buffer account size
Keep getting this error when trying to deploy:
Error: Buffer account passed is not large enough, may have been for a different deploy?
has anyone had a problem when deploying a program through buffer / using ledger?


///////////////////////////////////////////////////////////////////////////////////////////////

Anyways, I Dmd you the improvement and help for the support. Lmk if you are free to check it out. Thanks
yea true lol... I meant because of the TokenAccount... thanks for catching me
Yep, but no &mut in there 😛
Do you recall?
I am referring to this

```
   pub usdc_token_account: Account<'info, TokenAccount>,

```

I originally was just creating a new keypair in my tests for USDC. You guided me to first set up a mint and then mint tokens to USDC
Hmm, still not sure what &mut you're referring to 🤔 &mut wouldn't do/trigger any solana stuff, only rust stuff
This is referring to the call yesterday helping me understand why my tests were not working on the initialize function
Which &mut? That's just a rust thing, not an anchor/solana thing
Thanks for the guidance on creating specific Mints for each Token Account. I didn't realize the (&mut) on accounts prompts the program to check if all accounts ownership authority belongs to the program
okay, thanks.
Mm, this is hacky but you can make a separate script, `./run_tests.sh`, and stick that command in there (with the ampersands), `chmod +x run_tests.sh` and then do `tests = "./run_tests.sh"` 😬
Ah, sorry, I guess this won't work with the way the anchor cli runs the tests. Hmm.
first script runs fine.
Does the first script fail? I feel like that ought to be fine to chain multiple things like that with &&.
This is my test script inside `Anchor.toml` file but only the first part is running.
`ts-node ./migrations/deploy_localnet.ts -p ./tsconfig.json && ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.spec.ts`
how can I run multiple scripts in anchor test?
Early next week.
Yeh, you can do it inside the program like we do in IDO pool, or you can look at the source for serum common and see how they do it using the spl token program web 3 library
Can you pls provide me an eta on this? That helps me to plan the audit accordingly.
also another question, 

can we do view functions in solana program ? 

similar thing done with solidity.
https://docs.soliditylang.org/en/v0.7.4/solidity-by-example.html#:~:text=function%20winningProposal()%20public,voteCount%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20winningProposal_%20%3D%20p%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D
Hello! 
Can program deploy another program ?
https://project-serum.github.io/anchor/tutorials/tutorial-3.html
Cross Program Invocations (CPI) | ⚓ Anchor
inspired from this, is it possible to make puppet master to deploy as many as puppet's which all own by the puppet-master
Is there another example you can suggest that does the same thing?
Hey guys, anyone have any idea to derive wallet's public key from a transaction or transaction's signature?
I ended up storing `U192` as `[u8; 24]`  inside the struct. Is there any example for parsing `U192` on the front-end?
serum common is woefully out of date
have you tried not using that function
` const serumCmn = require("@project-serum/common");
await serumCmn.createMintAndVault()`
This is happens when I tried this function
Oh yep you right,  thanks Alan, again haha
It actually does export it, `anchor_spl::token::ID`
Anchor does not export the `spl_token::ID;` ? Feel weird having anchor-spl and spl-token as a cargo dependency just for that constant
it's kind of hard to even understand how you can get it
yeh, it's a really weird error that i've never seen before
That error happens here: https://github.com/solana-labs/solana/blob/master/program-runtime/src/instruction_processor.rs#L149
Are you using `instructions: [ ... ]` or `preInstructions: [ ... ]`?
That means you somehow tried to change the `.owner` of an account when you weren't allowed to (the program that the account belongs to, the one that is allowed to mutate its data or spend its money)
No, we need help, I talked to 4 people, we've been getting the same error for two days
hey just wondering if you ever resolved this issue?
Example code that uses this coming soon!
https://github.com/atellix/slab-alloc
I built a library to put multiple dynamic data structures within one account:
Also, I don't think idl is parsing structs with no fields.
I am not sure how `U192` can pass this check: https://github.com/project-serum/anchor/blob/master/lang/attribute/account/src/lib.rs#L226
if you are using the latest version of anchor, the custom error code is included in the error message
ahhh sorry i see this https://github.com/project-serum/anchor/issues/857. Curious if there were other thoughts/challenges/progress beyond this issue
I see some past discussions on doing this for the spl token program but now sure how far that got. One roadblock I see is the account discriminator that is prefixed in anchor accounts but not in my non-anchor project.
For non-anchor projects that want to make it easier to integrate with developers that expect an anchor client, is it possible to manually upload an IDL and get all the anchor client functionality?
I actually saw a sdk for a anchor program in typescript where they did that, kind of very odd lol
I guessed the format from the codegen yes, remade the instruction struct data and hardcoded the sighash 8 bytes
Could also just use a byte array directly and cast to/from the type when needed.
Yes. Though you'll just need to implement the bytemuck traits directly.
Helloo, does anyone know how I can get the error code of a transaction in JS? currently all i see are logs but i'd like to get the code from the logs too somehow
I am sorry I am confused can I talk this through with someone? 
I have no idea. I can share my logic
That could also throw the error you're seeing
Are they owned by the spl token program? You can check with `await program.provider.connection.getAccountInfo(theirPubkey)` and make sure the owner is correct
I think
Are those token accounts you're passing definitely set up correctly?
sorry meant to reply to your previous message. not @
And that error key is unrelated to anything any accounts
The resulting error is      Error: unknown signer: GBbPgJcu9hD3tR9RyXrSxfK2xPetWYthgUcVGEbZJ5i
Then, if I get rid of the instructions sections in my rrpc call like 
```
await program.rpc.initializeBaby({
    accounts:{
      initializer: initializer.publicKey,
      bData: bData.publicKey,
      aData: aData.publicKey,
      uData: uData.publicKey,
      usdcAccount: usdcAccount.publicKey,
      solAccount: solAccount.publicKey,
      treasuryWallets: treasuryWallets.publicKey,
      tokenProgram: TOKEN_PROGRAM_ID,
      clock:  anchor.web3.SYSVAR_CLOCK_PUBKEY,
    },
    signers: [initializer, bData, aData, uData, treasuryWallets],
  });
```
Which tells me that the acconuts are initiated but when the program is invoked the account is not owned by program
The resulting error is 

```
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program ABx93k1tU4SwK2aLyY8dR1fZihWxTwDM4yAByCNWcijP invoke [1]
    Program log: Custom program error: 0xa7
    Program ABx93k1tU4SwK2aLyY8dR1fZihWxTwDM4yAByCNWcijP consumed 4284 of 200000 compute units
    Program ABx93k1tU4SwK2aLyY8dR1fZihWxTwDM4yAByCNWcijP failed: custom program error: 0xa7


     Error: 167: The given account is not owned by the executing program


```
The resulting error is
So here is the breakdown

```
#[derive(Accounts)]
pub struct InitializeBaby<'info> {
    pub initializer: Signer<'info>,
    #[account(mut)]
    pub b_data: Account<'info, BabylonData>,
    #[account(mut)]
    pub a_data: Account<'info, AssyrianWhitelistData>,
    #[account(mut)]
    pub u_data: Account<'info, UrukWhitelistData>,
    #[account(mut)]
    pub usdc_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub sol_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub treasury_wallets: Account<'info, TreasuryWallets>,
    pub token_program: Program<'info, Token>,
    pub clock: Sysvar<'info, Clock>
}
```

and then as a followup, here is the rpc call

```
  await program.rpc.initializeBaby({
    accounts:{
      initializer: initializer.publicKey,
      bData: bData.publicKey,
      aData: aData.publicKey,
      uData: uData.publicKey,
      usdcAccount: usdcAccount.publicKey,
      solAccount: solAccount.publicKey,
      treasuryWallets: treasuryWallets.publicKey,
      tokenProgram: TOKEN_PROGRAM_ID,
      clock:  anchor.web3.SYSVAR_CLOCK_PUBKEY,
    },
    instructions: [
      await program.account.bData.createInstruction(bnData),
      await program.account.aData.createInstruction(aData),
      await program.account.uData.createInstruction(uData),
      await program.account.treasuryWallets.createInstruction(treasuryWallets),
    ],
    signers: [initializer, bData, aData, uData, treasuryWallets],
  });
```
Yea forusre


///////////////////////////////////////////////////////////////////////////////////////////////

Maybe it's in a text book somewhere
Nope, I just was googling about it
Was searching for the original paper, but seems there is no. Do you have a link for a detailed reference?
There's lots online about crit bit trees
That looks like it.
Never heard about crit bit trees. I am curious but seems to exist so little on the web about it
Yes, I think. I searched on the web about crit bit and just find this https://cr.yp.to/critbit.html. This is what you implement?
I don't think so. Are you referring to the serum implementation?
Let's move this conversation out of this channel. Not relevant here.
Is there any crit-bit tree paper? Can't find it
That does sound harsh in that case
There's no getting around. There's just common sense.
So to get around that can you say something to dissociate the person youre asking from the project you're building
Oh
You're spending the goodwill of people withouit permission.
Using anyone's reputation to signal support for a project without asking is abuse.
Why would that be abuse of reputation
Maybe I'm harsh, but that sounds like a clear use and abuse of the reputation of the people here.
Maybe help and collaboration is just what they call asking questions in the discord
appreciate your reply ser, will relay back 👍
Never heard about this. Sounds like a scam.
hello, sorry if this is the wrong channel, but there is a ohm fork launching on solana called babylon dao with over 50k members inside. there was a recent AMA with the devs saying they had a lot of help and collaboration with the anchor devs, however the ss of their repo had only a few contributions.

can i check if any anchor devs know about this? if not i will warn the dao that it most likely is a scam. appreciate your help as it might save a lot of funds for solana users
meaning, each account has a property like `prev_account_pubkey` that can be used to query accounts sequentially.
i meant linked lists of accounts
If vecs aren't cutting it I think you'll almost be forced to use zero_copy approaches, which basically only support arrays as far as I know (linked lists won't work because those will ultimately use the heap, just like vec does).
How big are you talking?
is there any ongoing effort to create a generic set of solana-safe datastructures for use in smart contracts? it seems like we have to implement linked lists and other collections by hand to avoid hitting size limits from storing things in vectors
Interesting, that means somehow your client is not actually declaring that it wants mutable access to that account. Are you updating your IDL?
thank you will check
any idea why this might happen
some interesting issue I am facing, for some reason when I add `[account(mut)]` the program starts error and gives `0x8c` error on devnet but it works fine on localhost
all the way down here: https://docs.solana.com/cli/install-solana-cli-tools, check if the solana binary is included in the `PATH` (you can just do `$PATH` to check if it is included. `export PATH=$PWD/bin:$PATH` . could also be something else ofc
you probably forgot to add the installed solana components into your PATH variable
Hi, I am trying to get Solana an Anchor system properly set up on an M1 Mac. Yesterday I was able to run solana and anchor commands. Today, my device says unknown command when running Solana and I cant build via anchor. Does anyone have any suggestions on next stteps
thx a lot! 🙂
It's not possible in solana to dynamically look up an AccountInfo from a public key (within your program, that is), so yeah, you are forced to pass those accounts in from the client.
hi everyone, is it common practice to generate the `AccountInfo` from a public key stored in a "state-struct". Or is it better to pass in the account through context, and have it pre-fetch in the frontend? 

Specifically, the `system_instruction::transfer`  command requires publiey keys. Invoking it, however, requires the respective `AccountInfo` objects. How can I generate / find the `AccountInfo` object from the public key?

``` 
let res = anchor_lang::solana_program::system_instruction::transfer(
            ctx.accounts.purchaser.to_account_info().key,
            &ctx.accounts.pool_account.pool_solana_account,
            amount,
        );
        invoke(&res, &[ctx.accounts.purchaser.to_account_info(), pool_solana_account.to_account_info()]);
```

=> i.e. how would I generate `pool_solana_account.to_account_info()`?

or is it better to just pass on the individual accounts as input to the program / function context?
Thanxs 🙂
Discord search vanity address / keypair
any thoughts ?
Curious to know how to create address like this `GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw , SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8`
ping? 🙂

bonus info: 
I receive anything between 0 and 3 events in my listener from 1 transaction
black magic... this makes it work, thank you so much!! 🙂 somehow i followed the suggestions of the rust compiler a bit too much in this case. thx <@!134416332509675520> and <@!248066053161222144> !
Think you should just delete that intervening `.account` part, just do `ctx.accounts.pool_account.bond_pool_solana_account`
i marked all the contents of the struct as `pub` , but i guess the struct itself is wrapped withing `accounts`, which is private by default..
yeap, returns the same error...
and then try to access the other things
like 
`let pool_account = &ctx.accounts.pool_account`
i dunno, have you tried do it progressively
hey guys, maybe somewhat of a stupid question, but once I have saved some data into an account, how can I read those?
I am currently trying to read it out using the following logic (third link)

```
let res = anchor_lang::solana_program::system_instruction::transfer(
            ctx.accounts.purchaser.to_account_info().key,
            &ctx.accounts.pool_account.account.bond_pool_solana_account,
            amount,
        );
        invoke(&res, &[ctx.accounts.purchaser.to_account_info()]); 
``` 

but then I get the error that this is a private field. Is there another "best practice" on how to read out the data from this?

``` 
error[E0616]: field `account` of struct `anchor_lang::Account` is private
  --> programs/solbond/src/lib.rs:94:45
   |
94 |             &ctx.accounts.pool_account.account.bond_pool_solana_account,
```
Please look at your dms. Trust me
Thank you so much. Okay umm i will try to implement this on my side 🙂
Hmm, you maybe have to make your own little annoying wrapper type and implement the borsh stuff on that (think rust trait rules won't let you directly implement the trait on [u8; 20304] :/
```.rs
struct LottaBytes([u8; 20304]);

impl AnchorSerialize for LottaBytes {
    fn serialize<W: std::io::Write>(&self, writer: &mut W) -> std::io::Result<()> {
        writer.write_all(&self.0)
    }
}
```
Yeah, 1 sec, maybe I don't know how to do this either lol
Thanks so much. Soh how do we implement this 🙂 Do we provide it as a tag in the [#account()]
You'll have to implement the borsh/AnchorSerialize/AnchorDeserialize traits yourself unfortunately
That means that Borsh hasn't already implemented stuff for that specific array length (annoying, rust isn't great at this yet)
This is referring to the error code: 

```
#[account()]
    | ^^^^^^^^^^^^ the trait `BorshDeserialize` is not implemented for `[u8; 20304]`
    |
    = help: the following implementations were found:
              <[T; 0] as BorshDeserialize>
              <[T; 1024] as BorshDeserialize>
              <[T; 10] as BorshDeserialize>
              <[T; 11] as BorshDeserialize>
            and 36 others
    = help: see issue #48214
    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)

```
hey
how reliable are events in anchor?
tests work fine locally, but this mechanism seem to be working... some of the time on devnet
With the same deployed program and event consumer, with no code or other changes, some events come through, some don't.
have anyone experienced something similar?
Can someone direct me to what this issue is
HI I am gettting this issue: issue #48214
I think you'd just need to install it and start using it—anchor doesn't really have a test framework of its own, you just write random mocha tests (could do anything else too, if you change the `test` command in Anchor.toml)
Anyone know how hard it would be to add mocha-steps to anchor's test framework? https://github.com/rprieto/mocha-steps
ohhh true mixed up messages. Do you wantt me to delete. I will ask in correct chat
the message you're responding to is unrelated to your question
Hi I have a Mac and I am having ttrouble running Solana-test-validator. I get this error: zsh: illegal hardware instruction  solana-test-validator
I created a new anchor program and getting this type error.


///////////////////////////////////////////////////////////////////////////////////////////////

How are you passing this argument? I think I need to see more code to know what you're trying to do
That fixed it! Thanks <@!134416332509675520>
Yea, it would make sense. I've been having an issue with setting the GoLiveDate and the times not matching on the frontend. I'll have to look into that
Probably (not sure obviously, but yeah that seems plausible based on the error code)
Hmm...so this one
0x130 = 304 = the fifth custom error defined by that program
Custom program error: 0x130
I was interacting with a program a couple days ago and using a button that minted tokens perfectly fine with no errors. Now, after making a few changes that shouldn't be related to the button minting, I now get this program error...
nope
Does the `.toArray` work?
anyother way to pass?
Yeah, if I remember right .toArrayLike doesn't exist in the browser I think 🤔
but still getting `TypeError: src.toArrayLike is not a function`
damn right
That's a different function right? toArrayLike vs toArray
ArrayType is required.

If not passed getting `TypeError: ArrayType is not a constructor` error
Seems like you're not supposed to use that first argument, just `offset.toArray("le", 8)`
Getting error  `Error: byte array longer than desired length` while passing u128 variable from client

```
let offset = new BN(0);
offset.toArray(Buffer, "le", 8)
```
How to fix this?
So when a user completes a transaction within the smart contract, I want to call another smart contract to send them a NFT with metadata attached. Is this possible?
have you checked that your anchor cli and solana cli versions match up? this could lead to serialization issues
I did, but I think most of the response resembles yours. hmm let me debug a bit more
did you Ctrl-F the discord to check if anyone else had the same issue?
hmm
I just added SystemProgram, still having 
```
Error: Invalid account discriminator
```
maybe you can just pass in the `SystemProgram` 
`    pub system_program: Program<'info, System>,` 
just to circumvene this error? I am not sure if newer anchor versions don't require you to do this though.
<@!248066053161222144>  but I guess the question here is that I dont quite understand why I am still getting this error cuz in the handler there is no account passed in
I also recommend discord searching your error to get other ideas for debugging
ohhh ok let me dig into that direction, see if I can find something
If you're passing an empty account that anchor thinks has been inited then it gives this error
You might not be initializing the accounts properly
Hi there,
has anyone run into this error? 
```
 Error: Invalid account discriminator
```
For some reason after I added a new handler with anchor this error messages start popping up. I tried to debug it and trim down the accounts to 
```
#[derive(Accounts)]
pub struct Redeem {}
```
and I called it from JS with
```
   await program.rpc.redeem({
      accounts: {},
    });

```
And the error still persists, anyone has idea?
So you need to install Solana and then install the Anchor CLI via npm (much faster this way)
Yes if your CI involves building the program you’re testing, which it probably does
Ooh very nice, good thinking
Ah sorry, `eprintln!`
Hmm, assuming you're depending on the anchor_lang source (so not a fixed build etc.), you ought to be able to see println calls in the code generation part (rather than in the generated code itself)
Ah nws `cargo build` works a treat!
Yeah they're anchor macros. How do you suggest printing? I tried `println!()` in the macro and ran `anchor build` but no luck :/
Oh, right 🤦‍♂️ I always forget that :/
It will not be possible to implement `Default` trait for external type 😦
You can define custom type with `[u64;64]` but you will need to implement `Deref` and other trait which will be needed by hands. https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=1612d510143a62d09e260489e686353c
Are these anchor macros? Cargo expand is definitely helpful, sometimes it's also nice to just edit the macro and start printing intermediate data structures etc. (they'll happily run at compile/build time, so can be nice for poking around)
This is because rust is currently kind of dumb about implementing traits generically over arbitrary length arrays (it's getting better though). You'll have to just implement the Default trait yourself, shouldn't be hard, just have it default to an array of zeros.
I'm just a user of anchor like you guys. If I haven't had to do it personally it's unlikely I have a detailed answer to anything
Also no idea
I don't know front end stuff sorry
Also what are best practices for organizing the front end project wrt. the anchor project? Just put it in the same directory so can share the auto generated IDL/client?
If running tests in CI, do you have to install anchor as a dependency or is there a way to run typescript tests with the Solana CLI?
ideally something simpler than the serum-dex-ui repo though I can dig through that if that's all there is...
<@!248066053161222144> can you recommend a good os react example for creating a simple front end to a solana program?
What has Solidity done to us.... 😞
Most people use JavaScript or typescript but I have seen people ask questions about doing it in native rust
Also what's wrong with stuff being included in the IDL
How do you all write tests with your anchor code?
Find out why private variables are ending up in the IDL
any other suggestions ? 🙂
Weird
this was a private enum. not a pub one but it's still in the IDL
Or do you all write them in typescript?
Does anyone write native rust tests in Anchor?
Yes
Anything private shouldn't appear in the IDL
Don't make them`pub`
Can someone please help me on this build error
Can I include an enum in an account data?
thanks <@!702264277326626878> for the suggestion. giving refactoring a try ...
Haven't found a way to ignore it yet, but just refactoring the enum to not have tuple enums works fine
I got a question about arrays in my accounts.  I want a big array of u64s, but I have the issue: 

```
the trait `std::default::Default` is not implemented for `[u64; 64]`
```

Curiously, this works for [u64; 32].  What can I do to get a bigger array?
<@!189922258611994635> did you figure out how make Anchor ignore enums in IDL ? I am getting similiar issues and have to keep manually remove the enum gens from the IDL.
This actually works pretty nicely https://github.com/dtolnay/cargo-expand
Does anyone happen to know the best way to debug or at the very least expand a procedural macro?
My situation I  have  a specific use case for solana but besides deploying the program to Devnet I'm stuck at how to interact with the rpc calls
Anyone interested in working for one on one programming ? Specifically  moneytoads draffle program
I'm getting this error each time I run `anchor build` 

`dyld: Symbol not found: ____chkstk_darwin
  Referenced from: /Users/admin/.rustup/toolchains/bpf/bin/cargo (which was built for Mac OS X 11.0)
  Expected in: /usr/lib/libSystem.B.dylib`
ok upgrading the anchor cli to 0.18.2 seems to have fixed my issue
it also refuses to generate the idl file
any thoughts?
running `anchor build` gives me the following error:
```
thread 'main' panicked at 'Could not resolve Accounts symbol', lang/syn/src/idl/file.rs:452:22
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```
What's the difference between running `anchor deploy` and `anchor upgrade`?


///////////////////////////////////////////////////////////////////////////////////////////////

You could take a look at the jet protocol codebase, people seem to like it (I'm more of a single-file maxi myself lol 😈)
anyone have a good example of how to structure nicely your project? all examples have just `lib.rs`
How many arguments does it expect?
Can you show me your `pub fn initalize` from rust?
No, it happens with fresh anchor init, too.
Does the error go away if you rerun anchor build? You need to rerun anchor build anytime you make changes to your program that might affect the typescript types (they don't update automatically—you need to use anchor build/anchor test etc. to regenerate the IDL)

typescript rpc method is always expecting 2 arguments and i am getting this type error.
I posted this question last week but didn't get an answer. Can anyone take a look into typescript rpc instructions?
If the account in question is an anchor `Account<'info, Whatever>` you can use `.reload()`
Do I store the cpi context for the invocation and then manually deserialise the data from the account I want to read?
Yeah ^, solana currently can't return anything from rpc endpoingts.
You just get the account data and compute clientside
That is kind of pointless
Hey guys, when a cross program invocation in my program changes the data in one of the accounts it's processing, how can I read the changes in my program after the invocation is finished?
Thank you!
is it possible to create a program function that doesn't cause any state changes? like if i just want the RPC node to execute some saved function for me and send back some data, is that possible? or is the answer to have everything in the client and read the PDA or whatever itself
i've seen some of that in serum code bases, without having really dug in, my interpretation would be that it's a function anyone can call (no permissions needed) to process data or events, since afaik nothing on-chain can trigger a function call itself
This may be a noobie question, but I've seen references to "permissionless cranks" - what exactly does this mean? Is it just a program that's on-chain running in an infinite loop and calling a contract's function each iteration?
where can I find documentation on the token and mint constraints? I'm not finding anything
change the cluster to devnet in Anchor.toml file
I ran `anchor init test` and then changed my endpoint to devnet & ran `anchor deploy` & it looks like it will fail to deploy (2 retries remaining, 134 transactions left) -- is there anything I can do here, or is the deploy process a blackbox?
When developing with the test validator on local host it's really slow to confirm transactions. How can I speed this up?
Ok I'm giving up and just using `[[test.genesis]]` for now.
I think it works as desired,  since using --detach allows me to verify that the program is indeed deployed at the specified addres. I'm debugging something wonky atm. Will report back if I find anythnign intersting.
I have not but admittedly haven’t used it much, will have a play around with it and see if I can break it
ah I just found `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA` is the token program address 😆
<@!326107472098099201> have you run into any trouble using `[[test.clone]]` inside the Anchor.toml for local testing? It appears unable to load the program for me, even though the flags are definitely being passed to the validator.
Hi all, got a question regarding, tokenAccount using anchorJS
I'm trying to get the owner/authority publicKey from a splTokenAccount
```
   const account = await provider.connection.getAccountInfo(
      publicKey
    );
```
interesting I found `account.owner`  is a publicKey with a value like `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`
Is this expected? I guess the `Token` prefix is from the anchor discriminator right? anyway to remove it? 

Reason why Im asking is Im testing a setAuthority instruction on this given token account, and the new account owner pubKey obviously doesnt equal to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`
Thanks guys
are you sure D: ugh, that sucks.. im guessing thats a solana native thing? (not being able to do that)
You can't. You initiate the account with the max size you will need EVER.
thinking of a scenario where a data field is a dynamic array and i have to make the allocation bigger as I add onto the array
im trying to do fixed sized arrays as fields for my PDA data account. apparently that requires zero-copy.
other than the `Big` struct workaround, i got stuck because apparently i need to create the PDA and allocate data for it beforehand

Question: can anchor re-allocate the amount of space an account needs? If i `init` an account with say 40 space, can i then later pass the account in, mark it as `mut` and up to `space` to say 100?
Use the toArrayLike on the Number type, not BN. That will do what you need.
Hey, is there a way to fetch all PDAs with a filtered data value? For example, account struct has a user pubkey field. Can I fetch all the accounts for which the user field has a particular value? Program.account.all() has some filter options but unable to figure out having the data filters.
I suppose the answer is test in prod...
So how are people creating metadata when developing locally? Still no metaplex packages I see.
or is all the fuss caused by the String?
mmmmh arrays work just fine with zero_copy
or else when anchor gets a system for account data field constraints
getting this error now
`IdlError: Type not found: {"name":"name","type":{"defined":"UserName"}}`
I think im just gonna give up on being able to used fixed size array until there it more support for it, and just use dynamic arrays with some basic if/else's for string length constraints
any way to do this with a variable size instead of 280, or 50, etc hardcoded? im wondering if thats a rust question but im not a rust expert
to get around zero-copy
looks like ill have to do the `Big` struct thing..
yeah this wont work for me cause my account is a PDA
but yeah, i will try this out. hopefully anchor does this automatically soon
im gonna cri
Then you say `desc: Big` rather than `desc: [u8; 280]` :/
I think the get around the [u8; 280] stuff you'd have to do something a bit annoying, like this:
```.rs
#[derive(Clone)]
pub struct Big([u8; 280]);

impl AnchorSerialize for Big {
    fn serialize<W: std::io::Write>(&self, writer: &mut W) -> std::io::Result<()> {
        writer.write_all(&self.0)
    }
}
impl AnchorDeserialize for Big {
    fn deserialize(buf: &mut &[u8]) -> std::io::Result<Self> {
        // maybe an easier way to do this part
        let slice = &buf[..280];
        let mut output = [0u8; 280];
        output.copy_from_slice(slice);
        Ok(Big(output))
    }
}

impl Deref for Big {
    type Target = [u8; 280];

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
```
omg
Heh, this thing here: https://github.com/project-serum/anchor/blob/master/tests/chat/tests/chat.js#L22
if there's another way, id like that better. the test didnt say anything about pre allocation
https://github.com/project-serum/anchor/blob/master/tests/chat/tests/chat.js
but i have these fields
```
#[account(zero_copy)]
pub struct User {
    name: [u8; 50], // Human readable name (char bytes).
    desc: [u8; 250]
}

```
*array, sorry
yeah lol
Just because of that [u8; 280] struct?
Could you remind me why you're using zero_copy again?
oh..
no, i expected anchor to do that
The zero_copy accounts are expected to already have space allocated when you use `zero` like above
Ah, ok. Did you actually allocate space for this account, in a separate instruction?
exactly like the chat program, just with a variable name or 2 changed ig
```
pub fn create_chat_room(ctx: Context<CreateChatRoom>, name: String) -> Result<()> {
        let given_name = name.as_bytes();
        let mut name = [0u8; 280];
        name[..given_name.len()].copy_from_slice(given_name);
        let mut chat = ctx.accounts.chat_room.load_init()?;
        chat.name = name;
        Ok(())
    }
```
Ah, ok, how are you accessing the account in your ix handler?
oops
im pretty much doing this 
https://github.com/project-serum/anchor/tree/master/tests/chat
```
#[derive(Accounts)]
#[instruction(bump:u8)]
pub struct CreateUserAccount<'info> {
    #[account(
        zero,
        seeds = [b"user".as_ref(), signer.key().as_ref()],
        bump = user_account_bump
    )]
    user: Loader<'info, User>,
    signer: Signer<'info>,
    system_program: Program<'info, System>,
}
```
yeah im doing all that 😭
With `.load_init()` in your instruction handler
You probably need to do this annoying `#[account(zero)]` bit too
on it 🙂
Can you show me that `#[derive(Accounts)]` code?
yep, a pda
Is that while initializing an account or something?
`"Program log: panicked at 'range end index 8 out of range for slice of length 0', myprogram/src/lib.rs:143:10",`
:/
Sometimes yes but it depends on if borsh has already been implemented for that array length (annoying)
What error do you get?
i see.. is there anchor serialization for fixed u8 array fields?
zero_copy means you don't do any borsh serialization/deserialization. The account's data just stays in its `.data` field that came with its underlying AccountInfo low-level solana account
did you ever figure this out? having the same issue (and also going off the chat test app)
hello, is there a way to generate typescript type definitions from an idl file? all I have is a bunch of IdlTypeDef and IdlTypes stuff but that's not telling me which fields are in an account
i had to add this get rid of an error for a struct with a fixed length byte array field
What is zero copy serialization? relevant code line:
`#[account(zero_copy)]`
Try doing
```.js
await program.rpc.get(new BN(0), {
  accounts: {
    // your accounts
    ...
  }
});
```
You're also not passing any accounts there 🤔
Anchor already supports u128s (they'll just be regular big nums, no need to do any buffer stuff on your own)
Ah, ok. Why do you need to do the buffer stuff at all?
```
let offset = new BN(0);
await program.rpc.get(offset.toArray(Buffer, "le", 8));
```


///////////////////////////////////////////////////////////////////////////////////////////////

https://github.com/project-serum/anchor/issues/971
Sounds great.
On the IDL side I think it would just involve adding another `kind` called `tuple`, and a JSON array describing the types within it. Should I open an issue to track this?
Some projects use the `fixed` crate to avoid issues with floats. So for example, `fixed::I64F64` is a signed fixed point number with 64 decimal places (in binary). This is easy to convert to `decimal.js` on the javascript side.
With anchor, yes.
just use`BN`?
Ok. How do I pack a float into a u64 on JS side to send as instruction argument, for example?
You can represent decimals in u64 and u128.
(I think I need floats in my project, but maybe I don't. Just a noob here)
Hm, but certainly someone already needed floats? For things like prices, for example. What's the alternative for floats?
Features are only added when they're needed. We could add float types if needed, though I prefer to avoid them altogether if possible.
Why Anchor doesn't support float types?
because solanaClient.getTokenOwner returns "3D49QorJyNaL4rcpiynbuS3pRH4Y7EXEM6v6ZGaqfFGK" but the anchorClient.getTokenOwner returns "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" (token program id)
is there any way to know the current holder of a token using only the anchor package?
Yep, also funny alignment stuff!
better do it manually
I think it also does some alignment  since
```
pub struct Example {
    authority: Pubkey, // 32
    nonce: u8, // 1
    mint: Pubkey, // 32
    amount: u64, // 8
}
```

gives 80 while it should 73.
No, you have to specify it yourself
Seeing this, do we need to specify the extra 8 bytes for account metadata or Anchor handles that for us? Thought it would handle that for us
E.g. every Vec will be 24 bytes, since that's how big rust vecs are on the stack, but 24 bytes might be wildly off for your serialization needs.
`std::mem::size_of` gives you the *stack* size of a datatype, which might not be super related to how much space it takes in order to serialize it
No guarantee it will give you the right amount of space (it might be fine, but it depends on what you're doing).
is it safe to use `space = 8 + size_of::<SomeAccount>())`?
Looking at example 3 now, my program is set up in a very similar way but I was not importing the other program
Ah, so importing program_a as a crate is the step I was missing?
If you can import stuff from program_a, you ought to be able to do something like `Account<'info, SomeAnchoryTypeFromA>` and it will work (will check ownership against program_a + deserialize it)
Can you do something similar to how the basic-3 example works?
Is there a good way to deserialize data in an account owned by another program?

I have program_A which is initializing a PDA and setting data. Program_B needs to verify data in the PDA owned by program_A. Adding an `#[account]` with the same struct and am passing in the PDA as `Account<'info, Struct>` results in a `0xa7` error, which makes sense. Passing it in as an `AccountInfo` and using `owner = Program_A` gets past the `0xa7` error and I'm able to check the data length but I'd like to pass it in as `Account` so that I can deserialize the data
Ok forget. Thought you said that the argument names need to be equal. But it's just the types and order. 👍
That's just a rust thing, otherwise the compiler will gently complain that you aren't actually using the arguments—you can just ignore that warning though.
On instruction function, the argument names need to be precede by underscore '_'? As here https://github.com/project-serum/anchor/blob/f66eee7c6dac8cf78c306c336c862a685a05a7db/tests/misc/programs/misc/src/lib.rs#L95 and here  https://github.com/project-serum/anchor/blob/f66eee7c6dac8cf78c306c336c862a685a05a7db/tests/misc/programs/misc/src/context.rs#L76
Seems pretty reasonable to me (I haven't looked at the typescript types all that much, not sure how tricky this is to do)
I was wondering about this and surprised anchor didn't support tuple structs. Since JS has heterogenous arrays and TS's type system supports them, wouldn't it make sense to support them? For example, converting `Struct(T, U)` into `[T, U]`  in TS. This also works quite well with coproduct types, for example
```rust
enum E {
    X(T, U),
    Y { data: V },
}
```
can be turned into
```typescript
type E = { x: [T, U] } | { y: { data: V } }
```
I might be missing something very obvious though.
Just got to be slightly careful with `#[instruction(...)]`, you need to match your actual instruction arguments *exactly*, at least type-for-type and in the right order (the macro just re-parses instruction arguments from scratch, it unfortunately can't just snag them from your instruction handler—so if you get the order/types wrong all sorts of weird stuff can happen)
Wow, amazing. Thank you. Anchor is love.
Yes, yes
Ah ok. Didn't know that too.
So here I'm saying you could (if you wanted to) pass the new account length as an argument from the client.
You can see some examples if you search the anchor repo, it gives you a way to use instruction arguments inside your `#[derive(Accounts)]` struct.
`#[instruction(how_big_new_account_should_be: u16)]`? What this does? Don't know that macro
Yep, or you could even use `#[instruction(how_big_new_account_should_be: u16)]` or whatever.
That `other_account` is a field of the Accounts struct?
No, just `my_thing: AccountInfo<'info>`
`Account<'info, AccountInfo<'info>>`?
You can also use a dynamic `space = `, e.g. `space = other_account.to_account_info().try_borrow_data().unwrap().len() * 2`
You leave the account as just `AccountInfo<'info>`, no need to specify the type its data should look like.
there really needs to be a clean mechanism for closing PDAs outside of a program instruction. it would be very useful for iterating on devnet and cleanup
I need to have some accounts that grow in size as needed. For this it is necessary to create a new account with more space (e.g., double), copy the contents from the old account and close it. **Could you give me some advises on how would this be implemented?**

I was thinking about implementing an instruction which receives two accounts, the one that needs to be "increased" and the new one that is going to have more space and where the contents of the former will be copied into. However, this cannot be done with Anchor because (1) I need to specify the instruction accounts' type (and want any type of account) and (2) I need to specify a constant / compile-time-known space on `#[account(init, space = EXPR]`. So, this needs to be done using the solana_program library?

Thanks
Build from source
https://project-serum.github.io/anchor/getting-started/installation.html#build-from-source-for-other-operating-systems
try this
But it wasn’t working
Tried using brew install
Intel
are you on m1 mac or intel?
Any help installing anchor on Mac
Use Box<> for your account types in struct
hey, guys. how can I put the pubkey directly in rust program? is it possible?
`export RUST_LOG=solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=info,solana_bpf_loader=debug,solana_rbpf=debug`
Has anyone successfully used these options to do detailed debugging on localnet?
`    'Program failed to complete: Access violation in program section at address 0x1002f4eb8 of size 8 by instruction #129305',`
Anybody know how to debug this:
Ok getting further...
if i original did init with JS and want to convert to typescript, can i just run init --typescript in the same directory or need to migrate file by file?
Solution: remove the whole directory and start over...
Is this an idiomatic way to initialise the required NFT + metadata PDAs?
```
#[derive(Accounts)]
#[instruction(token_id: u8, mint_bump: u8, meta_bump: u8)]
pub struct MintData<'info> {
    #[account(
        init,
        payer = payer,
        seeds = [&[token_id]],
        bump = mint_bump,
        mint::decimals = 0,
        mint::authority = mint
    )]
    mint: Account<'info, Mint>,
    #[account(
        init,
        payer = payer,
        seeds = [PREFIX.as_bytes(), metadata_program.key.as_ref(), mint.key().as_ref()],
        bump = meta_bump
    )]
    metadata: Account<'info, Foo>,
    metadata_program: AccountInfo<'info>,
}
```
Also, what should `Foo` be?
`======================================================================
Recover the intermediate account's ephemeral keypair file with
`solana-keygen recover` and the following 12-word seed phrase:
======================================================================
present large runway key left source flag blush demise poem cause coil
======================================================================
To resume a deploy, pass the recovered keypair as the
[BUFFER_SIGNER] to `solana program deploy` or `solana write-buffer'.
Or to recover the account's lamports, pass it as the
[BUFFER_ACCOUNT_ADDRESS] argument to `solana program close`.
======================================================================
Error: RPC response error -32601: Method not found
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.`
more to the message:
hmm interesting, thanks for this. anyway to solve it?
It was actually working fine, then it stopped. It's like there's a failed deploy that can't be removed.
Everything is being done through anchor
https://api.devnet.solana.com
URL?
devnet
which RPC are you using?
`Error: RPC response error -32601: Method not found`
why I try to deploy, I get this... any ideas?
looks like a bug with that canvas library https://github.com/Automattic/node-canvas/issues/1735
i should have plenty so im a bit confused on this, also im only trying to generate 1 image as a test
looks like you ran out of memory 😁

Not sure if this is the right place but wondering if i could get some help. Im using the Hashlips art engine script and have everything in place to go, but when i run node index.js or npm run build, i get this error
It is functional; used to generate clients for metaplex-go (and other)
i knew about the solana sdk cause i wrote a terraform provider for solana data sources using it
dope
Here it is https://github.com/gagliardetto/anchor-go
I'm not sure how developed it is though https://github.com/gagliardetto/solana-go
https://tenor.com/view/wow-omg-surprised-scared-kid-gif-18866710
There's an existing one written by <@!838168894241505283>
<@!501570363566587905> is there any desire/demand for a golang implementation of anchor?
Ah got it - yes I see that happening here! https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/accounts/constraints.rs#L448
Ah I see - thank you 🙂

So for (1), the token account is actually created by the `init` before it reaches the handler - does that sound correct?

That means the following instructions are executed by Anchor
- `SystemProgram.createAccount`
-`TokenProgram.initAccount`

And now in the handler, the account has already been created both at the system level and TokenProgram level
> 1) Is it possible to set the owner of the TokenAccount inside of the instruction handler, or does the owner need to be passed in as an account and set from the client?

only the program that "owns" those accounts is allowed to modify it. in this case you have to make a CPI to the token program to modify the owner of this account. using the set_authority instruction for example

for 2, I think yes it looks like PDA accounts with `init` are mutable by default I think - let me see if i can find a code snippet directly showing that but from my experience looks like yes
Hey y'all - got some questions here. In the following example:

```
    #[account(init,
      ...
    )]
    pub token_account: Box<Account<'info, TokenAccount>>,
    
    ...

pub fn handler(ctx, owner: Pubkey, ...) {
   // Possible to set token_account.owner = owner here?
}
```

1) Is it possible to set the owner of the `TokenAccount` inside of the instruction handler, or does the owner need to be passed in as an account and set from the client?

2) Are accounts with `init` mutable inside of the instruction?
i did not think of using that package
i really appreciate it
wow ty so much for your time ronan
This looks useful: https://docs.solana.com/developing/clients/jsonrpc-api#programsubscribe
https://gist.github.com/ronanyeah/61b1fbb702a9f8b98f96c00c57221000
If I wanted the minting of an NFT token to trigger a web2 service to handle the `spl_metadata` stuff, what would be the best way to listen for those events?
hey everyone. i have been messing around with anchor on javascript, and i have been trying some methods in order to get used to it. i was wondering if there is a way to know the current holder of an NFT. ty in advance
yea there's a bug in the client
i am getting hit on https://github.com/project-serum/anchor/issues/929 npm 0.18.0
rust cli master
Are Discriminator #rekt on 0.18 ?
Use `#[account]`. `#[state]` is deprecated.
Don't use either of them, as they are old/will be removed/deprecated. Use `Account`.
and why use `ProgramState` vs `ProgramAccount`
Can someone explain the difference between `#[account]` and `#[state]` ?
No problem
Makes sense, thanks mate
Don't store it in the fontend, but I have done it on a secure back end
would this be considered bad practice to manage from where users can call my program?
Has anyone built/seen built a mobile dApp using the Trust Wallet or something similar?
How can I send `remaining accounts` through a `RequestBuilder` object for rpc calls in Rust? I get cryptic error messages when I try to pass them through `.accounts` or through the context. I've already checked that the instruction itself actually works.
its timing out for me 30s limit
have you tried doing some tx on dex?
Usually it is slow for me
is the devnet slow?
I do not know if I should do 16 accounts or a vec of 20 strings
Which one is worse???
Also, what if I pass it in 16 accounts???


///////////////////////////////////////////////////////////////////////////////////////////////

I'm probably guessing the way I deserialize inside the custom `Metadata` struct varies with the `TokenAccount` counterpart, coz in `TokenAccount` the way the `Account` state of Token program is done in plain array mutations without any borsh help. 

However in the metadata struct, metaplex have used the Borsh serialize derive macro instead. 
So if that could be a problem, I just don't know the right way to solve it. Maybe if <@!501570363566587905> or <@!248066053161222144> or <@!134416332509675520> or anyone looks into this, that would be super helpful 🙂
hey guys, im wondering, assuming we have the IDL for another program (that is not deployed by us). similar to typescript, is there a way to invoke other solana programs from within anchor / solana rust code?
there is also the zero arg but I cant find a description
where can I find in the docs the description of the values passed into the account macro here -> `#[account(init, payer = user, space = 8 + 8)]` 

Ive seen it in the tutorials but nowhere in the rust docs?
And this is what I get over the error. I was expecting it to get deserialized in a neat fashion, just like how the `Account<'info, TokenAccount>` does, but for some reason it aint happening.
It's a plain assert_eq! function to check if the passed account matches with any of the adjacent state account's sub field. Now this is where the problem is. I'm trying to check the state of the passed `metadata` account (update_authority) with the already initialized `Quarry` account's update_authority field
And this is the instruction signature of the place where we pass those accounts. As you can see there exists an `#[access_control]` macro, which essentially runs before the instruction's invocation.
And this type of Account is passed in one of the instructions `nft_metadata` is the account per se.
So this is what I had wrote for the `Metadata` state of metaplex's metadata program
Hey, umm. I actually tried today to convert a normal Vanilla Solana's state struct (Metadata) into Anchor compatible `Account<'info, T> where T is AccountSerialize + AccountDeserialize + Owner`. Took some inspiration from the `Mint` and `Account` state of Token program which was written, and it was all fine. But when I try to get the state of inside anchor, it panics and states that no such field is present in `Metadata`
Yep i did, it worked thanks 🙂
Just be careful to actually rerun `anchor build` after you fix up your declare_id, easy to forget that
Easy enough a way for me haha, i'm trying that thanks
You can just delete the old keypair in `target/deploy` if you want, and regenerate one with anchor build (need to then edit your declare_id! and rebuild again lol, maybe there's an easier way)
Not really 😄
?
solana-keygen new --force
When deploying : ```Error: Program BX49Um2WSVPDDuoEDgmYgPhpTDoncAJeUP2hCSrsgR4g has been closed, use a new Program Id```

Can't find anything in anchor deploy --help to override the programID.
Tried to override the program ID in the idl without success, so it seems to be a deterministic thing.
How am i suppose to deploy in another address after having closed the previous program ?
alright i just desperately tried `anchor build` one more time in hopes of it compiling out of nowhere <@!134416332509675520> 😆 
I will now factory reset my mac and set it up a little bit
Gonna need you to walk me through step by step like a little noob ❤️ 
Only if you got that time 👍
Sweet thank you.
that works
cool
Yea that works.
tg serum-composers?
Serum folks don't really hang out in here.
Telegram, so that others can see.
to where?
Working on this today. Can we move this out of the anchor discord?
<@!501570363566587905> any update on merging the permissioned market prs to anchor and serum-ts? also, i don't think the latest serum-dex release is live on devnet. when we can deploy it to devnet?
Anchor visitors sounds cool <a:aPES_Think:746135856783425680>
Thanks I appreciate 🙂
This is a somewhat related example, at least of storing some per-address state: https://github.com/cqfd/anchor-visitors/blob/master/programs/visitors/src/lib.rs
In principle this I understand but you wouldn't have a simple examplle to point towards?
The seeds for each account would look something like `seeds = [address.as_ref()]`.
Then to check that everyone has accepted, you would have to pass in all of the relevant PDA accounts (annoying but doable) and check that they've all got that bool set.
The advice about using a PDA is that you could store that equivalent mapping state as a bunch of PDAs, one for each address you care about, and then the account that lives at that PDA would store the bool.
sure I am asking this question for the 1,000,000th time however, I have a number of signers to my contract who must accept something before the contract state can change.

is there anything like `mapping(address => bool)` that I can use on Sol? 

I saw already the advice of creating a PDA but I am not really sure how that solves my problem. If it does then plz explain for a smooth brain kind ser
no errors now
thanks!
i wasn't manually assigning space, i was previously using an array of `[[u8; 20]; 20]` and switched over to Vecs without adding a space argument
you're right
oh fuck
but i will add more
it really should have enough space
ah
Just to double check, do you have enough space? I just tried asking borsh to serialize that vec above and it worked fine/did what I would expect
i don't get any serialization errors when using `Vec<u8>` in a different set of functions but i can't use that here
weird,
```rust
        category.market_list_ids = Vec::from([[0u8; 20]]);
```
gives serialization failed, as does other methods that attempt to add elements to an existing vector
It just initializes a ProgramAccount with init, payer, bump, space constraints. The test passes if I run it normally, but now I am adding the Serum multisig to my code and the instruction needs to be encoded before giving it to the multisig Program
this is a familiar issue that might have to do with how borsch serialization works for u8s. If you put the nonces into an object together they should keep the correct value
Think that ought to be fine (don't think borsh will have a problem with it)
Is anchor not able to serialize vectors that look like this 
```rust
 pub market_list_ids: Vec<[u8; 20]>,
```
Anchor keeps giving error 0xa4  / 164
```
    AccountDidNotDeserialize,
    #[msg("Failed to serialize the account")]
```
What does your `init` instruction look like in rust?
Hi all! I am encoding an instruction using: `program.coder.instruction.encode("init", {publicKey, nonceA, nonceB});`  and decode it just after using `program.coder.instruction.decode(data);`. The publicKey is decoded correctly but the two nonces with original value 255 get decoded as 0. Anyone encountered similar issue?
I think that I'll just use an array and a counter
thank you
So compared to a fixed size array it's just 4 extra bytes
yeah
4 bytes for the length, then each element just gets serialzied one after the other
I assume the `4` is the internal counter in the vector?
No, the size is dynamic, but it's easy to tell how much space it will take during serialization by borsh
is there any way to define a `Vec` with a particular size?
In general you'll need 4 + N * however many bytes each element takes
Not super useful
So you'll have enough space for only empty vectors, lol
haha!
Ah, ok, Default won't work with vectors because their default is empty 😛
Did you not manually specify the `space`?
Yes I am indeed
Are you using `Default` or something?
Very basic code here, just pushing a pubkey on my vector
If I use a vector, I get `Error: 164: Failed to serialize the account` - is this because I didn't specify a size to the vector upfront?
There isn't really any safety issue per-se, just a "you might get a runtime error" issue if you forget the max size for your vec.
If you know you'll want a certain max size, I guess you could use an array (so, fixed-size), but you'll have to do some stuff a bit manually, like store a current count for that array so you know where to insert the next element, etc.
<@!134416332509675520> what's the safest option here? I do know the exact size of the vector at runtime, but I can also just select an upper bound upfront (statically) without issues. What is the best thing to do?
You actually can store a Vec just fine, it's just slightly awkward because you only get one shot to allocate enough space for the account, but the vec itself won't know that
do I need to set the vector size upfront? and if so, what is the syntax to do so? do i just use a static array?
Hey guys, what is the best way to do vectors in Anchor accounts? I assume dynamic vectors are not a thing?
anchor.toml is another place to look as well
i think this data is stored in the connection, maybe check web3 docs to confirm
Any ideas how to change the rpc that anchor is using
Hey guys
Hi All, I have a program that transfers SPL tokens to any token address. How would you go about limiting the number of times a particular address can request tokens within a given time period?
Yeah
I am gonna be gone for like 2 hours but when i get back home i will reset and install everything from scratch
Gonna need you  to tell me step by step what to do 🙂
Not trusting those damn Documentations again 😆
At some point I can try screensharing with you if that might help, don't have excellent internet at the moment
I think i will just factory reset my mac
There is no valuable stuff on here and before i got into solana development i only used it for school and uni.
Every important file that i need will be put on a ssd card
This will get also rid of some unused files and so on. Already have my mac for over 2 years.
Gonna feel good to have a clean mac😍 

if `anchor build` wont work after factory reset then i will just throw my laptop out of the window
you could use a remote linux instance as well and just ssh into it
Unfortunately, no way to stop it right now but good news that this was already fixed! https://github.com/project-serum/anchor/pull/1031
Hey, I am running some tests on my program and testing some failure cases using mocha.

When transactions fail (as expected) anchor prints the error in the terminal.

Anyway to stop this?
Better idea
I will just fresh restart my mac
Just put it on factory settings

This is frustrating as hell
If you cqfd(alan) (not allowed to ping) don't have any idea on what to do, then i will just 
1. delete rust solana anchor cargo and so on
2. if that does not work then put my mac into factory settings and set everything up from scratch
Should i just uninstall rust, solana and anchor and reinstall them in this order.
rust
solana
anchor
I now deleted the file `rustc` from `bin`  and tried the command `cargo +bpf build --target bpfel-unknown-unknown --release ` which its tries after the command where it needs the `rustc` and this now spits out: 

error: process didn't exit successfully: `rustc -vV` (exit status: 1)
--- stderr
error: 'rustc' is not installed for the toolchain 'bpf'
note: this is a custom toolchain, which cannot use `rustup component add`
help: if you built this toolchain from source, and used `rustup toolchain link`, then you may be able to build the component with `x.py`

error: 'rustc' is not installed for the toolchain 'bpf'            I think this literally tells us what the problem is
Alright now i know!
It's not ok. Please stop use pings in such ways. Respect other's time.
I now duplicated the `rustc` file into the `bin` dir i created and now it is able to finish this command: `rustup toolchain link bpf /Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust`
Now it is trying `cargo +bpf build --target bpfel-unknown-unknown --release` bur fails with: `error: process didn't exit successfully: `rustc -vV` (exit status: 1)
--- stderr
error: infinite recursion detected`
<@&889579250720575488> Does someone of you have any idea of what is happening here?
I was told i'm not supposed use multiple pings, but is this okay?
it is technically one ping
i tried adding `bin` to the directory `/Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust` to like imitate that there is this directory
Now its looking for the file `rustc`
Does that give you some clue on what is missing?
And indeed there is now directory bin
But why the hell not?????
I did everything according to the docs
I tried multiple methods of installing and none seem to work with anchor build
after doing `solana-install init` it is able to do at least something.
Before that i did not do anything when doing `anchor build`
But it still is not able to do `cargo-build-bpf child: rustup toolchain link bpf /Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust`
when it tries that command i get the error:error:  `not a directory: '/Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust/bin'`
<@!134416332509675520>
i mean the PATH is updated. its pointing in the right folder
that is so frustrating
the CLI and everything works fine but this stupid bpf stuff
ohh i read your message wrong
What does "so?" mean haha, not sure what you were wondering about lol
q?
Sorry, what's your q?
so?
(You're in shell hell right now I think, not solana hell, just gotta figure out what's wrong with your path)
I'm not sure why you would still get a no such command error if that's in your path like that
It's not some stale install etc.
what do you mean?
Is that the right directory for you checkout etc.?
/Users/alexanderlupatsiy/Documents/solana-1.8.5/bin/cargo-build-bpf
What does `which cargo-build-bpf` say?
nope does not change
already thought of that
Ok, can you anchor build if you make a fresh terminal window? Just to double check you're not using a stale path
there is one in there
Is there no `cargo-build-bpf` file in there?
The `bin` directory from whatever source you checked out
Where?
There should be a `cargo-build-bpf` in the solana bin directory
is it wasnt i would not be able to run the solana commands?
You need to have solana's bin directory in there
Is your path set up correctly?
`error: no such subcommand: build-bpf`
Sounds like you're all good now
Ok, can you anchor build etc. now?
That's running the actual solana cluster locally
Yes
what even is that?
I am a new to solana and still reading through docs and examples
It just counts "slots"
Can you now do `solana-test-validator`?
Can you just skip the solana-install init part? I never do that
Now when i run `solana-install init` i get `Error: "Please specify the release to install for x86_64-apple-darwin.  See --help for more"`
how do i specify the release in the command `solana-install init`?
Ok wait but then it installed `1.52.1-x86_64-apple-darwin` by itself
Then it apparently installed all of the missing bpf stuff:
`cargo 1.52.0 (69767412a 2021-04-21)
+ exec cargo +1.52.1 build --release --bin solana --bin solana-bench-exchange --bin solana-bench-tps --bin solana-faucet --bin solana-gossip --bin solana-install --bin solana-keygen --bin solana-ledger-tool --bin solana-log-analyzer --bin solana-net-shaper --bin solana-sys-tuner --bin solana-validator --bin cargo-build-bpf --bin cargo-test-bpf --bin solana-dos --bin solana-install-init --bin solana-stake-accounts --bin solana-test-validator --bin solana-tokens --bin solana-watchtower --bin solana-genesis`
When i do `rustc --version` it tells me that i have the latest version 1.56.1
alright so everything is installed except the stuff above, which is needed for anchor build like the `build-bpf`
How do i install these 
the error was `error: toolchain '1.52.1-x86_64-apple-darwin' is not installed`
major releases are generally every 1 - 2 months, and 1.8 came out pretty recently
does anyone have an ETA for Solana 1.9?
👍
So i will just do `rustup` and do the same command again (`./scripts/cargo-install-all.sh .`) so that it installs the other dependencies
Not necessary
Plus I can make changes locally if I want and try them out
Yeah, it's just fresher
What is the advantage of doing it that way? Are there some new features?
Never trust the documentation 😛 (Kidding, that looks basically fine, but you can also install from a git checkout is all I'm saying)
well... I need to prove the staker "owns" the tokens that have been vested so far... I'm flexible, but would be better if vesting can be automatic...
this is the documentation on how to build from source

Hmm in on mobile now, i can check after lunch. Do you need the distribution to be done automatically, or should users be able to reseem them@themselves
If you dont need the transfer to happen ‘automatically’ you can just restricy the withdrawal to be after a certain unix timestamp, check out the clock variable
alright, i'll research it and let you know if theres a way to do it all onchain...
in the meantime do you have an example you can point to detailing this mechanism?
I will when the install is finished
At any rate you can just install that rust toolchain with `rustup`
If u come across a better solutions pls lemme know!
On the date given
I think u will need to have a function and invoke this through a crank / offchain
No, I'm installing locally from a git checkout/master branch etc., so I'm using 1.9.0 (but whatever, maybe 1.8.5 will be fine)
I need to vest tokens to stakers account, but prevent them from transferring those token until IDO date.
Is there a mechanism for this? Can I use the mint authority to block transfers?
what do you mean? Isn't the newest version?
Also, rust 1.52 is somewhat old now
Have you updated your path?
I thought you checked out the solana source
How are you still using 1.8.5 though?
Now you probably need to install some stuff with rustup
and this is missing for the anchor build
Got it
Everything is installing now but i still got this error at the beginning:

`Note: Performance libraries are only available for Linux
+ /Users/alexanderlupatsiy/Documents/solana-1.8.5/cargo build --release --bin solana --bin solana-bench-exchange --bin solana-bench-tps --bin solana-faucet --bin solana-gossip --bin solana-install --bin solana-keygen --bin solana-ledger-tool --bin solana-log-analyzer --bin solana-net-shaper --bin solana-sys-tuner --bin solana-validator --bin cargo-build-bpf --bin cargo-test-bpf --bin solana-dos --bin solana-install-init --bin solana-stake-accounts --bin solana-test-validator --bin solana-tokens --bin solana-watchtower --bin solana-genesis
error: toolchain '1.52.1-x86_64-apple-darwin' is not installed`
brew install coreutils
Yep, just need to fix that greadlink issue
i still have my solana-1.8.5 file sitting frehsly downloaded and doing nothing
When i run `./scripts/cargo-install-all.sh .` like it is said in the docs i get:

`./scripts/cargo-install-all.sh: line 12: greadlink: command not found
Install location: /Users/alexanderlupatsiy/Documents/solana-1.8.5 (release)
Note: Performance libraries are only available for Linux
+ '' build --release --bin solana --bin solana-bench-exchange --bin solana-bench-tps --bin solana-faucet --bin solana-gossip --bin solana-install --bin solana-keygen --bin solana-ledger-tool --bin solana-log-analyzer --bin solana-net-shaper --bin solana-sys-tuner --bin solana-validator --bin cargo-build-bpf --bin cargo-test-bpf --bin solana-dos --bin solana-install-init --bin solana-stake-accounts --bin solana-test-validator --bin solana-tokens --bin solana-watchtower --bin solana-genesis
./scripts/cargo-install-all.sh: line 130: : command not found`
Maybe will need to re-source as figuraljordan said/open a new terminal
You should just be able to add the source checkout's `bin` directory to your PATH and be good to go
What failed now?
But building from source does not work or do not fully know what to do 😫
At any rate I just build from source 🤷‍♂️
anchor build worked though
My CLI works perfectly fine
I minted on devnet with metaplex and their candy machine etc.
When i did the reinstall the CLI did also work
But `anchor build` just does not work
Ah, no, maybe it didn't work actually, I can't start my test validator 🤔
Seems to anyway
Yep
I'm running it from within a rosetta terminal
does you `anchor build` also work?
By the way, I tried using the solana installer just now, it seemed to work fine for me lol
how do i export it there
Just dragging the whole folder solana-1.8.5 in there?
or with ~/.profile then run source ~/.profile
I do not have `~/.bashrc`
When I did the uninstalling and reinstalling with the solana install tool it did not change anything when running `anchor build`
So im trying the "Build from Source"
That greadlink thing is something about osx, I think you need to brew install something
Try exporting solana-cli to ~/.bashrc then running `source ~/.bashrc`
Ah, so you're still installing 1.8.5? I install from a git checkout of the source repo
anchor build does not work...
Get this error when running `anchor build`
`BPF SDK: /Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf
cargo-build-bpf child: rustup toolchain list -v
cargo-build-bpf child: rustup toolchain link bpf /Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust
error: not a directory: '/Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust/bin'`
That does not work when i do it in solana-1.8.5/scripts/src
But i mean it says ./scripts so i should be in the solana-1.8.5 directory but when i run it in the solana-1.8.5  folder it gives an error:

./scripts/cargo-install-all.sh: line 12: greadlink: command not found
Install location: /Users/alexanderlupatsiy/Documents/solana-1.8.5 (release)
Note: Performance libraries are only available for Linux
+ '' build --release --bin solana --bin solana-bench-exchange --bin solana-bench-tps --bin solana-faucet --bin solana-gossip --bin solana-install --bin solana-keygen --bin solana-ledger-tool --bin solana-log-analyzer --bin solana-net-shaper --bin solana-sys-tuner --bin solana-validator --bin cargo-build-bpf --bin cargo-test-bpf --bin solana-dos --bin solana-install-init --bin solana-stake-accounts --bin solana-test-validator --bin solana-tokens --bin solana-watchtower --bin solana-genesis
./scripts/cargo-install-all.sh: line 130: : command not found
It's inside the scripts directory
From within the solana source dir
In the docs it says:
...Extract the code and build the binaries with: `./scripts/cargo-install-all.sh .`
Where do i have to run this command?
If this is the same problem, then no extra steps, just uninstalling all files
<@!448034961652449283> I feel like you solved this last time, was there some extra step beyond just uninstalling + reinstalling?
Same, M1 air
on what system are you operating?
I am on macos
yeah im trying it now
I feel like I tried installing 1.8.5 via the installer too (not the first person with this issue on the discord) and it worked fine 🤔
Looks like my internet goofed, trying to respond again—you can always build from source (not actually that bad)
this is sooooo frustrating
what shouls i dooo???
<@!134416332509675520> 
It still does not work
I uninstalled it and installed it back again
It is missing the `bin` in `solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust`
Sorry, wont to it again
I just asked this question several times yesterday and never got an answer 😦
Please don't use multiple pings 🟥
Do you know any projects that are currently working on NFT staking or have a version of it ready already? Or has anybody worked on creating NFT staking programs?

I'm bounce a couple of ideas I have for an upcoming NFT project...
Thank you!
Will get back if something still does not work or i need help ❤️
alright
I used the install tool
I think if you used the helper install thing you can just delete the `.local/share/solana` directory and try again
Did you install it with the helper installer thing, or from source?
how do i uninstall solana?
Is it just the uninstall command? Or do I have to do more?
I think that version 1.8.5 screwed something up with their bfp stuff
Something is wrong with your solana install unfortunately, I think you should uninstall it and re-do it from scratch 😬
<@!134416332509675520> <@!448034961652449283> <@!831450660146642974>
I get this error when running `anchor build`
BPF SDK: /Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf
cargo-build-bpf child: rustup toolchain list -v
cargo-build-bpf child: rustup toolchain link bpf /Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust
error: not a directory: '/Users/alexanderlupatsiy/.local/share/solana/install/releases/1.8.5/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust/bin'
Had done the same mistake 🙂
Yeah, newbie move .. haha
So what’s the sequence that you’re doing? Copy pasting PID and then deploy or the other way? Would love to know 🙂
Gotcha, thanks for the assist tho 🙂
Are you deploying the program first and then changing the program ID in lib.rs and Anchor.toml? If yes, then that’s the reason it might be failing

Do cli: solana address -k ./target/deploy/my_app_name-keypair.json

It’ll give you the program ID to which the code is to be deployed. Copy paste that pID first into lib.rs and Anchor.toml, and then do anchor deploy. 


It should work.

If you don’t have a keypair, anchor build can help generate one.
idk it seems to have to do with the way the account list is being serialized or something
yeah i have noticed that also, the most recent occurrence i've seen was 

`failed to verify account 58qkGKGgUKo31qyWnL3oCeYaUZEM9KnUxMaDYZxEmTnw: instruction illegally modified the program id of an account.`
indeed saw a lot of other people with related issues, but for some reason it's always slightly different I feel, this specific error I haven't seen yet with the `sysvar` account. I will keep looking, thanks
until its solved
thats why i recommended `--skip-local-validator` so i guess ur limited to devnet when on m1
yeah i saw like two other people with this issue already
yes, on my m1 with arm, not on intel based chipsets
`anchor build` creates a random keypair the first time, so if you use your own you have to copy it over it indeed
anchor test / local validator
so it only happens locally?
If not*
That was the issue. I fixed earlier and forgot to update this. Did I miss this in the documentation somewhere? If so I can make a PR To add it
still the same, already tried everything I think 😅 It also happens when I want to use any deployed program on solana localnet
is the keypair in `./target/deploy/keypair.json` the one defined in your `Anchor.toml` and `lib.rs`?
Audius has a package that you might find useful. https://github.com/AudiusProject/fetch-nft#usage-with-configs
Stuck for almost 5 hours on this. Would really appreciate if someone could help on this
And changed Anchor Toml file as well
The address which I am deriving on behalf of the program
Updated declare_id
I know the following question would have asked many times, but I can't figure out exactly where I'm going wrong. 
It's the OG 0xa7 (Account not owned by program) error lol.
But, I have changed over declare_id, Anchor.toml after deploy, and tried anchor upgrade as well.

So, like I was wondering, what's the go to steps when it comes to running a new program and calling an instruction of it? 
Coz, when we anchor init it comes with a placeholder program_id on top right? 
Really wishing it was easier to break through, but for some reason I couldn't break in 
Changed declare_id to the deployed program id
Thanks <@!134416332509675520>, a saint as always!
HI guys, I am gettting a signature verification error when running my rpc call in tests. Any intution why?
These are the tests straight from the tutorials. what am I missing fomr the config?
When I run `anchor test`, it gave me a "    `Error: failed to send transaction: Transaction simulation failed: Attempt to load a program that does not exist"`
try with `--skip-local-validator`
I already compiled solana and anchor from scratch, I can do everything except for `anchor test`
hi everyone, I'm a little lost, I got the new M1 and when I try to run `anchor test` I get ```failed to verify account SysvarRent111111111111111111111111111111111: instruction modified the program id of an account``` not sure where to start looking
Right?
However, I passing in the zero-copy as a state value, instead of an arguemnt. Which means I would have to pass in all my state variables as an argument
Wihch I can go ahead and change the accounts to zero-copy
I see this error here
https://github.com/project-serum/anchor/issues/651
in this scenario
So no typescript
The Tests we are running in javascropt
Are u calling this through typescript?
So when we run anchor testt, the IDL is produced with the Whitelister struct and the IDL reference Whitelister.. but we get a similar error
Hi all I have a quick question surrrouding this error: IdlError: Type not found: {"type":{"defined":"Whitelister"}}... even if it is in our IDL. Any thoughts here
For variable size I think you're kind of stuck with a Vec (or something equivalent)
You can only use [u8] behind a reference, like &[u8] (now rust knows how big it is on the stack)
The other issue with a type like [u8] is that it doesn't even have a size in Rust—like, you can't even have a variable of that type really, since rust needs to know the size so it can figure out how much stack space to take up
Thanks Alan
How long is the array you want to use? You have to specify the length if you want to use anchor serialization
deploy success !! When i didn't have enough it was telling me the amount it needed, i guess it's not that accurate then?
wont this just be byte array of length 1?
Ok, what happens if you just airdrop yourself like 10 sol? Just to rule that out
Nope : O
Its all super simple: https://gist.github.com/Soft-Error/6e567b6384647909aac60f8ded567e05
Mm... are you changing your program's address every time or something?
1.26 SOL
182 kb
How big is the `.so` file for your program?
I wouldn't think a failed deploy would take very much sol from you
How much is it taking?
What about [u8; 1]
since i have to airdrop a new sol each try
it does take the money tho
yep!
Do you have enough money in your devnet account?
That's not one of your own custom errors I don't think (your own custom errors start at 300, not at 1)
Hello! ✨ Been trying to deploy my simple "incrementing" program on devnet, but im getting one of my custom error inside my instruction triggered after running `anchor deploy --provider.cluster devnet`. 

Program and both its instructions tested in js and run fine. How come an instruction error gets triggered when deploying? Does it runs each instruction once before deploying?
anyone know if there is a way to have fields in a struct that are byte array with dynamic size? 
```the trait `anchor_lang::AnchorDeserialize` is not implemented for `[u8]```
i know accounts are fixed so like it make sense. Not sure how strings are allowed with non-fixed size

and i know I could just make it big with a bunch of 0s after its full but seems like thats what you what do without anchor with custom serialization
The red squiggles were unbearable
Lol, a long time ago I was doing some Scala, and it absolutely blew my mind that the intellij people *wrote their own typechecker* (which was constantly slightly off lol)
noice will check it out!
I cant live with the red squiggly 😂
The rust analyzer guy wrote about this recently, kind of an interesting read: https://rust-analyzer.github.io/blog/2021/11/21/ides-and-macros.html
Yeah, have wondered this too, don't think so 😦 I think in general macros are just a huge pain for IDEs


Playing around with a macro to log anchor errors but my intellij can't tell that the error struct implements Debug (even though the build passes)
Random q: Is there a way to hint to intellij that a macro implements a certain trait?
I did:
lib: program functions
context: defines all the instruction contexts
state/: defines the various accounts that hold state
controller/: defines functions that mutate state

https://github.com/drift-labs/protocol-v1/tree/master/programs/clearing_house/src
That's the only difference I spotted
Yes, one has & which is the reference symbol
one is a reference?
Reference
I've started using the anchor framing to break up files since my main project went over 2,500 lines
Lib.rs - for program functions
Context.rs - for account context and implementations on them for CPI
Account.rs - for program account data structs and implementations 
Plus
Errors.rs
Constants.rs
Which are self explanatory
what is the difference between these two 
```let mut account_one = ctx.accounts.only_account.load_init()?;
let account_two = &mut ctx.accounts.only_account.load_init()?;```


///////////////////////////////////////////////////////////////////////////////////////////////

ah damn, I was trying to use `find_program_address` on chain and then pass it to from_account_info

```
        let (metadata_account, _) = Pubkey::find_program_address(&[
            METADATA_PREFIX.as_bytes(),
            METADATA.as_ref(),
            mint.key().as_ref()
        ], &METADATA);
```

I guess I'll have to make an additional call from frontend then
Only possible way is to pass that pubkey as an account from the client (not possible within the program itself, just how solana works)
any idea how I can get AccountInfo from a pub key?
looks like lockup & multisig have client side examples for remaining accounts: https://github.com/project-serum/anchor/blob/a22b94921e184100a23a79a950363a1e91e4a598/tests/lockup/tests/lockup.js#L683 && https://github.com/project-serum/anchor/blob/a22b94921e184100a23a79a950363a1e91e4a598/tests/multisig/tests/multisig.js#L109
thank you
might be relevant, idk https://github.com/rust-lang/cargo/issues/3561
thank you for verifying that
this is a git submodules dependency issue out to another repo, so not surprised something could go wrong here. but looking at the source on github for `0.13.2` (or `0.11.1`), both link correctly, looks like the submodule hash exists
oh yea i do as well
does anyone else get this when installing old versions of anchor
Is it possible to close an account with pubkey X and create another with the same pubkey X in the same transaction? (considering solana design only, not necessarily Anchor capacities)
I got it lol
> Error: Account 6YCsvqa4iPXVKGpQEkwRDiPb9rM9Hb1QPYsfTxiokTGz is not an upgradeable program or already in use
Hey all, I'm working with a github repo doing some open-source web3 work and I created my own keypair to work with instead of the one that was in the repo when I cloned it. I ran anchor build with no problem and got the .so file and IDL...however, when I run anchor deploy I get this error...
has anyone experienced?
when i  install anchor 0.13.2, i got this error

Hello everyone
Do I need to serialize them after the modifications as well?
getting empty after  npm ls @project-serum/anchor-cli
hi, trying to install anchor on a new mac
or `Option<Account<'info, ...>>`
Hm, aren't they deserialized nor validated? How do I call an instruction that uses "optional accounts" on the JS side? Put them after the "required accounts"?

It seems it would be nice to have an attribute "optional" when specifying the accounts in Accounts struct (?).
`remaining accounts`
How can that be if I've never used it before now for testing?
> Error: Account HmJ9nYSjoLzj4WRsT1FoT1JyY9hN4hVZ1Mcxmkjc5z4p is not an upgradeable program or already in use
Hey all, I'm working with a github repo doing some open-source web3 work and I created my own keypair to work with instead of the one that was in the repo when I cloned it. I ran anchor build with no problem and got the .so file and IDL...however, when I run anchor deploy I get this error...
such that the client can either pass it or not when calling the instruction
Does Anchor supports optional accounts for an instruction?
thank you!
I see, I'd better just use two functions
again though, this is more of a design question
if you search `remaining accounts` in the docs and in the discord you'll find some info
if I use remaining accounts, how to read data with same structure? and modify it? sorry for the newbie questions, this is my day 2 of rust and anchor.
I use payer.key as seed
because of this

some of the wallet does not have this pda
it's available to the client
if it's a PDA though, what's wrong with including it?
that's how you add a variable amount of accounts to an accounts context
there is `remaining accounts`
i am building a candy machine like token machine
so there is no way to acheive that?
this is a design issue though
or separate account contexts
maybe make separate functions
so there will be no check to whitelist_data
only after certain check. e.g. public_sale == true
If it isn't required then remove it?
code: 167,
  msg: 'The given account is not owned by the executing program'
otherwise it is returning this errors with the wallet that don' thave the whitelist_data.
currently I have this, but I would like to have this one not required.

wdym by optional pda accounts
Is what I did and now it works just like I need
```
  const _error = program.idl.errors.map(e => {
    let obj = {};
    obj[e.name] = "0x".concat(e.code.toString(16));
    return obj;
  });
  const error = Object.assign({}, ..._error);
```
to avoid  code: 167,
  msg: 'The given account is not owned by the executing program'
is there a way to do optional pda accounts?
lol ya i find myself resorting to understanding-by-squinting a lot
take a look at the anchor tests. The escrow one is similar to paulx's great one, and you'll learn a lot looking at the others
got it, thanks a lot guys!
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L452 it makes the account at a fresh, random address
oh I see, makes sense
it doesn't make an ATA
it looks like `createAccount` just makes a random new account
i haven't seen `mint.createAccount` before
here's how i do it
```javascript
    userUsdc = await Token.getAssociatedTokenAddress(
      ASSOCIATED_TOKEN_PROGRAM_ID,
      TOKEN_PROGRAM_ID,
      usdcMint,
      program.provider.wallet.publicKey
    );
    // Get the instructions to add to the RPC call
    let createUserUsdcInstr = Token.createAssociatedTokenAccountInstruction(
      ASSOCIATED_TOKEN_PROGRAM_ID,
      TOKEN_PROGRAM_ID,
      usdcMint,
      userUsdc,
      program.provider.wallet.publicKey,
      program.provider.wallet.publicKey,
    )
    let createUserUsdcTrns = new anchor.web3.Transaction().add(createUserUsdcInstr);
    await provider.send(createUserUsdcTrns);
    await usdcMintAccount.mintTo(
      userUsdc,
      provider.wallet.publicKey,
      [],
      firstDeposit.toString(),
    );

    // Check if we inited correctly
    userUsdcAccount = await getTokenAccount(provider, userUsdc);
    assert.ok(userUsdcAccount.amount.eq(firstDeposit));
```
yup
```
      let mint = await Token.createMint(solConnection, walletKey, walletKey.publicKey, null, 0, TOKEN_PROGRAM_ID);
      let fromAcc = await mint.createAccount(walletKey.publicKey);
      await mint.mintTo(fromAcc, walletKey.publicKey, [walletKey], 10000000000);
```
does this use different program ID?
not sure exactly but it sounds like you're just generating a random token account using `createAccount`?
I generated it with `createMint` and `createAccount`
i would recommend using devnet validator
could be mismatching program addresses somehow?
on the test validator btw
hello, is it possible getAssociatedTokenAddress can return the wrong value? 

```
  const main_account = await Token.getAssociatedTokenAddress(
    ASSOCIATED_TOKEN_PROGRAM_ID,
    TOKEN_PROGRAM_ID,
    mint,
    walletKey.publicKey
  );
```

This returns `AdjyWs99c7KK4EKUcQut1Y7DgKeee16vc9D6kuPzoG3s` while actual token account is `Ga8Kz4se23ayxAsby78K3L2TACfxQbibC1rsu689vJtx`
it's the weirdness where the program that owns an account can modify its data with impunity. But if you want to add restrictions to that modification you need to add some code that requests a signature from some other account
yeh, i guess they didn't design it with comprehension in mind
So in a sense it's super straightforward, but in practice it really does resist comprehension lol.
Yeah, it's a funny pedagogical situation—for some reason it's a little counterintuitive that addresses and accounts are separate concepts/have separate "ownership"-like ideas (being able to sign for an address vs. being able to mutate an account's data)
it's straightforward but also incredibly detailed / complicated
so a token account PDA is owned by the token program and its "owner" in the account data is another PDA owned by the user's program, which can sign transactions
yeh, i guess the most important part about the PDA is just who signs for it
So yeah, an account that lives at a program-derived address has an owner just like any other account (could be the system_program, or anything else—no different from a regular keypair address)
The program owner (the program that can mutate the account) is independent of whether the address is program-derived (so e.g. you can have an address derived from your program while the account is owned by a totally different program, e.g. the spl token program or whatever)
(my assumption is yes but wanted to confirm, though i can probably just look at the PDA init code)
more dumb questions! I've never actually looked at a PDA in a blockchain explorer. Are PDAs actually owned by a particular program and not the system program?
account not program owned could be a `declare id` macro issue
Thank you, you saved me a bunch of time. I think i had the serialization issue a while back and forgot to clear the cache inside my brain
lol
oh oof
That's an unrelated error, 0xa7 = 167 = AccountNotProgramOwned
```
#[account]
#[derive(Default)]
pub struct Storage {
    pub stuff: Vec<[u8; 32]>,
}
```
Is it possible to use a `Vec<[u8;32]>` type in an account? I allocated enough space in the account macro, but I'm getting 0xa7 error
it's cool that the API is consistent
just for my talk!
i was mostly just trying to make sure that anchor-to-anchor CPI used the same `cpi with context` + function call set up as the SPL stuff
Ah got it
ok but cool
one thing i was wondering about in my head was whether it would just work with an IDL
for anchor-to-anchor CPI you need full source
ah
i'll check that out
You mean something different than like the puppet/puppet-master example?
is difficult to set up in code?
are there any examples in the wild of anchor-to-anchor CPI
error[E0599]: no function or associated item named `from_str` found for struct `proc_macro::Literal` in the current scope
   --> /Users/kobe/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.29/src/wrapper.rs:926:38
    |
926 |                 proc_macro::Literal::from_str(repr)
    |                                      ^^^^^^^^ function or associated item not found in `proc_macro::Literal`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0599`.
error: could not compile `proc-macro2`

To learn more, run the command again with --verbose.
warning: build failed, waiting for other jobs to finish...
error: failed to compile `anchor-cli v0.18.0 (https://github.com/project-serum/anchor?tag=v0.18.0#229e335d)`, intermediate artifacts can be found at `/var/folders/9f/gl233ql12t38njn6189_5f4m0000gn/T/cargo-installg7pphp`

Caused by:
  build failed
need help installing anchor on my mac, intel chip :
(At least the library anchor uses)
Bignums are just for integers, yeah.
Using `new anchor.BN(1.5)` seems to result in `1` (decimal part is ignored). How do we convert back a BN type to number / float?
It would be extremely nice if I could write it like this
```
    await expect(more()).to.eventually.be.rejectedWith(error.NotEnoughTokens);
```
How can I get error messages from `idl`? I don't really want to hardcode their values in my tests like this.
```
    await expect(more()).to.eventually.be.rejectedWith("0x161");
```
ignore ^ explorer was being funny
doesn't close and refund SOL after the txn
hello, does anyone why my program account doesn't close?

```rust
    #[account(init,
        seeds = [owner.key().as_ref(), b"test", mint.key().as_ref()],
        bump = test_bump,
        space=8+8+32+32+8,
        payer=owner
    )]
    pub test: ProgramAccount<'info, Test>
```

```rust
    #[account(mut,
        seeds = [owner.key().as_ref(), b"test", mint.key().as_ref()],
        bump,
        close=owner
    )]
    pub test: ProgramAccount<'info, Test>,
```
would the right way to do this be to reproduce & verify the seeds are sorted in the entrypoint function itself,  & error if not?
is there a way to sort `seeds` during pda account init? seems like i'm required to have `seeds = [ ... ]` explicitly bracketed, & i'm assuming some kind of fn result spreading into the array won't work?
thanks
That is your error....
InstructionDidNotDeserialize: 102,
what is this error does anyoen know     'Program log: Custom program error: 0x66',
Ah, ok, if you use the `close` attribute then anchor skips saving any changes to the account's data: https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/accounts/exit.rs#L27
Hmm, interesting, I haven't looked at this stuff very carefully yet 👀
Which is about discriminator as well
And calling with this pda fails with `0xA2`
And first 8 bytes were all `0xFF`
But then I tested it and I found out that the state of the account didn't change (even though I did change some fields)
I mean I tried to write some checks to ensure that even if weird stuff happens it doesn't affect my contract at all
Yea I'm finding some discussion in the github about this issue https://github.com/project-serum/anchor/issues/708. Also on solana https://github.com/solana-labs/solana/issues/13391

I'm seeing some warnings about zero copy being experimental so I'm going to stay away from that https://github.com/project-serum/anchor/blob/master/lang/attribute/account/src/lib.rs. Box on Account will do.
The other big way to reduce stack pressure is to use `zero_copy` + `AccountLoader`—that just leaves the bytes wherever they came from (I'm actually not sure off the top of my head where a raw AccountInfo's `data` lives)—at any rate that data can be way bigger than an individual stack frame (~4kb I think) or the heap (32kb).
The close attribute attempts to drain the account of lamports, thereby triggering it to get garbage collected at the end of the transaction. The weirdness with the ones is that weird stuff could potentially happen after draining the lamports but before the transaction actually finishes (other instructions after the current one).
What buffering?
Or maybe not, I'm seeing some hard-coded stuff in the macros https://github.com/project-serum/anchor/blob/20726d06bdd6fc17526731a576161ee1b70747e2/lang/syn/src/parser/accounts/mod.rs#L118
Ah I guess this is how you make it box-able https://github.com/project-serum/anchor/blob/39576de39cb2aa3c959827639d562ec8fbd070b9/lang/src/boxed.rs
I've seen some contracts doing it, not sure about the implications of it though. If it's a good idea maybe anchor should just box everything by default?
Also `mut` isn't actually allowing mutation of `close`d accounts
i believe it helps with buffering
is it good practice to just go ahead and box everything?
Or are just Account<'info, T> ever boxable?
Makes sense. I guess same goes for AccountInfo.
I'm using nested accounts where in the accounts structs I have a field which contains another accounts struct. Is there an interface that I can implement to make the whole nested accounts struct box-able?
There’s no need to box the program type because it’s just a bunch of pointers/primitives internally
And what other ways can I put stuff on the heap? I'm getting stack size errors.
why is it possible to use `Box<Account<'info, TokenAccount>>` but not `Box<Program<'info, Token>` ?
Do I understand correctly that `close` attribute "ones" out 8 byte discriminator?
did anybody experience some weird behavior when running `anchor idl init` on localnet. The very same command I'm running used to work on my other computer but I migrated to a M1 Mac recently and here the transaction just hangs. Using anchor 0.18.0 and Solana 1.8.2. I checked  the wallet has SOL, so it doesn't look like a funds issue

UPDATE: it looks very much like this issue https://github.com/solana-labs/solana/issues/18033
Thanks! Looks like this solves the issue
Also, better to do `Program<'info, Token>` and `Program<'info, System>` for the token_program & system_program parts
The owner attribute is actually meant to be a pubkey, not an account, so you'll have to do `owner = a_admin.key()`
(Sorry for this poor formatting, I'm new to discord 😅 )
Can anybody enlighten me what I'm missing here? What am I doing wrong?
`
error[E0308]: mismatched types
  --> programs/sloth-combiner/src/instructions/fusion.rs:14:10
   |
14 | #[derive(Accounts)]
   |          ^^^^^^^^ expected struct `anchor_lang::prelude::Pubkey`, found struct `anchor_lang::prelude::AccountInfo`
   |
   = note: expected reference `&anchor_lang::prelude::Pubkey`
              found reference `&anchor_lang::prelude::AccountInfo<'_>`
   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `anchor_lang::prelude::Pubkey` with `anchor_lang::prelude::AccountInfo<'_>`
  --> programs/sloth-combiner/src/instructions/fusion.rs:14:10
   |
14 | #[derive(Accounts)]
   |          ^^^^^^^^ no implementation for `anchor_lang::prelude::Pubkey == anchor_lang::prelude::AccountInfo<'_>`
   |
   = help: the trait `PartialEq<anchor_lang::prelude::AccountInfo<'_>>` is not implemented for `anchor_lang::prelude::Pubkey`
   = note: required because of the requirements on the impl of `PartialEq<&anchor_lang::prelude::AccountInfo<'_>>` for `&anchor_lang::prelude::Pubkey`
   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)
`
Hi guys! I have a bit of a noobie question here... I want to create a Mint PDA with this code:
`
use anchor_lang::prelude::*;
use anchor_spl::token::{self, Mint, InitializeMint};

use crate::utils::{get_current_date};

#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct InitializeFusionBumpSeeds {
    pub mint_bump: u8,
    pub status_bump: u8,
}

#[derive(Accounts)]
#[instruction(bump: InitializeFusionBumpSeeds)]
pub struct InitializeFusion<'info> {
    pub owner: AccountInfo<'info>,
    pub authority: AccountInfo<'info>,

    #[account(
        init,
        seeds = [
            get_current_date().as_bytes(),
            MINT_SEED.as_bytes(),
        ],
        bump = bump.fusion_mint,
        payer = a_owner,
        owner = a_admin,
        space = Mint::LEN,
    )]
    pub fusion_mint: Account<'info, Mint>,

    #[account(signer)]
    pub a_owner: AccountInfo<'info>,

    pub a_admin: AccountInfo<'info>,

    #[account(address = token::ID)]
    pub token_program: AccountInfo<'info>,

    pub system_program: AccountInfo<'info>,
    pub rent: Sysvar<'info, Rent>,
}

impl<'info> InitializeFusion<'info> {
    fn init_fusion_mint_context(&self) -> CpiContext<'_, '_, '_, 'info, InitializeMint<'info>> {
        CpiContext::new(
            self.token_program.clone(),
            InitializeMint {
                mint: self.fusion_mint.clone(),
                rent: self.rent.to_account_info(),
            },
        )
    }
}
`
And I can't get over this error:
I'm definitely complaining about this hehe
i would consider bringing this up in the solana github issues if you have a good alternate suggestion / raise discussion
if these get concatinated in the method then maybe just have an option to concatinate it before and send &[u8]
i don't know it that well tbh
maybe you know rust better than i do
surely there must be a better way to pass the same information
and an array of all the seed arrays
you have an array of those array corresponding to a single seed
well we need to work around it and create temp variables
each of the 'c arrays is an array of bytes
what's wrong with it
sure
it's `signer_seeds: &'a [&'b [&'c [u8]]]`
the type of signer_seeds argument in invoke_signed
what exactly is the issue you're getting at?
`let signer = &[&seeds[..]]`
I don't get why we're even working around this. This is something that should be fixed in solana IMO. Is there any good reason that this is this way?
you still need to create a temp variable?
but how do you call CpiContext::new_with_signed with this?
makes context creation a lot cleaner too
this is exactly what i do in all my programs. very good design
here's one way to put it in a separate function
```rust
pub trait Seeds {
    // TODO Eventually we could get rid of `trim_ascii_whitespace` by padding
    // all strings in the client. Though this is a big-ish change.
    fn get(&self) -> ([&[u8]; 4], u8);
}

impl Seeds for TradeYesAccount {
    fn get(&self) -> ([&[u8]; 4], u8) {
        ([self.authority.as_ref(),
                self.market_name.as_ref(),
                self.bracket_name.as_ref(),
                b"trade_yes"],
                self.bumps.trade_yes_account)
    }
}
```
In the docs there's this example:
```
        invoke_signed(
            &instruction,
            accounts,
            &[&["First addresses seed"],
              &["Second addresses first seed", "Second addresses second seed"]],
        )?;
```
I have no idea how this works
imagine if everything in the program was like this and that's what programming in classic solana style is like
the signer stuff is one of those things from actual solana programming that slipped in because there's no way around it
lol
if you don't give it a type hint then it gives an error about `&[&[&[u8];2];1]`
this works though:
```
let signer: &[&[&[u8]]] = &[&[
                account.to_account_info().key.as_ref(),
                &[account.authority_bump_seed],
            ]]
```
so at least it's one line instead of two
Nope, everything builds fine
maybe you have an error somewhere else and it's not picking it up?
Yeah, weird, I'm not sure why I don't get that same error with my snippet, wtf.
yep, exactly the same
Actually, I'm curious, do you get the same error if you do `account.key().as_ref()` instead?
Yep 😦 I'm actually confused why the example I posted above doesn't trigger that, hmm.
```
            &[&[
                account.to_account_info().key.as_ref(),
                &[account.authority_bump_seed],
            ]], //signer,
```
temporary value dropped while borrowed
consider using a `let` binding to create a longer lived value
 temporary value is freed at the end of this statement
```
Usually I find that the "just inline it" approach fixes those annoying type bugs (bit fuzzy on this though)
Hmm can you post an example?
because it will say that you gave it the type &[&[&[u8];2];1]
The type part should be fine I think 🤔 (inlining it also often helps rust with the type inference)
yes and also the type
About temporaries?
tried this and every other combination but it complained
One thing you can often do (though not always, and tbh I'm a little fuzzy on when you can't—sometimes rust will complain about temporaries) is just inline the whole thing right into the call site. Like
```.rs
        anchor_spl::token::mint_to(
            CpiContext::new_with_signer(
                ctx.accounts.token_program.to_account_info(),
                anchor_spl::token::MintTo {
                    mint: ctx.accounts.mint.to_account_info(),
                    to: ctx.accounts.pool.to_account_info(),
                    authority: ctx.accounts.mint.to_account_info(),
                },
                &[&[ctx.accounts.something.key().as_ref(), &[mint_bump]]],
            ),
            1000,
        )
```
(I'm talking about `CpiContext::new_with_signer(...)`)
is there some macro to construct this argument?
I mean what an abomination this is:
```
signer_seeds: &'a [&'b [&'c [u8]]]
```
and you cant even abstract it in some method because you need to create a reference and the reference can't live after the method exits
damn does the type of `signer_seeds` argument in `invoke_signed` suck
basically you need to do
```
        let seeds = &[
            pool.to_account_info().key.as_ref(),
            &[pool.nonce],
        ];
        let pool_signer = &[&seeds[..]];
```

every time
surely they would be different errors
and also sol for paying for the transaction
are you sure you have the math right for the amount you're transferring?
number of decimals shouldn't matter
any ideas
hey im trying to execute a transfer using `token::Transfer` for a token with mint decimal of 4 (instead of 9) and the tx fails due to insufficient funds but i have the funds available in the depositing account?
how would that even work? The program has to sign everything linked to a PDA. You just have to set up a function for closing everything probably


///////////////////////////////////////////////////////////////////////////////////////////////

Is there something similar available or do I have to use the first option?
Then on my instruction implementation
```rust
pub fun make_v1(ctx: Context<MakeV1>, ...) -> ProgramResult {
  // do something before optionally
  make_v0(ctx.accounts.other);
  // do something after optionally
}
```
I would have
```rust
#[derive(Accounts)]
pub struct MakeV0<'info> {
    #[account()]
    pub price_offers_account: Account<'info, PriceOffers>,
    #[account()]
    pub game_account: Account<'info, Game>,
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut)]
    pub oracle: AccountInfo<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct MakeV1<'info> {
    #[account(mut)]
    pub outcome_price_offers_account: Account<'info, OutcomePriceOffers>,
    pub other: MakeV0<'info>
}
```
So instead of
```rust
#[derive(Accounts)]
pub struct MakeV0<'info> {
    #[account()]
    pub price_offers_account: Account<'info, PriceOffers>,
    #[account()]
    pub game_account: Account<'info, Game>,
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut)]
    pub oracle: AccountInfo<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct MakeV1<'info> {
    #[account(mut)]
    pub outcome_price_offers_account: Account<'info, OutcomePriceOffers>,
    #[account()]
    pub price_offers_account: Account<'info, PriceOffers>,
    #[account()]
    pub game_account: Account<'info, Game>,
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut)]
    pub oracle: AccountInfo<'info>,
    pub system_program: Program<'info, System>,
}
```
I have an instruction A which does exactly the same as instruction B + something else. I would like to avoid the Accounts definition repetition:
You can do it with javascript : 
```
await provider.connection.requestAirdrop(
        userPK,
        anchor.web3.LAMPORTS_PER_SOL,
    )
await provider.connection.confirmTransaction(fromAirdropSignature);
```
(Since I met Anchor, I became a lazy person)
Or Anchor offers some out-of-the-box keypairs of accounts that have a balance
I have been developing my tests using only one client. How can I use more clients? I can use solana CLI to airdrop lamports to some keypairs. Do have to do that myself?
Oh yes, I am retarded.
If you specify the owner as being some other program, then your own program will never get the chance to write those discriminator bytes (your program can't mutate that account at all, since it's owned by the other program)
Specifying the `owner` means that the account data won't have the 8 bytes ID?
Sorry, lost my train of thought, a more direct example of your question: `#[account(init, payer = somebody, owner = some_pubkey, ...)]`
All by itself `init` will still assign the owner to be the current program, but other attributes can change this, e.g. `mint::authority` and `mint::decimals` will initialize a mint account owned by the spl token program.
Ok, cool. Just for curiosity, how do we init a non-anchor account? Using `AccountInfo<'info>` instead of `Account<'info, ...>`?
One way to test this yourself is by doing e.g.
```.rs
#[test]
fn enum_test() {
    #[derive(AnchorSerialize)]
    enum Traffic {
        Red,
        Yellow,
        Green,
    }

    eprintln!("{:?}", Traffic::Green.try_to_vec());
}
```
in your program file.
It's actually 8 bytes, not 1, and yep, you need to account for it yourself: `space = 8 + ...`. I think one reason why you need to account for it yourself is that the `init` macro can also init non-anchor accounts.
Likely just an Anchor bug. This feature isn't well exercised / is half baked.
to make the other instructions work ..
or maybe improper use ... but it does not look like i can more than 1 argument in `SomeInterface<'_, T>` 🤔
Sounds like a bug 😮
So we have to use the same context struct for all the methods ... ?
It seems like the interface macro always generates: `ctx: anchor_lang::CpiContext<'a, 'b, 'c, 'info, T>,`
Hey <@!501570363566587905>. Say I have
```rust
#[interface]
pub trait SomeInterface<'info, T: Accounts<'info>> {
    fn foo(ctx: Context<T>) -> ProgramResult;
    fn bar(ctx: Context<T>) -> ProgramResult;
    fn baz(ctx: Context<T>) -> ProgramResult;
}
```

is it possible to implement
```rust
    impl SomeInterface<'_, T> for SomeStruct {
        fn foo(
            _ctx: Context<'_, '_, '_, '_, A>,
        ) -> ProgramResult {
            unimplemented!()
        }

        fn bar(
            _ctx: Context<'_, '_, '_, '_, B>,
        ) -> ProgramResult {
            unimplemented!()
        }

        fn baz(
            _ctx: Context<'_, '_, '_, '_, C>,
        ) -> ProgramResult {
            unimplemented!()
        }
    }
```
?
fees?
Does anchor have a "`solana_program::rent::ACCOUNT_STORAGE_OVERHEAD`"? On that includes solana overhead and its own overhead?
A simple Enum, without fields. 1 byte, right?
How many bytes borsh uses to save an Enum?
I know anchor saves a 1 byte ID for the struct type in the account, because of security concerns when deserializing. Do I need to account for these 1 byte when specifying the accounts size on the [account(init, space = ...)] macro?
Why can't I transfer 1 token from a wallet with balance of 1 token, using the SPL token program? 🤔 I wouldn't expect this error
Is there any out-of-the-box function to validate whether a dynamic struct (such as a Vec) fits (when serialized) in a given account? Or do I have to do that calculations myself?
most likely what's happening is one of the accounts you're passing in wasn't initialized as the anchor account that the function expects
Can you please help me with this issue?

Oh nice!
Cool... This one looks easier
<@!823873608878522379> ^
You can also do `let some_pubkey: Pubkey = "asdfasdfasd".parse().unwrap()`
Oh.. Great... Thanks a lot for your help.
In python
```python
from base58 import b58decode
print(list(b58decode("BpuwmcyfuvffJh6jZAUCcRdvAm1vigtz3mwfSaGBQp8y")))
```

Then rust

```rust
const TEST: Pubkey = Pubkey::new_from_array([160, 219, 8, 22, 227, 166, 173, 32, 149, 45, 143, 246, 69, 112, 130, 49, 120, 232, 50, 14, 177, 46, 228, 224, 4, 156, 218, 144, 32, 174, 50, 194]);
```
Sorry bit new.. Can you give me some examples?
convert it to [u32] array and PubKey::new_from_array([bytes])
Hi Did you find any solution for this?
awesome, thank you
just getaccountinfo should work
hi, team, how to use anchor to check whether a token account is created?
Thanks, I'll try to do that
but likely you can combine them, with the instructions
Gotcha
Basically, my contract allows withdrawal and reward, I want to call reward() before withdraw()
if necessary
there are many platforms that have decided to be OK with this, and just ask for multiple approvals
i think you need to ask why that is necessary, and if you can consolidate
Can be multiple transactions, but single click
But I want to make two different calls together, is that not possible?
you can add an arbitrary-length list of instructions on top of the RPC call, but it has to be a single transaction
Got it, is there any way to make multiple RPC calls (transactions) with just one wallet popup?
hmm what could this be Transaction simulation failed: Error processing Instruction 0: Program failed to complete 
    Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS invoke [1]
    Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS consumed 2219 of 200000 compute units
    Program failed to complete: Access violation in stack frame 3 at address 0x200003bc0 of size 8 by instruction #13270
    Program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS failed: Program failed to complete
This does not call the `program_id` but call what ever declare_id! of `other_program`
e.g. ```
let context = CpiContext::new(program_id, accounts); other_program::cpi::function(...) ```
weird question but when I call cpi why does it call the address on the declaire_id! instead of the address I provide?
what would be the causes of an 0x2 error    #[error("Invalid Mint")]
    InvalidMint,
see, thank you
i don't recall offhand, i remember something about a load function but am having trouble finding it now
i'm on a mac, haven't had any issues
What OS are you using and how successful are your builds?
hi guys, how to access the data in remaining accounts?
i think most folks use either unix/mac or linux
You know kali with wsl has no any penetration testing installed by default
No just trying with different distro to test if it works.
oooh kali, doin some hacker shit
I'm currently using WSL with Ubuntu/ Kali Linux.
I just failed building a system in windows. It builds in linux distribution but `basic-0` example is not working for me.
What os are you currently using to develop using anchor framework? Does it support all major OS?
Thank you!
Don't think there's anything built-in to anchor for this, but you could use a manual timeout, with `setTimeout` etc.
Damn this worked! Thanks so much.
Yea typing is not the best in the ts client due to the dynamic IDL loading. It's not the way to go IMO. Having client code generator that takes IDL as input would be much better. Might hack something together if I have some time in the coming weeks.
Good day! Is there a way to set a time limit for an event listener? For some reason some tests on devnet are failing to find an event (which is also a problem) and it causes all tests to halt
Ok, yep, can reproduce that error locally. Seems like a bug in our typescript types though 😦
Ok, pretty sure you'll have to pass both of those zeros as anchor.BNs (they're marked as u64s in the IDL, which is too big for a vanilla js number). Not sure why the typescript types aren't complaining though :/
Can you post the IDL for that instruction?
I bet it's due to the bundler. I'm using BN elsewhere in my app and it must be getting mixed up or something
this is the last part of the stack trace
well, I'm doing `program.transaction.initialize(0, 0, { accounts: {...}})` and I've passed all accounts as strings, so it should load them properly
Maybe you're using a number somewhere where you're expected to use a `anchor.BN`? (Not sure why the typescript-ness wouldn't have caught that, but from searching the anchor + solana codebases we seem to only do `.toArrayLike` on bignums)
Yep, definitely runs in a browser. I feel like I've seen that error before but can't quite remember where 🤔
pretty much everything in the Solana ecosystem is an opportunity for a blog post
yes
I think it might be due to bundling
I;m getting some arcane error `Uncaught (in promise) TypeError: src.toArrayLike is not a function`.
did anyone manage to run the anchor ts client in the browser?
Yes, in one of the `#[derive(Accounts)]` structs.
No, you'll have to build the instructions with `program.instruction.doSomething` (`program.rpc.doSomething` will actually do the something)
Goood question…
hey guys, anyone has an update about the planned increase of the compute budget to 1mil per ix (rather than txn)?
so you are telling me there is an opportunity for a blog post? 🤔
lulz that's fair
source code 🙂
what are the most common resources to learn about serum's architecture and docs
which is pretty weird
ok so it looks like max base amount needs to be expressed in lots but max quote amount needs to be expressed in native token number including decimals
Yes
Does Solana not let you run a log function on chain???
are CPIAccount's deprecated?
👍
I was bidding at a price where there were asks
ah interesting. The culprit was actually max quote amount
what do you mean?
Yeah for me I was trying to guarantee a match would exist
let me up the limit price and see what happens
hmm these are immediate-or-cancel orders
Not sure this is what you’re describing, but I’ve seen situations where a lot of orders get canceled
has anyone seen anything like this?
Somehow it's bid-side only; ask-side trade works fine
I'm getting strange behavior on Serum where bid-side trades execute successfully, but it's effectively a no-op. (Quote/base token balance doesn't change)
It was because I deployed an older version of my program to this id already and the account size was too small for the upgrade. Removing the kyepair from `./target/deploy/<keypair>.json` and re-deploying solved the problem.
why am I getting `Error: Deploying program failed: Error processing Instruction 0: account data too small for instruction` when trying to deploy an anchor program to local cluster?
hm yeah, i redeployed, it gave me a program id  yet when i retrieve from anchor workspace its different
where are the solana native error codes listed? I remember finding a file somewhere that had them but I don't remember where
It means you are trying to do something with an account that is not owned by your program...
how did you solve that 167 issue? running into it now lol
Does that let me multiple make RPC calls too? Like anchor.rpc.call1 and anchor.rpc.call2
You mean in the lib.rs file...
You can see some examples in the anchor codebase by searching for `tx.add`. Another way is to use the `instruction: [...]` argument in `program.rpc.doSomething`, which *prepends* instructions that will run before you main rpc call.
The basic low-level way is to construct a anchor.web3.Transaction by hand and `.add` instructions to it. You can then do `program.provider.send(tx)`
(I think this because that's the only place in the anchor codebase that raises that error)
puts the onus on the client to understand what it's supposed to do, but i imagine that can be done in advance
hm, naive thought here is separate into 2 functions, where one assumes A won't need to be updated (& hence can be read-only), & one assumes it does. then in each, verify that assumption is true - in first case, verify you don't need a new B, and in second, verify you do. if those checks aren't met, throw a custom error the client can interpret to then call the correct one
I think you're probably using a literal string as a constraint, rather than an expression `constraint = 1 + 2 == 3`
Says the API being used is deprecated, but I'm not sure what its referring to

Error: 299: The API being used is deprecated and should no longer be used
Anyone familiar with this error?
I guess that there are many situations where one have some data structure (e.g., a Vec) saved in an account and once the Account gets full he have to create another account with more space and copy the contents to the new. How do you handle this in practical terms? In particular, when the account pubkey is saved in another accounts (like a pointer) you need to update the pubkey every time you need to resize the account, right?

For a concrete example, imagine an account A that points to some account B which handles a vector of foo's. There is an instruction X to add foo's to the vector in B. If B space is full, we have to create another account to replace it, and we need to update the account A to point to the new B. Every time I call instruction X I shouldn't send the account A as mutable because that would lock it probably unnecessarily (i.e., it won't be changed). But in case B gets full, I need to update A in the same transaction, which means I need to send A as mutable. What should I do?
im running into an issue when initializing, basic stuff, what's wrong with my signer? 🤔
thinking out loud, for future calls after the initial init, i guess i could just concatenate those pubkeys client side & send them up as one big single seed arg (since iirc seeds are linear)? not sure if that might be a security risk
when I tried to run anchor deploy by itself
If I didn't add those flags and create the 2nd keypair, it kept saying the keypair was already in use and i'd get an error
anchor deploy -p <NAME OF IDL> --provider.cluster Devnet --provider.wallet <LOCATION OF 2ND WALLET>
Just a suggestion to update the docs. Running anchor deploy by itself may not work for people. I had to create a 2nd keypair for transactional purposes separate from the keypair used in the declare_id option where we set the program ID in libs.rs....then I had to run this entire command...
hello, can anyone point me to examples on how I can bundle multiple anchor RPC calls in the same txn from browser?
am exploring a pda design where addresses are determined from seeds from many, e.g. 8ish, account pubkeys. is it considered bad practice to generate a pda in this way? it seems like i'd need to provide those accounts any time i want to provide this pda, not just during init, so that i can provide the seeds. is that right?
needed to export the path, ty ser you are the best
Is your solana stuff installed correctly?
getting this now on anchor build on an existing project error: no such subcommand: `build-bpf` sorry for all the questions 😫
ty i will
You want to just install anchor directly with cargo, no npm at all
hmm error: failed to find tag `v0.18.2`
If you're on a mac, you should just uninstall the `anchor-cli` npm package (it's only intended for linux)
ty ser that solved it, took a while to compile
how do i correct this Globally installed anchor version is not correct. Expected "anchor-cli 0.18.2", found "anchor-cli 0.18.0". lulz, nm ill just install 18.2
new M1 cpus need to build from source


///////////////////////////////////////////////////////////////////////////////////////////////

oooh thanks, that helps!
yes, they can be updated. However be careful if the data stored in accounts change then you'd need to handle migrating the data to the new structure, or handing the stale accounts yourself
If for some reason you want a new Program ID you can delete the keypair under `target/deploy/your-program-keypair.json` and it will generate a new one next time you build
Is there a way to fetch all the events emitted using emit! by a program similar to web3 fetchEvents?
Alternatively, can the programs on the mainnet be updated to a new version when I deploy with the same program ID?
hi, can I force anchor to update the program ID when I do a new build?
and if it possible how?
hello i wanna trig my solana program if user send my program solana for example i wanna send back %50 of his sent.

For example i send 1 solana for the contract and contract send me 0.5 back.

its possible with solidity but is that possible with solana programs?
i could also just be noticing what i'm looking at for the first time, totally possible
did we get some error message updates in 0.18? if so: 🔥
or any easy way to do something like `#account(has_one=attribute @ Err("missing attribute"))`
do we support custom error like ```
#[msg("missing has_one {attribute} ")]
HAS_ONE_ERR{
attribute: String
}
```


///////////////////////////////////////////////////////////////////////////////////////////////

when tryin to build stake program using anchor getting this error
C:\Users\varun\stake>anchor build --verifiable
Error: Unable to deserialize config: missing field provider at line 1 column 1
hey there - when I run the cargo install command for anchor (v0.18), I get the below (success?) output message but when I check the version I'm still on v0.16 and not v0.18. Any idea what is happening? I had previously installed anchor several weeks ago. 

(Thanks and hope peeps are enjoying Lisbon!)

Install command used: cargo install --git https://github.com/project-serum/anchor --tag v0.18.0 anchor-cli --locked
Thanks for the response! And sorry I meant ```program.account.someAccountType.all()```
Is there any limit to how many instructions we can use in web3.Transaction ?
Do you mean `program.account.someAccountType.fetch`? That one only returns a single account (you have to pass in its address). Or are you referring to a different function?
Hello! I was wondering, when using a program account's "fetch()" method, is there a limit to how many accounts I will get back? Also is there a way to set a limit at all?
Hey <@501570363566587905>  I wanted to discuss about a project that I'm working on, can you hop on to dm if that's okay?
Hey armani. Does it matter what struct this trait is implemented on?
https://github.com/project-serum/anchor/blob/54f24e55960a5452e2bb8a33086aa85e8e9f1bc6/tests/lockup/programs/registry/src/lib.rs#L52
i'm running with rosetta on the m1 mac
hello!, anyone ran into this problem before?


///////////////////////////////////////////////////////////////////////////////////////////////

for step 1, do i just need to run anchor test? or is there a separate cmd for compiling?
im gettin this error
so how do I add 0.18.0
hey guys, gm! thanks for this amazing tool!
i have looked at all the channels and i could not find one dedicated specifically for help debugging issues after installation.
Running `anchor test` after creating the default project, i get the following error:
```
Failed to obtain package metadata: Error during execution of `cargo metadata`:     Updating crates.io index
error: failed to select a version for the requirement `anchor-lang = "^0.18.2"`
candidate versions found which didn't match: 0.18.0, 0.17.0, 0.16.2, ...
location searched: crates.io index
required by package `epic-gifs-showcase v0.1.0 (/home/nerdr/sites/epic-gifs-showcase/programs/epic-gifs-showcase)`
```
I also had this issue when i tried running this command `npm install @project-serum/anchor`, to fix it i just added the version 0.18.0 and it worked. Now, since i am new to rust/solana, i'm not really sure what the solution would be. I'd appreciate any help

OS: windows 10, using WSL2
Probably in your Anchor.toml file, under `[provider]`
How to change anchor wallet path?
i think that did it. thanks!!
Does it work if you explicitly import the AnchorDeserialize trait? `use anchor_lang::AccountDeserialize`? (Not sure if that's already getting imported by the rest of your code)
reference:
how do i deserialize anchor accounts in a standard rust program? i know all program accounts implement the `AccountDeserialize `trait but i cannot access `try_deserialize` and `try_deserialize_unchecked` implementations on an imported account struct
The same thing works for a single transaction and wallet.sendTransaction
yeah, I'm doing something similar but end up getting `Signature verification failed` not sure, what's wrong

```
        const txn = new web3.Transaction();
        let chunkEarnings = 0;
        chunk.forEach(async (mint) => {
            txn.add(await instruction(conn, wallet, new web3.PublicKey(mint.mint)));
        });
        txn.recentBlockhash = block.blockhash;
        txn.feePayer = wallet.publicKey;
   
        txns.push(txn);
```

and then

```
    let signed = await wallet.signAllTransactions(txns);
    for(let i = 0; i < signed.length; i++) {
      const raw = signed[i].serialize();
      const sig = await conn.sendRawTransaction(raw, {
        skipPreflight: true,
      });
      const t = await conn.confirmTransaction(sig, 'finalized');
      console.log(t);
    }
```
You can see some examples if you search the anchor repo (not a ton, but there are a few uses in the tests). Does that cover your q?
does anyone have example code to use `signAllTransactions` in the browser to send multiple txns?
it seem like `anchor` target `solana-sdk = "1.8.0"`? how can I target `solana-sdk = "1.8.2"` ? it's build fail when I try to do that.
did anyone have similar problem?
`deploy.ts`
```
import { Provider } from '@project-serum/anchor'

const provider = Provider.local('https://api.devnet.solana.com', {
  skipPreflight: true
})
```

`run:`
```
ts-node deploy.ts

```
`error:`
```
TypeError [ERR_INVALID_ARG_TYPE]: The "path" argument must be of type string or an instance of Buffer or URL. Received undefined
at Object.openSync (fs.js:490:10)
at Object.readFileSync (fs.js:394:35)
at Function.local (.../node_modules/@project-serum/anchor/src/provider.ts:236:25)
```
https://project-serum.github.io/anchor/ts/classes/program.html#instruction
all in the same transaction is fine, I'm just wanting to include multiple calls to the program in one transaction so the user doesn't have to sign multiple times. It looks like I can get the instructions via program.instruction.<method>?
Can they all go in the same transaction? (The signing happens at the level of individual transactions, not instructions)
Hi guys, I'm in the process of integrating the anchor program I've been working on into a UI. Is there a way to have the user sign a transaction which contains multiple anchor instructions to my program?
1.8.2 worked like a charm! thank you!
have you tried using `1.8.x`
Hi all, does anyone have idea what might be wrong on here? Im on an m1 and running rust and solana on rosetta and I cant seem to request sol on devnet.
otherwise that would be quite limited
yes
Anyone?
Can we do multiple #[account (init,..)] s in a single derive account struct?
test validator cannot run
any ideas on how to fix this pls?
Hey y'all, not sure if this is the right channel for debugging questions but i'm running into this error when doing anchor test:
How do I override tsconfig file when running anchor test so I can have separate config files for test and for running frontend app?
monitor events in and out of the program, or do i have to index and do a web 2 service?
what's the best way of checking the status of a program every second on solana
I tried what I found online but it didn't work. Could anyone point me in the right direction?
"Running: cargo +bpf build --target bpfel-unknown-unknown --release
error: no such subcommand: `+bpf`

    Did you mean `b`?
"
When I run anchor test, i get
Hello! I keep running into an issue and need some help
Thank you so much!!
Appreciate the response! How would I check for / fix this? (Also feel free to just tell me what to Google and I can look myself. Thank you!)
I was able to get it running with `anchor build` and the normal solana deploy
Hey everyone. Just want to add to this message. I did run into the 0xa8 and 0xa7 errors while trying to develop program that did CPI calls to the serum market. I first started to develop on testnet and that didnt work. It looks like you cant work with serum on testnet. I got these 0xa8 error. Then <@!426974456548818946>  helped me there, launched on devnet while adding some stuff in the code and i came to realize that you cant deploy your own dex program and cpi to the newliy created program ID. You need to rely on the existing dex program on devnet, with one of the 2 addresses that are in the quoted message. I hope this helps newcomers to CPI and Serum, i honestly spent hours on this issue lol. Hpope everyone is well ❤️ stay safe
is there any cli command to rum serum so locally on my solana-test-validator


///////////////////////////////////////////////////////////////////////////////////////////////

How can I clone a program account as part of a dependency with `anchor test`?
Seems like I do not have this issue in 0.18.0. Not sure why 0.17.0 is throwing me an error.
Hey all, for anyone having issues installing on M1, i avoided the whole hassle and simply created a codespace that is "Solana development ready": 

https://github.com/harrisrobin/anchor-codespaces

feel free to use it, hopefully it helps someone else who doesn't want to install this stuff locally yet 🙂
Will be awesome if you will publish reproducible example.
Let me remove everything and give it one more shot. Might be a version issue or something. If I remove the root input, everything goes through properly. I will do a separate test with only an array input and see. Will check back in if it is the same.
Trying to see what I'm doing differently from you
Yeah, it's weird, this seems to work fine for me as far as I can tell
^^
are tuple types still on the backlog to support?
let root = [
        254, 185,  47, 204,  46, 230, 221,
         45, 163, 191, 146, 216,  51, 230,
        207, 118, 235, 169,  83, 233,   3,
        147, 174, 252, 183,  35,  43, 213,
        159, 167, 114, 253
      ];
In js, not rust
```
#[account]
#[derive(Default)]
pub struct Distributor {
    /// The 256-bit root.
    pub root: [u8; 32],

.......
```
Please show `root` variable definition
I am passing the u8 array directly as I showed above. 

```
[
  254, 185,  47, 204,  46, 230, 221,
   45, 163, 191, 146, 216,  51, 230,
  207, 118, 235, 169,  83, 233,   3,
  147, 174, 252, 183,  35,  43, 213,
  159, 167, 114, 253
]  <- value of root variable.

in my js call -> await program.rpc.newDistributor(
        root,
        ...

in lib.rs -> pub fn new_distributor(
        ctx: Context<NewDistributor>,
        root: [u8; 32],
        .......
    ) 

```
Are you responding to me?
What do you pass to `anchor.rpc.initialize`?
I am passing the array value directly into anchor.rpc.initialize call. Do I need to buffer it or something. Program runs correctly when I remove passing this value, so there are no other issues.
Been stuck on this for a while now. Any help is appreciated.
Hi guys, I have a function in my lib.rs which basically takes a u8 array of length 32 (256 bit root string). I have generated the array when trying to initialize it which shows correctly on the console. For example ->
``` 
[
  254, 185,  47, 204,  46, 230, 221,
   45, 163, 191, 146, 216,  51, 230,
  207, 118, 235, 169,  83, 233,   3,
  147, 174, 252, 183,  35,  43, 213,
  159, 167, 114, 253
]
``` 
Input has to go in the [u8; 32] format.
However whenever trying to call this on-chain via program.rpc.function from anchor, I end up with some error. Is there some specific format with which I need to send it? The error is as below:

```
/root/MyWork/project/node_modules/buffer-layout/lib/Layout.js:1112
    const span = src.reduce((span, v) => {
                     ^

TypeError: src.reduce is not a function
    at Sequence.encode (/root/MyWork/project/node_modules/buffer-layout/lib/Layout.js:1112:22)
    at Structure.encode (/root/MyWork/project/node_modules/buffer-layout/lib/Layout.js:1263:26)
    at WrappedLayout.encode (/root/MyWork/project/node_modules/@project-serum/anchor/node_modules/@project-serum/borsh/dist/lib/index.js:65:28)
    at Structure.encode (/root/MyWork/project/node_modules/buffer-layout/lib/Layout.js:1263:26)
    at InstructionCoder._encode (/root/MyWork/project/node_modules/@project-serum/anchor/dist/cjs/coder/instruction.js:85:28)
    at InstructionCoder.encode (/root/MyWork/project/node_modules/@project-serum/anchor/dist/cjs/coder/instruction.js:70:21)
    at /root/MyWork/project/node_modules/@project-serum/anchor/dist/cjs/program/namespace/index.js:32:97
    at ix (/root/MyWork/project/node_modules/@project-serum/anchor/dist/cjs/program/namespace/instruction.js:26:23)
    at txFn (/root/MyWork/project/node_modules/@project-serum/anchor/dist/cjs/program/namespace/transaction.js:12:20)
    at Object.rpc [as newDistributor] (/root/MyWork/project/node_modules/@project-serum/anchor/dist/cjs/program/namespace/rpc.js:8:24)
```
Is it enough to make a PR to https://github.com/solana-labs/token-list to my token recognized on explorer, wallets, etc?
(This is a hack and not the intended way of doing things lol)
What I'm doing above is totally skipping the `@` syntax, and just relying on how the rhs gets expanded by the macro stuff
Ok. I didn't know that something like `constraint = return ProgramError::Custom(1234)` was possible (which is what happens when `custom_contraint()` returns `Err(ProgramError::Custom(1234)`?). I thought I was forced to specify the error after the `@`
Not ideal but it does work lol, you'd just have to have `custom_constraint` return `Ok(true)` if everything looks ok (`Ok(false)` would trigger a raw constraint error)
The rhs of the constraint can be any expression as long as it eventually typechecks after macro expansion. So it's fine to have a function that returns a `Result<bool, WhateverError>` as long as you question-mark away the error part 😛
I was going to say no, but amusingly you sort of can, in a hacky way:
```.rs
fn custom_contraint() -> std::result::Result<bool, ProgramError> {
  Err(ProgramError::Custom(1234)
}

...

#[account(constraint = custom_constraint()?, ...)]
```
```rust
fn make_v1_check(outcome_price_offers_account: &Account<'_, OutcomePriceOffers>, price: u64) -> bool {
    match outcome_price_offers_account.get_price_offers_pubkey(&price) {
        Option::Some(_) => false,
        Option::None => true
    }
}

#[derive(Accounts)]
#[instruction(price: u64, quantity: u64)]
pub struct MakeV1<'info> {
    #[account(mut)]
    pub outcome_price_offers_account: Account<'info, OutcomePriceOffers>,
    #[account(init, payer = user, space = PriceOffers::INITIAL_SIZE, constraint = make_v1_check(&outcome_price_offers_account, price))]
    pub price_offers_account: Account<'info, PriceOffers>,
    #[account()]
    pub game_account: Account<'info, Game>,  // TODO remove
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut)]
    pub oracle: AccountInfo<'info>,
    pub system_program: Program<'info, System>,
}
```

Is it possible to have `make_v1_check` return a `ProgramError` that would be automatically returned by Anchor, instead of using the `@` after the constraint? (I want to check more things on `make_v1_check` and return custom errors for each case)
Thanks! Weird, the idl is properly generated etc... I am on m1 and keep having issues, so might be coming from there. I will rebuild everything
That means you tried to invoke an instruction whose "sighash" doesn't match anything the program knows about. Anchor supports having a fallback function that can handle these, and you probably don't have one—how are you attempting to invoke your instruction?
Hi, Any idea why I am running into this error please ? " Fallback functions are not supported"
the serum swap ui for spl token swap is deprecated, that's it
how is it deprecated, orca-so uses it
Anyone with experiences on SPL Token Swap. It's deprecated now, but I'm really in need of understand the inner workings of SPL TS.
there is an equivalent for that thing in the package @solana/web3.js
thanks ser !
same question
program bindings using idl.json:
I am diving into the codebase, it seems possible but i am not sure how. Is it possible to load rust bindings for a program from the idl alone? I cannot seem to find an example
https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
searched everywhere but found nothing
anyone knows how to get instruction data (hex format) from a tx address? (in python possibly)
also, is there a way to have the latest program id dynamically available to `programs/mod/lib.rs` vs having to `declare_id!()` each time and update `Anchor.toml`?
thanks, will check
https://github.com/project-serum/anchor/blob/master/cli/src/lib.rs#L1445
not off the top of my head but here's the entrypoint for the `anchor test` cli command, you'll find it somewhere along that road
or is it pulled from the dir structure?
<@!168868665456984065> do you know where anchor stores this data?
yes, I've fixed `Anchor.toml, Cargo.toml` in the main project, and also `Cargo.toml`  in `programs/mymod`
and using `anchor test`
make sure you're also making the name changes in the appropriate toml files
hmm weird, empty list []
i'll be sure to come to the next relevant event though
just output what the populated keys in the workspace object are then. `console.log(Object.keys(anchor.workspace))`
where ```const program = anchor.workspace.Mymod```
yeah my whole team is there except me and the other cofounder lol
<@!168868665456984065> truly weird because thats what I have an I get ``` TypeError: program.rpc.initialize is not a function```
Ah that's too bad. I was trying to see if I'd met all the major anchor discord people. And I know I saw will Barnes around
then yes probably `anchor.workspace.Mymod`
i had to cancel my flights last minute due to family things going on 😦
its just `mod mymod`, yes
in rust its `pub mod mymod`?
Sorry random question
but nothing!
Did you come to Lisbon?
so I use Mymod
yeah, my module is just called mymod
so likely `MyNewModule`
the workspace name should be the pascale cased version of program module
how do i change the anchor workspace name accordingly?
hi folks! renaming a program module leads to some issue in my tests. anchor.workspace.mynewmodule doesn't exist, and the program variable is now undefined
Mm, interesting, not sure then!
lol
oh, I've tried re-installing multiple times now
Ah ok thanks, probably from a realizer or condition not being met to unlock funds. Ya weird logs.
Ah, I meant maybe just try re-installing it with the installer (can also try from source though, yeah)
Yeah, I'll try installing it from source
Maybe just try re-installing it?
Fwiw I tried downloading the solana installer, and I've got a `cargo-build-bpf` in that bin directory, not sure what happened to yours lol 😛
Thanaks!
Ok, I'll try that
I had to install solana from source, so not totally sure what ought to be in that active_install dir.
but not m1
yes, I'm on mac
Mm, interesting. What's your setup? Are you on a mac etc?
so I need to add that?
nope
Is there a `cargo-build-bpf` in that `active_release/bin` directory?
Hmm, yeah, that looks plausible 🤔
`/Users/markmorrison/.local/share/solana/install/active_release/bin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin:/Users/markmorrison/.cargo/bin`
this is the output when I ran that
yeah, looks like it
If you run `echo $PATH`, does it include your solana install stuff? If not, you'll have to add it
I'm not sure. I never made any changes to my path
Is the `bin` directory from your solana install in your path? That's where my cargo finds the build-bpf subcommand (there's a `cargo-build-bpf` in my solana's bin directory)
it looks as if it's uninstalling bpf when i run `anchor test`
At least for me I had to install the bpf part from solana (it was part of installing solana, I didn't use rustup for it)
`Running: rustup toolchain list -v
Running: rustup toolchain uninstall bpf
info: uninstalling toolchain 'bpf'
info: toolchain 'bpf' uninstalled
Running: rustup toolchain link bpf /Users/markmorrison/.local/share/solana/install/releases/1.8.2/solana-release/bin/sdk/bpf/dependencies/bpf-tools/rust
Running: cargo +bpf build --target bpfel-unknown-unknown --release
error: no such subcommand: `+bpf`

    Did you mean `b`?`
here's the output in my terminal:
Hello, I've been trying to run "anchor test" on a project and I keep getting this bpf issue
I think those are from expected failures (the program logs print whenever there's an error, which, yeah, is odd looking in the test output if you intended for them to fail)
do we have anchor rust client?
Hi trying to run the lockup example, receiving all 28 passing tests but I see several 

```
Transaction simulation failed: Error processing Instruction 0: custom program error: 0x135 
    Program 4wFgeT6RMaTvZLkrvgwpfEPPB5CMiVZPBZa6CBERxfyr invoke [1]
    Program log: Custom program error: 0x135
    Program 4wFgeT6RMaTvZLkrvgwpfEPPB5CMiVZPBZa6CBERxfyr consumed 13543 of 200000 compute units  
    Program 4wFgeT6RMaTvZLkrvgwpfEPPB5CMiVZPBZa6CBERxfyr failed: custom program error: 0x135
```
```
Transaction simulation failed: Error processing Instruction 0: custom program error: 0x140 
    Program DamMTLck8o9KzxQbzde7ukpSZAMYeDVfeH6A1KK9y7xu invoke [1]
    Program 4wFgeT6RMaTvZLkrvgwpfEPPB5CMiVZPBZa6CBERxfyr invoke [2]
    Program log: Custom program error: 0x140
    Program 4wFgeT6RMaTvZLkrvgwpfEPPB5CMiVZPBZa6CBERxfyr consumed 9941 of 180982 compute units   
    Program 4wFgeT6RMaTvZLkrvgwpfEPPB5CMiVZPBZa6CBERxfyr failed: custom program error: 0x140     
    Program DamMTLck8o9KzxQbzde7ukpSZAMYeDVfeH6A1KK9y7xu consumed 200000 of 200000 compute units 
    Program DamMTLck8o9KzxQbzde7ukpSZAMYeDVfeH6A1KK9y7xu failed: custom program error: 0x140     
Translating error SendTransactionError: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x140
```
etc.. [0x134, 0x133]
That is how i was able to solve it, idk if it's the optimal solution however it worked for me
anyone coming from buildspace tutorial and encountering the same issue, i was able to solve is by running `npm install @project-serum/anchor@^0.18.0 @solana/web3.js` and cd into the project directory, find `programs/YOUR-PROJECT-NAME/Cargo.toml` in the [dependencies] section, change `anchor-lang = "0.18.2"` to `anchor-lang = "0.18.0"`.


///////////////////////////////////////////////////////////////////////////////////////////////

