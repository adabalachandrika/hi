No. Only the program of the corresponding programid can create and write to that particular pda. everyone else can just generate a publickey.
hey i'm still stuck with this. if anyone knows more about this, please help thanks
Using the same seeds would find (as in `find_program_address`) the *same* PDA that you found last time.
So whoever has that seeds can generate new PDA ? Sorry I'm confused
I think of the seeds as a nickname for the account (or whatever, a mapping from some identifier --> the account's address)
Anyone who knows the seeds + the program's id can get the PDA's address (using find_program_address). The seeds aren't like a password though, they don't need to be secret‚Äîonly the program can use them to sign for the PDA (knowing the seeds isn't enough, you have to actually be the program).
So seeds are basically like passwords whoever has that particular seed he can generate the PDA ? I don't know if my question makes sense or not
How do you have more than 2 contracts in the same workspace? For example, if I wanted to test the multisig program here, besides testing the multisig on the contract itself (change owner), i would like to make it the authority or for another contract, create, approve and execute a multisig tx that calls a function in the other contract.
https://github.com/project-serum/multisig/
Does `#[account(zero)]` basically check the Account has not been initialized yet?
Interface description language
Sorry, I meant to ask, what is the full form of the acronym `IDL` (if any) ü§î
Yes, it's the same than ABI from Ethereum, it's use as struct schematic to serialize/deserialize
Does any know what `IDL` stands for? ü§î
You can take the candy-machine contract as example
```
#[account(init, seeds=[PREFIX.as_bytes(), config.key().as_ref(), data.uuid.as_bytes()], payer=payer, bump=bump, space=8+32+32+33+32+64+64+64+200)]

candy_machine: ProgramAccount<'info, CandyMachine>,
```
where the `seeds` is used to generate the PDA
Do we have any example/test to look into
How to create program derived addresses in anchor ?
I mean, in you contract you use snake case, but for your call you use camelCase, little bit confusing.
do `console.log(program.rpc)`
(changing it to helloWorld worked, thanks :D)
ah ah...isn't rust convention to use snake case?
anchor transform snake_case to camelCase
it's helloWorld()
i have a simple program like this:
```rs
use anchor_lang::prelude::*;

declare_id!("EjrB83rxARGanVZgkqRGLPMjge2nVTiM6RsFFiAQ5R1c");

#[program]
pub mod test03 {
    use super::*;
    pub fn initialize(_ctx: Context<Empty>) -> ProgramResult {
        msg!("Hello World");
        Ok(())
    }

    pub fn hello_world(_ctx: Context<Empty>) -> ProgramResult {
        msg!("Hello World!");
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Empty {}
```

but when i try to call the hello_world() function i get a function not found error:

```js
  it("Says Hello World", async () => {
    const program = anchor.workspace.Test03;
    await program.rpc.initialize();
    console.log("Hello World TX: ", await program.rpc.hello_world());
  })
  
```
i copy pasted the incrementing code in the test js in the counter example, but i am running up to this error, anyone know how to fix this
Ok actually I have `The given account is not owned by the executing program`, I'm trying to access to account from another program to get information from it, do you know how I can do it ?
edit: Ok I have the problem using `ProgramAccount`, so I will use `AccountInfo` and parse it
i'm getting this error and here's the corresponding line of code  ` #[account(mut)] pub amm_id: AccountInfo<'info> ` so if I change it to `#[account(mut)] pub amm_id: Program<'info, Token>`, the error goes away. However amm_id is a program_id but not of the Token Program, so would this deserialisation still work or should I be using something else?
Check the <#889606719829835816> also, something neat just got posted there
Thx you, I will read it
Good resource to get the hang of it https://2501babe.github.io/posts/solana101.html
Thx you for your help, I will do some tests
oh ok, like a pointer address
the account points directly to the data in the program
there is no "fetch"
Oh okay, I though the account was fetch from the client, but yes, it should be fetch directly from the execution.
pass the account and read it
Hum, I am looking to read an account but onchain, the goal is to cancel the transaction if the account contain a special value, the goal is to keep it atomic, if my account value change between the moment when I send the tx and the moment when the tx is executed, it have to cancel the tx.
read the account directly?
Hello guys, is it possible to get variable from another program ? like CPI but to fetch data
So when you delete the `#[error]` you end up sneakily deleting the generated definition of the Result type.
In case anyone's interested, the üëª behavior there happens because the `#[error]` macro actually generates the `Result` type for you https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/error.rs#L46
In the `anchor.toml` is it possible to have multiple test scenario? 
```toml
[scripts]
test = "asdasd"
test-xyz = "qweqwe"
```
constraint = user_source_token_account.owner == *user_source_owner.key works thanks!
If I change to ProgramResult it gets happy again
It doesn't like Result<()>

I just did, and ran anchor build. It is yelling at me
Whoops, `constraint = user_destination_token_account.owner == user_source_owner.key` [edit or maybe .key() instead of .key]
there is still some issue with user_source_owner

This is actually kind of an odd thing‚Äîtry commenting out the `#[error]` enum at the bottom of the file and try doing `anchor build` üëª
I have never seen it before an was expecting ProgramResult
This is in the Chat app

Anchor?
Is the Result<()> from a previous version of
Ah, think you might have to just do `constraint = user_destination_token_account.owner == user_source_owner` inside the `#[account(...)]` part.
It says that init must be provided before token authority. However I don't want to initialise an account, just verify the authority.
Do you maybe want `#[account(mut, token::authority = user_source_owner)]`?
ü§¶‚Äç‚ôÇÔ∏è
Hahaha
No, I mean in this case you actually need one to be running üôÇ
I dont think I am... If I am in the background, can I shut it down?
Looks like you're trying to do a local deploy, but you're not running your solana-test-validator (anchor test spins up + tears one down for you, but deploying is stateful)

Here is my anchor.toml

Why am I getting this error when I run anchor deploy?

this is the corresponding lines of code to this error. i did go through a couple of examples and they seem to be doing something similar as well so i'm not sure where i'm going wrong. any help would be appreciated.
yeah, this is my understanding from the Solana docs; but I was blown off with the lack of examples (in the docs at least) of how to make use of a PDA in order to create an account to store state and associate that with the sining address. But the tests folder you mentioned is actually a hidden gem full of juice
hey i'm trying to check if the tokenaccount is owned by user_source_owner but this is giving the below error on running anchor build. Any pointers? `#[account(mut, has_one = user_source_owner)]`
`    |                 ^^^^^^^^^^^^^^^^^ unknown field`
`error[E0609]: no field `user_source_owner` on type `anchor_lang::Account<'_, TokenAccount>`
When you create an account with a regular, non-PDA address, that address has to sign too, but it does so the old-fashioned way, with a private key. (So, PDA account creation isn't really different, it's just the funnyness with how you *sign* for them entails the weird bump + seed stuff)
you can't imagine how helpful this is! I am truly grateful üôÇ
Good to think through why the program needs them: the account you're trying to create needs to get passed to the program‚Äîits (program-derived) address, from the client. The program is going to invoke the system_program's create_account instruction, which requires signing for the address whose account is getting created‚Äîand the *only* way to sign for a PDA is with its seeds+bump.
I believe that's doable by calling the "findProgramAddress" on the client, it returns both the address and the nounce (I guess that's is the bump?)
You actually still need to pass the seeds/bump (or at least, the program needs to know them somehow‚Äîusually b/c they got passed from the client)
awesome, thank you so much! will check it out
The chat example is pretty good for pdas: https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs#L41
looking into it now
and with that, I won't need to pass it from the client?
Initializing one in your program is what the `#[account(init, seeds = [some, seeds, here], bump = the_right_bump, space = 8 + ...)]` is for
(Trying to find a simple example in tests/) Fetching an existing one is `PublicKey.findProgramAddress(seeds, programId)`, or if you already know the bump, `PublicKey.createProgramAddress(seedsPlusBump, programId)`
If you figure it out, please post the answer
ahh lemme see
that all sounds right; I am still trying to work out how to create an account from the address (if none already exist) or fetch existing one. What I can find so far is that I mgiht be able to get AccountInfo, and deal with plain &[u8] data on it
Creating an account that lives at a PDA only differs from creating an account behind a regular address in terms of how you sign for it (that's what the seeds + bump stuff is for).
find*
will double check again, but I remember I looked for any example of that and couldn't fine one
Not sure if this will help, but I think it's good to bear in mind that a PDA is only different from a regular address in terms of how you sign for it (a regular address is an actual elliptic curve public key, with a corresponding private key, whereas a PDA is this funny thing that looks like a pubkey but doesn't actually have a private key).
Sorry, I'm in here acting like I know what I'm doing, but I have no idea
I don't know either, can you change it to a Pubkey?
i believe i must change amm_id: AccountInfo<'info> to something else i'm not sure what though
It looks like you are passing it an AccountInfo struct when it wants a pubkey
amm_id is supposed to be a Program Id
so the issue seems to be coming from `ctx.accounts.amm_id.clone()` and it's corresponding `#[account(mut) pub amm_id: AccountInfo<'info>`
you just have to work your way over to the account struct of the function being called in the rust and check it out
are sure you found no examples in `anchor/tests` which use `findProgramAddress` in the javascript?
oh those are seeds
<@!723145219436183644>  what is the rust code, seems like a simple fix
that's great, just couldn't find any way so far to be able to create an account from the returned address from `findProgramAddress`
Any idea why i'm getting this error on anchor build? I'm using anchor 0.16.2 ` #[derive(Accounts)]
   |          ^^^^^^^^ expected `&anchor_lang::prelude::Pubkey`, found struct `anchor_lang::prelude::AccountInfo`
   |
   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)`
but `Account<'info, Struct` are basically owned by the program unless your `Struct` is linked to another program, e.g. `TokenAccount`
sorry, anchor deploy
Why do I get this error when I run anchor test
yeh, this new syntax doesn't make it clear that it's owned by the program
RPC request error: cluster version query failed: error sending request for url (http://127.0.0.1:8899/): error trying to connect: tcp connect error: Connection refused (os error 111)
that is program owned
if you want to associated an account with a user then use a PDA / `seeds` / findProgramAddress
so this ` 
```#[account(init, payer = user, space = 16 + 16)]
    pub base_account: Account<'info, BaseAccount>,```
should be program owned account, how do I create it on the client
you should just look at the examples
program owned accounts are just `Account<'info, YourStruct>`
it can't be that hard to store a state associated with the user wallet; yet I spent days in circles with no luck; admittedly I am not expert with react/js either, I am just able to get around things. So beside the lack of proper documentation, I am also n00b on several levels
can't agree more... but doesn't help much to get something basic done üòÑ
https://twitter.com/armaniferrante/status/1434554725093949452?s=20
how would one get around a "max seed length" error? Is there any way to rehash into a shorter seed? I worry about collisions if I just cut the seed short
A basic state aware program is almost impossible, or at least not clear how
well, there is no documentation whatsoever, and the tutorials are shattered and pretty much non-informative. Anyone says anything that might throw a pointer is helpful. Better than nothing. I am almost about to lose hope in Solana given how complicated it is to get anything useful working
No problem, hopefully I'm helpful haha
thank you as well
okay, let me try to fiddle around with it and see if it makes a difference

It might have something to do with this
and the user signs the transaction
nope, the wallet account is retrieved from the client Phantom wallet
Is the wallet account declared in your Anchor.toml the same as the account that deployed the smart contract?
I don't mind creating the base_account on the client or on the Rust side; whatever works
Sure, it is nothing fancy.
```
use anchor_lang::prelude::*;

declare_id!("7CiTJHXzv7SdK1bf14nmCnPg9c8HRs3H9DdfEJMoay5K");

#[program]
mod example1 {
    use super::*;

    pub fn create(ctx: Context<Create>) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        base_account.count = 0;
        Ok(())
    }

    pub fn increment(ctx: Context<Increment>) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        base_account.count += 1;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Create<'info> {
    #[account(init, payer = user, space = 16 + 16)]
    pub base_account: Account<'info, BaseAccount>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct Increment<'info> {
    #[account(mut)]
    pub base_account: Account<'info, BaseAccount>,
}

#[account]
pub struct BaseAccount {
    pub count: u64,
}
```

I need this base_account to be owned by the program, and created deterministically so that every time user X is the signer, I can get (or create if non-existing) the account owned by the program for that specific user
<@!444202002042454016> no promises on being able to help, but if you want to post your rust code, I could take a stab
I am probably asking this question like for 7th time; but I am really strugelling getting my head around it üôÇ
How do you guys create a "program owned" account, either in the client or in the Rust program?
Also, thank you <@!381015687486898176>  for having the question
Thank you <@!134416332509675520>
In case anyone's curious, <@!381015687486898176> and I debugged a bit and it turned out the issue was kind of interesting: anchor 0.16.0 I guess has a bug with generating incorrect IDL for `from: Signer<'info>` (the idl didn't think from should sign, but obv it should). Switching back to old-school `#[account(signer)]` annotation worked though üîÆ)
Got it.. Thanks
Anchor specific. They are from the anchor source code
Hey, probably a dumb question, but are these error codes Anchor-specific or would this help in debugging programs written in pure Rust as well?
Great, thank you so much!
looks like its 167 so   AccountNotProgramOwned: 167,
https://github.com/project-serum/anchor/blob/master/ts/src/error.ts
then comapare that against the souce code
look up what 0xa7 means in decimal format
Googling doesn't get one anywhere üôÇ
what does `custom program error: 0xa7` mean? and where one could find reference for these error numbers?


//////////////////////////////////////////////////////////////////////////////////////////

enum discriminant
why does the account size +1 here https://github.com/project-serum/anchor/blob/master/ts/src/coder/common.ts#L23 ?
There's a guide in the Solana docs for installing the CLI tools on Windows. I'm not a Windows user though, so can't confirm everything works https://docs.solana.com/cli/install-solana-cli-tools#windows
is there a beginners guide on how to setup solana dev on windows (like setting up wsl and dockef?
that really helps tie it all together. thank you!
Just to tie this syntax back into what I wrote above‚Äîwhy do you need the seeds + bump when init-ing an account that lives at a program-derived address? Account creation requires talking to the system_program via CPI (you ask it to allocate some space for an account at the desired address + decide who should own the account), and the system_program wants the new account's address to sign this intention. For regular, non-PDA addresses, they have to sign their own account creation from the client, using a private key. PDAs can't do this (not possible to sign for them from the client, only the program itself can), so the program has to use `invoke_signed` to talk to the system_program; you do so by passing along the seeds+bump of the PDA you want to sign for.
makes front-end life 100x better
```rs
#[account(
    seeds = [...],
    bump = acc.bump,
)]
pub acc: Account<'info, T>
```
Yep! I like that pattern too, use it in the repo above actually
its becoming very common for people to store an accounts `bump` value _in_ the account data itself so validation doesn't require passing it as an instruction argument
thank you!
ah that's amazing
This is an example I've posted before: https://github.com/cqfd/anchor-visitors
do you have any examples with frontend/program code of using the Anchor interfaces to initialize program accounts?  `#[account(init, seeds = [ ... ], bump = xyz)]`
But at a high level, the main thing is seeds are like the PDAs program-specific "name"; you've got a mapping from seeds => account. The bump is just this annoying little implementation detail (you only have to care about it because of annoying performance reasons‚Äîsolana could always recalculate it for you but that takes a variable amount of computation üòî)
gotcha! makes sense!
The bump exists because that hash smoosh might land on an actual curve point (bad, pda's aren't supposed to be actual public keys). So the bump is just this little fudge factor‚Äîyou start at bump=255 and just keep doing sha256(seeds+bump+program_id) until you manage to find something off-curve üôÇ
As for seeds and bumps, I think it's easiest to just understand how PDAs work under the hood: you take your seeds + the deriving program's program_id and just stuff them in a sha256 hash https://github.com/solana-labs/solana/blob/master/sdk/program/src/pubkey.rs#L223, and see if you happen to get a valid public key or not
This is useful because sometimes a program might want to have some helper accounts lying around that it needs to pass to other on-chain programs via cross-program invocations, and it might need to sign for these accounts. That would be super awkward if it needed to maintain the necessary private keys (not even sure how that's possible on-chain since they'd be public I guess?)
Why they're useful: program-derived addresses are just addresses with a funny signing mechanism: because they're not actual public keys (points on the ed25519 elliptic curve), they don't have any corresponding private key, and this lets solana hijack them as addresses that a program itself can sign for
not entirely sure what best practices are (how to pick seeds / bump)
Currently searching Github for examples of initializing PDAs because I'm running into some issues with the seeds/bump
A basic primer on what PDAs are (pushing the pubkey off the curve) and why they're useful would be helpful. And then particular examples of using Anchor to initialize PDAs would be great.
I've been meaning to write up a post like that‚Äîis there anything in particular that you're finding confusing?
does anyone have a good write up for understanding PDAs? specifically how to think about seeds and bumps and transferring account ownership?
thanks <@!168868665456984065>
i'm not sure if that's 100% (maybe <@!501570363566587905>  has an opinion here)
so heap is preferred over stack always
cool!
so when you use stack vs heap?
i no longer use `Account<'info, T>` without boxing it
i see!
yeah that's what i've started using everywhere. solves alot of memory allocation issues and non-fatal build errors
i see that you can use heap memory with Box<> instead?
and tokenaccounts + mint haha
ah
some of the structs are 500bytes
that shouldnt be too many
around 8 accounts
how many accounts are you passing into context?
hm i see that the error is related to exceeding the 4kb stack size
I am getting this `Access violation in stack frame 3 at address 0x200003c80 of size 8 by instruction #20322',` error - i am guessing it's happening because I am passing too many accounts to a single program handler?
‚ù§Ô∏è
we're here to help!
Sorry for the noob question üôÇ
Managed to do what I wanted
Yh definilty üôÇ thanks a lot ‚ù§Ô∏è
Yeah I realized this a few hours later lol im stupid. Thanks a lot brotha
the idea is just that you know how many decimals place a particular currency has, e.g. USDC has 6 decimal places in Solana. So you always represent $1 as 1_000_000 . Or if you want to send $0.20 you're actually sending 200_000 usdc tokens
there might be some useful links here to get your head around it
https://softwareengineering.stackexchange.com/a/62979
<@!485884442016219136> it seems like you haven't quite grasped representing decimals as unsigned ints
hey Neil, you need to pass amount in lamports instead of whole token units
it's something like `pubkey::default`
SYSVAR_RENT_PUBKEY and SYSVAR_CLOCK_PUBKEY from @solana/web3.js (also provided via `anchor.web3`.
From the TS frontend side of things, where can one get the clock and rent Sysvar accounts needed for an RPC call?
Yes this, and maybe you can use the merkle thing from saber for the user subscription
Nop that was for Neil
mm yeah appreciate it! I was going to do this the only catch is that we are using candy machine (metaplex) and also want to have a public sale with sol being deposited. In order to do both a custom spl-token and a solana sale we will need two candy machines which I was trying to avoid
lol I dont know if im clear and not an expert, just wanted to help üôÇ
in 1), you wan also create web page in react that redirects if the connected wallet is not in the whitelist, and create a button so the transfert from your pool of "right to buy" tokens to the user's wallet is paid by the user
This might be clostly we this is how I'd do it : 1) Airdrop to the whitelisted guys a token that gives them the right to buy   2) Write a smart contract that accepts USDC and that "I can buy" token
haha ok got it'
No I think he was speaking to me üôÇ
Ok thanks a lot üôÇ I'll try this tomorrow. Have a nice day üôÇ
is this in reference to what I was saying?
If you need sol handling, then you wrap them before hand on the client side
As a rule of thumb, you should think all your program as handling SPL token only, and any amount you treat inside should be converted into that token mint decimals
You need to convert that UI amount of usdc (1.2) into the big number/lamport (idk how to call it) representation of it using its decimals
no thats the catch, I want to make it a transaction intstruction in a wallet, they should be paying for the token
Is it for an airdrop?
I cant use this right ?

But now imagine I want to send 0.2 USDC in a smart contract
yay!
üôÇ
No no I understand what you mean
So you mint 2.0 UI amount, but 200_000 "lamports" of that token in non_ui_amount.
I'm not a good pedagogue
Because when you mint two tokens, you mint 2 * 10 ** TOKEN_DECIMALS
Thanks for your help ‚ù§Ô∏è
Or I should be expecting a balance at 0.00002?
But when I create a new token with 5 decimal and I decide to mint 2 tokens, the balance is 2.00000
hey all I have a pretty long form question and I can provide details if it doesnt make sense. Essentially I am trying to build a whitelisting mechanism by validating the users wallet against an array of whitelisted wallet addresses and then initiating a transaction to sell an spl token if the validation returns true. *I want to know* if this is possible through a series of calls to the spl program library through a typescript file hosted on a lambda serverless program like Netlify
Everything should be treated as amount in the "decimal" format. Example, if using WSol token you would use lamports representation.

If I'm handling a token amount, and it's in WSOL, then I know that this amount 900000000 is equal to 900_000_000 (9 decimals), so 0.9 wsol in ui amount.

Check the amount_to_ui_amount and the other fucking for token in the lib
After looking at their code in mango v3 it looks like their transfer functions is different from what we can see in ido-pool or in the synthefy code, but again maybe im missing something
Hey guys sorry to ask again but just wanted to confirm : we cant transfer 1.2USDC using this implementation, right ? As the input should be a u64. I feel like im missing something. I dont understand how I can send fractions of USDC on mango for example...
You have to use a literal, at this stage
2 messages below ser
^
wait did you figure out a workaround for this yet? seems suboptimal to be passing in the literal value
If yes, is there any way i can detect that Pubkey is in its default state. I thought of Option as i can check if its None or Some
something like this?
```
#[account]
#[derive(Default)]
pub struct DataWithFilter {
    pub authority: Pubkey,
    pub filterable: Pubkey,
}```
derive default
not able to figure out what's wrong. Please help üôÇ
account contains an Option field
Getting this error for Account
```    
    Checking check_creator v0.1.0 (/home/powerconstruct/home/prize_pool_contract/programs/check_creator)
error: associated or seeds must be provided before space
  --> programs/check_creator/src/lib.rs:82:21
   |
82 |     #[account(init, space = 8 + 114)]
   |                    
```
<@601811510506815536> just search for the keyword `default` in the anchor repo to see examples
It's unnecessarily complicated if you're a beginner, default works just as well surely
I meant more like, don't use option
Oh okay. So Option alone should work?
I think that will be problematic with an Option, as the data size will be too small.
Given an IDL and a programId, is there any way to retrieve the source code of a program? I've been interacting with someone else's program via Typescript client: "const program = new anchor.Program(idl, programId);", but I'm running into custom errors and looking for a good way to figure out what I'm doing wrong w.r.t their program
That would set the public key to its default value until you assign it a real value
You could also use `default`
```#[account(init, space = 8 + 8 + 32)]``` Would this work for the mentioned account?
Thank you
Yess! right! ill take care of that
When you create an account, you need to specify `space`.
No. That refers to the account discriminator.
Awesome! I'll try it out. are you talking about this line? ```#[account(zero)]```
By default the option will be zero sized.
Just need to make sure to allocate enough space for the account.
Yes.
is it allowed?
Hi everyone! Can we add option in account trait. something like this :
```
#[account]
pub struct Check {
    amount: u64,
    vault: Option<Pubkey>,
}
```
oh wow i'm pretty sure i did the same thing last time ü§¶‚Äç‚ôÇÔ∏è thanks <@!501570363566587905>
If you're on mac, you need to cargo install.
That package only works for linux.
What's the best way to update Anchor? I'm running 0.16.0 on Mac. Just run `npm i -g @project-serum/anchor-cli@0.17.0`?


//////////////////////////////////////////////////////////////////////////////////////////

It's a conditional attribute, applying the second argument only if the first condition evaluates to true.
Hi everyone, 

I am wondering what the cfg_attr line does? i found this code in cfo folder of anchor tests repo.

Thanks in advance ‚ù§Ô∏è
thanks
ok yeah! i think i got it, sorry for the ping
yeah
this maybe? `program.account.MyAccount.coder.accounts.decode`
Ah, so you already have the account's data?
yeah exactly but without making a network call
Do you mean like doing `await program.account.yourAccountStructName.fetch(somePubkey)`?
does anyone happen to have an example of decoding a program accounts data using the typescript idl?
Okay, I will try these suggestions. Thanks <@103986638320861184> <@134416332509675520>
<@!866934864917037106> Another idea you could also do to have a fixed keypair to play with is something like this:
NOTE: Don't use these keypairs in non-local environments if you are putting them in source code or sharing them on discord üòõ

```
anchor shell
> keypair = Keypair.generate()
> keypair.secretKey
[
  163, 167, 187, 170,  79,  91,  81,  42, 101,  18, 126,
   60, 170, 191, 190,  29, 241,  97, 226, 156, 161,  76,
  209, 164, 133, 194, 191,  66, 168, 250,  99, 238,  97,
   26, 110, 139, 154,  73,  67, 176, 118, 251, 187, 130,
  255,  92, 102, 237, 174,  78,  22,  40, 115,  23, 148,
  144, 128, 249, 100, 207, 170, 117,  85,  52
]
```

Then copy that array of numbers (byte array) and paste it in your source code, replacing `Keypair.generate()` like this:

```javascript
const keypair = new Keypair.fromSecretKey(Buffer.from(
[
  163, 167, 187, 170,  79,  91,  81,  42, 101,  18, 126,
   60, 170, 191, 190,  29, 241,  97, 226, 156, 161,  76,
  209, 164, 133, 194, 191,  66, 168, 250,  99, 238,  97,
   26, 110, 139, 154,  73,  67, 176, 118, 251, 187, 130,
  255,  92, 102, 237, 174,  78,  22,  40, 115,  23, 148,
  144, 128, 249, 100, 207, 170, 117,  85,  52
]
))
```
Dope thx
One way you might do that (just as an idea): store the account at a program-derived address whose seeds are your wallet's public key.
My understanding is that the tutorial is initialize a new account each time (`const baseAccount = Keypair.generate();`). If you want to talk to the same account over and over again, you would need to re-use its address somehow.
This is the punishment you get for open sourcing.
yes, free marketing üòà
Hey guys, so I am trying to learn anchor and solana and I had come accross this blog: 

https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291

On the second part of the blog, we are deploying a program which contains a list called "data_list" and we can push strings into the array from the frontend app. But, the problem in this program is that we have to first call the "initialize" function in the program which then initializes the "data_list" array. So, in this scenario, my doubt is how do we make the entries we entered into the "data_list" array persistent? Now, when I disconnect and reconnect later, I only have the array with first element pushed by the "initialize" function. How can we make the program such that when we reconnect later, we get the previous list containing the entries we made before disconnecting?
Probably need to do this inside the instruction handle instead of the macro though. Since we dont have a `base` parameter for `seeds =`
Same as a regular account, except it's a PDA and so you need to check the seeds.
Also jet https://github.com/jet-lab/jet-v1/
anyone got an example on how to auth an ix call to be coming from an expected prog? would it be similar to doing it with any normal account? for example, let's say I have prog1 and prog2. prog2 only allows calls to ix2 if it's coming from prog1. I was thinking of having the user pass in prog1's id in init to save, and then check against that in ix2
thank you
Synthetify and PsyOptions both have open source frontends
Following on the question about a larger project, is there a larger project that we can look into which doesn't limit to just the on-chain program but also the front end code? Would love to learn some idiomatic ways to structure our front end.
<https://github.com/project-serum/anchor/tree/master/tests/ido-pool> another option
Thanks!
`await connection.getAccountInfo(new PublicKey(...))`
Say ``"BDaZrrPYF5ns5xdYTdJ8hjTsLRQouT5P1Fh9k5SJbe76"`` is the address for the account I want mintA to be, how would I get access to the account in javacsript from that string
Is there a way to get an account info from a string of a public key in Javascript? I have a mint that I know the public key address  of and I want to load the mint account for an instruction like ``mint: mintA.publicKey``
ok, very cool / makes sense, thanks
There the seed would be their pubkey.
It depends on the use case, yeah. Sometimes static seeds are fine but other times you might want e.g. a mapping userPubkey => some account that stores stuff about them.
Might be helpful to note that you don't really "create" PDAs (kind of being pedantic but hopefully in a helpful way), you "find" them; they just exist. You create accounts.
so for most use cases is that fine or would it be better to define the seed based on the user?
The address only depends on the seeds + program_id (assuming you found it with find_program_address, I guess otherwise it technically depends on the exact bump you used)
Yep, they'll get the same address.
i don't fully understand how PDAs are mapped/created, if there is a seed string that is a constant, and some program_id, will different users using the same program get the same PDA address? or is it dependent on the user address as well
and just conceptually from a protocol perspective
yeah its quite different than solidity
so powerful
very different coming from eth here haha this is cool tho
thank you!
yep! everything all good
fixed?
not that i'm aware of. each account at minimum needs 8, and then you're just counting the number of bytes for the fields in the account data struct
8 for the account discriminator, and 8 for each `u64`
is there a guide n where I can learn more about space
thank you!
yep, do `space = 8 + 8 + 8`

its likely a space allocation issue
ok and then `MyAccount`

what does your context struct look like
i tried it but there are some missing features on windows like rust bpf toolchain
I'm writing a simple contract with two parameters to test, but i keep getting this error. Would love some help



thank you!
Thanks!
i've been reading the anchor tests and it got me pretty far!
we've been open source since devnet day 1
if you really want a challenge, https://github.com/jet-lab/jet-v1
I need glass to chew
Anyone have a good larger project to start and grind through? I've gone through Anchor tutorials and various hello world guides.
https://tenor.com/view/developers-gif-13292051
ur a godsend thank u
Ill check that in a bit
Erm good catch
Is the `fee_account` somehow not actually an spl token account?
```
#[derive(Accounts)]
pub struct SetFeeAuthority<'info> {
    #[account(
        mut,
        constraint = fee_account.owner == *current_fee_authority.key,
        constraint = *fee_account.to_account_info().key == vault_account.fee_account_pk
    )]
    pub fee_account: Account<'info, TokenAccount>,
    pub vault_account: Account<'info, VaultAccount>,
    #[account(signer)]
    pub current_fee_authority: AccountInfo<'info>,
    pub new_fee_authority: AccountInfo<'info>,
    pub token_program: AccountInfo<'info>,
}
```
I've assumed that it's `vault_account` triggering the err
Hmmm. Is it possible some other account is triggering the check? Can you post your `#[derive(Accounts)` struct?
programId is reutrned as the owner hmmm
One thing you could do just as a sanity check is to fetch the account after you init it, and just make sure it looks ok/has the right owner: `await connection.getAccountInfo(itsPubkey)`
so it's weird, the account is init-ed and then passed in on subsequent ix invocations
and it is the same
this is from `anchor test`, I printed out the programId in my tests
haha the ole declare_id! dance
Is your declare_id consistent with the deployed address?
I'm getting `The given account is not owned by the executing program` when passing in, what seems to be, an account owned by the prog
hey there
I think that way you're skipping the `checked_`-ness (but yeah, that syntax will work)
this is the syntax that ended up working for me:
```
**escrow.to_account_info().try_borrow_mut_lamports()? -= amount;
**bob.to_account_info().try_borrow_mut_lamports()? += amount;
```
thanks
right
Or `pubKey.toBase58()`
ah
console.log(pubKey.toString()) I think works
Is there a good way to console log a public key in the browser? Getting an array like ``0: 60697966
1: 17388275
2: 34539843
3: 196375
4: 7464282
5: 16798653
6: 638181
7: 12198435
8: 30570165
9: 1101690
10: 0``
(And then if your program doesn't own the account, you'll have to ask whichever program does own it to do the transfer for you, via CPI‚Äîhow will depend on which program is the owner.)
If your program owns the account you want to take lamports from, you can do e.g. `ctx.my_account.to_account_info().try_borrow_mut_lamports()?.checked_sub(123)`
Hmm, yeah, looks like those aren't available on AccountInfo, only on an internal solana thing? https://github.com/solana-labs/solana/blob/master/sdk/src/account.rs#L83
I was looking there and didn't see the `check_sub_lamports`/`check_add_lamports` functions, but there is wrapped mutable reference to the lamports property. Do you know how to update the value through the `Rc<RefCell<T>>` wrappers?
Those are probably on the underlying `AccountInfo`.
<@!99911938955309056> are the `check_sub_lamports` and `check_add_lamports` functions available on the accounts provided by an Anchor context? I can't seem to find those interfaces anywhere 
https://docs.rs/anchor-lang/0.17.0/anchor_lang/struct.Account.html
ahh yep ok, turns out my issue was unrelated to signatures (custom program error üí™ ), but that was informative, thanks both of you üôè
it would depend on who the designated signer accounts for the instruction are
If the web wallet is already the provider's `.wallet` (how are you initializing your provider?), then it will automatically sign the tx here https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L105
https://github.com/project-serum/anchor/blob/master/ts/src/program/namespace/rpc.ts#L20
could be very similar behavior though...
`Provider#send` signs the transaction with the associated wallet then sends for commitment
```ts
const tx = program.transaction.function(..., ctx)
const sig = await program.provider.send(tx)
```
if you use the `transaction` namespace of the program instead of `rpc` (i.e. `program.transaction.function(...)`, it'll create a transaction instruction that you can pass to the provider wallet for signing and sending
is there an easy way to sign the transaction with a web wallet (`useAnchorWallet`) when you're trying to do a `program.rpc.function` call?


//////////////////////////////////////////////////////////////////////////////////////////

kinda slow today huh
nvm, got it, thanks
It still doesn't like me haha

Mm, is it complaining about syntax? I see you don't have an `#[instruction(authority_bump: u8)]` section?
<:pepewoah:866983237141397514>
Why does VS code not like this?
No... It sounds like they need to use a different function
The issue they're facing is that the function they want to run assumes they can construct a Token, but they can't (it requires an actual keypair)‚Äîdo you know another way?
You need to run the anchorWallet.signTransaction line... that will call the wallet to open the popup
https://github.com/solana-labs/solana-program-library/blob/12732f8d5a96bbbfcf0274b208849b6de0e5b0b0/token/js/client/token.js#L509

So I guess you'll have to manually do what the lib is doing: https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L563
I can't find any higher-level api exposed by the spl token js library.
So I guess that means you need to construct the underlying solana transactions yourself?
Hmm, yeah, I don't think you'll be able to run the Token constructor using the wallet, for the reason <@!847130012879814668> mentioned (the wallet won't divulge its private key to you‚Äîit just lets you ask it to sign stuff)
thank you sir!
Ok, sorry, I understand your question now, taking a look
Create a PDA with fixed seeds, e.g. with a static string.
how are global states usually written ?
Hi, How can I get the transaction of my NFT collection from other market places?
I was going to show him what you showed me in the source code where when you call program.rpc it automatically calls the popup for the user to sign the tx
Alan to the rescue! haha

Which function/library is that? Will take a closer look
this errors rather than shows the phantom popup
do i pass in a fresh Keypair? `var payer = new Keypair();`?
Yes... The anchor program will automatically create the popup for the wallet to sign the tx
seems it needs a payer signer ```constructor(
      connection: Connection,
      publicKey: PublicKey,
      programId: PublicKey,
      payer: Signer,
    );```
The wallet will auto-magically sign any txs, no need to pass it as an explicit signer.
Does that actually require a keypair or just the public key?
any way to use `getOrCreateAssociatedAccountInfo` in that case?
No. The wallet can sign a transaction, but you cannot get the wallet's private key for security reasons
can I get a Keypair from a Wallet in the anchor js package? I am trying to execute `getOrCreateAssociatedAccountInfo`
Of course!
Got it!! Thank you so much for your patience ‚ù§Ô∏è
You unfortunately can't generate it inside the instruction (solana just doesn't allow this, it's a funny gotcha/part of the learning curve‚Äîyou *have* to pass it in from the client)
Ah, right, so `check_signer` isn't just a pubkey, it's an AccountInfo
but as you mentioned, i dont think its necessary
my goal was to generate it inside
```
pub struct ConcludeMatch<'info> {
    #[account(mut, constraint = player_2_check.to_account_info().key == &game.player_2_check)]
    player_2_check: Account<'info, Check>,
    #[account(mut, constraint = &player_vault.owner == check_signer.key)]
    player_vault: Account<'info, TokenAccount>,
    // Program derived address for the check.
    check_signer: AccountInfo<'info>,
}
```
Here i am taking the check_signer in the instruction.
No, if check_signer is a pda then only your program can sign for it (not possible for anyone/anything else to do so)
Can you post your `#[derive(Accounts)]` struct? What type is `check_signer`?
Hmm, does it compromise security in anyway? like storing the checksigner with the vault it has auth over?
Ah, you'll still need to pass that pda in from the client (which means it will arrive to your program as an account, not just a pubkey)
how do i solve this?
here `check_signer `is the pda i generated using the method you mentioned, but its a `PubKey` and i cannot call '`to_account_info` on it.
Perfect! but i ran into a problem when im trying to do this. 
specifically when i use this api 
```
Transfer {
            from: ctx.accounts.vault.to_account_info().clone(),
            to: ctx.accounts.check.to.to_account_info().clone(),
            authority: ctx.accounts.check_signer.clone(),
        };
```
To sign for a PDA you just need to know its seed+nonce (that's what you pass to `invoke_signed`)
`find_program_address` uses `create_program_address` under the hood
Yep!
I want to use the generated PDA to sign the vaults it has authority over.
Okay, thanks for confirming. another question is whether I can generate the same PDA inside the program if I have the seed, nonce, and program_id using this fn `Pubkey::create_program_address`
Yep!
Hi all!! `anchor.web3.PublicKey.findProgramAddress` will this function give the same PDA if seed and program id are the same?
I am wondering on what version of serum dex is deployed on the mainnet, 0.4.0 is that the final?
At any rate, interesting to realize Pubkeys in Solana aren't just real-vs-PDA, there's also this funny (seed, base, owner) thing sometimes.
And I guess with `transfer_with_seed` the answer is that like with PDAs you sign kind of indirectly‚Äîyou instead just have to sign for `from_base`, plus provide the `from_seed` and `from_owner` that were used to construct the `from` argument.
So the question is how are you supposed to sign for the result of a `Pubkey::create_with_seed`, since it isn't necessarily an actual pubkey with a corresponding private key (and I guess the intent is that it *isn't* an actual pubkey?).
Under the hood `Pubkey::create_with_seed` just smooshes base + seed + owner together with sha256 (somewhat similar to how `Pubkey::create_program_address` works, minus making sure it's off-curve)
Hmm, good question, I'm actually not really sure when you would want to use the base+seed+owner version of addresses ü§î
```
init(var1, var2, var3, {
accounts
```
Okay
Yes, add another one
Is there any way to send more than one variable as instruction data

```
await program.rpc.initialize(data.toString(),{
                accounts: {
                    userAccount: userAccount.publicKey,
                    user: provider.wallet.publicKey,
                    systemProgram: SystemProgram.programId,
                },
                signers: [userAccount]
            });
```
Have you started test validator ? If not start test validator. `solana-test-validator --reset`
guys, idea any ideas why there is an rpc request error?
https://docs.rs/solana-program/1.6.1/solana_program/system_instruction/fn.transfer_with_seed.html
Has anyone used ``transfer_with_seed``? What is from_base?
**deletes gross code**
ok thanks, I'll give this a shot, a good avenue to explore
my JS/react skills are... limited
ok, well that's good to hear at least, yeah i'm doing a bunch of wacky stuff in the client, but think i have a decent handle on it, the final step is here if it might help, but i think a lot of the logic is wrapped in before it gets to these objects
One way you can try to do that: `await connection.getAccountInfo(thePubkey)` will let you poke around the account in js, and you can take a look at its owner field and see it its ok
You'd basically want to check that `escrowAccount` really is owned by the program, and that the two `TokenAccount`s really are token accounts (they need to be owned by the token program)
That looks reasonable to me at a quick glance. How are you passing/creating the token accounts in JS?
```
#[derive(Accounts)]
pub struct Exchange<'info> {
    #[account(
    signer,
    constraint = escrow_account.taker_key == *taker.to_account_info().key // this one i added myself, i thought it might be missing from the example because it's difficult to simulate in a single test from a wallet, but really not sure about this
    )]
    pub taker: AccountInfo<'info>, // taker
    #[account(mut)]
    pub taker_receive_token_account: Account<'info, TokenAccount>, // where the tokens are transferred after accepting the offer
    #[account(mut)]
    pub pda_deposit_token_account: Account<'info, TokenAccount>, // token account owned by the pda where the tokens are initially deposited from the initializer
    #[account(mut)]
    pub initializer_main_account: AccountInfo<'info>, // initializer of the escrow contract
    #[account(
    mut,
    constraint = escrow_account.initializer_deposit_token_account == *pda_deposit_token_account.to_account_info().key,
    constraint = escrow_account.initializer_key == *initializer_main_account.key,
    close = initializer_main_account
    )]
    pub escrow_account: Account<'info, EscrowAccount>,
    pub pda_account: AccountInfo<'info>,
    pub token_program: Program<'info, Token>,
}
```
adding some comments to my derive(Accounts)
ok, thanks, i'll ignore them for now and circle back
Mm, not sure, I don't think there's anything special about them though
not sure if that's true
i was reading some documentation that led me to believe you can send something to an ATA without creating it first, via the AToken program, and don't need to explicitly create the account
sure, i've been messing with it a bunch so i'm probably a bit off track, but can post the current state ha, one sec
Haha, what do you mean by "just exist" here?
Token accounts are always owned by the spl token program (TokenAccount in anchor checks this), so I wonder if you're not stating that correctly in your program
Can you post that?
That particular message is usually generated by an `Account<'info, Something>` in your `#[derive(Accounts)` struct
The current state of the art debugging technique here is unfortunately to do a bunch of source-diving ü§ø. I guess anchor should probably emit more informative logs here though (maybe in debug mode or something)
i've tried creating associatedTokenAccounts (which as i understand it sort of "just exist"?) also created regular token accounts beforehand
hey all, are there any suggested approaches for troubleshooting errors? I'm trying to work through this escrow program, with a client, and keep hitting "The given account is not owned by the executing program" on the last "exchange" step. (I can initialize and cancel...) It sounds straightforward enough but I've been hitting my head against it for a while now. Any way to zero in on which account it's complaining about?
Funny, I was like, damn, that must have been tough, go phantom üò§
Oh, right!
It always simulates the txs before you submit it, that's how it catches errors beforehand
there's even a simulateTransaction() method in web3
Yeah, I wonder how hard it was to implement that. Is it easy to simulate txs? Do you need to maintain your own validator or something?
phantom recently added security features that preview the amount of SOL that gets slurped out of the wallet
Got it really appreciate the help!
I guess the counterintuitive security thing is that when you authorize a tx in say Phantom, you might not totally know what it's going to do/how much it will cost üò± Phantom tries to estimate this for you but they have to simulate the tx I think.
Mm, not totally sure either, I think at least one risk with NFT minting is that if you don't use a burner wallet, you might accidentally allow a sneaky program to drain your funds (you thought you were signing a "mint me an nft" transaction, but it was actually a "let me drain your funds" transaction)
(Haven't thought through your use case super carefully‚Äîyou'd just need to make sure you're able to sign things correctly)
Not really sure what those are haha
Well I have done something similar with candy machine and just create a transaction instruction to mint an NFT, it works but I was given advice saying theres security risks with that
Yeah, that sounds like it should be possible‚Äîhave you tried doing that?
I was suggested to create an escrow program to do this which seems a bit overkill?
Hey all super basic q, just want to make things as simple as possible. Lets say I want to send 1 spl token in exchange for SOL, is it possible to create a series of calls to the spl-token program create a transaction instruction (all using typescript on frontend) and just send that to the users wallet?
Hmm, is there a snippet on how to subscribe to the event?
Anchor events are just calls to `msg!` under the hood, so yeah, they'll run even if you trigger them via a CPI
Is anchor emit possible through CPI?
Thank you...
u8, u16, u32 don't
I thought every number passed into the Rust contract had to be a BN
Thanks!
Thank you <@!501570363566587905>
Big number. Needed for anything larger than 2**53-1. See `bn.js`.
it is just bits that the contract reads
Binary number
big num?
What's a `BN`?
ah yeah, there's tons of solana clients. anchor ones harder to come by
Looks like there's the Rust one too: https://docs.rs/solana-client/1.8.0/solana_client/rpc_client/struct.RpcClient.html
is my test borked or is my assumption correct
just want to sanity check, but I've written a test to make sure that an instruction using `init` on an acc can only be called once, and it looks to be the case
https://github.com/gagliardetto/solana-go is this the canonical go one?
there's a go one + python WIP one
I think there's the Solnet people too
Are there Solana clients other than JS/TS?
so basically when a user passes in the program owned acct, I check it against the fixed seeds?
gotcha I'm not using a state struct actually
Just use a PDA with fixed seeds instead.
They'll be removed soon.
No but you shouldn't use state structs.
Can a user fake a program's canonical state struct?
ahahaha sick thanks, i actually just realized this just before u replied üòÇ
This is the default with regular solana smart contracts. With Anchor, you can achieve this with `ctx.remaining_accounts`.
is there a way to accept a variable sized collection of accounts as input to a program with anchor (or with solana more broadly?)
If the pda was being used as an account to store data then it would be a different case, but the authority relationship can be 1:many
I think since the pda is only being used as an authority it would be fine to have multiple different escrows, they would just all have that same pda as their authority
i would need to include some other data in there (maybe from another account or something) in the seed/pda calculation for it to support multiple different escrows using the same program
https://github.com/project-serum/anchor/blob/master/tests/escrow/programs/escrow/src/lib.rs#L53
from the way this program does the PDA, it seems like it'll only support one escrow at a time right?
awesome thx
I don't like the pattern of creating in a separate instruction, because it makes it harder to reason about the intended behavior of the program when you need to consider the client in addition to the smart contract.
2. imo.
which way is more idiomatic?
1. Create a token_account, pass it to the program, and assign the authority to be the PDA
2. Create a token_account within the program with the PDA as the auth
Perfect, wasn't sure if I was just missing something.  Thanks
Taking a look at all the instructions, no, I dont think you can close a mint account and reddem the rent exemption. https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs
That's ok. Non anchor quiestions are welcomed.
guess that's not an anchor question sorry
There's no way to close and redeem the rent lamports from a Mint account, right?
you would need to implement some sort of commit-reveal scheme or RANDAO if you want on-chain rng thats secure
on-chain data is deterministic, and can easily be used as an exploit for on-chain RNG
sounds like a good way to get hacked
maybe I was supposed to delete the .anchor dir
lol a video from May 18th is "super old". Web3 moves too quick.
With root permissions.
And so when it builds, it creates files and directories.
It mounts the local workspace into the image.
but I don't understand advanced technology like this ü§∑‚Äç‚ôÇÔ∏è
yeah I thought docker doesn't even make any changes to my machine
Ok so it's definitely an issue with docker leaving around state that wasn't cleaned up. ü§î
the vid is super old though, need to come up with a new one that takes into account all the new syntax in anchor
thanks!
Goes through PDAs in a bit of depth
I found this super helpful (https://www.youtube.com/watch?v=i6Ycr5nhjH8)
cool that works
And then run the publish in there.
I mean to git clone mango in a fresh directory.
you mean this: `docker pull projectserum/build:v0.17.0`?
```
rm -rf /workdir/docker-target
rm -rf target
```
Can you try a fresh clone?
I'm thinking it's because it's trying to create, modify, or delete one of the directories that was created by the docker image.
Is there a way there could bea permissions issue with anchor publish but not with anchor build verifiable
Did you wipe the entire target dir?
didn't work
Also make sure you kill the existing docker image if it's still running.
I.e. `target/verifiable` and `docker-target`.
Can you try wiping the temporary dirs?
the solana sdk would probably load it / deserialize it for you
I'm attempting to `anchor publish mango` and nothing seems weird about my permissions but I'm getting `Error: permission denied (os error 13)`. 

Background: It did start executing the command properly the first time, but I cancelled it mid way to change something. `anchor verify -p mango <...>` is successful and I reinstalled anchor by force with the usual command. Any help would be appreciated so we can get latest deployed mango onto anchor registry
I'm having a little trouble finding an example of getting recent block hashes on the rust side. I guess you pass in the `SysvarRecentB1ockHashes11111111111111111111` account, but then does anyone know how you then get the most recent block hash?
yes
If you are confused about PDA, please go through this https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
okay. and PDA are generated from program id with a random seed, right?
the program is not the vault owner, the PDA is the vault owner. PDA signs the Transfer instruction. Clear ?
Hi everyone! I am working on cashiers check program and have some basic doubts, please bear with me. As far as I understand 
```
let [_checkSigner, nonce] = await anchor.web3.PublicKey.findProgramAddress(
      [check.publicKey.toBuffer()],
      program.programId
    );
    checkSigner = _checkSigner;
```
this code gets you the program address. Now on rust side of things, we are using the same check signer to transfer funds from vault to some other account as shown below:
```
let cpi_accounts = Transfer {
            from: ctx.accounts.vault.to_account_info().clone(),
            to: ctx.accounts.to.to_account_info().clone(),
            authority: ctx.accounts.check_signer.clone(),
        };
```
My question is can I transfer the funds from vault to the destination without the `check_signer` ? I ask this cause I think if program is vault owner then why need `check_signer`


//////////////////////////////////////////////////////////////////////////////////////////

And my idl:

`
{
    "version": "0.0.0",
    "name": "solanaapp",
    "instructions": [
        {
            "name": "create",
            "accounts": [
                {
                    "name": "baseAccount",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "user",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "increment",
            "accounts": [
                {
                    "name": "baseAccount",
                    "isMut": true,
                    "isSigner": false
                }
            ],
            "args": []
        }
    ],
    "accounts": [
        {
            "name": "BaseAccount",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "count",
                        "type": "u64"
                    }
                ]
            }
        }
    ]
}
`
Hello guys! I'm facing a problem but I'm completely sure its really easy. I'm following medium's tutorial (the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291)

At the front end part when the code is making the instance of the deployed program its trying to access a metadata object from the idl to get the address of the program. 

After building the program several times my idl doesn't have that property object so the instance fails on the front app.

Snippet in question: `const programID = new PublicKey(idl.metadata.address);`
```ts
const b58 = "..."
const key = new web3.PublicKey(b58)
```
and on that thread, has anyone done a bonfida integration before? to lookup .sol addresses?
are there any best practices for parsing strings to `PublicKey`s? Just cast the string to a buffer and then decode? https://project-serum.github.io/anchor/ts/classes/web3.publickey.html#decode
You can see an example of where anchor does this here https://github.com/project-serum/anchor/blob/master/lang/src/common.rs
Thanks!
The lamports live in e.g. `ctx.accounts.my_account.to_account_info().try_borrow_mut_lamports()`
Anchor also has a `close` attribute that might help here (assuming your program owns the pda‚Äîif some other program owns it then you'll have to ask it nicely via CPI to do the transferring)
Ok, so what is the function to get an account's remaining lamports
Yeah, that's my understanding.
Thanks! So basically if I drain the PDA of everything, Solana deletes it
Yeah, if you can transfer those lamports then you're all good (they live with the rest of the account's lamports, not in any special place etc.)
I mean it's "rent reserving" lamports... Like I will be creating a bunch of PDAs... once they are used up in 60 seconds... I want the rent reserving lamports I sent to them back...
Yep, think all you need to do is send its lamports to your destination of choice (how will depend on which program owns the account)
Can I delete a PDA and claim back its lamports?
OK confusion on my side, I had a TokenAccount with a owner contraint, that was failing obviously. (The mint was fine just being a mint owner by the TokenProgram)
Technically a `CpiAccount` would fit 
> /// Container for any account *not* owned by the current program.
 But it seems deprecated in favor of `Account`

I'm a bit confused
So I cannot simply user account as I do to access a mint without caring of it's owner (I don't even use the #[account(...)] above it)
I wanted to avoid passing a non typed `AccountInfo`, but seems I'll have to
But a Mint... I think that's where my issue lies currently
In general `Account<'info, T>` asserts that the account is owned by `T::owner()`. That gets set to your program when you use `#[account]`, but e.g. `TokenAccount` says its owner should be the spl token program, etc.
I simply used that to conveniently access a `Mint` directely
and having some owner issues with the front end (that I did not had in my tests, but probably because of some keypair handling too many things)
reading `/// Account container that checks ownership on deserialization.`
I think I got something wrong... when I use `Account<'info, Mint>`, or other thing than mint, does that mean that the program must be the owner?
Thanks a lot DVCRN. It looks like they are creating a replica of Metadata Struct in metadata.ts. I was planning to use it in Smart Contract... So you recommend I manually create a replica of Metadata Struct and unpack it as normal?
This is likely because the tutorial is slightly out of date (looks like it needs to be re-deployed or something, bug is fixed in master): you need to have the ANCHOR_WALLET env var set. Try doing `ANCHOR_WALLET=~/.config/solana/id.json node client.js`
i used anchor test and it worked but when i use node client.js it fails
nvm
thanks, it kinda work but its now giving a new kind of error üôÉ  coding is like whack a mole(error)
in the specific project directory
that's what i often do
you could just install the package without `-g`
i will try this out
https://www.youtube.com/watch?v=oFF_QryVSJk
i dont know how to do this
how do you set the node_path?

Thanks a lot DVCRN. It looks like they are creating a replica of Metadata Struct in metadata.ts. I was planning to use it in Smart Contract... So you recommend I manually create a replica of Metadata Struct and unpack it as normal?
maybe this helps https://gist.github.com/dvcrn/c099c9b5a095ffe4ddb6481c22cde5f4
Hi Friends. I am trying to read Metaplex Metadata account data. My Problem is .. I am not sure how to pass the data in Metadata struct provided in metoplex contract state. I mean if it was my own data I would have made an unpack instruction but I am not sure how I can unpack Metadata in metadata struct. Any help/guidance would be appreciable.
Hi Boolet... Was you able to read the metadata? If yes.. can you share some tips to read the data from !!
But I don't need all
Yes that's the thing, mango is... heavy https://github.com/blockworks-foundation/mango-client-v3/blob/main/src/ids.json
OK! Great info, I was writting data and using pyth-client like Jet do in their repo before. But that's easier to clone
make sure you copy all accounts that a program needs
yes correct, and use `--reset` to reset it
good thing is that you only do it once then it's stored in the local `test-ledger` folder ? Will make a script thanks
Alright will do so then
yeah I use a bunch of --clones. For example copying metadata program etc
Have you used clone to copy more than single accounts, like for instance I wanted to use mango, but that's a lot of things to copy? Curious what was your usage of it
still running but seems to be working so far üôè
` rustup toolchain install stable-x86_64-apple-darwin`
what if you run the build command manually? 
```
cargo build --target x86_64-apple-darwin --release --bin solana --bin solana-bench-exchange --bin solana-bench-tps --bin solana-faucet --bin solana-gossip --bin solana-install --bin solana-keygen --bin solana-ledger-tool --bin solana-log-analyzer --bin solana-net-shaper --bin solana-sys-tuner --bin solana-validator --bin cargo-build-bpf --bin cargo-test-bpf --bin solana-dos --bin solana-install-init --bin solana-stake-accounts --bin solana-test-validator --bin solana-tokens --bin solana-watchtower --bin solana-genesis
```
this isn't working for me, which rustup toolchain do you have?
so the --target x86_64 flag mainly
```
diff --git a/scripts/cargo-install-all.sh b/scripts/cargo-install-all.sh
index ae795cda9..4a48b6956 100755
--- a/scripts/cargo-install-all.sh
+++ b/scripts/cargo-install-all.sh
@@ -9,7 +9,8 @@ if [[ $OSTYPE == darwin* ]]; then
   # But `greadlink` does, which you can get with `brew install coreutils`
   readlink_cmd="greadlink"
 fi
-cargo="$("${readlink_cmd}" -f "${here}/../cargo")"
+# cargo="$("${readlink_cmd}" -f "${here}/../cargo")"
+cargo="$(which cargo)"
 
 set -e
 
@@ -126,7 +127,7 @@ mkdir -p "$installDir/bin"
 (
   set -x
   # shellcheck disable=SC2086 # Don't want to double quote $rust_version
-  "$cargo" $maybeRustVersion build $maybeReleaseFlag "${binArgs[@]}"
+  "$cargo" $maybeRustVersion build --target x86_64-apple-darwin  $maybeReleaseFlag "${binArgs[@]}"
 
   # Exclude `spl-token` binary for net.sh builds
   if [[ -z "$validatorOnly" ]]; then
```

I changed it like this
let me go figure that out, weird
ah, i see it's still arm64
```
‚ùØ file bin/solana-test-validator
bin/solana-test-validator: Mach-O 64-bit executable x86_64
```
with `file <path to binary>`
yeah that script, i did everything under rosetta, so pretty sure it's x86_64
do you know a way to check?
arm doesn't work, so you need to compile to x86_64
with the cargo-install-all script? did you generate a x86 binary or arm
i did
you have to compile from scratch, the prebuilt binaries don't properly work
yeah...i got solana-test-validator and anchor build working so thought i was out of the woods on that haha
is this m1 by chance?
my `anchor deploy` on localnet is stuck on `Finalizing transaction`, it hangs for a while and then i see this error:
```
Error: Account allocation failed: unable to confirm transaction. This can happen in situations such as transaction expiration and insufficient fee-payer funds
``` 
i definitely have enough funds, checked with `solana balance --url http://127.0.0.1:8899`
seems like something dumb, any idea?
Yes I connected the dots, thanks
anchor will generate a new keypair for your program by default but if you have an address that you got from key grinding, you have to go replace it
That make sense
you need to swap the keypair json file at `target/deploy/PROGRAM-keypair.json` with the correct one
Maybe some artefact, rebuilding
But why do my program adresse deployed with `anchor test --skip-local-validator` don't match the one in anchor.toml
Before it worked with `anchor test` but when I rerun it I see that there was no "deployment".
Also looking at the generated IDL, the adresses there don't match my declare ids
Thanks again Alan.
Thanks
Jeez
solana-test-validator --help :p 
and https://docs.solana.com/developing/test-validator
Where is that documented if it is
Oh, interesting
you can clone any program/address on into your local net with the `--clone` flag
Yes that's the thing, I wanted to test on devnet for some feature that interact with mango. But I'll need to write some code in app instead
just use localnet
can you even run tests against the dev cluster?
` test        Runs integration tests against a localnetwork` that would explain why B)
Running `anchor test --provider.cluster devnet`, with the `anchor.toml`'s `provider` set to `devnet`, and using `provider.env()`, I still have issue related to localnet when attempting to call my program

```Typescrit
    export class MyProgram {
      public static ProgramId: PublicKey = anchor.workspace.ProgramName.programId;
      public static rpc: anchor.RpcNamespace = (anchor.workspace.ProgramName as Program).rpc;
    }

   await MyProgram.rpc.new({
      //...
   )};

```

`Translating error Error: failed to get recent blockhash: FetchError: request to http://localhost:8899/ failed, reason: connect ECONNREFUSED 127.0.0.1:8899`

is defining the RPC this way not viable?
much thanks, that did it, i had the syntax wrong
Yeah, can you show the line of code you're trying to use? Using multiple addresses shouldn't be a problem
create is when you have the nonce
findProgramAddress not create
`Program failed to complete: Could not create program address with signer seeds: Length of the seed is too long for address generation`
What goes wrong with something like `[addrOne.as_ref(), addrTwo.as_ref()]`?
does anyone have any clever ways to combine two account addresses into something short enough to be used as seeds for a PDA? üòÑ
```
module.exports = withTM({
  reactStrictMode: true,
  webpack5: false,
  webpack: (config, { isServer }) => {
    // Fixes npm packages that depend on `fs` module
    if (!isServer) {
      config.node = {
        fs: 'empty'
      }
    }

    return config
  }
});
```
but with
works
I had this issue as well, adding this webpack function to your `next.config.js` is a workaround I found but yeah:
```js
module.exports = withTM({
  reactStrictMode: true,
  webpack5: true,
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.resolve.fallback.fs = false;
    }
    return config;
  },
});
```
what code are you using?
./node_modules/@project-serum/anchor/dist/esm/provider.js:150:0
Module not found: Can't resolve 'fs'

Can't use it in nextjs??
thanks, I found the spl_token_metadata crate, but I don't understand what the unique identifier of the NFT collection is...
Why does Rust want this???
Thank you!
By passing its seeds+bump (`invoke` is just `invoked_signed` but without passing any seeds+bump)
If the from account is a PDA, you'll need to sign for it with `invoke_signed`

I am trying to send money from a PDA back to an account... why won't it let me?
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
Yes. Pass in the metadata address as an account and verify the address is correct in the program.
The token holds metadata that you have to be able to read... I don't know the specific funciton to call to read it, but it is possible

I have never done it, but it has to be possible
Isn't it risky, as the minter can create another collection? Can you check SPL metadata from the rust program?
You could check if they were minted from the same source... or you could read the metadata from the NFTs
Hi, anybody can explain how I can know if two NFTs are part of the same collection from within Anchor
That is right... I just had to allocate space
maybe you didn't allocate enough space for the `Vec`?
ah yep this did the trick thanks, just had to restart vs code :->  
Another question I had: if I want to make sure that a CPI instruction is done by only one specific program, I guess I would use `CpiContext::new_with_signer` but how would I then check in the called program if it's the correct one? I just tried passing `Signer::try_from(account_info)` but I guess that's not the way üòÖ


It complains when I try to push data to a vec
What does this error mean?
Makse sure you're using `<cpi-crate>::cpi::accounts::InitPlayer`
ah thanks, i'm on v0.17 and its complaining about mismatched types, so ill try that üí™
But to answer your question, you can simply do `Loader::try_from(account_info)`
In the latest version you don't need to convert into loader for CPI.
Some more CpiContext related questions related to this, bear with me plz üôè : I'm trying to CPI like this
```rust
        let player_list = ctx.remaining_accounts[3];
        let cpi_accounts = InitPlayer {
            player_list: player_list,
        };
        let cpi_program = ctx.remaining_accounts[2].clone();
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
        other_program::cpi::init_player(cpi_ctx);
```
`player_list` is an `AccountInfo` because i have to use `remaining_accounts`, but the struct expects a zero_copy loader `Loader<'info, PlayerList>`. Is there a way to turn an accountInfo into a Loader or something like that?
That way we can derive address simply from the wallet.
yw. Another thing I want to figure out (still haven't) is if there's a way to use an **associated token account** for this, instead of a  Keypair.generate()
amazing, thank you, will check it out
<@!886273867293802556> I've reused most of the code from the `Token.createWrappedNativeAccount ` which I couldn't use out of the box because it requires owner `Keypair` to be passed along, which isn't feasible when using (web) wallet. https://gist.github.com/imprfekt/90d35b599ec1016ac9649ab8ac91815b
I just did this literally today. It's a f*cking mess... Sending the gist straight away
not yet as far as i know
wonder if anchor has any shortcuts
yeah you're definitely right as far as i can tell
https://github.com/project-serum/serum-dex-ui/blob/5b4487634e3738c57ace6da1377704e95f53c588/src/pages/pools/PoolPage/PoolAdminPanel.tsx#L250-L272
I think the `transfer_with_seed` instruction you're looking at is for something else (not applicable in your case, though tbh I'm unclear on when it *is* applicable)
If it's your own program's pda, you can just do a regular transfer where you sign with its seeds+bump
I'm actually a little confused about the cashier_check example as well: in the `cash_check` instruction, wouldn't you be able to pass in any account into `to` as it isn't compared against the `check.to` field? https://github.com/project-serum/anchor/blob/master/tests/cashiers-check/programs/cashiers-check/src/lib.rs#L54
If this is for a token account, do you know what account is from_base supposed to be? I was trying to use this to transfer lamports from a PDA owned token address but didn't know the pubkey required.
Just kidding, I think it's because of this struct
Why does adding this fix the problem?
Thank you!
https://doc.rust-lang.org/std/default/trait.Default.html
its a builtin trait in rust that contains a function to implement returning a default instantiation of a struct
Exscuse my ignorace, but what is the Default trait?
To implement the `Default` trait.

What is Anchor saying here?
all leverages the same code
yes, `anchor_lang::solana_program` is just a convenient re-export of the core solana crate
the `system_instruction::transfer` just builds the instruction, you need to create the associated transaction and send it too
does cli code work the same as program code?
thats the implementation of the `solana transfer` cli command
take a look at this https://github.com/solana-labs/solana/blob/master/cli/src/wallet.rs#L627
thanks for the guidance, much appreciated
makes sense, i don't suppose there is an example somewhere for wrapping sol? i'll continue to look, but if you have one handy
Makes the code so much messier.
Agreed. Not sure why people insist on using native SOL.
in practice wrapping sol is the recommended approach though
In theory, yes.
so something like this should work fine, without any additional commands?
```
anchor_lang::solana_program::system_instruction::transfer(
            &ctx.accounts.taker.key,
            &ctx.accounts.initializer_main_account.key,
            amount,
        );
```
It is.
yeah, that's what i have, but it isn't working
starting to think `anchor_spl::token::transfer` is just for token accounts...which would make more sense
i think you need to use `anchor_lang::solana_program::system_instruction::transfer` if you wanna do lamports
for real
lol those docs are so unhelpful as usual
and then calling transfer
i just always assumed there was a lot more overhead involved, mainly moving the sol to a temporary wrapped sol SPL token account
i haven't had to do but wrapping sol and using spl token transfer is the recommended approach
how have you typically done it?
like this? https://spl.solana.com/token#wrapping-sol
that would be surprising but cool if the token program handled wrapping sol on the backend
https://github.com/project-serum/anchor/blob/master/spl/src/token.rs#L13
i _believe_ so...might need to test
oh ok that works for lamports too? cool, thanks
use `anchor_spl::token::transfer`
is this how we should be transferring sol within the anchor framework? my transaction runs fine but i don't see any balance changes -- seemed to be just ignoring it:
`anchor_lang::solana_program::system_instruction::transfer`
try turning it off and on again
No. Just VS code issues... I will ignroe
sometimes vs code is like this after upgrading your anchor version
are you getting any actual compile errors


//////////////////////////////////////////////////////////////////////////////////////////

```
    Checking governance-registry v0.1.0 (/home/dd/project-serum/governance-registry/programs/governance-registry)
error: Unrecognized option: 'pretty'
error: could not compile `governance-registry`
```
And then search for `try_accounts`.
Yes.
Is this right?
```
cd project-serum/governance-registry/programs/governance-registry
cargo expand
```
Gotcha. There's a lot that happens with the derive accounts code before it eventually gets to the code generation part.
this is the extent of my understanding lol: https://github.com/blockworks-foundation/mango-v3/blob/main/mango-macro/src/lib.rs
I'm a little bit familiar
I dont think that will be the case with proc-macros unless you're familiar with them.
so just finding the code is nicer
Weird. It shouldn't ever fail.
cargo expand often fails for me. probably not yet familiar with what it's doing
Here's the end of the macro codegen https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/accounts/constraints.rs#L399
You can run `cargo expand` inside your crate to see what it translates into.
You mean the macro code?
I usually rely on my IDE to do everything for me but it sucks with macros
sounds good. do you know where I could find the code for `init` for example?
Docs are trailing behind still. Feel free to ask whatever questions here. I"m sure others would appreciate it in the  future.
That is the same as the link above.
has the documentation there
ah I actually have to go to defn of Accounts in lang/derive/accounts/src/lib.rs
All of this comes together so that, when you execute the instruction handler, you have a new associated token account ready to go.
`associated_token::*`  specifies the various parameters for the associated token account being created.
`payer` specifies who pays the rent exemption SOL for init.
`init` creates and initializes the account. You can do this for accounts owned by the current program, or accounts owned by other programs.
Some out of date docs for that here https://docs.rs/anchor-lang/0.17.0/anchor_lang/derive.Accounts.html.
```
#[derive(Accounts)]
#[instruction(rate: ExchangeRateEntry)]
pub struct AddExchangeRate<'info> {
    #[account(
        init,
        payer = payer,
        associated_token::authority = registrar,
        associated_token::mint = deposit_mint,
    )]
    exchange_vault: Account<'info, TokenAccount>,
    deposit_mint: Account<'info, Mint>,
    #[account(has_one = authority)]
    registrar: AccountLoader<'info, Registrar>,
    authority: Signer<'info>,
    payer: Signer<'info>,
    rent: Sysvar<'info, Rent>,
    token_program: Program<'info, Token>,
    associated_token_program: Program<'info, AssociatedToken>,
    system_program: Program<'info, System>,
}```

In this account macro, there are params like `init` or `has_one = authority` or `associated_token::authority = registrar` and they seem like magic words that I can't find in the code.  I did a simple search in the docs and they didn't show up
Just need to make sure to compile with `features = ["cpi"]`, so that you have access to the `cpi` module.
Example here https://github.com/project-serum/anchor/blob/master/examples/tutorial/basic-3/programs/puppet-master/src/lib.rs#L13-L18
we all working on behalf of mango dao
To call an Anchor program from a non Anchor program, you jsut need to use the `crate::cpi` module.
I'm really asking on behalf of Mango DAO lol CC: <@!739966689776631932>
By unit test do you mean `cargo test` vs `cargo test-bpf`
any examples/recommendations for unit testing CPIs to an Anchor program from a solana native program?
You need to pass it in on the client.
for cpi calls that use sysvars like clock, do we have to pass in clock on the anchor side and through as an account when using invoke_signed. i know we can include it in the account metas without passing in just wondering about the accounts
ok makes sense
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs#L62
So to initialize the associated token account, you need the rent AccountInfo.
It doesn't use dynamic sysvars.
Beacuse the token program needs it.
If the Sysvar accounts are being passed in, that's one thing you could get rid of. But don't know yet if Anchor actually passed in sysvar accounts (e.g. Rent, Clock, Instruction)
nevermind, using `msg!` works well enough
hey all how do you go about logging from programs while testing? I'm trying to look for a log file of some sort but can't find it
are there any suggested patterns for reducing number of accounts being used? I'm currently making several sequential cpi calls within a function which is resulting in issues with transaction being too large `1269 > 1232` since I need to pass in the accounts for all of the cpi calls
<@!501570363566587905> is there a reason why you pass in rent Sysvar? In anchor does the client pass it and take up another 32 bytes in the tx?

```
#[derive(Accounts)]
#[instruction(rate: ExchangeRateEntry)]
pub struct AddExchangeRate<'info> {
    #[account(
        init,
        payer = payer,
        associated_token::authority = registrar,
        associated_token::mint = deposit_mint,
    )]
    exchange_vault: Account<'info, TokenAccount>,
    deposit_mint: Account<'info, Mint>,
    #[account(has_one = authority)]
    registrar: AccountLoader<'info, Registrar>,
    authority: Signer<'info>,
    payer: Signer<'info>,
    rent: Sysvar<'info, Rent>,
    token_program: Program<'info, Token>,
    associated_token_program: Program<'info, AssociatedToken>,
    system_program: Program<'info, System>,
}```
nice thanks
Nope, like this:
```.rs
#[account]
#[derive(Default)]
pub struct VisitorState {
  visit_count: u64,
  bump: u8,

  is_creator: bool,
  username: [u8; 24],
  token_address: Pubkey,
  hype_value: u64,
}
```
so this is my updated code

```
// Transaction instructions
#[derive(Accounts)]
#[instruction(visitor_bump: u8, username: [u8; 28], token_address: Pubkey, hype_value: u64 )]
pub struct Introduction<'info> {
  payer: Signer<'info>,
  visitor: Signer<'info>,
  #[account(init, seeds = [visitor.key.as_ref()], bump = visitor_bump, payer = payer)]
  visitor_state: Account<'info, VisitorState>,
  system_program: Program<'info, System>,
}

// Transaction instructions
#[derive(Accounts)]
pub struct Visit<'info> {
  visitor: Signer<'info>,
  #[account(mut, seeds = [visitor.key.as_ref()], bump = visitor_state.bump)]
  visitor_state: Account<'info, VisitorState>,
}

// An account that goes inside a transaction instruction
#[account]
pub struct VisitorState {
  visit_count: u64,
  bump: u8,

  is_creator: bool,
  username: [u8; 24],
  token_address: Pubkey,
  hype_value: u64,
}
```
Lol, did you do the `#[derive(Default)]` thing?
sers pls help, anyone answering my questions will get a nice name list on real nice ui of acknowledgements page inside my ignition submission in 24 hours.
If i remove the impl Default for VisitorState {

I am getting this

```
lib.rs(29, 10): function or associated item not found in `VisitorState`
lib.rs(49, 1): function or associated item `default` not found for this
or whatever the actual import command is
it's imported in `anchor::*`
sorrry real bad
it's just there by default
Pubkey
token_address should be of type `pubkey`
yeh, `derive(Default)` is a macro that will generate that for you
you don't need to implement default
^ you can just do `#[derive(Default)]` for visitor state, shouldn't need to do it yourself
#[derive(Accounts)] is here and I have removed space
Does this look fine?

```
#[derive(Accounts)]
#[instruction(visitor_bump: u8)]
pub struct Introduction<'info> {
  payer: Signer<'info>,
  visitor: Signer<'info>,
  #[account(init, seeds = [visitor.key.as_ref()], bump = visitor_bump, payer = payer)]
  visitor_state: Account<'info, VisitorState>,
  system_program: Program<'info, System>,
}

// Transaction instructions
#[derive(Accounts)]
pub struct Visit<'info> {
  visitor: Signer<'info>,
  #[account(mut, seeds = [visitor.key.as_ref()], bump = visitor_state.bump)]
  visitor_state: Account<'info, VisitorState>,
}

// An account that goes inside a transaction instruction
#[account]
pub struct VisitorState {
  visit_count: u64,
  bump: u8,

  is_creator: bool,
  username: [u8; 24],
  token_address: [0; 44],
  hype_value: u64,
}

impl Default for VisitorState {
  fn default() -> Self {
    VisitorState { 
      visit_count: 0,
      bump: 0,

      is_creator: false,
      username: [0; 24],
      token_address: [0; 44],
      hype_value: 1,
    }
  }
}
```
it's a good encouragement to not use variable size lengths
Same with std::mem::size_of
Yeah, agreed. Kind of a bummer that there's no really bullet-proof way to auto-calculate space in general (e.g. Default won't work if you have anything variable size, e.g. a default string is empty etc.)
especially if you're a beginner or don't know what all the byte values are for the various primitives
but putting `derive(Default)` on top of a struct is a small price to pay for not having to manually calculate space
if you don't use `derive(Default)` you have to use `space`
i get you
^ if you leave off space anchor will use it real quick to see how much space to allocate for initializing an account
e.g. `Pubkey` defaults to `11111111111111`
default doesn't have anything to do with space, it just inits the variables in your struct with default values
Mm, really? I don't think anchor does any automatic space stuff, aside from the Default trick
yeh, it's handy for zero copy, not having to do a whole bunch of maths to calculate the space manually every time you want to shift around some numbers
oh really? good to know
if the array has fixed length anchor will automatically add the right amount of space
you don't even need to add it to the space allocation
in your case, you'll want to do `[u8; 24]` and then add 24 bytes to the account space allocation
here's a rough example for anyone from the future searching
```rust
#[zero_copy]
#[derive(Default)]
pub struct MarketInfo {
    pub description: Description,
}

#[zero_copy]
pub struct Description {
    pub array: [u8; 256]
}

impl Default for Description {
    fn default() -> Self {
        Description{
            array: [0; 256]
        }
    }
}
```
best to avoid strings in general!
so if you use an unsupported version you'll have to make your own default trait implementation
constant length string is best, just use `[u8; 20]` but be careful, borsch has this annoying thing where certain lengths are not supported
I want to set it to a upper limit 24 characters, like a username from twitter profile
or if the string will  be a constant length, better to store it as `[u8]`
you can set an account struct field to be `String` but since its a dynamically sized type, you need to set an upper limit on the amount of bytes it can be
How can I store a string inside account struct?
very helpful
that was helpful, thanks
But anyways you can always technically recalculate the bump based on the seeds‚Äîit's just that it costs compute to do so, so low-level solana apis won't do it for you.
But it means that in order for the program to sign for a program-derived address, you need the address's seeds *and* its bump.
Bumps are an implementation detail in solana, a pda under the hood is just a sha256 hash of the seeds + bump + the program_id + the hardcoded string "ProgramDerivedAddress". The idea of the bump is we want this hash to *not* be an actual elliptic curve public key, so to do that you just start with bump = 255 and check, did that hash wind up on the curve? If so, uh, try bump = 254? Etc. until you manage to find something off-curve.
Bumps go with seeds (so only apply to program-derived addresses). Each pda has its own bump. If you want you can also just leave out the bump and let anchor calculate it for you‚Äîit costs more compute but is fine for learning. The syntax is funny looking, `#[account(..., seeds = [...], bump)]`
if I create more keys to be stored in account struct, 
do i need to pass in this macro
https://github.com/cqfd/anchor-visitors/blob/58972af564867155b2e6f236227bf0178c5d8314/programs/visitors/src/lib.rs#L32
yes
Do you mean what's the purpose of bumps?
What is bump apart from a variable in account?
This is a pretty similar example of the per-user approach: https://github.com/cqfd/anchor-visitors/
If you want a different counter per-user, you could use the user's wallet public key as the seed.
If you want a single counter, global to all users, then you could give it a static seed
Ah ok, got it. Yeah, I think you basically have two options if you want to have a stable account rather than a new one every time you reload etc.: you could hardcode a fixed private key (probably annoying), or you could use a program-derived address.
I am so sorry <@!134416332509675520> 
I was trying to follow this tutorial 

https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291#:~:text=create%20an%20account%20%20*/-,const%20baseAccount%20%3D%20Keypair.generate()%3B,-const%20opts%20%3D%20%7B%0A%20%20preflightCommitment

I saw they created a new keypair called baseAccount, 
Now i am more confused on which account the data is being stored
Howdy y'all, if I am interested in transfering a decimal amount of SPL tokens between wallets, it seems I must use `spl_token::instruction::transfer_checked` instead of `spl_token::instruction::transfer` -- however in the `anchor_spl` there is no wrapper for that `transfer_checked` instruction.

Is this the case because its wrapper just hasn't been implemented in anchor, or is there some other reason like it is discouraged to use those or something?
alright
Can you say more? Not quite sure what you mean. Also, what's baseAccount?
because i don't want to create the account everytime
Nope i am not getting such function, i was asking if I can do something like this
What's findOrCreateAccount? Where are you getting that function?
<@!134416332509675520> can you help pls
How can I get the baseAccount using something like findOrCreate account?
Ah, yeah, I'm just saying that doing js stuff involving solana isn't any more complicated than any other js stuff
awesome, i want to be able to atleast do the client and solprog
oh crap, what kind of js level? im planning to learn just the basics
thanks I will try that!
Yeah, realistically the actual frontend stuff is 100x more complicated than the part where you interact with solana (you can learn how to do that part just by copy-pasting examples of rpc calls etc, no JS fanciness involved really)
i have minimal javascript knowledge but i just use JS to write tests for my anchor programs. And let a frontend dev handle the actual JS and react stuff
pretty variable depending on your needs
Right, I'm lazy/shell-dumb and just do `NODE_PATH=$(npm root -g) anchor whatever`
i followed that at first but it was giving me error that it cannot find the @project-serum/anchor so i had to install it to to the folder, but i will try to run the next tutorial using this method
You can install it globally with npm, yeah, `npm install -g` (though you have to set the `NODE_PATH` env var to tell node to actually search for global packages)
i have no idea what i did but its now working properly, it might be that i need to install the @project-serum/anchor for every tutorial folder (any fix on this so that it works globally? its taking up memory on my pc)
how much javascript should i learn to write client programs for solana programs?
alright
Nope, your contract is sealed off from the outside world unfortunately/fortunately.
can I make a rest api call inside my contract?
definitely helped! thanks
so knowing that's no longer a limitation is definitely cool
it used to be the case in many anchor versions ago that if your struct wasn't in `lib.rs` it wouldn't appear in the IDL
yeh for sure
idk if that answered your question though
a lot of anchor is macros that generate code for you, so when the code is compiled/generated/built, the IDL generator has everything it needs regardless of segmentation
this makes sense for sure
anchor just used to not support multiple files so well
the logical layout is cool too
wow ok cool, so it really is as easy as `use error::*` and `pub mod instructions`
the goal is just to take a hyper complex program, and make it maintainable and readable
things like errors, common macros, and utility functions are separated as well
contains the handler function, accounts context struct, custom account data struct (if needed), associated events (if needed), etc
we basically took the approach of separating out all logically related components for an instruction, so each instruction is its out file
file segmentation has no impact on IDL generation.
<https://github.com/jet-lab/jet-v1/blob/master/programs/jet/src/instructions/mod.rs> this also seems like an important file
you probably had to go through a lot of trial and error to figure out the best approach for each of the different kinds of data. For example, for important structs and functions and other stuff to appear in the IDL what are the requirements
you have stuff like `instructions::init_reserve::handler(ctx, bump, config)` as a wrapper to the internal function in separate functions
just because it's obviously not as straightforward as just `use state::*`
right, i was just wondering if you'd be up for writing up something short with some of the high level approach you took
Look at how we did it here. I like this pattern a lot
https://github.com/jet-lab/jet-v1/tree/master/programs/jet/src
but it does seem like there's some advantage to do it, at least for stuff like errors and some of the functions
(omg you guys have so many files, it's like looking at JS package)
<@!168868665456984065> do you have any _top tips_ on splitting up anchor programs into multiple files
It seems like it might've crashed
Maybe check the validator log?
```js
  it("funds test signer", async () => {
    console.log("test signer ", testSigner.publicKey.toString());
    let tx = new anchor.web3.Transaction();
    tx.add(anchor.web3.SystemProgram.transfer({
      fromPubkey: provider.wallet.publicKey,
      toPubkey: testSigner.publicKey,
      lamports: 99e9,
    }))
    await provider.send(tx);
  })

    it("create mint and vault", async () => {
        let [_Mint, _Vault] = await serumCmn.createMintAndVault(
            provider,
            new anchor.BN(100),
            provider.wallet.publicKey,
            9
        );

        Mint = _Mint;
        console.log("in mint ", Mint.toString());
    });
```

```shell
    :heavy_check_mark: funds test signer (539ms)
    1) create mint and vault


  1 passing (639ms)
  1 failing

  1) initialize
       create mint and vault:
     FetchError: request to http://localhost:8899/ failed, reason: socket hang up
```

anyone got some pointers on how to fix this
this same test works on my intel mac but wont on my M1 üòê
Looks like you've written a constraint that was violated somehow? It'd be easier to see from the source of the program
it gives me a `custom program error: 0x8f`
I guess that my program address should be a token of a different type?
can someone help me decipher this error message?
``` 
ProgramError: 
    at Function.parse (/Users/raven/imo-launchpad/example-server/node_modules/@project-serum/anchor/src/error.ts:41:14)
    at Object.rpc [as exchangeUsdcForRedeemable] (/Users/raven/imo-launchpad/example-server/node_modules/@project-serum/anchor/src/program/namespace/rpc.ts:23:42)
    at processTicksAndRejections (node:internal/process/task_queues:96:5) {
  code: 143,
  msg: 'A raw constraint was violated'
}
```
gotcha ty!
Yes though you need to implement the relevant traits. Here's what we do for the spl token program https://github.com/project-serum/anchor/blob/master/spl/src/token.rs#L317
does `Account<'info, Struct>` work for accounts that are initialized outside of anchor -- so ones without the 8-byte discriminator?
Running my script, then  `anchor test --skip-local-validator` do work though. Troubleshoted thanks ‚ù§Ô∏è
but now I tried, the anchor test does not have the account that's the issue, it must have it's own `test-ledger` env. i.e. what I set is not being used by anchor test
Yes I do in a script, that I run before running any tests, then I stop it once initalized and run the usual `anchor test`
`--reset` it to initialize from 0
Yes just checked too. Maybe the solana-test-validator anchor starts is not using my local `test-ledger` folder
I made sure to clone the executable data as well (PwDiXFxQsGra4sFFTT8r1QWRMd4vfumiWC1jfWNfdYT)
I just checked for you - with the startup cmd I sent the metadata program is executable on localnet
so I shouldn't have the issue
Ho but as long as you do invoke call, then it mean that the account is properly set as executable
was too lazy to write the CPI stuff myself and had it already with the `invoke()` calls üôÇ
Oh okay that might be it then.
I don't use CPI stuff in anchor yet, so in my case AccountInfo is fine. I don't need anchor to do anything with those
Thanks for the feedback
but anyway I have no issues with it and am able to submit and query metdata fine
Ok, you could replace that by something similar to `pub associated_token_program: Program<'info, AssociatedToken>,` technically, but that should do the same
In Anchor I just use
```
    #[account(address = spl_token_metadata::ID)]
    pub metadata_program: AccountInfo<'info>,
```
and use that with `invoke_signed()`
Hum ok, and do you pass any of these account to a `Program<'_, Token>` or similar afterward?
(last one is associated token program)
Hmm I just added clone commands until I got it working 
```
solana-test-validator --clone metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s --clone PwDiXFxQsGra4sFFTT8r1QWRMd4vfumiWC1jfWNfdYT --clone EDshWM3jBy2YUszMiFLAFLx3WkbtqR9An7JZzvg22R1P --clone ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL  --url devnet
```

this is my startup script for my nft project and it was enough to get metadata working perfectly
Any specific manoeuvre to clone accounts that are executable? You mentionned Metadata program, but the program I clone seem to not be set to executable (when it is on devnet)
probably a more helpful response: it's my impression that demand is high or is going to skyrocket, so if you can work through some of the more complex tutorials and build out a program/client that you understand that will be a great start, (context: i'm a relative noob in solana but a pretty senior engineer generally)
jk
the word "blockchain" üòÜ
what concepts should one know in order to be hire-able in Solana web3 space?
I think I fixed it... sorry to spam the chat with my issues so much
TS is still mad at me...
Thank you!!!
scroll up, some people have fixed this
yes

Has anyone tried to work with Anchor in NextJS?
Yea, and cool idea...
It is already high quality work, as an hackathon entry
Yes, let's remain open minded
You are right... I am sorry
These takes feel harsh. We should support people building and provide them productive criticism directly to them rather than in here.
It also doesn't look like it simplifies Anchor that much... maybe I haven't done enough research, but that is my initial take
https://www.youtube.com/watch?v=gcDTv06ipSM&ab_channel=HeavyDutyBuilders
I don't know if it is stupid, i need to understand what it is first
`new Keypair.fromSecretKey(new Uint8Array(JSON.parse(process.env.BLABLA....)))`
Is a .env variable even the best way to do this?
I want to store a super secret keypair in my .env file so only my backend can talk with my contract, but the keypair looks like an array but gets spit out as a string... any guidance as to how to handle a situation like this?

TS doesn't like this because it is a string, not an Ed25519Keypair... how to I convert my .env variable to a Ed25519Keypair... It looks like [29,93,393,.....] right now
Guys, how are you validating user input when it comes to wallet addresses?

What checks do you do to make sure user inputted address is initialized, it's a wallet address (not a token account, executable account etc...)
Yea... helped me out a ton.
Legend thank you for that, hadn't come across that
I would study it
A really great example of a react front end is thishttps://github.com/exiled-apes/candy-machine-mint
Probably speaks to my lack of JS/TS knowledge. But for example how I could do something like in an escrow example, after the initializing party has processed their transaction, that it displays in another part of the app for a taker to accept the trade.
Good question... I am working on that stuff rn and think it is very well documented
what are you looking for that wasn't covered by all those guides?
Any good docs on how to interact with a program in a react app? (I have already been through the complete guide to full stack solana development with react anchor rust and phantom tutorial)
Yea... Thanks!
hmm, ok problem solved then haha
https://github.com/project-serum/anchor/tree/master/spl
Yes.. I deleted the test-ledger and redid it and it worked
how can i use https://spl.solana.com/token in anchor
what solana version are you on
not a deployment issue
ok, so deploy is failing cause you local validator is failing
Yea... It cuts its self off like this
are you leaving the validator running in a separate terminal tab/window?
the second screenshot indicates your terminating the validator process if you have a new prompt

Why is there an error when I deploy to localnet?... I am running a test validator

I just need to create a token and mint it, do I need to add it to market?
(though the PDA `seeds, bump` is optional)
Example here https://github.com/project-serum/anchor/blob/master/tests/cfo/programs/cfo/src/lib.rs#L338-L346
how can I create a spl token from my anchor program
no necessarily out of scope, but `anchor deploy` does some nice quality of life things in the background
do anchor deploy and see the program id, replace it in declare id and then anchor build
`anchor deploy` will deploy every .so file under my target folder to the cluster?
`solana program deploy` this command is out of the scope of anchor, right?
Perfectly. Many thanks!
all good now?
That's exactly it! I was running the suggested command from the CLI but it wasn't specifying on which cluster
so if you run a local test validator and do `anchor deploy --provider.cluster local` it'll deploy to your local validator and add the `metadata.address` field
<@!813484321313783839>  `metadata` is injected into the idl after you deploy it to a cluster


//////////////////////////////////////////////////////////////////////////////////////////

Yes, I do `anchor deploy --provider.cluster https://X.solana-devnet.quiknode.pro/Y/` for my devnet deployment. The public devnet has a very tight rate limiter so sometimes deployment transaction don't go through.
For extra context, when connected to the regular devnet URL, the deployment begins, my account is debited devnet SOL, the first transaction is finalized, and then the terminal briefly says `Finding leader nodes...` before erroring out with the `HandshakeIncomplete` error
but the deploy command is getting the same "Method not found" issue
Balance seems to work:
```
‚ûú  faktor git:(main) ‚úó solana balance
5.099675149 SOL
```
interesting! thanks for the pointer. Are you able to deploy through these nodes? it looks like they only support read operations right now? Just setup a quicknode, switched the solana config over to the URL, and tried to airdrop, but got a "method not found" error
```
‚ûú  faktor git:(main) ‚úó solana airdrop 1
Requesting airdrop of 1 SOL
Error: RPC response error -32601: Method not found 
```
I personally uses https://quicknode.com/, they have free trial üôÇ
where could I find one of those / set one up?
Try a private rpc server
Is anyone familiar with this `ConnectionError(Protocol(HandshakeIncomplete))` error when trying to deploy to devnet?
I would like to do it. But need some help with it. To see if I am understanding this well: the IDL is defined from the rust code through https://github.com/project-serum/anchor/blob/master/lang/syn/src/idl/file.rs. In https://github.com/project-serum/anchor/blob/master/lang/syn/src/idl/mod.rs several `IdlType`'s are declared (e.g., u8, string, array), so should I add a BTreeMap (HashMap, Map, whatever) type there? The BTreeMap is currently being identified as `IdlType::Defined`, which I don't know what it means. Is it just the default type that unknown values assume? After changing things in Rust side, it's necessary to change something on JS side. The IDL types are defined at https://github.com/project-serum/anchor/blob/master/ts/src/idl.ts and I think the mapping between IDL and JS objects is done at https://github.com/project-serum/anchor/tree/master/ts/src/coder. Here I am particularly lost. I don't know what should be done here. What's the role of `Layout` from `buffer-layout`?
?
üò¶
it works well but only problem is that I cannot see the token in my wallet because I cannot add that token address into my wallet
and then I passed that info like this

I got PDA in the frontend like above

I should show this token in my wallet but not.
Normal token's program id is System program but our token's program id is my contract's PDA. because it was assigned by program id in the script
The difference between this token and normal token is the Mint authority address
Right, but what specifically goes wrong? I don't have enough information

I cannot add that token address into my dev wallet
What goes wrong? What error etc.?
I can add any other tokens into wallet but I cannot add only this one (PDA assigned token)
This is PDA

<@!134416332509675520>  Please take a look. it's wired. This token authority is PDA. but I cannot add this token into my dev wallet.
https://explorer.solana.com/address/EZ2UM6GmW6HmaLhGgw5o3hSzEQE8JF1SUWrbFc7y4nPy?cluster=devnet
I solved the problem... for some reason the way I was passing the public keys into my funciton was weird and it didn't like it... I just converted them to strings before passing them into the funciton then back into a publickey in the function
It will depend on what kind of value you're talking about. If it's a static variable in the program source (for example, something like `spl_token::ID`, the ID is a static variable embedded right in the program text), do what <@!168868665456984065> said. If the value lives in an account on-chain, you can just pass that account to your program and read its data. If the value is supposed to be "returned" when you do a cross-program invocation to the other program, you'll have to do what Armani said (solana doesn't really have CPI return values).
Still getting error... weird

I am very close with my project btw...
Thanks!
I always use `.toBuffer()`, not sure if it's different
What is weird about the error is that VS code think .toBytes is a function
can you send me example?
for example?
You need to write the "return value" into an account to get it back from the caller side.
I know what I am passing in is a Pubkey because of that console log... I am cofused because .toBytes worked in my anchor test

Is there an alternative to .toBytes?
Are you there?
in this case, how about it?
And smart contract B is built in Anchor and am going to build to devnet.
smart contract A is built in Rust and deployed to devnet already
you can just require one as a cargo dependency of the other and use public items
take a look at this multiple program example
https://github.com/project-serum/anchor/tree/master/examples/tutorial/basic-3
Are you there?
smart contract A and B deployed to devnet each other.
in this case, how can get smart contract A value in smart contract B?
And smart contract B need to get this value from contract A and calculate with it.
smart contract A exports value (for ex; 10)
okay, for example, there are smart contract A and B
Can you explain more? I personally have no idea what you mean haha, maybe someone else does though
how can I get value(for example, 10)?
?
for example, I get any value(10) from contract A and then I need to calculate it in other contract.
https://github.com/project-serum/anchor/tree/master/lang/syn/src/idl
Could you point me (in the source code) where are you generating the IDL?
Thank you very much
What do you mean by value here? Can you explain more about what you want to do?
How I can get value of another smart contract in smart contract?
No üò¶ I'm not super familiar with the IDL generation part, but it doesn't support BTreeMaps yet (maybe you could figure out how to add it though?)
This is my struct
I am getting this error. Can't I use BTreeMap?
Nice to meet you.
Hi, everyone.
And of course I have the token program since I need to mint/burn
Ah, so I have the token account, but I also want to get token metadata since I also didn‚Äôt see a way to get this from the account.
Maybe I should have started with that?
Ah, yeah‚Äîthe documentation has been updated in master, but I guess not deployed? You need to use the `ANCHOR_WALLET` env var, e.g. `ANCHOR_WALLET=~/.config/solana/id.json node client.js`.
pool token is a token account?
lol
pub pool_token: Account<'info, **TokenAccount**>,
i am dumb
and anchor-spl 0.17
on anchor 0.17
hey, thanks - this doesn't compile though
(doesn't have the anchor_lang::AccountSerialize or anchor_lang::Owner) traits implemented is the error I get
pub pool_token: **Account**<'info, Token>,
This seems far harder than it should, so I'm assuming I'm approaching the problem wrong
Hey, I'm running to some roadblocks with passing token accounts into anchor and validating them.

I want to give a solana program mint authority on a token account (easy enough), but also have access to information like the decimals of the token since I need to reason about those

As far as I can tell passing something like:

"""
    #[account(mut)]
    pub pool_token: Program<'info, Token>,

    pub pool_token_mint: Account<'info, Mint>,
""",

However these apprea to be totally opaque structs. Is there some way to get information about the token itself from the anchor-spl token api?
I am following https://project-serum.github.io/anchor/tutorials/tutorial-0.html#generating-a-client documentation and stuck at "node client.js" command it gives me following error, is this documentation outdated?
That would be amazing
And throw it into `target/types/<program-name>.ts`, which is where the IDL type lives for typescript.
We could pretty easily generate that.
Basically looking for a way to typedef a new `Invoice` type to the type being from this fetch call:
```
const invoice: any = await 
program.account.invoice.fetch(address);
```
With a Typescript frontend, is there a straightforward way to generate account types from the IDL file? Would love to setup a system where we don't have maintain separate frontend types that could diverge from the IDL file
https://github.com/neilfutureftr/Swap-UI/blob/main/src/components/Swap.tsx
For info this is an implementation of anchor code in js hope it helps
I really don't like the library though... it's not very user friendly right now
Yea... if you explained how to do that, that would be awesome!... if not, might be easier for me just to use the wallet adapter
But the issue above is that window.solana doesn't already know how to `.signTransaction` (those wallet adapters do that, but you could do it yourself too)
You could definitely just teach `window.solana` how to do what you want it to (basically, re-implement the adapter library lol, but could be fun)
Here is the Github repo for the benefit of the chat
https://github.com/solana-labs/wallet-adapter
I don't want to, but I think I'm going to have to... I want something simpler than that, but I don't think I get that option
Have you tried using the wallet adapter stuff mentioned e.g. here? https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291
My issue is that I am using       const resp = await window.solana.connect(); to connect to my Solana wallet... I think I need to use something more sophisticated... The weird part is that I am sending the wallet into the function

I have a new error... will post when I find the answer...
I read it's because I haven't run anchor idl init
Has anyone run into this error when working with React? (I am using NextJS)

when creating a function for generating TransactionInstructions in typescript, does the dataLayout always look something like this (instruction index followed by arguments) ```
...): TransactionInstruction {
    const dataLayout = struct([u8('instruction'), nu64('amount')])
```
if so is the u8 instruction just the index of the instruction handler within the module for anchor?
Hello I'm just getting started with Anchor and running into this issue when running `anchor build` is this the place to ask for help? I'm running this on windows wsl
<@!748249199606497502> the more questions the better. We're still trying to rebuild enough chat history with useful info that the discord search will act as semi-docs
I'm more likely to be useful to Anchor that way
I'm just going to take a shot at understanding the macros


//////////////////////////////////////////////////////////////////////////////////////////

üòÖ
Thanks, @ssj. I fixed that.
post the full error
<@!867148037397676092> then u didnt provide all accounts as in the struct
üòÜ
@ssj?
If not, `acocunt not provided` error happened.
But the problem is that, when I all increment, I should include all unneccessary context accounts to their.
then merge Increment and Create into a single struct
But I'd like to use from both of them. l)
Context<Increment> change to Context<Create>
üòÖ
What do you mean?
<@!867148037397676092>
Context<Create>
<@!210756938332504065> ?
What should I do?
This code.
@sj, tickerSource is defined in Create. But I want to get that account in
The IDL is somewhat limited to a small set of rust data types (it's not ready for BTreeMap, for example).  What should I do when designed my account structs using some data type that's not compatible with the IDL? For example, BTreeMap is such a generic struct that I am sure that someone else  already faced the same problem. What's the solution in this situation? Redesign my account structs to use another data type? I would rather `anchor.workspace` ignore the accounts structs that are IDL incompatible and/or allow me to specify a custom encoder/decoder between the borsh representation and javascript object. Maybe this is possible but I don't know how (if it is please tell me how). I love the automatic (de)serialization, signature validation, etc. that Anchor offers on the on-chain side by declaratively defining the instruction accounts, but the IDL thing seems very limited and incapable of scaling (to any data type).
üëçüèª
Cool. Error resolved. I can't believe it.
`5e6` try this
not BN <:study:700462627880566805>
the datatype of amount is `number`
Oh, errorüòµ
Awesome.
üôåüèª
<:yes_pepe:874246210897182800>
So likewise?
Maybe. Really confusing. üòÖ
it can be confusing at first <:sweaty:882326902973530162>
Ah, I see.
the `owner` defaults to `provider.wallet.publicKey`
when you do `createMintAndVault`

it created a new token with the mint address `mint`

and then it created a `vault` / token account for the provided `owner`
so in solana there are 3 addresses
1) your wallet address 
2) token mint address
3) token account address

each token has a unique mint address
and for each mint address / token you need a token account address for your wallet address
no
@ssj, but isn't it owner = mint?
I see.
see what `_god` is
https://github.com/project-serum/serum-ts/blob/b6799603bc2260607d7e0b22c740803f97fad14a/packages/common/src/index.ts#L75

look at the implementation of `createMintAndVault`
<@!867148037397676092>
not owner
source = `_god`
If source = owner, how can owner be provider.wallet.publicKey?
which as we know is `provider.wallet.publicKey`
u care about the owner of `source` only
owner = `provider.wallet.publicKey`
destination = receiver
try this <:thonking:586452614015614986>
<@!210756938332504065> ?
And would like to transfer from mint to receiver.
For example, if I set receiver as above.
im gonna let u guess that <:PepeLa:758383347994460251>
Is that source's owner or destination's owner?
https://github.com/project-serum/serum-ts/blob/b6799603bc2260607d7e0b22c740803f97fad14a/packages/common/src/index.ts#L81-L83
`provider.wallet.publicKey`
what is owner?
source = `_god`
destination = `sender`
How can I transfer some token to the sender account, <@!210756938332504065> ?
And created token account in this code.
Well, I created token in this code
https://github.com/solana-labs/solana-program-library/blob/5436ac239e14843fcefbaf258fa4321aed3c9eca/token/js/module.d.ts#L191-L198

this has the function signature
In terms of object type, source is TokenAccount and Owner is PubKey?
try `provider.wallet.publicKey` for owner <@!867148037397676092>
Source = Account

Owner = output of `solana address`
Likewise?
owner = owner of address A
A being source
B being destination
u send money from address A to B right
source token account
source token program id?
owner of the source token account
Thank you. Well, what is owner field?
```js
import * as splToken from "@solana/spl-token";

 await provider.send(
      new anchor.web3.Transaction().add(
        splToken.Token.createTransferInstruction(
          splToken.TOKEN_PROGRAM_ID,
          source,
          destination,
          owner,
          [],
          amount
        )
      )
    );
```

https://github.com/solana-labs/solana-program-library/blob/5436ac239e14843fcefbaf258fa4321aed3c9eca/token/js/module.d.ts#L191-L198

something like this shud work<@!867148037397676092>
Yeah, in test javascript file.
~~dont see any crash in the log <:sad:877222447483609088>~~

edit: nvm it is indeed crashing
in tests?
Also, I'm pretty excited for v0.17.1 (auto type generator). wen is it coming?
For non-x86 linux users, when we want to upgrade, do we have to delete the old anchor and install + build using this command everytime?
```
cargo install --git https://github.com/project-serum/anchor --tag v0.17.0 anchor-cli --locked
```
<@!248066053161222144> , how can I transfer token in client? I can't find it in samples.
In this file?
thanks, forgot about this
program.account.<account>,fetch(<pk>)
Tried using getAccountInfo, but data is encoded, any idea on a better function to do it, or just decode the data, would be very helpful
What the best way to retrieve Data from a account in JS side?
In the program logs
But where can I see that msg?
Thank you so much. üòÜ
It's `msg!`
Have you read some of the examples
Another question, please? Is there any way to print values in the program?
But generally it's just a public key
Check out the web 3 docs and examples in the anchor repo
Thank you, but what should I put as parameter of  `fetch`?
Just use the `.fetch`method and the account that gets loaded will be automatically deserialised
but i guess that's just an example
should probably name account something more descriptive fwiw
```
const program = anchor.workspace.MyProgram as Program<MyProgram>;
const something = await program.account.account...
```
Dear <@!134416332509675520> , How can I get this value in the .js?
No worries!
apologies in advance if I have some spammy questions, we had to make some last minute contract changes before the hackathon deadline
this fixed it!
At any rate yeah, `declare_id!` needs to match whatever the deployed program_id is (think you'll also need to change Anchor.toml as well)
yep
So you're running this against your local `solana-test-validator`?
to be clear, should I just copy/paste whatever anchor deploy gives as the program id into the declare macro?
no! thanks so much, I'll try that
yes!
Oh, also, can you double check that your program's `declare_id!` matches `program.programId`?
Hmm. Just to check, `local` here is your provider you used in `anchor.setProvider`?
This does not map to my understanding,, where the account doesn't need to be owned since it has signed the transaction
However I get the error:
Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7

which looks like it's AccountNotProgramOwned

and removing the account_data field from the struct solves this
which as far as I can tell is exactly following some of the anchor tutorials

hit enter too soon, apologies
Hey, I'm running into a strange issue trying to get account initialization to work.

I have the anchor account and ts init code defined as in the screenshots, and an empty init function.
thank you <@!134416332509675520>
hmm... understood
And you will have to pay for this storage of course
You mean like literally indefinitely? If you really need to store something larger than the max individual account size (currently ~10mb, and only like ~10kb for PDAs I think), you'd have to hack something together where you spread your ever-increasing, unbounded, relentless storage increases over multiple accounts
or is this not possible by design?
so, how can I create something that can grow indefinitely?
I might be misunderstanding you, but the base account will however much space you allocate to it (currently fixed, but this might change soon in solana I think)‚Äîso if you keep pushing strings you'll run out eventually (or even if you have one extra big string)
so people can grow this vector indefinitely
the limitation will be on the string not on the entire base account
hmm I think I thinking in a wrong way about this right
for 2, does it affect only deploymnet cost? or a tx for adding for this vector through a contract function would also cost more?
if someone keeps adding new stuff to the data list at some point in time it will overflow the space allocated, right? or I'm missing a foundational point about Solana dev here?
thinking about this example from nader dabit guide

hmm... and how do i know the max size I would possibly need?
1. Not really. Just allocate the max size you could possibly need. 2.  yes.
ps: Solana programming with Anchor is amazing!!!
so then my qs are: 1 is there a rule of thumb to know how much space I should designate to an account? even one that might grow indefinitely? 2 more allocated space for account more deployment cost? only deployment cost or does this influences other stuff like tx cost?
Only problem I imagine
And what can happen if it is too small alocated space? It will throw an error to the user calling the contract function that stores in it, right?
How do I consider that it might grow indefinitely (imagine a vector of strings object in this account) and set a correct size?
what is a good guide for measuring how much space an account might take?
Where can i find some example typescript anchor programs üôå‚ù§Ô∏è
btw I found the anchor lang Cargo.toml too
updating the cli to the latest version and creating the project architecture again worked, thanks <@!501570363566587905>!
ooh the good old restart your computer and try again
I will try upgrading the cli and doing it all again
btw I created the project using the anchor cli with the command `anchor init`
it has only this

Update everything to the latest versions and it should be solved.
Cargo.toml.
how can i see anchor_lang ver?
anchor cli is at v0.15.0, which is the tool that generated the project
What version of Anchor are you using?
Could you help a humble Rust and Anchor & Solana noob? haha
which exactly like this one: https://github.com/project-serum/anchor/blob/master/examples/tutorial/basic-1/programs/basic-1/src/lib.rs
error in my rust code
I'm receiving the ```cannot find type `Signer` in this scope```
guys another beginner q
you should add whatever constraints are necessary to prevent someone else passing in the wrong accounts and getting your program to do something you don't want it to do
Yes checked this, it does indeed have sol
You can also debug by doing `await program.provider.connection.getAccountInfo(someAccountPublicKey)` and just checking if it has the amount of sol you expect it to
Can you post your `#[derive(Accounts)]` block? Something is transfering sol here, but I'm not sure what
https://github.com/project-serum/anchor/blob/v0.14.0/examples/tutorial/basic-3/tests/basic-3.js <- essentially following this for the usage
I suspect that it is complaining about the `REGISTRY_ACCOUNT`?
Yes, I checked with `solana balance --keypair <pair>` and verified it does indeed have SOL.
Have you airdropped any money to the `userKeyPair`? (Is it paying for an account initialization?)
I'm on anchor 0.14.0 and this is basically the same as the examples in the 0.14 tag
It complains that `failed to send transaction: Transaction simulation failed: Attempt to debit an account but found no record of a prior credit.`
Trying to setup the puppet account like this before I pass it into the modified struct for the CM call

I'm trying to do CPI with candy machine (CM) but am having a bit of trouble with this. Was trying to use the puppet program from the examples as a test. Managed to modify CM to do the CPI call by modifying the CM struct to include the additional account info. However, I'm running into problems when i want to call the CM rpc via typescript with the modified struct.
thanks again
Will also work on these hacking attemps
Ok i'll look at how synthefy handeled these
Magic lol
Oh...
Thanks again for taking on your time
No need for any on those types in your example.
Ok any constraint you would add ?
I still need to write attemps to hack these smart contracts, will do my best and will put it on github
You should use the new `Signer` and `Program` types.
The thing is it looks like this is not enough and I cant really understand why
We wrote this and thought the constraint were strong enought to make sure no one can use funds in a bad way
Ownership handling should all be done automatically if you use the standard anchor account tyhpes.
Ok any open source code using anchor and having good practices with ownership handeling etc ?
The main thing that's kind of anchor specific--though not really--is having multiple `mut` accounts that are of the same type. In that case, you should assert they are unique.
Oh...
The only mango code that is anchor curently is the IDO.
#[derive(Accounts)]
pub struct GetFixedRate<'info> {
    #[account(mut, has_one = pool_usdc)]
    pub pool_account: Account<'info, PoolAccount>,
    #[account(signer)]
    pub user_authority: AccountInfo<'info>,
    #[account(
        seeds = [pool_account.fixed_rate_mint.as_ref()],
        bump = pool_account.nonce,
    )]
    pool_signer: AccountInfo<'info>,
    #[account(
        mut,
        seeds = [user_authority.key().as_ref()],
        bump = user.bump,
        has_one = user_authority,
        
    )]
    pub user: Account<'info, User>,
  
    #[account(mut, constraint = pool_usdc.owner == *pool_signer.key)]
    pub pool_usdc: Box<Account<'info, TokenAccount>>,
    #[account(mut, constraint = pool_ftr.owner == *pool_signer.key)]
    pub pool_ftr: Box<Account<'info, TokenAccount>>,
   
    #[account(mut, constraint = pool_fixed_rate.owner == *pool_signer.key)]
    pub pool_fixed_rate: Box<Account<'info, TokenAccount>>,
   

    #[account(mut, constraint = user_usdc.owner == *user_authority.key)]
    pub user_usdc: Box<Account<'info, TokenAccount>>,

    #[account(mut, constraint = user_ftr.owner == *user_authority.key)]
    pub user_ftr: Box<Account<'info, TokenAccount>>,

    #[account(mut, constraint = user_fixed_rate.owner == *user_authority.key)]
    pub user_fixed_rate: Box<Account<'info, TokenAccount>>,

 

 
    #[account(constraint = token_program.key == &token::ID)]
    pub token_program: AccountInfo<'info>,
    pub clock: Sysvar<'info, Clock>,
}
We wrote this
and synthefy code ?
Ok i should try to look at mango code
Not currently. Would be great though.
A lead dev from another project took on his time to look at our code
for anchor
Is there any specific docs about security
Hello guys
nvm I was using the wrong program id lmao
but the anchor test then fails with `This program may not be used for executing instructions`
It generates the project, builds, deploys
`anchor init`
I'm getting an error with the default program generated by the anchor cli


//////////////////////////////////////////////////////////////////////////////////////////

a very noob question: im trying to read through the metaplex candy machine test code, I‚Äòm noticing that within the context in the RPC call there is an "instructions" key like this: 
```
const tx = await program.rpc.<my-program-instruction>(
          {
            accounts: {
              // some stuff
            },
            signers: [myWallet, this.authority, this.config],
            instructions: [
              ... // some instructions here?
            ],
          }
        );
```
https://github.com/metaplex-foundation/metaplex/blob/397f488935f2075b0798946c30cf5f7b0ddcd3f0/rust/test/nft-candy-machine.ts#L291

What are these instructions and what's the sequence of execution here?
i am following bfriel voting app tutorial https://github.com/bfriel/crunchy-vs-smooth-v2
also just checked my transaction history on the explorer and can see hundreds of transactions being made... not sure why this is the case
yeah its pretty high, idk.
Just tried deploying the basic-2 program to the devnet and it cost ~2.5 SOL. Why is the cost to deploy a program so high?
yh np
ie not this video, but the others in this playlist
this is the likely path I'll follow, thanks for the help! the ido repo should be useful in the future for sure
ah sry, rookie mistake haha https://www.youtube.com/watch?v=Jz5v_u75xk8&list=PL41Cw3fN3CfdbmhgxADwyDyIoDrxc22v2&index=3
the paulx escrow tutorial is great but you're probably don't need it if ur focusing on anchor
which guy u didn't specify lol
with documentation i haven't seen any. the SPL programs in the solana directory, and spl-token are amazing. this guy does a good job at explaining some complex programs once you've been through it
Ah I see. I believe how it's usually handled is that the client pings the endpoint. Or you spin up a CRON job that pings the rpc endpoint periodically, that does that. not aware of solana tools that do that (i.e. no trivial ones)
would require the code to figure out. you could airdrop exactly one of the two to figure out which one it is
the one that you assigned as payer. could be either
which account? The wallet account or the program account?
The account doesn't have SOL.
what does this error mean?
Hey everyone, I went through the four basic examples in the tutorials directory of anchor....

Apart from these 4 examples are there any more Rust programs with some documentation that I can read to solidify my understanding before moving onto writing my own programs?

Thanks.
this is great! thanks for this! but ideally the program could send back tokens on its own after a timestamp without a nudge from a client, what I see here is something that checks conditions based off of timestamps. Will update here when I finish my stuff :D
I think unix timestamps have something that would work. here is an example of how times are used. would be curious to know what learninigs you have when progressing through your process. https://github.com/blockworks-foundation/ido-pool/blob/main/programs/ido-pool/src/lib.rs
I guess `::authority` would also work for non-tokens (i.e. if the program initializes a sub-address, for example), whereas the mint is (as the name suggests), only for tokens and mints
and see if it resolves the issue
the environment variable is probably not being read. Try running 
``` 
ANCHOR_PROVIDER_URL=https://api.devnet.solana.com ANCHOR_WALLET=/Users/raven/.config/solana/id.json node client.js
```
what is the significance of the account in declare_id! and would we need to change this to another account when deploying to the devnet?
Thank you!! I figured that out‚Ä¶ Rust is very interesting
Small asterisk on that ^ since you can now fetch sysvar accounts dynamically (you can do `Clock::get()` now, when you used to have to pass the clock as an account)
Yep, every time (not possible in solana for your program to look up accounts dynamically‚Äîany accounts it needs will have to be specified/passed in from the client).
Was curious about this too, the mint needs to be writable because the mint account keeps track of its extant supply: https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L533
I hit this problem earlier in my dev when I was getting a writable privilege escalation error. I fixed it, but conceptually still don‚Äôt fully understand why the mint itself need be writable.
thanks again man super helpful! this might help me get started on the application i want to make, but probably won't put it on mainnet until a more widely approved way to get random numbers comes about
Yeah, I'm curious about this too, not sure what you're supposed to do. There was a recent hackathon crate published about randomness, https://docs.rs/solana-anchor-rando/0.1.1/src/solana_anchor_rando/lib.rs.html#5, but I can't actually comment about whether the approach works/haven't looked at it very carefully
Oh makes sense now. Thank you sir!
also one more beginner question, as randomness can't be done on chain, what would be the security considerations with getting a veritably random number off-chain and having a client write to an account? doesn't seem to be the recommended way of doing things
Think I'm misunderstanding your question‚Äîwhat do you mean by two for the same token? In the snippet you've posted, it's telling anchor to initialize a token account with mint = mint and owner/authority = whoever the initializer is.
thanks, that was super helpful!
Seems like the tutorial needs to be redeployed (this is fixed in master), you need to use an `ANCHOR_WALLET` env var. Try doing `ANCHOR_WALLET=~/.config/solana/id.json node client.js`
As far as I know you'll have to have something off-chain poke the program after a set period of time, yeah.
hi everyone! more of a solana question than an anchor question, but basically say i wanted an escrow to cancel after a set amount of time (as opposed to a user canceling the escrow). how would i go about doing this? would a non-human client call a cancellation after a set period of time, or is there a way for a program to send back tokens at a specified unix timestamp? thank you!
Question.
Are `token::mint = mint` and `token::authority = initializer` constraints? 
And if it is, what is the purpose of passing two for same token?

```
  #[account(mut)]
  pub initializer: Signer<'info>,
  pub mint: Account<'info, Mint>,
  #[account(
        init,
        seeds = [b"token-seed".as_ref()],
        bump = vault_account_bump,
        payer = initializer,
        token::mint = mint,
        token::authority = initializer,
    )]
```

full code here: https://github.com/ironaddicteddog/anchor/blob/improve-escrow-example/tests/escrow/programs/escrow/src/lib.rs#L122
Hey fellow buidlers!!

I was trying out the basic-0 example from anchor and following the instructions here (https://project-serum.github.io/anchor/tutorials/tutorial-0.html#generating-a-client) and I'm getting this error when I run `node client.js`

I have deployed the program and also updated the program ID in the client.js file. Anyone can help me with this?
you might be missing a `mut` on the `mint` account
was never finished
<:2627_pepe_hmm:868902359298899998>
https://github.com/solana-labs/solana/issues/1558
dont think so
is there a source of randomness in solana programs?
Question.
Even if you want to just reference data from state variables, do you have to pass in the account public key everytime?
ah, ok got it, makes sense
idk why it didnt error though
not anchor's fault my perms are just really fucked on this wsl build
I think it just didn't have write privileges to my windows folder
Interesting, curious what the fix was
ok cool, yeah sorry a little stumped
thanks for the help thouigh
I think I might have found the issue, wsl problem
' is rust lifetime
yeah the `.so` file and my keypair
is there anything under `target/deploy`
yes its successfully building `Finished release [optimized] target(s) in 4.62s`
but you are seeing an output something like: `Finished release [optimized] target(s) in 2.09s`
yes its empty
in `target/idl`?
my idl is not being generated when running `anchor build` and there's no error being outputted, does anybody know why?
I tried replacing that with `Buffer.alloc(layout.span)`, and got a `Transaction too large: 1341 > 1232` error
gotcha, I'm just trying to do a random init so I can get by with less, thanks
At any rate the hardcoded 1000 is here https://github.com/project-serum/anchor/blob/master/ts/src/coder/instruction.ts#L79
https://github.com/solana-labs/solana/issues/17102
Ah, wait, maybe this really isn't possible, or at least almost not possible‚Äîthe whole tx has a max size of only 1232 bytes as far as I understand it, so passing 1024 bools is already cutting it close
Yeah. Signer<'info> is preferred nowadays but does the same thing as far as I know.
Either way, you're a life saver. It worked. Thank you for saving me from 4 hours of headache
Is this equivalent to adding the #[account(signer)] macro if specifying it as an AccountInfo type?
^ This tells anchor's IDL generation stuff to expect `account1` to sign‚Äîif you don't include it then the JS code complains about an unknown signer
Ah, ok, then the problem is that you haven't marked that `authority` account as needing to sign‚Äîtake a look at your `#[derive(Account)]` struct and make sure it has e.g. `pub authority: Signer<'info>`
Perfect! This definitely got me further along (or at least to another error). In this case, I included the keypair in my signers array and switched to just using ::new. However I'm not seeing "unknown signer: {address}" and I assume {address} is coming from account1 in the client
For regular keypair addresses though, their signature has to come from the client (and it seamlessly extends across the CPI, no need for any additional signature/seeds stuff‚Äîyou'd just use `::new` rather than `::new_with_signer`)
If the authority is a PDA though, only then will you need to use the `new_with_signer` thing‚Äîthat lets your program itself sign for its own PDA
Ah, ok‚ÄîI think the thing you're maybe confused about is that in order to do the CPI here, you just need to make sure that the `authority` account signs the transaction. If that account is a regular keypair account, it will need to sign the tx from the client (either implicitly if it's the wallet, or by including its keypair in the `signers: [...]` array)
sorry, I tried to keep it as short as possible without copying and pasting üòÑ . account1 is just an arbitrary account that was initialized in an earlier instruction in the transaction. I tried doing this same thing without a signer (as I didn't expect any of the accounts' permissions need be changed) and I got the same unauthorized signer error.
Afraid you're going to just have to pass 2 boolean arrays of length 512 üòÜ
Gonna try this locally
512 also works (=:
Oh really?
I'm having a little trouble understanding your code, but in this case, is `account1`'s address a PDA? (so account1.key() == _pda?)
yeah sorry, i mean you have to pass multiples of 2 right, for arrays otherwise the borscht thing complains
Sorry, what about 64? Think I misunderstood that
because of serialization
but 64
ah yeah then it works
Interesting‚Äîout of curiosity, can you pass shorter boolean arrays? Like if you change the expected argument type to `[bool; 10]` does it work better?
```
RangeError [ERR_OUT_OF_RANGE]: The value of "offset" is out of range. It must be >= 0 and <= 999. Received 1000

```
Dumb q, what happens if you use a big array of booleans? Does that not serialize correctly?
Does anyone know how to pass a `[bool; 1024]` instruction argument on the javascript side?
Hello, I'm trying to wrap my head around the MintTo instructionr. I have a Mint whose mint_authority is account1, derive a PDA for my program with 
        let (_pda, nonce) = Pubkey::find_program_address(&[&ctx.accounts.account1.key().to_bytes()], ctx.program_id);
and structure the relevant seeds (for later input into mint_to) into a var signer, and then create a new CpiContext with
let cpi_ctx = CpiContext::new_with_signer(cpi_program, cpi_accounts, signer);
where cpi_program=ctx.accounts.token_program.clone(); and cpi_accounts = token::MintTo {
            mint: ctx.accounts.mint.to_account_info(),
            to: ctx.accounts.token.to_account_info(),
            authority: ctx.accounts.account1.to_account_info().clone(),
        };

I was under the impression that find_program_address would create the given address and the seeds would provide new_with_signer with the information necessary for the program to sign the accounts when they're passed to the token program, but I'm getting a "Cross-program invocation with unauthorized signer or writable account" error. Does anybody have insight into what I'm doing wrong/what is causing this error?
ü•≤ thank you for the help haha
Aha üôÇ
nvm seems to work fine after re-deploying
hmm oh god i know why haha. I only deployed once in the beginning and have been running `anchor test` without re-deploying
You could also check for logs in your project's `.anchor/program-logs` directory
yep
Ok, so you've got a local validator running in the background?
I've deployed the program and running `anchor test`
hmmm I tried without the log masks first. and Im not getting any logs. which is why i tried
Just to double check, you're running the program by deploying it to a local validator, not just by running the tests etc.?
Mm, I seem to get logs fine doing what you just posted, but I haven't touched any log masks‚Äîmaybe that's the problem?
What kind of more complex phantom interactions are you interested in? My understanding is that you just ask phantom to sign the transaction you want to do‚Äîall of the complexity would be within the transaction itself, which doesn't depend on phantom
hello folks, i'm here with a very noob question: how do I get logs from my rust program? I've been trying to get my custom print on `solana logs --url localhost`. I'm attempting to use the `msg!` macro from solana_program crate and have my log mask setup to be 
```solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=info,solana_bpf_loader=debug,solana_rbpf=debug```
would appreciate a few pointers!
ok, thanks
I don't think whether an account lives at a PDA or a regular address influences how you close it‚Äîyou need to drain its lamports (how you do that depends on which program owns the account)
also, what does custom program error `0x12f` refer to?
hmm looks nice. i know too little about how the IDL is used to interact with the RPC call tho, not sure if typing is just interpreted through binarised string (i.e. JSON.stringify), or if there are more detailed format specifications required when interacting with the rpc
Alright, thank you. I'll post it later. I also have an idea about using wasm_bindgen to generate the JS types automatically instead of using the IDL. But don't know if it makes sense. I will post it later. Just dinner
Also, does anyone have any examples on how to use phantom with solana / anchor? There is the https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291  guide, but it does not seem to address how to invoke more complex programs. Or am I missing something?

I only see how to invoke a simple transaction (send SOL from A to B), but how do I use phantom if I want to invoke a more complex function on my smart contract? Would appreciate any help and pointers anyone has! üôÇ
it's in the "development/rust" in this discord. your question is mostly rust-related as much as I can tell, not quite a "beginner-question" haha
Thanks for the answer. Where-s the rust chat?
you might want to ask this in the "rust" chat, there will likely be better responses there
hmm good questino, I think rust offers some nice trait implementation that you can (de) serialize. I think perhaps it's easiest to serialize to some json-structure (i.e. add a trait that it can be serialized, and deserialized)? not super clean bcs types are lost, but will work for the IDL. might be easier to implement it manually using "serde json"
or just accounts owned by it
once we're "done" with a PDA is there anything that needs to be done to "close" it?


//////////////////////////////////////////////////////////////////////////////////////////

is what you want to run... I don't know the latest on faucet stuff, but I think there might still be a cap on the amount you can airdrop yourself
yes... solana airdrop 1 ~/my-wallet/whatever
Awesome. Thank you! I assume that just consists of airdropping to my payer account while connected to the devnet?
And I agree with the mentality 100%
Yes... it costs devnet sol
Is minting on devnet free? I'm trying to get through as much of my dev as possible without having to pay for minting (until I need to scale my app)
I would just use devnet... maybe Armani or Alan have better solutions though... they are much more senior to me in terms of understanding
or just docs, I haven't been able to find any
I know this probably belongs in the Metaplex channel, but if you know how to do this and have the time to DM me I'd really appreciate it üòÉ
That is your problem... the Metaplex program is not loaded on your localhost connection
Did some searching and that seems likely... I'm trying to pass in a program ID of the Metaplex Token Metadata program (localhost connection) and that account is resolving to null right now. Hopefully can proceed once I figure out where to import that from, thanks
Could also be that you're passing a publicKey in `signers` (needs to be a keypair)
Yea, it looks like the error is happening before you call the rust part of the code
Probably passing in an invalid publicKey in the accounts?
This is all I get... no log feedback

Something like this?
Like a picture of it?
Can you post the error message?
Anything, really. Right now I have a transaction failing and the only error message I get is from when my test script is trying to write a tx to stdout, which it can't do because the tx is undefined given my Rust code failed
Do you mean the funky hex code errors?
Hi, is there a standard approach to tracing Rust errors through 'anchor test' runs?
based on what you sent, which makes a lot of sense
ok thing this is what i wanted:
```rs
set_authority(
  CpiContext::new(
    ctx.accounts.token_program.to_account_info(),
    SetAuthority {
      account_or_mint: ctx.accounts.asset_account.to_account_info(),
      current_authority: ctx.accounts.owner.to_account_info(),
    },
  ),
  spl_token::instruction::AuthorityType::AccountOwner,
  Some(ctx.accounts.recipient.key()),
)?;
```
So you need to CPI.
And only the token program can write the account info.
ahhh duh
Because the token account is a copy of the bytes.
why does something like this not work:
```rs
...
pub borrower: UncheckedAccount<'info>,
pub asset_account: Box<Account<'info, TokenAccount>>,
...

let asset = &mut ctx.accounts.asset_account;
asset.owner = ctx.accounts.borrower.key();
```
I am mistaken. `SetAuthority` exists https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs#L153
I don tthink it exists.
I don't see any owner transfer instruction.
Phantom just does a transfer.
Good point.
Hmm
instead of just mutating the owner directly
Yes.
that requires initializiing a new token account for the mint for the recipient prior to transfer correct?
Can verify by sending an nft to another wallet.
Just an spl token transfer
what's the common pattern for transferring ownership of token accounts (for nft transfers) code-wise
I want it so it says there is a 99% chance the user payed their fair share to the contract so I can speed up my dApp, right now it takes about 30 secs for someone to pay the contract which is too long imo
Does anyone know how I can speed up the time it takes to call a smart contract function.... (That is a bad way to phrase the question... like can I decrease the preflight commitment or something so my UX is faster... right now the preflight commitment is at recent)
Thank you. <@!501570363566587905> . But I tried to find PDA or zero-copy in there but I haven't found it.
This will get you started https://project-serum.github.io/anchor/getting-started/introduction.html.
Source? üòµ‚Äçüí´
Reading the source üßô‚Äç‚ôÇÔ∏è
I tried to find ultimate documentation of anchor framework. But I haven't.  Can anybody inform me the ultimate learning source of anchor please?
So the problem is that your open orders account is not "owned" by the correct program. So you are either passing in the wrong account or you haven't created the account with the system program correctly.
Amazing, that's pretty cool
Wow, fascinating, would never have guessed that
This is your error probably https://github.com/project-serum/serum-dex/blob/9f776c45fa37ec80109ea1f46461a75125f3f334/dex/src/state.rs#L136, though it depends on if you've changed the dex in any way locally, since that obviously affects yoru line number.
0x88 => line 136
1 => state.rs
The high order bits of the error code refer to the file. The low order bits the line number.
This is a panic in the dex
You'd basically have to just look at whatever CPIs you're doing (including any that anchor itself might do, I guess). Or maybe you could pause your test validator (can show you how I'd do that) and then look at that program_id in the solana explorer (not sure how much that will tell you)
Yep, sent you a dm!
i do not, how could I find out? yeah ss would be great, are you free later today?
Hmm, do you know which program is 9xQeW above? Happy to try to solve this over a screenshare if you want
the stack traces are similar
I am getting similar errors with other tests that do different things (one closes the open orders account, one doesn't pay rent exemption)
thought so too, but it seems strange to run out of compute with just an init account instruction no?
That sounds like you're running out of compute, but I thought you'd get a different error for that ("exceeded maximum number of instructions allowed")
yeah exactly
Ah, sorry, trying to read more carefully‚ÄîI missed that the first one is for instruction 0 and the second is for instruction 1, hmm
what does that mean?
im not 100% certain tbh sort of new to the codebase, but if i had to guess i think one comes from the swap and one from the dex
You're also getting that compute units log line
I think I'm being dumb‚Äîhow do you get both of those errors? Is it nondeterministic or something?
this is the second trace for the same error

For sure:
Could you post the whole stack trace/log etc?
i believe 0x0 is a flag somewhere for custom program error: 0x1000088
nothing, two different stack traces for the same test
What changed from the 0x0 from before?
it seems im reaching custom program error: 0x1000088
I guess that log comes from here https://github.com/solana-labs/solana/blob/master/cli/src/program.rs#L2147, so maybe you're having trouble getting a recent blockhash?
yup
Just to double check, are you able to load api.devnet.solana.com?
yeah that function exactly, I think there may be an issue with how I'm allocating the account - thanks for the help
Basically I think what you'll have to do to debug is figure out which CPI you're doing, and then go find the actual instruction handler that processes that instruction (that's how I found the possible error above, but I guess I might be looking at the wrong instruction)
localnet works just fine though
deploying on devnet always hangs up on me for some reason
Just to make sure I'm following, you're invoking anchor's `anchor_spl::dex::init_open_orders` function? Or some other `init_open_orders`?
mmmmm strange,  im not sure if that's the error that's getting reached since its in the dex (im currently working on swap), however there is a dependency there so i suppose its possible
but idk which parts of it are unique
I can see that some of it already exists in other places like `spl-token`
I never found out what the deal is with `project-serum/common`
I think it's at least possible you could hit that error doing what you're doing (maybe your `market` account is weird?)
Hmm, I'm not familiar with the serum dex code, but from source-diving could it be this error? https://github.com/project-serum/serum-dex/blob/master/dex/src/error.rs#L37
For sure. I'm running some tests on an init_open_orders function (trying to make some changes to the serum swap). The open_orders account is a PDA. I haven't come across that error before, but Im just running tests on anchor, not deploying üëçüèª
No...
Can you say more about how you're doing things? I thought that 0x0 meant you were trying to deploy and didn't have any sol in your wallet ü§î
I‚Äôm attempting to initiate an account
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 1: custom program error: 0x0
What could an arrow like this mean?
I was thinking about it weirdly for some reason
Ahhh yep that makes sense. Thanks guys ü§ù
signer only means the account needs to have signed the transaction, so you can have multiple i don't see the problem
It'll go by the order the accounts get passed in (or if you're using the anchor js stuff, you get to explicitly name them, `{ accounts: { foo: ..., authority: ..., ... } }`
for example, this line is in an ix context struct for an ix with 3 signers, so which one is `authority`?
if an instruction has multiple signers, how does the anchor `Signer` know which one it's assigned?
Because it installs the dependencies defined in Cargo.toml
Unlike in nodejs, they are installed during build.
https://github.com/project-serum/anchor/blob/master/examples/tutorial/basic-0/programs/basic-0/Cargo.toml#L16

it seems like my Internet Connection Issue; I did not know that I need it. Btw do you know why I would need it?
Hmm, sorry, then I don't know. Hopefully the core dev can help you with this.
and checked cargo ver -1.55
i've checked (node 14.18.0 , npm6.1415) all setup, is on ubuntu 2004 WSL@
solana-test-validator is a local node. You don't need it when you are compiling. Also, when you are running anchor test, you have to close the node, else they are going to collide.
no
do i need to run local validator: solana-test-validator
yeah , everything was perfect
During the installation process, did you follow this?
https://project-serum.github.io/anchor/getting-started/installation.html

you don't see anything like this?
i've also check anchor and solana vesions - them are present (0.17.0 1.7.15)
hanging
is it like hanging? what do you see in the terminal?
is it long process to generate js file ?
and more than 5 minutes gone nothing happened
fired anchor build
hey everyone. today first time using anchor. I'm on Minimal example (first tutorial)
well it is more ergonomic
Uuuuuu nice thank you!
lol found a v janky way of accomplishing depositing the right amount:

```
# Initialize wSOL ATA with just the rent amount for the token data
$ spl-token wrap 0
Wrapping 0 SOL into YOUR_WRAPPED_SOL_ATA

# Transfer desired funds
$ solana transfer YOUR_WRAPPED_SOL_ATA 2

# Sync-native
$ spl-token sync-native

# Check balance
$ spl-token balance So11111111111111111111111111111111111111112
2
```
spl-token wrap 1.0020....
easy UX
so the other day i wanted 1
Yeah that's a definite lol
ok then i give you 0.99796072
i know :/
I want 1 wSOL
lol
also the fact that the CLI does not take account rent
yep this should work
this cost a lot less size wise as well
cool! so then it would be like:

```
$ spl-token wrap 1
Wrapping 1 SOL into YOUR_WRAPPED_SOL_ATA

$ solana transfer YOUR_WRAPPED_SOL_ATA 1

$ spl-token sync-native

$ spl-token balance So11111111111111111111111111111111111111112
1.99796072
```
^ yeah that's what I would have guessed
actually i think all apps should switch to:
If ATA exist, send to ATA then syncnative
if ATA does not exist, create it with expected amount

no more AUX madness
would be nicer if wrap did the transfer + syncnative itself
so you can do a transfer to the ata then syncnative, yes the CLI is a bit painful
to update the wSOL balance with the (lamports - rent)
`spl-token syncnative ...`
you need to call syncnative
I agree with <@!134416332509675520> , am a bit surprised it doesn't work. It seems it is always trying to create the ATA for the wrapped SOL mint for your wallet, instead of checking if it already exists, and not try to create it in that case

One way to accomplish this, albeit a little bit convoluted.

```
# Initial wrap to your wSOL ATA
spl-token wrap 1
Wrapping 1 SOL into YOUR_WRAPPED_SOL_ATA

# Secondary wrap to your wSOL AUX account
spl-token wrap 1 --create-aux-account
Wrapping 1 SOL into YOUR_WRAPPED_SOL_AUX_ACCOUNT

# Transfer all balance from your wSOL AUX to your wSOL ATA
spl-token transfer So11111111111111111111111111111111111111112 ALL YOUR_WRAPPED_SOL_ATA --from YOUR_WRAPPED_SOL_AUX_ACCOUNT

# Claim rent back from your wSOL AUX
spl-token gc
```
(just replace the `YOUR_WRAPPED_SOL_ATA` and `YOUR_WRAPPED_SOL_AUX_ACCOUNT` with your base58 addresses)
I think under the hood wrapped sol is just sol that has been transferred to your associated token account for the "native mint", so I guess wrapping more just means transferring additional sol to that J8ZfB... address?
Huh, I haven't looked at wrapping sol before but I'm a little surprised that doesn't work.
Do you know why they call it 'info?
Hello, how do I wrap more if I'm using the spl-token command line?
Whenever you initialize an account, its address needs to sign too. So if you're initializing an account at a program-derived address, you'll need to sign with its seeds+bump.
try signing with PDA seed
yeah, but the signer is the same as the signer who call the program so it should be passed through right?
Perhaps you are missing the `cpi_ctx.with_signer(&seeds...)` ?

example:
https://github.com/project-serum/anchor/blob/master/tests/escrow/programs/escrow/src/lib.rs#L75-L83
keeps getting `Cross-program invocation with unauthorized signer or writable account'` error
How do I init via CPI?
My guess is that the other tests depend on an actual anchor version, whereas escrow's package.json points directly at the ../../ts directory
that worked, weird that i didn't need it for the other typescript tests
so im assuming that means only master branch supports it then? thanks, also a follow up question do i have to make changes to any config files or will the master branch cli just generate the types on `anchor build` in my existing project?
You can cargo install the master branch.
can the current npm build generate ts types for client? if not is there a build for master branch anywhere?
Think you need to run `yarn build` in the `anchor/ts` directory, though tbh I'm actually not sure why you need to do that (doesn't ts-mocha work directly with ts files? Why does it need the build to have been run?)
I think `.sendAllTransactions` ? I have a similar error though, would be curious what it was for you
I can run all the tests except for `escrow`. That one gives me `Error: Cannot find module '/home/kheavey/anchor/ts/dist/cjs/index.js'` ü§î
or actually it'd execute the ones in `instruction` first so i guess the order will be wrong
btw a simpler way is to append the extra insturctions to the `instructions` array of first txn <@!788122420765917184> 
that shud also work
yeh thats wat i was looking at too <a:Hmmmm:695129200260153375> 
but then i realized `send` calls `sendRawTransaction`
Looking at `send`, I forgot to set quite a few things.
https://github.com/project-serum/anchor/blob/6eead56/ts/src/provider.ts#L88
oh nvm
what happens if u do `provider.send` here instead of `connection.sendTransaction` ?
not sure <a:Hmmmm:695129200260153375>
<@!210756938332504065> do you know what went wrong with the other version above? I haven't used the `program.transaction.foo` stuff before
<:yay:877222447059980328>
It worked!
Thank you! I'll try it out
NOTE: `program.instruction` not `program.rpc`
<@!788122420765917184>
```js
const txn = new anchor.web3.Transaction();
txn.add(program.instruction.xxx...)
txn.add(program.instruction.yyy...)
await provider.send(txn)
```
```
    const tx = await program.rpc.update(
      {
        accounts: {
          stakingWallet,
          lockedRewardsWallet,
          stakingPool,
          pda,
          tokenProgram,
          clockSysvar,
        },
        signers: []
      }
    );
```
This one is not
```
  const ownerSign = provider.wallet.payer;

  async function update_same_tx(ix = null, signers = []) {
    const updateTx = await program.transaction.update(
      {
        accounts: {
          stakingWallet,
          lockedRewardsWallet,
          stakingPool,
          pda,
          tokenProgram,
          clockSysvar,
        }
      }
    );

    await connection.sendTransaction( 
      ix === null? updateTx : updateTx.add(ix),
      [ownerSign].concat(signers),
      { skipPreflight: false, preflightCommitment: "finalized" }
    );

  }
```
This one is failing when called with zero arguments.
Letting anchor spin it up
If you're using an actual `solana-test-validator` etc., you'll need to check the id that got printed when you deployed
Are you testing this with your local validator? Or just with letting anchor test spin up a validator for you?
Also I haven't touched `declare_id!` so far since it was generated with an `anchor init`. Should I change it, where can I get the right one?
```
const provider = anchor.Provider.env();
anchor.setProvider(provider);

const connection = provider.connection;

const tx = await program.transaction.foo(...);
await connection.sendTransaction(tx, ..., { preflightCommitment: "finalized" };
```
Ah, sorry, what did you mean by this ^ then?
Yes, but the thing is, if I call this instruction through `program.rpc.update(...)` nothing is failing
^ It's also possible that your `declare_id!` is wrong/doesn't match the program's actual deployed runtime id
Each of those `Account<'info, T>`s checks account ownership, so seems like one of them is failing. The TokenAccount ones are supposed to be owned by the spl token program, and then I guess the `staking_pool` is supposed to belong to your program?
If I try to do the same thing with a single instruction I still get the same error
```
#[derive(Accounts)]
pub struct Update<'info> {
    #[account(mut, has_one = staking_wallet, has_one = locked_rewards_wallet)]
    pub staking_pool: Box<Account<'info, StakingPool>>,
    pub pda: AccountInfo<'info>,

    #[account(mut)]
    pub staking_wallet: Account<'info, TokenAccount>,
    #[account(mut)]
    pub locked_rewards_wallet: Account<'info, TokenAccount>,

    pub token_program: Program<'info, Token>,
    pub clock_sysvar: Sysvar<'info, Clock>,
}
```
What do your `#[derive(Accounts)]` structs look like for those two instructions?
But I'm also not sure where to look at definitions of generated functions
I think it has something to do with `program.rpc.foo(...)` setting up something I miss
Thanks!
The process is a little goofy atm, convert to decimal and go find them in `error.ts` file üòõ
Also where can I get anchor errors myself, so I wouldn't need to ask next time
I'm not sure for now, I'll check it, thank you!
0xa7 means AccountNotProgramOwned, so is an actual anchor error‚Äîdoes that mean anything for whatever `foo` and `bar` are doing?
And I'm not sure what the problem even is, as calls seem to work separately with `await program.rpc.baz();`
But it fails with 
```
     Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7
```
Good day! How can I call two instructions in a single transaction in tests? 
I've been trying to do something like this:
```
const provider = anchor.Provider.env();
anchor.setProvider(provider);

const connection = provider.connection;

const tx = await program.transaction.foo(...);
const ix = await program.instruction.bar(...);
await connection.sendTransaction(tx.add(ix), ..., { preflightCommitment: "finalized" };
```
ok seems like this is how maybe: https://github.com/project-serum/anchor/blob/b1ef7431eca809dbca41601008fa220e19b8dee7/tests/pyth/programs/pyth/src/pc.rs#L99-L112
not sure exactly how to phrase this question, but how do you turn the AccountInfo from one of the remaining accounts into one of my defined account types in order to modify saved data (or how do you load remaining_accounts as a specific type)
for reference: https://github.com/project-serum/anchor/blob/3958533750c83c3e90709448c4f30ed9cce0b9b8/tests/multisig/tests/multisig.js#L109-L124
perfect, thank you
there's a `remaining_accounts` field for that
ya
You mean an arbitrary number of accounts?
does anyone know how to send an arbitrary length list of ~~pubkeys~~ accounts to a program call?
actually been looking for a good example of how to do this, thanks
gotcha!
They are extra instructions to include within the same transaction, and they run *before* your rpc instruction.


//////////////////////////////////////////////////////////////////////////////////////////

Best way is then to generate the hash yourself?
Not generically, no.
using the `anchor_client` if possible?
is there a good way to query for all the PDAs of an instruction?
Sorry I went to sleep last night. I meant to put mut on `user`.

This is because since `user` is paying the fee to create the account, the account must mark as `mut` as it's changed. 

```
#[account(mut)]
pub user: Signer<'info>,
```
is a cleaner way as Rohan suggested
You can approximate this by having a readonly instruction that emits an event
No `mut` accounts?
Does anchor have a pattern to implement an equivalent of view functions in Solidity?
Hmm, I guess anchor doesn't have any built-in help for that. If you happen to be using the zero copy/Loader<'info, T> stuff then it would work automatically I think, but yeah, if you're using `Account<'info, T>` it won't.
If I'm to call an instruction from another one, and if it updates a state of an account I have in my `Context` , how can I get this account's updated state?
Oh my bad. Looks like you've solved that already
<@788122420765917184> have you tried
```
#[account(mut)]
pub user: Signer<'info>,
```
I will dig into this
Much appreciated <@306185268879425538>
First address is mock usdt token mint, second your mock usdt token  account.
FYI, **here the account is owned by the program**.
And then you can manually mint to the mock usdt token account of your choice using the folllowing cmd:
`spl-token mint FPEgtzdJU9DnvnTQSusiwi2Sf8cM1C4toJGGnsayjuQ6 1000000  5R9G9ewjtSCnJj2JfgEdvuyLz4cthvxRdcx3kDZ5c2td`
You could add sthg like that to your migrations/deploy.js
```
  const [authority, nonce] = await anchor.web3.PublicKey.findProgramAddress(
    [YOUR_SEED],
    yourProgram.programId,
  );

  usdtTokenMint = await Token.createMint(
    connection,
    payer,
    provider.wallet.publicKey,
    null,
    6,
    TOKEN_PROGRAM_ID,
  );

yourProgramUsdtTokenAccount = await usdtTokenMint.createAccount(authority);
```
Do you happen to know if any documentation or tutorials exist for reference?
Thanks for the tip <@306185268879425538> - I'll look it into it
Basically yes
You're saying deploy an SPL token on my localnet and use that to mock interactions on a custom smart contract on that same localnet?
Otherwise you can deploy to testnet everytime to directly access it.
Deploy your own SPL token with 6 decimals to mock it. Afaik USDT is just another SPL token.
hey all, I'm trying to wrap my head around CPI and the ability to use other smart contracts in development. I'm trying to find any solid tutorial or documentation on how one would go about building a smart contract that one could deposit/withdraw an SPL token like USDC for examplle
can anyone point me in the right direction?
The tutorial on the documentation used a custom external smart contract, but I'd like to use one that already exists on the testnet (like USDC, for example)
It works but just seems weird.
Hi I have a question regarding the handling of large integers. I am in a position where I need to multiply two fairly large integers. Is it usual to do something like:
```
        return amount_usdt
            .checked_div(u64::pow(10, USDT_DECIMALS))
            .unwrap()
            .checked_mul(pool_circulating_supply)
            .unwrap()
            .checked_div(pool_liquidity)
            .unwrap()
            .checked_mul(u64::pow(10, USDT_DECIMALS))
            .unwrap();
```
Basically I reduce the precision by first dividing by 10^6, which allows for the following multiplication to work. I then re-add the decimals to keep the 6 decimals used by my spl token.
Ohh, makes sense. Thank you very much for the detailed explanation!  
It's just sooo different from Ethereum haha xD
Ah, ok, that wouldn't work‚Äîif you want to interact with an account, solana just forces you to pass it from the client as its public key. If you tried to store the actual `Account<'info, TokenAccount>` itself in storage, you would be storing a weird snapshot of its state, not really the account itself (not even 100% sure this would serialize, haven't tried it)‚Äîat any rate when you tried to then use it solana would reject you, since the client didn't actually declare your interest in that account (solana forces you to do this for performance reasons).
Here's an example project from the Anchor test.

Stores pubkey of pool_usdc in storage:
https://github.com/project-serum/anchor/blob/master/tests/ido-pool/programs/ido-pool/src/lib.rs#L548

Client passes pool_usdc:
https://github.com/project-serum/anchor/blob/master/tests/ido-pool/programs/ido-pool/src/lib.rs#L505

All you want to do is withdraw usdc. If Account<'info, TokenAccount> of pool_usdc was stored in storage instead of PubKey (of usdc), then there is no need to pass pool_usdc from client side. Or is it not possible to store that in storage?
https://github.com/project-serum/anchor/blob/master/tests/ido-pool/programs/ido-pool/src/lib.rs#L225
What badness are you envisioning? And what storage are you referring to? `Account<'info, TokenAccount>` just means the client is passing the specific token account to the program, not necessarily that we're additionally storing anything about it in our own account storage (the token account itself is of course an account, but managed by the spl token program, not us)
Is it a bad practice to store Account<'info, TokenAccount> in storage? I see many projects storing PubKey for ATA. Because it's kind of weird that you have to pass ATA from the client side everytime, for example when you simply want to withdraw token when there is only one type of token.
The wallet will show up as writable while the explicit user keypair won't!
^ You can verify this by doing something like `msg!("{}", ctx.accounts.user.to_account_inf().is_writable)` for the two cases, the one that works (using the provider wallet) and the one that doesn't, both without the `mut` annotation
Ahh, I see, thank you!
It's a bit sneaky why you *didn't* need a mut there when the wallet was the payer‚Äîthe wallet was actually implicitly mut even though you didn't mark it as so, because it's already the provider's wallet aka the way to pay for the transaction, and paying for stuff always requires `mut`
Why don't I need it for `provider.wallet.payer.publicKey` then?
You'll need a `mut` on the payer though (the user account)
I can call an rpc with `provider.wallet.payer.publicKey`, but with any other key it fails
Oh, sorry, jeez haven't had enough ‚òï yet.
Extra mut is not allowed.
you're right. i didnt make the `recipient` a TokenAccount, was just passing in a freshly generated pubkey for some reason. i bet thats it
Which part are you stuck on? Did the extra `mut` not fix things?
Ok, are the other `Account<'info, ...>`s you're using also set up correctly? Are those TokenAccounts owned by the token program, etc.?
Oh, sorry, need to read more carefully ü§¶‚Äç‚ôÇÔ∏è 1 sec.
arent they initialised in the `create` ix after i mark them as `init` or is that not how it works?
Ah, ok, if they're undefined then that means you haven't initialized them yet (hence they aren't owned by your program)
0.17.0
syntax seems a little outdated so im curious
which version of anchor are you using?
Sadly, I'm stuck here as well.
both are undefined...
`token_vesting` should simply be passed a `anchor.web3.Keypair.generate().publicKey` right?

as for `vesting`, i'm deriving it on the client like so:
```
const [vesting_pda, vesting_bump] = await PublicKey.findProgramAddress(
      [
        payer.publicKey.toBuffer(),
        recipient.publicKey.toBuffer(),
        tokenMint.toBuffer(),
      ],
      program.programId
    );
```
guess ill just try it on all non-misc accounts
i've doubled checked the declare_id! and it's the right one. will try your second suggestion rn
(Still looking at your code) but there are basically two things you could check: 1) is your declare_id! correct? if not, it will lead to spurious AccountNotProgramOwned errors :(; 2) you can always `await program.connection.getAccountInfo(somePublicKey)` and double check on the client which program owns some account‚Äîdo those accounts have the correct owner?
can share more code if necessary
hate to bump things that were probably ignored for a good reason but its been 5 hours and im still on this - anyone have any ideas?
The alias for `Result<()>` all by itself is kind of fun, it's actually sneakily generated for you whenever you use the `#[error]` macro ü•∑
Got it. Thanks <@!168868665456984065>
just for brevity
`ProgramResult` is just an alias for `ResultGeneric<(), ProgramError>`
What's the difference between Result<()> and ProgramResult? I have seen both used in anchor examples but I am not sure what the diff is
Thanks for the confirmation. My build must have been wrong, it worked flawlessly after two tries.
yes instructions are ordered <@!306185268879425538>
Hi. Do you happen to know wether instructions can be ordered ?
Doing sthg like:
```
tx.add(spl_transfer_instruction)
tx.add(my_program_instruction)
```
Does not seem to enforce any ordering.
Thank you
I see.. then I'll need to make them integers and use in the program.. what if I need to store some ratios, like a calculated value within the program?
https://github.com/Synthetify/synthetify-protocol/blob/master/programs/exchange/src/decimal.rs
i dont think you can use floats in solana smart contracts
Why do I get this error when trying to send in an `f32` or `f64` value as a parameter (not happening with other types like `u64`)?
```IdlError: Type not found: {"name":"data","type":{"defined":"f64"}}```
It's also strange that the `type` field doesn't have a direct value of the premitive type `f64` but gets it wrapped in another object. I'm a beginner in both Rust and Anchor, so I'm kinda lost about what's going on here.
tried refactoring with the `program.instruction` pattern but im getting the same thing

yes
How do you call this instruction, with `rpc`?
getting an `0xa7` - AccountNotProgramOwned error on this accounts context struct. afaict, the issue is either with `vesting` or `vesting_token`. `vesting` is generated via `anchor.web3.Publickey.findProgramAddress(...)` and `vesting_token` is generated via `anchor.web3.Keypair.generate()` so im not sure what it could be... a little stumped here
```
    const tx = await program.rpc.initialize(
      {
        accounts: {
          user: provider.wallet.payer.publicKey,
          local,
          systemProgram,
        },
        signers: [
          localSig,
        ],
      }
    );
```
And..
```
    ‚úî Is initialized! (545ms)

```
And yep!
```
error: mut cannot be provided with init
  --> programs/test/src/lib.rs:18:15
   |
18 |     #[account(mut, init, payer = user)]
   |               ^^^

```
I don't think it is allowed and, either way, it works if I use `provider.wallet.payer` as a `user`. I don't even need to pass a signature with it
try `#[account(mut, signer)]`
```
    pub fn initialize(ctx: Context<Initialize>) -> ProgramResult {
        Ok(())
    }
```
No
Do you have the CPI code in your init?
Or am I missing something obvious?
Currently I'm getting
```
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
```
Good day! How can I `init` accounts in test with accounts other than `provider.wallet.payer`?

More concretely, say I have this simple contract:
```
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(signer)]
    user: AccountInfo<'info>,

    #[account(init, payer = user)]
    local: Account<'info, Data>,

    system_program: Program<'info, System>,
}

#[account]
#[derive(Default)]
pub struct Data {}
```

How can I make this test to stop failing on CPI?
```
const anchor = require('@project-serum/anchor');
const web3 = require('@solana/web3.js');

describe('test', () => {
  const provider = anchor.Provider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.Test;

  const userSig = web3.Keypair.generate();
  const user = userSig.publicKey;

  const localSig = web3.Keypair.generate();
  const local = localSig.publicKey;

  const systemProgram = web3.SystemProgram.programId;


  it('Is initialized!', async () => {
    await provider.connection.confirmTransaction(
      await provider.connection.requestAirdrop(user, 10000000000),
      "confirmed"
    );
    const tx = await program.rpc.initialize(
      {
        accounts: {
          user,
          local,
          systemProgram,
        },
        signers: [
          userSig, 
          localSig,
        ],
      }
    );
    console.log("Your transaction signature", tx);
  });
});
```

i did not change defalut path const anchor = require('@project-serum/anchor');
what do you get if you do `npm ls -g`?
also make sure your PATHs are set correctly
i've checked package-lock.json (i have only that one) and the versions are a bit different 0.17.0 from my 0.17.1

i've installed locally and globally and locally
normally you would work on a project with a `package.json` which would define project-specific js dependencies
try to install the dependency globally `npm install -g @project-serum/anchor`

tryan@DESKTOP-J536S9G:~/anchor/examples/tutorial/basic-0$ node client.js
internal/modules/cjs/loader.js:905
  throw err;
  ^

Error: Cannot find module '@project-serum/anchor'
i'm getting error
hey everyone. i'm trying to use "node client.js" basic - 0 tutorial
üëç üëç  thank you
I think Orca is based on it, for example.
It's just an example that other projects can use.
is spl-token-swap active at all? nobody talks about it much
ahh got it, thanks
Totally different. One is an orderbook and the other is an AMM.
I can't tell if one is based on another, or it's the same thing, or they're completely different, or smtg else
does anyone know the relationship between Serum DEX and the spl-token-swap program (https://spl.solana.com/token-swap) ?
agreed, yeah if we can stand on the shoulders of giants by taking some piece of what they did and extending it in a different direction, that'd be very good for everyone
At the same time, the community should also not support copy + paste competitors.
First excuse is kind of lame. I've heard many projects say this. We should encourage competition. It's good for the ecosystem.
Yeah i think there's two main concerns, 1) copy/paste competitors, and 2) vulnerabilities. In Raydium's case the first is understandable, but as the ecosystem gets built out and companies benefit from different kind of edges (network effects) that will change. In the 2nd case that will also change as people become more comfortable with standards and aware of common program flaws.
Yea unfortunately closed source is kind of the standard right now. Though it's slowly pushing in the other direction.
that makes me incredibly disappointed given what the DeFi community normally stands for
I don't think they're open source.
bump super curious about seeing the code for the biggest defi platform on solana
Is the raydium permissionless pool code open and up to date ? Did anyone play with it yet ? üôÇ
Does anyone know AMM examples written with anchor and working with serum ?
Hello guys I hope everyone is well
Don't know why not passing in the accounts it wants would give me a rent exempt error though...
I figured it out... I wasn't passing in the accounts it wanted me to
ConstraintRentExempt: 145,
What is error 145 (account is rent exempt)? I am trying to delete an account from existence by moving all its lamorts out... why am I getting an error?
I don't want to turn them off entirely because they help when writing tests, maybe just hide logs for passing tests if that's possible
A pr would be great.
We can hide the logs with a feature flag.
You end up with a lot of transaction simulation failed etc etc
any way to get rid the of all the console messages you get when writing tests that should error like this: ```    try{
      await somerpcthing(
        inst, {
        accounts:{
          whatever: something,
        },
      });
    }catch (err){
      assert(something about err);
    }```
til üôÇ
interesting
got it
The trick above just uses a different `BuildHasher` choice that doesn't do anything illegal
https://doc.rust-lang.org/src/std/collections/hash/map.rs.html#2874
Yeah, it turns out that the HashMap type in Rust by default actually uses some sneaky thread-local static state (something about caching keys or something? haven't looked at it too closely). Static mutable state is forbidden in solana, so this strategy just doesn't work.
hm didn't know you couldn't use hashmaps. can you explain what you're doing here a bit more re: global state & why it matters <@!134416332509675520>?
```
TypeError: Cannot read properties of undefined (reading 'web3')
  653 |   find(LENDING_RESERVES, (reserve) => reserve.name === name);
  654 | 
> 655 | export const TOKEN_PROGRAM_ID = new anchor.web3.PublicKey(
      |                    
```
anyone know why this could be undefined?
I have initalized: 
`import anchor from "@project-serum/anchor";`

it i just use `PublicKey` it works
yeah doing something like this
Ah ok, if you really want to you could do something like this https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L234
<@!134416332509675520> yeah - just testing things out - thank you!
Using something like this https://github.com/solana-labs/wallet-adapter, or this https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291
Ah, ok‚Äîthat's not the way you would ordinarily do it, you'd ordinarily use phantom's js api to ask it to sign things for you, without ever touching secret keys
<@!134416332509675520> i think i can do it like this: `const wallet = new Wallet(Keypair.fromSecretKey(new PublicKey(privateKey).toBytes()))`
Am maybe misunderstanding what you're trying to do‚Äîcan you not just ask your phantom wallet to sign things for you?
phantom ui
i see the secretkey - but to use it i need it to come in as a Uint8array
Where are you getting that secret key from?
const secretKey = "askdjajsd" // comes as a string
const wallet = new Wallet(Keypair.fromSecretKey(secretKey))
Not sure I'm following your question‚Äîbut with phantom at least, you don't (phantom will never reveal the secret keys to you, at least not via their JS api that is).
A private key is the same thing as a secrete key
<@!134416332509675520> got it
Each wallet is a public/private keypair (the trick is that they're all generated from the same seed phrase, as ssj posted above)
how do you convert a private key to a Uint8Array secretkey?
it seems like a phantom wallet can have multiple sub wallets? a wallet has one secret key? and each sub wallet has a private and public key? is that right?
https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
It is definitely confusing, I think phantom wallet mentions something like they are generated off the same seed or somthing like that, but they are all different keypairs
im being a n00b. i see the different private keys üôÇ 
why do i ask the dumbest questions i have no idea
No
you can have multiple wallets. but they are all tied to the same key pair?
all I have for this is modeled after what I saw in that video,
```
#[derive(Accounts)]
pub struct CreateMint<'info> {
    #[account(mut, signer)]
    pub account1: AccountInfo<'info>,
    #[account(
        init,
        payer = retail_account,
        mint::decimals = 0,
        mint::authority = retail_account
    )]
    pub mint: Account<'info, Mint>,
    #[account(address = token::ID)]
    pub token_program: AccountInfo<'info>,
    #[account(address = system_program::ID)]
    pub system_program: AccountInfo<'info>,
    pub rent: Sysvar <'info, Rent>,
}
```
that's interesting... given it was written correctly, shouldn't just the mint need to be a signer?
Well, you can sort of use HashMaps, just have to customize them a bit to avoid that hidden global state üòà
This looks like an error in your rust code... specifically in the struct
Trying to now use the Anchor init macro to create a mint. I have an account, `account1`, who will serve as both the payer and the `mint_authority` -- <@!501570363566587905> very similar to your basic4 example in the YouTube Anchor video. To my understanding, I need the mint's keypair as a signer in my RPC call and account1 to be designated as a signer with the signer macro. If I only have mint's keypair in my signers array, I get "Signature verification failed." But if I put both mint's and account1's keypair in my signers array, I get a variety of errors depending on my structuring of the context's accounts. 1) Does the payer need to be a signer here? 2) How can I make sure the payer has enough lamports to instantiate a new account (given it has 1 SOL in its wallet)?
About solana not allowing hashmaps, you can do `cargo build-bpf --dump` and take a look at the ELF file https://docs.solana.com/developing/on-chain-programs/developing-rust#elf-dump, and sure enough, there will be an offending `.bss` section related to hashmap state:
```
  [11] .bss.std::collections::hash::map::RandomState::new::KEYS::__getit::__KEY NOBITS 000000000002a7a0 02a7a0 000018 00  WA  0   0  8
```
Conceptually, your phantom wallet isn't going to give you access to the actual keypair‚Äîit's job is to keep it secret üôÇ
Why does sealevel not support hashmaps??? Too much memory usage
Wow, that's actually fascinating, thank you for pointing that out! I had no idea.
that way the user can sign the tx
Follow this code... you have to add a method to the wallet that calls window.solana.signtransaction

No... you can't get the keypair... you have to ask the wallet to sign the tx
`Keypair.fromSeed()`?
I prefer to use the phantom wallet though... go to their docs
i want to write a script? 
and i need to test on main net üò¶
https://github.com/solana-labs/wallet-adapter
You are supposed to use the wallet adapter
Though you can export if you really want it.
You don't.
how do i instantiate new Wallet(keyPair)

where do i get this keyPair from my phantom wallet?
Oh wow, interesting
my understanding is you can't use a HashMap in a Solana program. Like Sealevel doesn't support it
(Dumb question), supports it where?
weird. HashMap seems like the more primitive type
Sounds like it
so Solana supports BTreeMap but not HashMap?


//////////////////////////////////////////////////////////////////////////////////////////

Instead, we can make it required and force the user to call `getProvider` implicitly, if he wants to use it.
Yea we should change that. It's optional only if `setProvider` was called.
ü§¶‚Äç‚ôÇÔ∏è
I fixed my issue. <@&889579250720575488> your docs say that, for the Class Program, provider param is optional:

https://project-serum.github.io/anchor/ts/classes/program.html#constructor

But using it for first time on a react app client using create react app it is in fact required. Maybe update the docs this was very confusing and will prob trip others up
It's a little bit of an adventure (part of the reason I knew what was up with your setup was that I was just screensharing like ten minutes ago with someone who had a similar issue, also on M1 lol). But now that I've ironed out some local install issues I seem to be running things just fine ü§û
if i replace this part of the config with the relevant Python command to use anchorpy will it just work?
```
[scripts]
test = "mocha -t 1000000 tests/"
```
tks for the help. appreciate it.
btw, does macbook m1 work well with solana/serum/anchor? had problems when m1 first came out.
yeah works now. i did that because .cargo/bin/sdk was "bad file" or something like that. i guess my installation had problem
Actually not sure why you need to do this at all though if the active_release/bin stuff is in your path
Ok yeah, that's not quite right, replace the first path with `/Users/dsu/.local/share/solana/install/active_release/bin/sdk` I think
i did a soft link since it was complaining not finding the bpf
ln -s /Users/dsu/.local/share/solana/install/active_release/bin/cargo-build-bpf /Users/dsu/.cargo/bin/sdk/bpf
<@!740067760541007894> how did you setup the path for you BPF SDK? That path ought to point to an actual directory, like something/something/sdk/bpf
yes macbook M1
Are you on macos?
did "anchor init <my anchor proj name>, " then "anchor build".
got this error:

BPF SDK: ~/.local/share/solana/install/releases/1.7.11/solana-release/bin/cargo-build-bpf
thread 'main' panicked at 'Failed to install bpf-tools: "Not a directory (os error 20)"', sdk/cargo-build-bpf/src/main.rs:473:6
stack backtrace:
   0:        0x104d80064 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h6a8908fa3ed6f9e8
   1:        0x104da34fc - core::fmt::write::h4be00f71c5582919
   2:        0x104d78b4a - std::io::Write::write_fmt::h49e76926070788f1
   3:        0x104d81e8f - std::panicking::default_hook::{{closure}}::h1577f0656e419c0e
   4:        0x104d8198d - std::panicking::default_hook::h1aef594179c4fd25
   5:        0x104d82590 - std::panicking::rust_panic_with_hook::h10bc487d002f6c42
   6:        0x104d82035 - std::panicking::begin_panic_handler::{{closure}}::hf4cfa78c105ce648
   7:        0x104d804d8 - std::sys_common::backtrace::__rust_end_short_backtrace::h1df96a166e4351c4
   8:        0x104d81f9a - _rust_begin_unwind
   9:        0x104dbcd9f - core::panicking::panic_fmt::hea8fe6c9e0720810
  10:        0x104dbce85 - core::result::unwrap_failed::h58357c1be19e8a7d
  11:        0x1049c90b0 - cargo_build_bpf::build_bpf_package::h7ddf28dc943fd08a
  12:        0x1049cc760 - cargo_build_bpf::main::h37509757f9eec6ef
  13:        0x1049e357a - std::sys_common::backtrace::__rust_begin_short_backtrace::h1ab7d653eac93687
  14:        0x1049e392c - std::rt::lang_start::{{closure}}::h4f5d41ef74d9aef1
  15:        0x104d82ab1 - std::rt::lang_start_internal::h4428f22d05a79c62
  16:        0x1049ccdc9 - _main
I have no idea tbh. I‚Äôve always used next js with typescript. Sorry I couldn‚Äôt be of more help.
No I am using reg js. Am I able to just us reg js?
That rep is also an example with it and also using a wallet
https://github.com/exiled-apes/candy-machine-mint/blob/main/tsconfig.json
Maybe checkout this tsconfig
Are you using typescript with it?
Are there any examples for cra that you know of?
I am
If you‚Äôre using vanilla create-react-app it‚Äôs something a bit different but should be a similar thing.
Yeh so I was using next js and had to add this to my next config file
```

/** @type {import('next').NextConfig} */
module.exports = {
  reactStrictMode: true,
  webpack5: true,
  webpack: (config) => {
    config.resolve.fallback = { fs: false, os: false, path: false, crypto: false };

    return config;
  }
}
```
And if so what is the proper way to connect to contracts
Is anchor the write tool to use to connect and interact with contracts in a client web app?
but it is failing due to fs not being allowed in browser
Trying to connect to my deployed programs via a react app using Anchor
So e.g. you'd get a similar flavor of error if you tried doing `ix_data: AccountInfo<'info>` etc.
Each field in your Accounts struct turns into a line like `let <field_name> = ... try to deserialize that field ...`, and this happens in a scope where `program_id` is already taken as a name (it's the program id)
This ended up being kind of interesting actually, <@!723145219436183644> had a field in their Accounts struct called `program_id`, and that breaks the output of the derive macro üôÉ
both `payer` and `formulaKeypair` show up in accounts
Mm, interesting
the code seems to run on someone else's machine just fine though - they're on an intel mac and im on an m1
can i dm you?
No worries! I think you'll need to post a bigger chunk of your code‚Äîrust  is telling you you're not lining up the types right, but I don't have enough code to look at to tell exactly what you're doing wrong
I think that means you're accidentally signing the tx with a signer that doesn't show up in the accounts list (aside from whoever is paying for the tx, they don't need to be in the accounts)
does anyone get `Error: unknown signer;` when signing a transaction with a keypair generated using `anchor.web3.Keypair.generate();`?
so i'm getting this other error at #[derive(Accounts)] as well. i'm not sure if both the errors are related. I'm using anchor_lang 0.16.0
sorry for bringing this back again i've been trying to make sense of how to proceed with this for almost two days now with nothing conclusive üò¶
hey sorry for getting back to this again but when I just use an AccountInfo<'info>, Anchor says `expected struct anchor_lang::Program, found struct anchor_lang::prelude::AccountInfo` at the ctx.accounts.amm_id.clone() line.
any other alternative path?
stack size is not enough for decode and store all data, in some cases it's possible do not use Box but you need to be careful with this
is it for the dynamic sizing of the aaccount?
why should we use Box here?
What's the difference if we do anchor deploy or solana program deploy {path to so file} ?
And what's the use of storing bump into VisitorState  in that PDA account
Hey Alan, Thanks for this I was kind of asking this only. I will go through the program and let you know if I find any difficulty here. One question Can we make use of this PDA into some other program that I have to verify this current user state ?
I'm a bit confused with the `declare_id!`, can anyone help me explain? So firstly you need to put some program_id into that `declare_id!` before deployment. Then you get the output of the `anchor deploy` and update the source code and Anchor.toml again. So what is actually compiled into the Solana program and stored on the program account? The previous input program id or the post-deployed program id?
Yeah, you could just use an `AccountInfo<'info>` (anchor won't check anything for you). You could also just do some of the anchor checking manually, e.g. `ctx.accounts.amm.key == &whatever_it_should_be`
Ahh alright. I'm just trying to see if the code actually works so is there any other way I can get it running say by just using maybe AccountInfo or something else to solve that error?
You'll just have to have a custom `impl anchor_lang::Id for TheAmm` that returns whatever the amm's actual program id is.
Don't think it will work to use `Program<'info, Token>`, because that will check that the account's address matches the spl token program's address (it won't). My understanding is that you'll need to do `Program<'info, TheAmm>`, and implement a `TheAmm` struct in the same kind of style that `Token` is implemented in Anchor: https://github.com/project-serum/anchor/blob/master/spl/src/token.rs#L337
yeh
Ah, ok, like this? https://github.com/cqfd/anchor-visitors/blob/master/programs/visitors/src/lib.rs#L40
<https://github.com/cqfd/anchor-visitors/blob/master/programs/visitors/src/lib.rs#L40-L41>
it's just a nitpick but i would re-use the seeds here instead of the constraint. It might mean also storing the u8 bump in `VisitorState` though that's not 100% necessary
Here's an example of what I was thinking of https://github.com/cqfd/anchor-visitors
`find program address` will only give you the public key. You'll need to `fetch` the PDA's pubkey and check that it's not `null`
So I create a program which will itself create a PDA whose owner is that program and if someone visits the site I create a PDA for that user from my program and can check if PDA for that user exists using find_program_address and if it does'nt exist means he has not visited my site . Am I assuming it correctly ?
that would be a good use case for a pda.
You could however have your program create an account that lives at that PDA you found, and assign itself as the owner. I guess that would be enough state to indicate that someone has visited your site? If the PDA points to an uninitialized account owned by the system program, not a visitor; if it points to an account owned by your program (so one your program actually created), then yep, a visitor.
Finding a program-derived address doesn't create anything‚Äîif you pass a fresh pda to your program (one that doesn't already point to an account), it will arrive at your program as an uninitialized account. Zero data, no lamports, and its owner is the system program (that last bit is possibly counterintuitive‚Äîjust because the address was derived from your program, and hence your program can sign for it, doesn't mean that your program *owns* the address!)
To clear up some things though: *finding* a program-derived address is one thing, actually creating an account that lives there is another.
I'm still getting used to thinking in terms of accounts, so not totally sure what the idiomatic way to do that would be.
To restate that: there are two ownership-like notions floating around. Only the program from which a PDA was derived can *sign* for that address; totally independently, only the program that *owns* the account can write to it.
So what I mean by generate is I want to create a PDA for each user who is accessing my site so that later on I can check if that user/wallet has accessed the site before by just checking if PDA exists for that user
This isn't quite right, you can have e.g. a PDA that points to a token account (token accounts are owned/written to by the spl token program‚Äîthe PDA-ness just means that only the program that derived the DPA can *sign* for it).
The PDA is just an address (one that gets signed for in a funny way, unlike regular addresses which are elliptic curve public keys, and get signed for the usual way, via a private key).
<@!637172855360061440> can you say more about what you mean by "generate" the PDA?
So if I am authority of that program that generates the PDA means... no one else can generate that PDA but anyone can access that using find_program_address as suggested by alan


//////////////////////////////////////////////////////////////////////////////////////////

Thanks <@!103986638320861184>
the `instructions:` bit on the rpc call is where you can specify a list of instructions to be executed _before_ your main program instruction. So in this case it is specifying 2 additional instructions, one to create the check with 200, and then a createToken account (which possibly returns an empty array, or null, if the token account already exists, thus the splat `...`) -- both of these are using `await` because part of calculating the inputs needed for the instruction probably require generating a PDA or checking if an ATA account already exists
I am trying to make sense of  the Cashier Check implementation. https://github.com/project-serum/anchor/blob/master/tests/cashiers-check/tests/cashiers-check.js  What's going on in lines 59-63? This is new syntax. ty
try doing:

`solana transfer RECIPIENT_ADDRESS ALL --keypair /path/to/your/program/keypair.json --url devnet` (replace RECIPIENT_ADDRESS with your target pubkey, and keeping the `ALL` as it will transfer all the lamports)
Is there an easy way to drain it so there's definitely 0 in there?
ohhhhh, that definitely happened
Looks like it says System Program and Executable set to "no"
if so, perhaps you deposited lamports before deploying or something, perhaps you can drain the account first, so it gets deleted, and then trying to re-deploy again
Is the "Assigned Program Id" set to "System Program"? -- and "Executable" set to "no"?
We checked that and it says it's a "system program", that's incorrect right?
<@!840057433128435722> To add to this, I would also recommend checking the status of the account/program in Solana Explorer in devnet:
https://explorer.solana.com/?cluster=devnet

Perhaps a hint could come up
You can also search the solana codebase for that client error above, only a few hits so could be a good starting point.
Sounds like your account is ostensibly executable, so maybe something about those `bpf_loader_upgradeable` checks?
I'm not sure why you're getting that error, but it's only triggered in a few places in the solana codebase: https://github.com/solana-labs/solana/blob/master/runtime/src/accounts.rs#L311 https://github.com/solana-labs/solana/blob/master/runtime/src/accounts.rs#L426 https://github.com/solana-labs/solana/blob/master/runtime/src/accounts.rs#L455
We've deployed a program to devnet but we're getting some weird errors.

In the frontend: 
```
failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions
```

So we are thinking maybe the program isn't actually deployed. But if I we to redeploy or update we get this error:

```
Error: Account <programId> is not an upgradeable program or already in use
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```

I feel like there's some beginning mistake we're making
Did not know that. Thanks ü§ù
One thing, 0xa7 will get triggered by *any* `Account<'info, T>` ownership check, no need for `T`  to need to be owned by your program. For example, `Account<'info, TokenAccount>` checks that the account is owned by the spl token program.
I think mismatching seeds would trigger a different error, there's 0x92 = 146 = ConstraintSeeds for when seeds+bump don't find the address that got passed in
Reading the source! üßô‚Äç‚ôÇÔ∏è
0xa7 is an account ownership error which usually means mismatching seeds
trying setting up the same seed configuration for the vesting token account as what you're generating the key/bump to be
and `receiver` maps to `recipient_token.owner`
`vesting_pda` is the value for `vesting` when making the accounts ctx
`pubkey` is the correct `funder` 
`devnetTokenMint` is the correct `token_mint`
can you share what that looks like
its likely an issue with the seeds being provided from the front-end/testing script
im getting 0xa7 errors in this struct. as i understand it, the `vesting` and `vesting_token` accounts are marked as `init`, so they should have no owner when they are passed into the ix. 

none of the other accounts need to be owned by the program afaict, so why do i get error 0xa7?
Tests like this one
Good day! When trying to run tests which listen for events with `anchor test --skip-local-validator --skip-deploy`, tests block indefinitely. How can I fix it?
how did you figure out this? is there any log file? how to follow those calls
there was mentioned bug by <@!134416332509675520> and need of adding environment variable - ANCHOR_WALLET

Finally made it

export NODE_PATH="/home/tryan/.nvm/versions/node/v14.18.0/lib/node_modules"
getting new error
I've setup NODE_PATH and NODE, with my NVM path

"tryan@DESKTOP-J536S9G:~/anchor/examples/tutorial/basic-0$ which node
/home/tryan/.nvm/versions/node/v14.18.0/bin/node"
my node installed via NVM
may be problem with NODE_PATH variable, but i don't understand what path should i provide
node, anchor, npm all setup globally
J536S9G:~/anchor/examples/tutorial/basic-0$ node client.js
internal/modules/cjs/loader.js:905
  throw err;
  ^

Error: Cannot find module '@project-serum/anchor'
Require stack:
getting same error
install again
Hi, everyone. Now i just tried again to run minimal example. So I've Removed anchor, and unistall packages.
I just look at the quality of docs and solana market cap and kinda connect the dots üôÇ
I've read your blog posts!
Obviously you don‚Äôt mean actual harassment üôÇ
I don‚Äôt think the dev team prioritizes this
I just look at the abysmal docs and a $45B market cap and connect the dots
No I know what you mean
However initializing accounts is a different story
Loading programs at genesis to specific known public keys is no problem
I'm not suggesting actual harassment
Maybe you take me too literally. If they never hear you say anything about it they won't prioritize it
You can load programs no problem
hassling Solana devs to do smtg isn't a productive use of time üôÇ
It's definitely important and missing functionality for Dev ux
hmm I wonder how hard it is to hack the test validator to try cloning missing addresses just in time
They need to think about prioritising it
You should hassle the Solana devs in GitHub issues and in their dev support channel
üò¶
No you pretty much just have to init all your programs in a script on the local test validator
is there a way to start the test validator cloning mainnet without having to explicitly specify every address that needs to be cloned? Specifically listing them for complex programs is basically impossible.
So how can I find the one who used this program to create the candy machine account?
Like the owner program for candy machines are always https://solscan.io/account/cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ
how I would be able to search for all Candy Machines created by a specific wallet address?
How can I save a Map or Dictionary in account data.
What do?
I deployed a program to devnet but I'm getting some weird errors.

In the frontend: 

```
failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions
```

So I'm thinking maybe the program isn't actually deployed. But if I go to redeploy or update I get this error:

```
Error: Account <programId> is not an upgradeable program or already in use
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```
I just used this as an illustrative example of these traces
so I'm ignoring that one
Ooh, interesting.
this error only happens on M1, it works fine on x86
Yeah‚Äîkind of either a :/ or a üòÉ situation depending on mood/amount of free time haha
At any rate, that particular error sounds like you're somehow sending a malformed instruction (kind of surprising since you often construct the ix via some helper function)
yep yep, so just figure out which instruction fails and then dig into the code
Huh, this repo is organized a little differently than I'm used to, but e.g. you can see a ton of process_x_instruction handlers here https://github.com/solana-labs/solana-program-library/tree/master/governance/program/src/processor
I'd have to binary search
I'm not sure which one fails in this particular case, I package like ten of them into a transaction
Which CPI call are you doing?
so no easy way üôÇ
ah got it
When you make a CPI you know which instruction your trying to call, so you can generally find the actual instruction handling code that handles that ix, and just poke around (not always easy)
spl-governance
I think basically all you can currently do is source-dive. Which program is BUGKq...?
(this one is probably not worth looking into deeper because it's on an M1, but in general trying to figure out tips for how to debug these problems)
these aren't my own programs either, it's just standard stuff
invalid instruction data errors are super hard, like how do I debug those
```
Transaction simulation failed: Error processing Instruction 2: invalid instruction data
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [1]
    Program log: Instruction: InitializeMint
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 2279 of 200000 compute units
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA success
    Program BUGKqJzYi7hirjuKWCXr2Bkj7uQGbSUm5gXVV9vNkBw7 invoke [1]
    Program log: Error: InvalidInstructionData
    Program BUGKqJzYi7hirjuKWCXr2Bkj7uQGbSUm5gXVV9vNkBw7 consumed 3039 of 197721 compute units
    Program 11111111111111111111111111111111 failed: invalid instruction data
SendTransactionError: failed to send transaction
```
like for example
do you guys have general tips for debugging solana stacktraces?
Also, what should `declare_id!()` macros be, and how can I choose the right one
Can I change it somehow in `tests/*.js`?
What would be _the_ way to mock time in programs?
perfect thank you
Yeah if you literally set the token's owner/authority to the program_id, I think you've basically locked those tokens in there for good lol, since I don't think it's possible to sign for the program's own address
i think you read it correct?
Or maybe I didn't lol
Oh, sorry, I misread your q :/
yea that's the issue I'm running into as we speak haha
I think using the program's program_id wouldn't work here, since you can't sign for it as far as I know (whereas if you use a PDA, the program itself can sign for them)
does it make sense to have a program be the auth of some token account or use a program owned account as the auth?
find investors
thanks
üëç
rpcpool (best i think), genesys go, both $500/motnh
what's an example of an expensive one?
with a trial period
the only cheapo one i know is quicknode
there a several, but most are quite expensive for 1 dev
if there is, it's not easily googlable
<@!831450660146642974> -- is there a service that will host a validator? (like alchemy or infura in etherland)
ahhh got it
How do I get info from a Tx from its signature in JS?
some heavy or abused endpoints are just switched off
might be the public endpoints
actually, I'm using `estimate` from `@project-serum/swap` and getting this error while calling it.
```
{"jsonrpc":"2.0","error":{"code": 410, "message":"The RPC call or parameters have been disabled."}, "id": "048a0638-616c-4a49-a231-3ce6ca6e8d57" }
```
did solana mainnet disable `simulateTransaction` call? I'm getting this:
How do I send one SPL token to someone else in the JS?
That means your account you want to edit is not owned by the program that is trying to edit it...
I'm a little stuck here too, 0xa7 seemed to pop up randomly when the ix worked properly before. Did you have any progress on this?
nice that worked! Just had to do `yarn build` in the `anchor/ts` repo, which is also a trick i learned from you
Can't remember exactly whether you need a package.json for this or not ü§î
One thing you can do is run `npm link` from within the `ts` directory, and then in your actual tests, do `npm link @project-serum/anchor`
like say I modify the TS client and want to use my fork to test `basic-1`
how do I test against a local version of the Typescript client?
this is essentially all I do:         

let ctx = CpiContext::new(ctx.accounts.dex_program.clone(), ctx.accounts.into());
oh i see, like what you did here? with the chatroom? thanks
https://github.com/project-serum/anchor/blob/master/tests/chat/tests/chat.js#L22
I'm just referring to the accounts you're passing to the other program inside the CPiContext.
Of course, you can't do this for PDAs, though.
So if you want a bigger account, you need to create it in a separate instruction.
The account size created via CPI is limited unfortunately. The runtime has an upper bound as the error message is sayhing.
i'm trying to initialize a zero_copy pda, which contains an array of small structs, the sizes seem pretty reasonable but i'm running into this error:
`SystemProgram::CreateAccount data size limited to 10240 in inner instructions`
any thoughts?
at the moment my only cpi call is to set context, is that what u mean?
Could be passing in the wrong account then, when you are doing CPI to the dex.
yeah I do this, in my struct I assign ownership via: owner = dex::ID
I derive accounts in my struct yes, but the tests at the moment use the instruction prior (havent touched those since cloning)
Here's an example of how to do that https://github.com/project-serum/anchor/blob/master/tests/cfo/programs/cfo/src/lib.rs#L437-L445
Are you creating the account declaratively via `#[derive(Accoutns)]` ?
id like something like acc::cpi::set_owner I think
I followed CpiContext to the source but I'm not sure I see some sort of set owner function i can use
how could I find an example of this? Looked in here: https://project-serum.github.io/anchor/tutorials/tutorial-3.html#defining-a-puppet-program but this only sets the data
You can either create the account in an instruction prior, or via CPI inside the smart contract. The current code does the former, if you're using `init, seeds, owner` inside the `#[derive(Accounts)]`, then you will do the latter.
sorry I think im misunderstanding. So it seems like I've assigned ownership of open orders incorrectly. My instruction prior is the same as the OG swap code, but I thought that this assignment was meant to happen in the smart contract (not in the tests/instruction prior). Does this happen in the OG swap code or is this only the case in this new version (which makes open orders a PDA)?
I guess I can scratch my own itch and contribute back to the community.
Looks like bfriel has made a walkthrough here (https://www.brianfriel.xyz/learning-how-to-build-on-solana/) with a follow up here (https://github.com/bfriel/crunchy-vs-smooth-v2)
`cargo expand` is very useful for this, if you want to see what the macros are doing.
Ok thanks for the quick response. I'll try to dig through the code myself and see if I can grok some of it.
Just the basic tutorials and examples.
<@!688968670059429948>  In the instruction prior https://github.com/project-serum/swap/blob/master/tests/swap.js#L106
Is there a high level walkthrough of the code structure for Anchor? Using it feels a bit arcane and I'd like to understand what's happening under the hood. It looks like it's not that many total lines of code but my Rust is too rusty to easily read the stuff in anchor/lang.
For example, in the original swap program at: https://github.com/project-serum/swap/blob/master/programs/swap/src/lib.rs where is ownership assigned to the dex?
Correct.
right but this ownership is established in the smart contract, not the test right?
And the owner needs to be the DEX not the system program.
That doesn't assign ownership. That just passes in the pubkey.
which I'm fairly sure is correct
systemProgram: SystemProgram.programId
gotcha. In my test, i assign ownership to the system program via:


//////////////////////////////////////////////////////////////////////////////////////////

Ok, so I'm now using `Loader` instead of `Account` in `Initialize`, and I have `let ledger_account = &mut ctx.accounts.ledger_account.load_init()?;` in the `initialize` method. This works, except if I try to write to `ledger_account.market_account` in `initialize`, the program panics because of an access violation
You need to use `AccountLoader` with zero copy.
Still getting the same error, here's a minimal example: ```#[program]
pub mod market_program_anchor {
    use super::*;

    pub fn initialize(
        ctx: Context<Initialize>,

    ) -> ProgramResult {
        let ledger_account = &mut ctx.accounts.ledger_account;

        ledger_account.market_account = Pubkey::new_unique();
        Ok(())
    }
}

#[account(zero_copy)]
#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct LedgerAccount {
    pub market_account: Pubkey,
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer=administrator, space=8+904)]
    pub ledger_account: Account<'info, LedgerAccount>,
    #[account(mut)]
    pub administrator: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```
If so, you need to also `#[derive(AnchorSerialize, AnchorDeserialize)]`
Are you using it in an API method?
If not, does anyone know why I would get ```the trait `anchor_lang::AccountSerialize` is not implemented for `LedgerAccount``` when I try to initialize an account defined as ```#[account(zero_copy)]
pub struct LedgerAccount {
    pub market_account: Pubkey,
}```?
Are there any good examples available for defining a zero_copy account?
Is there a game theory on deciding how many tokens your project should have and it‚Äôs inflation rate
One other debugging option is to just edit the anchor codebase to log more info here https://github.com/project-serum/anchor/blob/master/lang/src/account.rs#L26, e.g. `info.owner` versus the expected `&T::owner`.
Thanks you soo much now error was solved.
Right, so that's a different error (gotta just follow the compiler): change to Task::try_from_slice(&_instruction_data)
Now getting `mismatched types` since  try_from_slice was expecting an &[u8]
Mm, I'm not totally sure why you're getting that error, but I'm a bit confused how passing a `&[u8]` handler argument would work here‚ÄîI at least need to give it an explicit lifetime, and it's not clear to me which one to give it etc. If you change to `_instruction_data: Vec<u8>`, what happens?
No change even
`use anchor_lang::*`
```
#[derive(AnchorSerialize,Default, AnchorDeserialize, Clone)]
pub struct Task { 
    pub id: String,
    pub desc: String,
    pub name: String
}
```
<https://github.com/project-serum/anchor/blob/master/tests/ido-pool/programs/ido-pool/src/lib.rs#L555>
I have added trait `use anchor_lang::AnchorDeserialize;`
check code examples in anchor repo for how to do it
you need to add the deserialize trait
no @s please
Please someone reply. Error was `the method exists but the following trait bounds were not satisfied` <@!248066053161222144> <@!134416332509675520>
How do I interact with the Solana token program using anchor?
gm, is it possible to build NFT projects on Anchor?
do you know why this could be causing me issues: 
```        const unsafeRes = await connection._rpcRequest("getMultipleAccounts", args);
```
getting:
```
Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'web3')```
A: my localnet anchor tests were working, react + devnet integration was not working, I basically started botching input one by one localnet tests, to see which account was been processed at what compute unit consumption level to start matching compute consumption to depth in code, hope this trick helps someone
Q: somehow I keep ending up at `Error: 167: The given account is not owned by the executing program` when integrating with react+devnet, I have double triple checked the declare_id, the localnet tests run fine, how can I reverse engineer which account amongst the input has the issue? could I possible count from the how much compute was used what line in the program the simulation failed? could I somehow cargo expand and figure our which line the expanded program the issue appeared in?
not a direct answer, but usually cargo expand helps, it demystifies all the macro code
are there any good examples of using `#[interface]`, i've looked at the docs which uses Empty accounts (too simple) as well as the `lockup` program in anchor repo  (too advanced, can't really understand what's going on)
Can some one help me with this error?
following your advice, i'm going to do that. 2 questions, in general what tools you would suggest (in c or python there is Understand by Scitools is there some similar you are using) ? 2. I see wallet address in Anchor.toml - but how you figure out that we should add environment variable with name ANCHOR_WALLET (regarding bug when we launch minimal example with node client.js)? thanks in advance
for sure, i think i can figure out the rest of the implementation details, thanks for the help
But in terms of remembering what its address is, hmm, yeah, I guess you just have to find some way (I suppose you could store it on chain, or anywhere really)
You'll have to pass the account in no matter what (the usual "solana just makes you do it that way" lol)
unless there is a better way for the program to remember where the data is stored
got it, got it, thank you! (no i only mentioned the PDA as a small data store / a way to have a pointer to the zero-copy account that is passed in)
If you want a big account, you won't be able to store it at a program-derived address, because of the size restriction, unless I'm misunderstanding you
If you want your program to be able to directly mutate the account's data, it should be the "owner" in the general solana sense (the terminology is so confusing lol, super unfortunate). Look through the codebase for examples of `SystemProgram.createAccount`; the owner is the final argument, the programId.
ok cool, thanks a lot for explaining that, i think i vaguely understood the limitations without knowing the why, so then -- if i want a program to be "in charge" (whatever that means) after the account is created client side, i'll still need to do some ownership(?) transfer of the account to the program? or is that not necessary, and then, either way i can just save the account address in a PDA?
I guess a function that consumes an AccountInfo would work and I can construct a Loader internally
If you want to make a big account (> 10kb limit on accounts at PDAs), you'll have to initialize it from the client with a keypair.
But zero-copy is orthogonal to PDA-ness
What are some good examples on exposing functions / read queries to other contracts as a library?
There are limits on how big an account can be if it lives at a PDA (and the connection to CPI is that if you're trying to initialize an account that lives at a CPI, you *have* to do it via CPI, rather than in like a separate system instruction issued from the client, because whenever you initialize an account in solana, its address has to sign‚Äîbut PDA's can only be signed for by the program they're derived from, so it's just impossible to initialize them from the client ==> have to do a CPI)
Actually, am I right here? Is account ownership definitely write-once or can you relinquish ownership to a different program? I'm assuming no
so based on the (let me see if i get this right) data limitations on the cpi context, zero-copy accounts need to be created outside of the program and then passed in, i'm really just looking for a way that a program can mutate a lot of data (without having to rely on anything on the client side, past the initial set-up)
What kinds of accounts/what kind of ownership? Spl token "ownership" refers to the "owner" field on a token account's data (might be, say, your wallet's public key). That's a different level of abstraction from general solana account ownership though (= which program is allowed to mutate the account). Ownership in the sense of "which program can mutate me" is immutable/non-transferrable, whereas the more abstract "who has authority over me" is something each kind of account would have to implement for itself (it's not a general solana thing).
Yeah, the IDL just doesn't support floats (not 100% sure why actually, I'm fuzzy on this). Solana itself also seems to have weird float support? https://docs.solana.com/developing/on-chain-programs/overview#float-support
Yeah I think you‚Äôre right, curious if it‚Äôs actually just not possible to use floats tho or if I‚Äôm doing something wrong. Setting types to f32 in rust causes my TS test to throw an exception
i think fixed point is strongly encouraged, not sure though
Is there a way to pass in floating point numbers from the TS api, or is it just fixed point?
anyone knows what could be the issue? I'm thinking some M1 related issue but can't find solution by searching on discord here.
hi all. Done all the set up for Anchor + solana cli on M1 mac. Anchor init testing1 --> cd testing1 --> anchor build and nothing happens
does anyone happen to have a good example of account owner transfer to a program (as above ^) for a non-token account? having trouble finding one..
I guess I can do:
ClientSide > generate random KeyPair -- create account -- call program passing Pubkey and signing with secretKey
ProgramSide > transfer ownership -- store the pubkey in the program state -- cpi..
It's a mango account that I wanted to be own by my program <:pepemcaps:830881220371808297>
Oh ok that's my issue then, been turning it in several way without success
Since you need to create them via CPI.
There's a smaller limit for PDA sizes.
If it's a PDA that might be a problem.
Or just create it with the right owner right away, make more sense
Thanks Armani
Ok ok make sense, so also in program doesn't work then. I need to do a ownership transfer as CPI as it's a PDA
CPI has a limit.
Needs to be priior instruction client side if `init` doesn't work.
The classic init doesn't work cause too big, the zero copy cannot either cause not compatible, can only init in the program code or as a prior instruction in the client side?
How would I go to initialize a huge account (that is from another program, so not zero copy compatible) with anchor? Size is 28k
It's non existant unfortunately. Just code.
Oh,  I meant the documentation for serumCmn. Googled it and couldn't spot anything
Awesome! Sounds fun.
Ah this helps so much!! I think it's all cleared up now for me, thanks. I hate to read code and not understand what's going on, it makes it hard for me to move on lol

right now building out a nice front end for this chat app, maybe wanting to release it as an example and maybe another blog post soon, the help I've gotten here has been invaluable
(an unfortunate collision of nomenclature)
Notice this line here https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs#L58, as it uses `#[account(zero)]`. Not to be confused with zero copy. The zero keyword here means the account discriminator is zero initialized.
Immediately after creating the account, its zero initialized, which means that anyone can use it with your program. So by convention, it's inserted as in instruction prior to your intended instruction, which will use the zero data and initialize it.
It simply invokes the system program's create account instruction, which you can think of as "malloc" for solana.
`createAccount` doesn't have anything to do with zero copy, though it can indeed be used with it.
using `ctx.remaining_accounts.get(0)` will give you an `Option<AccountInfo>` - so then you can create some kind of handling logic around that.

Another useful trick is to use `Account::try_from` if you want to deserialize the data, and check ownership into a known struct.

Here is an example:
https://github.com/cofre-hq/cofre/blob/main/programs/cofre/src/lib.rs#L47-L53
Hey y'all I got another question regarding variable number of accounts - `ctx.remaining_accounts`

I found this PR comment: https://github.com/project-serum/anchor/issues/227#issuecomment-828188669

Near the bottom he says -
"Related, you can use Options<T> inside an #[account] as you would normally."

Can someone provide an example or more context about what he's talking about?

Does that mean I can specify something like `Option<Account<'info, MyAccount>>` in the struct? That wouldn't work because it doesn't implement the account serialization methods right?
Does using it have anything to do with usage of `zero_copy` and the asynchronous nature of the Loader in this program?

https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs
Do you mean the `...` syntax? That's https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
Curious, is there documentation to read up about this?
This is incredibly helpful, thank you!

I saw the code here when trying to implement a version of this chat example on the front end and was unsure what exactly was going on üòÖ https://github.com/project-serum/anchor/blob/master/tests/chat/tests/chat.js
I think this may have been more important in earlier versions of anchor?
So adding a call to `program.account.someKindOfAccount.createInstruction` to the `instructions: ` array will throw in an extra instruction to your tx to create an account at the address in question, and automagically make the `program` its owner + give it enough space (not 100% sure how accurate that space calc will be though ü§î)
The `instructions: [...]` argument to rpc calls is a little confusing, it adds instructions to the tx you're building, and they run *before* your main rpc function.
It's defined here: https://github.com/project-serum/anchor/blob/master/ts/src/program/namespace/account.ts#L308
Did anyone ever find if this is documented anywhere?

How `createInstruction` is supposed to be used?
I use rust-analyzer and it resolves the macro-generated types and methods just fine after the fact but I don't think it ever gives me good code completion.  not sure why
Also - is there a way to get VSCode code completion / error highlighting working w/ Anchor? For example for the IDE to recognize the methods on the generated workspace client
ah yes, it was set incorrectly there. thanks
perhaps your wallet keypair configured in the `Anchor.toml` is not present?
Usually it is set to `~/.config/solana/id.json` perhaps you should check you have that file present
I am running into an issue where running `anchor test` is complaining about `Error: Unable to read keypair file`.

It says that it will default to using a keypair generated in the `/target/deploy` directory. I checked to see that this keypair exists and can be recognized by the Solana CLI and it seems fine. Any idea what I'm doing wrong here?
I literally am so stupid... I thought about this for 30 mins... I have one funciton called stakeBum and one called unstakeBum... I thought I was calling unstakeBum but in fact was calling stakeBum twice
Does your ix handler take multiple arguments maybe?

Why am I getting this error??? I am providing the bumHolder

You shoiuld never use an `impl` block in there.
Everything inside the `#[program]` mod is an API endpoint.
yep
Are you referring to e2e tests via `anchor test`?
what is the difference between fn and impl? I understand that one is for a struct and the other is just a general function, but when does a client/test invoke fn vs impl?
Sweet, I'll check it out - thank you
Yes, check out `ctx.remaining_accounts`
Howdy! Is there a way for instructions to accept a dynamically sized list of accounts?

For example - can an instruction either one or two accounts as arguments, and then the implementation branches in logic depending on how many accounts were passed in?
When you make a new struct rust/anchor doesn't know how you want to serialize it
That makes sense... Thanks!
Because all account data ultimately needs to get serialized into bytes, so you need to specify your serialization strategy somewhere
Thanks!!! Can I ask why??
Add a `#[derive(AnchorSerialize, AnchorDeserialize, Clone)]` I think on top of your Spacebum struct
What is this error?
any help would be appreciated.
hello. Beginner question here. When looking at minimal example and running "anchor build" there was no response - idl folder didnt' generate the files
Run `cargo doc` in your crate.
How do I deserialize data assoicated with an account
Where can I find docs on what's exported in `::cpi`?


//////////////////////////////////////////////////////////////////////////////////////////

Gonna go source-diving ü§ø
Is the cost of deployment just for rent-exempting the program's .so file? Or are there other fees?
Hmm, I'd like to understand this better too.
I thought it might be this, but I changed it to Message; 100 instead of ~30k and seeing the same thing.

```

#[account(zero_copy)]
pub struct ChatRoom {
    head: u64,
    tail: u64,
    name: [u8; 280],            // Human readable name (char bytes).
    messages: [Message; 100],
}
```
On devnet testing something out and what seems like a simple program I'm getting this error:

Transfer: insufficient lamports 20950769160, need 72981279360
That can't be right? It needs 72 SOL??

Playing with this: https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs#L57


```
    const program = new Program(idl, programID, provider);

      const chatRoom = web3.Keypair.generate();

        await program.rpc.createChatRoom("Test Chat", {
      accounts: {
        chatRoom: chatRoom.publicKey,
        rent: web3.SYSVAR_RENT_PUBKEY,
      },
      instructions: [
        await program.account.chatRoom.createInstruction(chatRoom),
      ],
      signers: [chatRoom],
    });
```

Any idea why it costs that much to call that function?
1. Is bad for PDAs where the existance of the account means it belongs to someone. ATAs for example.
1. How would this hijacking look like? If I void the data completely, even if it will be revived, it will be empty. So when u say hijacking you mean it can be reinitialized with different params?

2. I remember that in the past u could only reassign under the conditions you mentioned but Ive checked the system program again and I cannot find where constraint is enforced https://github.com/solana-labs/solana/blob/6196c80a3d0cefef75fc62aeb09a99f7613cd027/runtime/src/system_instruction_processor.rs#L106
If you don't explicitly say how much space to use, anchor will end up seeing if the struct implements `Default`
good catch
...yup that's it
Are you `init`-ing something without a `space =`?
If so, what's the usual approach to fixing it?
Is this a common beginner's error when defining contexts?
When adding in an `instruction` macro to a context definition, I get a compile error on the `#[derive(Accounts)]` preceding it. 

`no function or associated item named 'default' found for struct <structName> in the current scope`
Thank you for sharing, I will check it out!
Ah, ok. Yeah, tbh this library is kind of awkward to use as-is/doesn't quite fit your intended use case I don't think. Maybe check out https://discord.com/channels/889577356681945098/889577399308656662/900404365070835723
For example, let's say I created a new token: 
```
const tokenMintAccount = await Token.createMint(...);
```
Then I can easily do like transfer and get balance:
```
tokenMintAccount.mintTo(...)
tokenMintAccount.transfer(...)
const aliceTokenAccountInfo = await tokenMintAccount.getAccountInfo(aliceTokenAccount)
const balance = aliceTokenAccountInfo.amount;
```

But for the tokens I didn't createMint, for example WSOL, how can I do transfers and getAccountInfo?
Not sure I'm reading your question right, but you can get the mint's account info with `await provider.connection.getAccountInfo(theMintsPublicKey)`. Not sure that's what you actually want to do though
In the client side, how do you get AccountInfo of token by just giving the pubkey of mint account?
For example, WSOL mint account is `So11111111111111111111111111111111111111112`. How do I like transfer and get account info?
Correct. The downside of this approach is that you can have dead accounts in limbo. The upside is that you can't hijack an account.

The real thing that we need to do once the runtime supports it is resize the account to zero length and reassigsn to the owner to the system program.

Until then, tombstone + force defund is the recommended approach.
I think this is to deal with the danger of people maliciously adding sol back into an account in a follow up instruction and keeping the account open
Bumps are functions of your program_id + seeds, but different PDAs often end up having the same bump: there's roughly a 50/50 chance any given choice of bump will work, so lots of PDAs end up having 255, or 254, etc. That means if you accidentally swapped bumps of two PDAs, things might still work with one program_id but randomly not with a different one.
There was actually a fun example of this recently in the discord: https://discord.com/channels/889577356681945098/889577399308656662/900256485320294400
Nope, gotta have somebody else listen to them off-chain and then poke your contract
One other example to add to the ones <@!347689664855015424> posted, all of anchor_spl is anchor interacting with a non-anchor program via cpi (the spl token program).
I am wondering why anchor is doing https://github.com/project-serum/anchor/blob/df51a27a48e5d03005e841f383f407aef74e3555/lang/src/common.rs#L6-L24
Rather than closing accounts like the escrow program,  effectively closing the account right now
1. You dont call the system program to close an account (unless its a system program account). The program closing the account has to own the account to decrease its lamports so it always has to be done by the program itself. This is how anchor closes accounts https://github.com/project-serum/anchor/blob/f68cc50e5bcb9a01ff958e41b5e15056f18d2fd6/lang/src/common.rs#L6

2. a) search for `invoke` and `invoke_signed` in this file, the mango processor, https://github.com/blockworks-foundation/mango-v3/blob/main/program/src/processor.rs
b) there's also examples in this file https://github.com/paul-schaaf/solana-escrow/blob/master/program/src/processor.rs#L88
I have an addon question to spakhm's query : Can I use Anchor without ever write raw Solana Rust? I read in an article that its important to know raw Solana before moving to Anchor because you might get stuck from time to time.
or call to some of the programs in the solana program library
are there examples of how to do CPI for programs that aren't written in Anchor? For example, how do I call the system program to close an account?
can you have a smart contracts listen to events?
not totally sure tbh, just seems like a common disconnect in moving from local -> dev
or maybe it's something simpler just about the format you're passing in for seeds
(like, what does the error generally mean)
for my education, why would a difference cause this error?
thanks
that's my only guess
are you sure the address you deployed to is the same one that is set in your `declare_id!(`
I moved from a local test validator to devnet and instructions that used to work now get back `InvalidSeeds` error. What could be a plausible reason for this? (A hint for what this could be would really help debug)
Good point, but if it will cost 70 SOL obviously need to rewrite stuff to deploy it haha.
and depending on how you're deploying, you can set the cli to use it with `solana config set -u l`
works the same
`solana-test-validator -r`
it might be easier to use a localnet to test things like that
so only 100 messages
```

#[account(zero_copy)]
pub struct ChatRoom {
    head: u64,
    tail: u64,
    name: [u8; 280],            // Human readable name (char bytes).
    messages: [Message; 100], // Leaves the account at 10,485,680 bytes.
}
```
Maybe it didn't redeploy correctly but I updated and still get the same message
yeah that example in particular creates a zero_copy account and allocates like 30k messages worth of space (i think the max at 10mb)
Is that what's happening? I'm just fiddling with the examples to learn.
oh shit... didn't realize i'd have to pay infinite to deploy a program that uses zero_copy
```
    const program = new Program(idl, programID, provider);

      const chatRoom = web3.Keypair.generate();

        await program.rpc.createChatRoom("Test Chat", {
      accounts: {
        chatRoom: chatRoom.publicKey,
        rent: web3.SYSVAR_RENT_PUBKEY,
      },
      instructions: [
        await program.account.chatRoom.createInstruction(chatRoom),
      ],
      signers: [chatRoom],
    });
```
Playing with this: https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs#L57
That can't be right? It needs 72 SOL??
On devnet testing something out and what seems like a simple program I'm getting this error:

`Transfer: insufficient lamports 20950769160, need 72981279360`
hey, anyone having problems w/ no logs being written to .anchor/program-logs. what are the potential solutions?
Thanks for your help!
I also had an additional issue in my test code with how I was generating the token accounts. The `sender` account wasn't actually the owner of the `sender_tokens` acount
Got it working!
Ah! Okay that makes sense
It's impossible to sign for program-derived addresses from the client (whole point of them is that only the program itself can sign for them), so you need to add them explicitly to the CPI (no chance for the signature to just be there automatically like for a client-side signature)
Think of `CpiContext::new_with_seeds` as being `CpiContext::new_with_additional_pda_signatures`
With `CpiContext::new`, the receiving protocol will see everyone who signed your original tx (everyone who signed from the client, most likely‚Äîsignatures transfer seamlessly across CPIs).
Interesting! So when you just use `CpiContext::new()` to do a CPI, who does the receiving protocol see as the signer? The invoking program or the originating signer?
I think you'll need to do `CpiContext::new_with_seeds` and pass in the `&[&[PROGRAM_AUTHORITY_SEED, &[bump]]]`
or are there tags to add to the `#[account()]` macro for setting up token account constraints? (e.g. `token::owner = sender`, `token::mint = mint` ?)
was wondering if the approval instructions needs to get wrapped with the signer account somehow..? (first time messing around with the SPL token program and CPIs)
And then for the approval instruction where the error gets thrown, passing in the program authority account with these properties:
```
#[account(mut, seeds = [PROGRAM_AUTHORITY_SEED], bump = program_authority.bump)]
pub program_authority: Account<'info, ProgramAuthority>,
```
I believe so.. Initializing the program authority account like this:
```
static PROGRAM_AUTHORITY_SEED: &[u8] = b"authority";

#[derive(Accounts)]
#[instruction(bump: u8)]
pub struct InitializeProgramAuthority<'info> {
    #[account(init, seeds = [PROGRAM_AUTHORITY_SEED], bump = bump, payer = signer, space = 8 + 1)]
    pub program_authority: Account<'info, ProgramAuthority>,
    #[account(mut)]
    pub signer: Signer<'info>,
    #[account(address = SYSTEM_PROGRAM_ID)]
    pub system_program: Program<'info, System>,
}
```
```
pub fn initialize_program_authority(
    ctx: Context<InitializeProgramAuthority>, 
    bump: u8
) -> ProgramResult {
    let program_authority = &mut ctx.accounts.program_authority;
    program_authority.bump = bump;
    return Ok(());
}
```
Are you using the pda seeds properly?
the `signer` is the owner of the `signer_tokens` account, and I'm trying to delegate transfer authority to the `program_authority` account (PDA initialized in a prior instruction). Thinking I might have the accounts argument mixed up, but I've tried different configurations and can't seem to figure out why this CPI won't go through.
but I keep running into this error about the signer's privilege being escalated:
```
Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account 
    Program 9LjA6DjxKDB2uEQPH1kipq5L7Z2hRKGz2yd9EQD9fGhU invoke [1]
    Program 11111111111111111111111111111111 invoke [2]
    Program 11111111111111111111111111111111 success
    2VHqWbvz7pcnqgTXWH6ZknnHmjrxCReWUhVWcHTwNPne's signer privilege escalated
    Program 9LjA6DjxKDB2uEQPH1kipq5L7Z2hRKGz2yd9EQD9fGhU consumed 200000 of 200000 compute units
    Program 9LjA6DjxKDB2uEQPH1kipq5L7Z2hRKGz2yd9EQD9fGhU failed: Cross-program invocation with unauthorized signer or writable account
```
I'm trying to approve a program transfer funds from a signer's token account. In one instruction, I'm trying to make this CPI request to get the approval:
```rust
approve(
    CpiContext::new(
        token_program.to_account_info(),
        Approve {
            authority: program_authority.to_account_info(),
            delegate: signer.to_account_info(),
            to: signer_tokens.to_account_info(),
        },
    ),
    balance,
)?;
```
I see. Thanks <@!210756938332504065>
no idea why its called god <:Shruge:759542487680548898>
and address `provider.wallet.publicKey`
for the mint
its the token account
Does god stand for stand for anything or is it just the placeholder. This is from the anchor/cashier-check example: https://github.com/project-serum/anchor/blob/master/tests/cashiers-check/tests/cashiers-check.js
huh, interesting. I'll keep trying, thanks!
I just tried doing something similar on my machine and it worked fine. You can see what I tried here: https://github.com/project-serum/anchor/compare/master...cqfd:token-mint-burn-example?expand=1 (ignore the token minting stuff, that was for an example for someone else lol)
as far as I can tell, it's correct -- 40 bytes for the pubkey plus the descriminator
did you specify the right space size?


//////////////////////////////////////////////////////////////////////////////////////////

> It would be a bit like if you wanted to implement a web app but had to work with the raw bytes of requests.
yea that doesn't sound too fun haha
I think it's helpful to `cargo expand` your anchor programs so you can see how they turn into vanilla solana. At the end of the day, vanilla solana isn't really that complicated, it's just that the signature you have to implement is quite low-level; there's a lot of room for tedium and error. It would be a bit like if you wanted to implement a web app but had to work with the raw bytes of requests.
unless u r doing alot of CPI and want to squeeze every ounce of compute from your program you prolly dont need plain rust
I know <@!501570363566587905> has said that unless you need to use a more compact library to serialize/unserialize your data than Borsh, you shouldn't use Anchor... Also, Anchor does certain things to an account so that the first 8 bytes (or bits... not sure) of an account are used to tell Anchor what kind of an account it is.... if that is too much for you, that is also another downside to anchor.... I don't know anyone though who has written a smart contract in Anchor who would go back though
Also, curious if there are any downsides/limitations to using Anchor vs. plain Rust?
Not sure where to specify that?

```
    await program.rpc.increment({
      accounts: {
        counter,
      },
    });
```
something has to change
or something else
change the blockhash
Is there an easy way to get around the "This transaction has already been processed" error, if I actually want to send the same tx twice?
Got it, thanks. I'm learning a lot üòÑ
(And by the way, receiving money counts as a mutation too)
Gotcha... good to know
If you search for `token::mint` in the anchor codebase you can see some `init` examples like that
Yeah, usually‚Äîthought it can do slightly fancier things, like `init` spl token accounts, in which case ownership actually goes to the spl token program
Ah ok. So is the main point of `init` to transfer ownership to the current program?
This is because paying for stuff counts as modifying an account
So e.g. your phantom wallet (or at least one of its keypairs) is a system_program account with sol in it
Ah, yeah, not necessarily‚Äîif you generate an address (either with a keypair's public key or with a program-derived address) and no account already lives there, then it implicitly acts like a system_program account
Also, why does the user need to be mutable? I don't modify it in my code
One thing I'm confused about is when to use `#[account(init)]`

Because in this case, I never used it for the new public key I generated

But I thought you had to initialize the account before using it?
Perfect, that worked!
Yeah, think so (you can search the anchor codebase for requestAirdrop
guess I need to give the keypair some lamports in the test?
`    'Transfer: insufficient lamports 0, need 953520',`
Oh... tricky
This is another kind of sneaky thing, when `user` was the wallet it was automatically mutable :/
Ah, ok, you'll also need `#[account(mut)]` above the user account
`anchor-cli 0.17.0`
Mm, what does `anchor --version` say?
But when I do sign, I get an error

```
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
```
Oh ok, I was wondering why I didn't have to sign there
(You didn't have to explicitly sign for the wallet because it happened behind the scenes since the wallet pays for the tx)
You'll need to explicitly sign for the keypair user, `signers: [theirKeypair]` in the rpc call
Ah, what actually goes wrong above?
When you generate a keypair on the fly like that, you can airdrop it some sol and it will be a wallet-like account (it's owning program is the system_program, but that's fine, it can hold money etc. just no data)
```
pub fn increment(ctx: Context<Increment>, _bump: u8) -> ProgramResult {
    let base_account = &mut ctx.accounts.base_account;
    base_account.count += 1;

    let has_incremented = &mut ctx.accounts.has_incremented;
    has_incremented.has_incremented = true;

    Ok(())
}

#[derive(Accounts)]
#[instruction(_bump: u8)]
pub struct Increment<'info> {
    #[account(mut, seeds = [b"base_account".as_ref()], bump = base_account.bump)]
    pub base_account: Account<'info, BaseAccount>,
    #[account(init, seeds = [user.key().as_ref()], bump = _bump, payer = user)]
    pub has_incremented: Account<'info, HasIncremented>,
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```
I might be doing this totally wrong... basically I'm trying to make it so that you can only call `increment` once per user
How are you using the second user on the rust side?
Hm actually, I'm still confused. 

I want to try calling `increment` twice, once with one user and once with another.

For the first call, I set `user: provider.wallet.publicKey`

For the second one, I thought I could use `Keypair.generate()`. But it seems like I have to create the account associated with the public key before using it. Is there a way to skip over this in tests?
Ah, interesting.
Ohh, I didn't copy over the IDL. So the deployed program is fine it's just the frontend thinks it isn't yet.
I'm still having trouble figuring out why this is saying it needs 70 SOL to call createChat
Another noob question‚Äîis there an easy way to get two different providers when writing a JS test? I'm getting the first one with `anchor.Provider.env()`

Oh wait‚ÄîI think what I want is two keypairs, not two providers
Thanks üòÑ
Ah I see. Yea lots of ways to get the public key
Whereas the `.key()` version is a different anchor trait, `Key`‚Äîthey end up doing the same thing here
Ah, yeah, here `Signer` implements Rust's Deref trait with Target = AccountInfo<'info>, so doing `.key`, no parens, ends up giving you the `.key` property on the underlying `AccountInfo`
Ah thanks, that worked. I was doing `Buffer.from(pubkey.toString())`
Try doing `pubkey.toBuffer()` in there
Also on the client, when I try to do `findProgramAddress(pubkey)`, I get an error `Max seed length exceeded`
ah nice, thanks! how does `key.as_ref()` work? based on https://docs.rs/anchor-lang/0.17.0/anchor_lang/struct.Signer.html it looks like `key` should be a function?
You can see an example similar to what you describe here https://github.com/cqfd/anchor-visitors/blob/master/programs/visitors/src/lib.rs#L32
Yep, you can see some examples in the anchor tests/, you can do e.g. `#[account(seeds = [signerPubkey.as_ref()], ...)]`
serum isnt written in anchor <@!335954300897329153>
it depends on the deployer
also note that not all programs will have their idl onchain
When using the `#[account]` macro, is there a way to use the public key of the signer as a seed? E.g. something like

```
#[account(seeds = [signerPubKey])
```

Higher level, I'm building an example program where each user can increment a counter once. And I'm trying to store whether a user has incremented the counter already in a PDA (i.e. one PDA per user). Not actually sure if this is the best way to go about things
Huh, interesting, I can't seem to build the master branch anchor cli anymore‚ÄîI get a `import resolution is stuck, try simplifying macro imports` error about clap ü§î
I think you probably need to specify which cluster to fetch from (`--provider.cluster mainnet`) etc, but yeah, seems like serum_dex hasn't uploaded their idl?

and even though serum_dex v3 is listed here, it still won't pull the idl? https://anchor.projectserum.com/build/1
The latter.

so is `anchor idl fetch` a general purpose idl generator, or does it only work with programs that have been deployed with anchor? I'm reading it might be the case that they have to be the same version as well?
One way is to use `program.account.yourAccountType.fetch(itsPubkey)`
how might I deserialize the data value of an account generated by an anchor program on the frontend?
üëç
Yes. The runtime forces you to sign with the address you deploy to.
the private key just means I can deploy to that public address?
But when you are communicating with devnet/mainnet, you should make sure the address matches whatever is in your `declare_id!("")` and `Anchor.toml`
You can replace it with whatever keypair you want.
That file is used as the default keypair for deploys.
I wouldn't check it in.
its the address of your program thats all I thinnk
is `target/deploy/program-keypair.json` meant to be checked into the source control? What's the best practice there? Presumably it's a private key, what does that key grant permissions to do? (upgrades?)
It sets your provider to the provider you specify... i.e. local net and your wallet
https://github.com/project-serum/anchor/blob/f68cc50e5bcb9a01ff958e41b5e15056f18d2fd6/ts/src/provider.ts#L292-L294
what does anchor.setProvider do?
rent-exemption cost = 10mb * rent/(byte*year) * 2 years = 10^7 bytes * 3500 lamports/(byte year) * 2 years = 7 * 10^10 lamports = 70 sol üôÄ
Oh, whoops, I misread your q ü§¶‚Äç‚ôÇÔ∏è Not sure why the change you made wouldn't have an affect, but yeah, rent-exempting a maxed-out 10mb account costs 70 sol üôÄ
Mm, yeah, at first glance it looks like the deployment cost is just for storing the program's code?


//////////////////////////////////////////////////////////////////////////////////////////

When I run `connection.getAccountInfo(watermelonMint.key);` I get a `null` object, although it should return an `AccountInfoObject`. Any idea why this is the case? When I look for the address associated with this mint on solana explorer, I get normal statistics (https://explorer.solana.com/address/7vLEZP5JHhKVg3HEGSWcFNaxAKg7L633uMT7ePqmn98V?cluster=devnet)

```
console.log("Watermelon mint is: ");
console.log(watermelonMint);
```
returns
```
Mint {conn: Connection, key: PublicKey}
conn: Connection {_commitment: undefined, _confirmTransactionInitialTimeout: undefined, _rpcEndpoint: 'https://api.devnet.solana.com', _rpcWsEndpoint: 'wss://api.devnet.solana.com/', _rpcClient: ClientBrowser, ‚Ä¶}
key: PublicKey
_bn: BN {negative: 0, words: Array(11), length: 10, red: null}
[[Prototype]]: Struct
[[Prototype]]: Object
``` 

any idea what could cause this?
Perhaps we can revist migrations once/if we add versioning to accounts.
I started down the path when first getting started but seemed not really necessary so I punted it.
Yea maybe we should remove it until something better is built.
The migrations feature is pretty bare-boned, `anchor migrate` will just call `migrations/deploy.js`'s export with a provider hooked up to the deploy cluster.
Hello 
Is there any examples of how to write deploy scripts in the migration/deploy.ts?
And how do I run the code?

https://github.com/project-serum/anchor/blob/master/tests/cashiers-check/migrations/deploy.js
Found it. Import useWalletModal and setVisible to true.
https://github.com/solana-labs/wallet-adapter/blob/master/packages/ui/react-ui/src/WalletModalButton.tsx#L11
I think you do that on the client side. Haven't found an example that does wrapping in program side...
thank you so much! I need to read a bit about it to get better understand of how to make the wrapping work on the program side
Spl-token library offers wrapping feature.
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L596
But I heard that wrapping sol is a better practice
that looks great and extremely simpler than I thought!
Lamports transfer example
https://github.com/cqfd/anchor/blob/lamport-transfer-example/examples/tutorial/basic-1/programs/basic-1/src/lib.rs#L21
another question; I want to allow the user to deposit SOL tokens into the program alongside other data in the same transaction.
I prefer this transaction to happen on the program side (and not on the frontend) so that the entire set of transactions happen or fail together atomically.
Does anyone have any reference for any sample (or open source) program that does something like this?
okay. thank you ^_^
afaik you cant use windows, youd need to run a linux vm
Got it! thank you so much!
ATA stands for associated token account. Your tokens live in ATA.
Thank you! and a follow up: what does ATA mean?
hello, super beginner question, can i use windows, or does anyone use windows?
Or do I have to set up linux in a vm? My laptop is windows
owner of ATA
the owner of from account.
in the `Transfer` struct: https://docs.rs/anchor-spl/0.17.0/anchor_spl/token/struct.Transfer.html
What does the "Authority" field represents?
Hello
Is there anyway to make custom connect wallet + select wallet button with wallet-adapter?
In other words, is there anyway to activate the connect wallet and select wallet popup but by function call? 

The library gives us `<WalletMultiButton />` component but I only want the popup functionality part, not the button. 

Thanks

https://github.com/solana-labs/wallet-adapter
currently i'm having to either comment out tests or change the file path in `anchor.toml` to do this
is there a way to run a single test file by specifying some flag with `anchor test`?
too dangerous
I am moving everything back to my bank account
he wants your liquidity üòõ
:-)
which protocol are you trying to break so i remove my money right now?
Cool
and i do a fair amount of poking
I will look into that
Great
Given assumptions about other txs sent in the same block
you can run test transaction with `simulateTransaction`, that is always how i poke something i don't have source for
Before sending?
Maybe you can just see what would happen if a certain tx cleared?
Maybe a sandbox is not even needed for that
the program yes trivial, but it often comes with a lot of sattelite accounts
So I can run test queries and see what would happen
yes/no
Ok new question, can I easily clone a contract in a sandbox local environment
etherscan style
no tick => bad look
So that there is an incentive to do so
also solscan
the problem is that it doesn't really show anywhere, so maybe your the solana explorer could query your service and add a tick if verified?
Even though it's quite straightforward.
Though in reality, not many people seem to do that.
In any language, it's going to be better to have the source, compile it yourself, and match the build artifact against whatever is deployed on chain. Which is what we can do with solan as well.
Right
Sure you can probably do that, but it's going to be a pain and not give you easily readable code.
I'm not much of a knower about compiled languages but my understanding is that most binaries can be reverse engineered
mmmh how would that reveal the logic?
Yeah but the instructions themselves are public info, just not human readable
What's weird? You need the source to verify.
This seems like a really weird thing to me, transparency is an important component of smart contracts in my mind
Damn yeah I don't have the source. Maybe would be more accurate to say I want to sleuth, not audit
You can use the anchor CLI for this via `anchor build --verifiable` or the docker image at `projectserum/build`. But the program you're verifiying must be built with the same image.
seems like the only sane approach right now is to audit a verifiable build
I think all the current mechanisms people use boil down to building inside a docker image.

So if you have the source, you can build inside docker, and verify the resultant binary is equal to the expected one.
https://github.com/solana-labs/solana/issues/12232 this is the only topic i know of that addresses this issue in depth. Ryoqun would be the person to ask about this in general though
At any rate much appreciated
<@867369388608061470>
Are there any other tools ppl use to inspect program logic
none
Yeah. I assume there are decompiler tools? Do you know of them?
Thanks
but it wont give you the original code only the built code
solana program dump <ACCOUNT_ADDRESS> <OUTPUT_FILEPATH>
rather how do I download the BPF
Given the address of an executable program, how do I view the actual smart contract itself so that I can audit it?
basically, doing this with a PDA rather than state macro:
```
    #[state]
    pub struct ExampleScheduled;

    impl<'info> Scheduled<'info, IncrementUnsafe<'info>> for ExampleScheduled {
        fn run_scheduled(ctx: Context<IncrementUnsafe<'info>>) -> ProgramResult {
            let counter = &mut ctx.accounts.counter;
            counter.count += 1;
            msg!(&format!(
                "{{ \"increment\": \"{}\" \"{}\" \"{}\" }}",
                counter.key(),
                counter.count,
                counter.authority
            ));
            Ok(())
        }
    }
```
if if `#[state]` is getting deprecated, is there an alternative way of implementing an `#[interface]`? since you need to `impl` it for some struct, all the examples set up a state struct and implement it for that
if i use a PDA would i just implement it for the account struct that holds my bump?
but i haven't tried it because I tried putting this in the Cargo.toml for `ido-pool` and it took effect but didn't reduce the build time:
```
[profile.release]
opt-level = 0
overflow-checks = false
lto = false
incremental = true
codegen-units = 256
```
https://doc.rust-lang.org/cargo/reference/environment-variables.html
looks like you can `export CARGO_PROFILE_RELEASE_OPT_LEVEL=0` and do some other stuff
Not sure. If you find out let me know üôÇ
do you know if there's any way to jam that info into the command line? Easier to run the Anchor tests from CI without editing them
ah
I think so!
You can set those profile settings inside your Cargo.toml, which will apply.
Ah so you don't want `cargo build-bpf` to compile release?
i just want it to compile faster for testing
as in Cargo https://doc.rust-lang.org/book/ch14-01-release-profiles.html
idk if it applies in BPF land
What does that mean?
I was thinking more like setting a dev profile
What are you looking for? Some type of `watch` comand?
is there anything we can do when `anchor build`ing to make local development faster? None of the `cargo build-bpf` flags look proming


//////////////////////////////////////////////////////////////////////////////////////////

There hasnt to be one called "lib.rs" that's what i mean
General question about .rs files: if I want to have multiple .rs files for doing some CPIs, can they be named anything in that src folder?
booo üëéüèº
more sol locked onchain = numba up <:megadab:461044728377376768>
¬Ø\_(„ÉÑ)_/¬Ø
kind of annoying though
most likely <:study:700462627880566805>
it's gotta be a security feature to permanently retire program addresses
`EQMtCuSAkMVF9ZdhGuABtgvyXJLtSRF5AQKv1RNsrhj7 | active since slot 81648000  | enable closing upgradeable program accounts`
yeh can only close upgradable accounts, went live this month
all the buffers closed fine though
yeah, just have 0.0012 SOL locked in a program I can't get back lol
which consumes most of ur sol
actually <@!168868665456984065> seems u r right <:study:700462627880566805> 

u cant close a program 
u are basically able to close the `Executable Account` for the program
hmm the address i was trying was deployed to devnet, but i guess i'll keep an eye out for that addition
U can on devnet maybe but hasn't been enabled on mainnet
U can't close programs yet 
It'll be possible in the future iirc
Managed to deploy my program(after changing to snake case) yaay
Now i've got an error that there isn't sufficient funds on the account. So airdropped some SOL, which shows up when i check with solana balance <ADDRESS>, but for some reason when re-trying to deploy it tells me that the balance is still 1.24... Did i miss a step here? thanks
yeah doesn't look like the program address is ever cleaned up, just marked closed
Actually, maybe `solana program close` just closes the "buffer" accounts associated with the program?
Yeah, hmm. Trying to see the intended behavior by source-diving.
that was my assumption, unless this is a mechanism to permanently retire addresses to avoid malicious overrides or something
Hmm, sounds like it ought to drain all of the lamports ü§î
still showing it has lamports after closing
when you do `solana program close` on a program address, is that address permanently locked?
Will do that now ‚ú®
By the way, if you wanted to contribute to anchor, this could be a good first issue üòõ
haha that's what i was doing right now, testing with snake case
Mm, funny, I can reproduce a similar error if I just do `anchor init MyFirstProject` üò¨ Guess anchor isn't handling CamelCased project names correctly? Lol, I'm kind of amazed that hasn't come up yet
I will try to make a new project to test
Here's my toml file in case it gives you a hint..
Nothing special tbh. it's Users/mynamewithoutspces/ ...
Good day! With using `close` on my accounts can I be completely sure that their state can never be reused again?
hmm I'm getting service unavailable when trying to deploy to devnet, anyone else seeing that?
Turns out this bug was due to an invalid data structure of the Keypair I was simulating.
PHEWWWWWW üòÖ
Gonna take a break lol. This is starting to blow my brains out ..
Tried a bit different as the following
```
Buffer.from(
    Uint8Array.of(
      0,
      ...pubKeys[0],
      ...pubKeys[1],
      ...pubKeys[2],
      ...pubKeys[3],
      ...pubKeys[4],
      ...pubKeys[5]
    )
)```

Still the same
So this is what I did to return an array of Buffers. 
```
const pubKeys = [1, 2, 3, 4, 5, 6].map(() => {
    const pubkey = Keypair.generate().publicKey;
    return pubkey.toBuffer();
});
```

And passed in the data field as
```data: Buffer.from([
        0,
        ...pubKeys[0],
        ...pubKeys[1],
        ...pubKeys[2],
        ...pubKeys[3],
        ...pubKeys[4],
        ...pubKeys[5],
      ]),```

But when I do it like this, I get an error as the following
It would be amazing if Discord has a feature to make conversations as a thread (and make em downloadable as a doc or something). I could have saved this as a thread and keep it refreshing all along haha.
Huge fundamental hole lol.
Wow.
Right.
So endianness matters just for numbers, not for alphanumeric characters per se?
Ahh okay.
I think he only uses endianness when dealing with *numbers*, which require them, not pubkeys
Well, depends on what you're doing with them in your program
My biggest curiosity is why did Paul choose the endianness route? If it ain't a problem?
So just pass them as 32 * 6 -> 192 bytes in sequence?
At any rate lol for pubkeys it doesn't matter, because you generally don't make the leap to interpreting them as (huge) numbers, they're just sequences of bytes
So that's what those are?
OMGGGG
But you could also have chosen to read the bytes in little endian order: 1 * 256^0 + 2 * 256^1 = 513
Right, that's *one* choice, for big endian: 1 * 256^1 + 2 * 256^0 = 256 + 2 = 258
I give up ROFL.
Ok, 0000000100000010 -> 258 üòÖ
But you can also think of it more directly in terms of bytes
Nope, the binary you wrote there is too short‚Äîthat's 8 bits, whereas a u16 is 16 bits
oops 18 I guess.
Nope üôÇ
00010010 -> 17?
For example, if I give you a u16 (two bytes), and the bytes are [0x01, 0x02], which number is that?
No, for comprehensibility
So like, why exactly do we need endianness tho? For shrinking?
And a pubkey is 32 *bytes* = 32 * 8 bits = 256 bits
A u32 though is 4 bytes, so it's big enough to require picking an endianness
Ah ok.
8 bits (= 1 byte) is too short to be little or big endian‚Äîit's just itself, 1 single byte üôÇ
I'm guessing we are kinda shrinking a number into array of little endian right? of 8 bits each?
Ahhh, shoot aight. So what exactly is happening here then?
A u32 = 32 bits = 4 bytes
So a u8 is 8 bits = 1 byte
Ah, maybe you're getting mixed up with bits and bytes here? A Uint8Array is an array of u8s (individual bytes)
Right, that's exactly what I wanna convert it.
No, each pubkey will turn into an array of length 32 (for the 32 bytes)
Sorry, never been this low level in JavaScript b4 haha.
So the length of those would be 4 then eh?
No, because the pubkey bytes are just bytes (little/big ending applies to interpreting some number of bytes as a number, but you're not doing that here‚Äîthey're just bytes)
This is tough lol.
So like I don't want to convert to LE?
I don't think you need to‚Äîit's already in the format you want, as bytes üôÇ
The .toBuffer() is not a problem tbh. It's spitting into bytes, but in 32 sized. I'm stuck where it needs to be shrunk in the form of Uint8Array Little Endian lol.
Ah, ok. If you want to ultimately turn these pubkeys into bytes that go over the wire to your solana program, I'm guessing you want to just concat some `.toBuffer()` calls
So this is how I am expecting to parcel the `instruction_data` 
0 th byte -> tag
1st byte -> 24th byte (6 PubKeys in &[u8] le)
I kinda did over the same way, but got kicked out with an error like this

Over the Paulx's tutorial a u64 was like converted to little endian integers (on the client side), so I was thinking of doing it in the same way.
Ah, ok
6 PubKeys.
Which six addresses do you mean?
and I'm trying to figure out how I can do this from the client side.
so, it's sequentially packed one after another as in total 6 addresses.
yeah
Ah, just as your own custom thing?
As 4 8 byte little endian
Well, that's how I am trying to accept over the smart contracts tho.
Ah, why not?
Yeah, that's not what I want tho.
I think it will be those 32 bytes
toBuffer reduces it's size then?
Given a PublicKey, I think you can do `myPk.toBuffer()`?
Ok, the back end is done. 
Now I'm stuck over the client side. 

So I can like create a PublicKey using `new PublicKey()`

How may I now convert this PublicKey into a Uint8Array of little endian (coz a pubkey would be 32 bytes, and I don't want that, instead it should be represented in 4 * 8 byte little endian integers) ?? 

lol
Thank you sir!
So for now, the migration files are more of like script files such as initialization after the deployment.
Hmm, that's a weird error to get since it's just rust saying it can't find the file. Do you have anything odd about your home directory? Like, spaces etc.?
You could check your anchor.toml
Jk, sorry‚Ä¶ I forgot what you needed. Don‚Äôt do that
Ok, cut it‚Ä¶ anchor test runs its own validator
I do !
Strange‚Ä¶do you have a test validation running in the background??
(and of course anchor build just before)
yep
It looks like it, did you just run anchor deploy?
Trying to anchor deploy my first program after building.. Getting this path error. Does that mean that the program path is wrong? I can see MyFirstProject/target/deploy/MyFirstProject.so in the Finder..
They definitely not cheap. 1 to start with, I think I deployed my simple programs for 2-3. It's not far off from devnet.
Just curious, do you know how much that ends up being? My understanding is that the bulk of the cost is allocating an account for your program's code‚Äîlooking at the examples, `basic_1.so` is already ~150kb, which is something like ~1 sol üò¨
Should be very similar to devnet
how much does it cost to deploy a simple program to mainet?


//////////////////////////////////////////////////////////////////////////////////////////

ahh yeah i just confused myself, trying to copy a program i created in solana in anchor and forgot i derived from my program address. thanks!!
At the end of the day you'll always have to ask the deriving program to create an account at one of its derived addresses, because that's the only thing that can sign for them.
You won't be able to init an account whose address is derived from a *different* program, at least not directly, because solana requires that address to sign the account creation‚Äîand the point of program-derived addresses is that only their deriving program can sign for them.
<@!134416332509675520> hi sorry i don't mean to @ you & it won't happen again but just a follow up on the last question i asked,

since `seeds` cant be used to validate another program pda, does that mean you also can't use `init` with `seeds` to create an account for another program as owner too?
does it happen at a random time, like how long after you've connected? or is it immediate
im not sure why this is happening. i dont explicitely disconnect, either via UI or programitcally. anyway to tell what is triggering this?
Okay, I'll look into it, thank you!
Hmm, not sure. You might have to read through https://github.com/project-serum/anchor/blob/master/ts/src/workspace.ts and see if you can spot where something could go wrong (could also just set a breakpoint in there too)
Yes, it exists
Hmm, what happens if you do `anchor build` first? Does the right IDL exist in target/idl?
and all `program.rpc.INSTRUCTION()` calls fail
<@!134416332509675520> sorry for asking it one more time, but how can I run tests on devnet with `--skip-deploy`?
Right now 
```
  const program = anchor.workspace.StakingPool;
``` 
returns an empty set
ahh gotcha, and clone that instead. That makes sense
You can add it to your `[account]`
No
üòÇ that would solve all of my problems. Was strugglingh with `clone()` earlier
Yes
Okay, so it is #[derive(Accounts)], I can change that to #[derive(Accounts, Clone)] and that implements the `clone()` functionality?
Or you can `derive(Clone)` on your account, `clone()` it in the function call and then at the end write it to `ctx.accounts.account1`?
Can't you modify them at the end of your function call?
Because I'm modifying the values of `example_account` just after the transfer
Why do you need to borrow it as mutable in the first place?
Ah, ok. I wonder if you could do something like
```.rs
let a1 = &ctx.accounts.account1;
let big_condition = a1.value == something;
if big_condition { ... } else { ... }
```
`example_account` is not one of hte accounts involved in the `transfer` if it makes any difference
this definitely works, the reason I have it structured the way I currently do is that `example_account` has quite a few attributes so it is cleaner to call it as `example_account.value1 ... example_account.value2` rather than `ctx.accounts.account1.valueXX` every time
Sure! Hopefully shouldn't need to fiddle with that command too often unless you're actively working on the cli
Sounds very complicated to me right now (just starting out and wanted to try some tutoritals) üòÖ
I'll wait till this gets fixed. But thank youu!
What happens if you just do `if ctx.accounts.account1.value == something`?
something like that
`let example_account = &mut ctx.accounts.account1
if example_account.value == something:
  ctx.accounts transfer

use example_account again down here`
Hey all, so I'm trying to do something similar to armani's escrow example but the `transfer` is based on the outcome of a conditional. The conditional is mutably borrowing one of the accounts which then blocks me from being able to call `ctx.accounts` in the transfer. Is there a common way of cloning all of `ctx.accounts` or another good work around?
Ok, looks like you currently need to use the --locked flag: `cargo install --path cli --locked --debug`. That didn't use to be necessary though, so I wonder if our clap dependency is in a funny state?
Ah, I see, thank you! I use pda's only for transferring ownership of accounts to my program, so I don't need to use it for initializing, right?
It's necessary to specify the seeds + bump here because whenever you create an account in solana, its address has to sign. For a program-derived address, you need to know its seeds + bump in order to sign.
When you do `#[account(init, payer = somebody, seeds = [...], bump = some_bump)]`, you're initializing an account that will live at the program-derived address specified by those seeds + bump.
And whether I can use it to verify mint ownership there at declaration
Oh, sorry, misread
What seeds attribute does
Oh, no
Just to make sure I understand your question, you mean what does the `init` attribute do?
<@!134416332509675520> oh, I've been wondering about what `seeds` macro is used for. Can you, please, explain what is the usecase for it in `init` up there and in general? 
```
pub struct InitStakingPool<'info> {
    // Staking accounts
    #[account(init, payer = owner)]
    pub staking_pool: Box<Account<'info, StakingPool>>,

    // Owner accounts
    pub owner: Signer<'info>,

    #[account(mut,
        // mint_authority is verified later,   !!!!!!!!!!!
        // as we can't easily get pda here
        constraint = synthetic_mint.supply == 0,
        constraint = synthetic_mint.freeze_authority == COption::None,
    )]
    pub synthetic_mint: Account<'info, Mint>,
----snip----
```

And then in an instruction I verify things like here:
```
        if ctx.accounts.synthetic_mint.mint_authority != COption::Some(pda) {
            return Err(ErrorCode::NotOwnedSyntheticMint.into());
        }
```
Though that failed when I tried it just now lol. Does no one else get errors about `clap`?
The way I do it: `cargo install --path cli --debug` from within my checkout of the anchor repo
i could be wrong though
you should be able to with just `cargo build`
I think if you really wanted to verify some *other* program's PDA, you'd have to do it manually, anchor doesn't automate this
probably should've asked sooner
I see, thanks! this had me confused for like 2 days LOL
Ah, ok, if you have two different programs here then this won't work: program-derived addresses are a function of seeds + bump, but also + the program_id, so if there are two programs floating around they'll each use their own program_id above.
if that matters
im on version `0.17.0` rn
<@!134416332509675520> i'm having a slight issue then, i have two programs one that inits an account 

```rust
    #[account(init, payer = user, seeds = [b"config" as &[u8], &seed.to_le_bytes()], bump)]
    pub config: Loader<'info, Config>,
```

and I have another program that is reading that account

```rust
    #[account(seeds = [b"config" as &[u8], &seed.to_le_bytes()], bump, owner = config_key::ID)]
    pub config: AccountInfo<'info>,
```

I call these programs right after each other so i'm using the same exact derived address for both, yet I get `0x92` error. When I remove the `seeds` field and check `&ctx.accounts.config.data` the program doesn't error out and I also can see that it's the correct address because the data is there, can you spot what i'm doing wrong?
is `#[account(seeds = [<seeds>])]`  used for validating pdas when reading also?
Okay. How do I do that?
Nothing in the CLI suite works right now.
I followed the instructions in the anchor docs
You need compile yourself, at least while correct binary will not be published üò¶
are you seeing this e.g. when you click disconnect?
<@!784251009202913321>  what command are you installing with?
Saw that this is an open issue too. Does this mean i can't do anything now? Installing anchor for the first time here
trying to install anchor but getting this error with anchor version-
Package binary version is not correct. Expected "anchor-cli 0.18.1", found "anchor-cli 0.18.0"
I'm not sure what was causing the second problem, but I think it is resolved now, yay!  Still wonder about the first one
Good day! I have a couple of problems with running tests on devnet.
First, when I try to run tests with `--skip-deploy`, `anchor.workspace.PROGNAME` returns an empty set instead of my program's idl. What can I do about it? And how can I get it manually?
```
  const provider = anchor.Provider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.OmStakingPool;
  // program is an empty set
```
Also when I try to listen for events as done  in `tests/events` with `addEventListener` tests block indefinitely either on local or dev nets, and only work on automatically generated workspace.
if you can afford it reload is cleaner
it depends what you need to read
Thanks alan. I saw in the swap program that`token::accessor::amount()` is used. Is that preferred over doing an account reload?
anybody know why i keep getting this?
I think you can do `ctx.accounts.usdc_account.reload()`
Hi, one beginner question. Is it possible to read the updated token amount from an account, after the token Transfer CPI in the same transaction?
E.g.
`let start_amount = ctx.accounts.usdc_account.amount;
... do transfer...
 let updated_amount = ctx.accounts.usdc_account.amount; // get updated amount here
`
I didn't think of that attack vector
ahh
If you could do that, everything would be hopelessly broken üòõ
So how are you going to get the private key for that?
For the PDA, the address is hashed.
But you can't do anything with it once deployed.
For an executable, it doesn't matter. You need the private key to deploy anyway.
Do you mean on the curve?
I don't think there is. I don't see why you can't just use the derived address on the curve, since you can't find the private key for it anyway.
hmm, there must be a better reason
Yeah, I think it's an interesting question too‚ÄîI've wondered the same thing. As a funny related example, `Pubkey::create_with_seed` *doesn't* ensure the result of the hash is off-curve, as far as I can see.
The unsatisfying answer, if I had to guess, is that using a bump is bullet proof and feels better. But I defer to the solana core team for the real answer.
Yup I think that is true.
I'm full of random questions today, but... Why does it matter that a PDA be off the curve? If it is on the curve, it isn't possible to derive the private key from the public one so nobody could sign for it anyway. So why do people bother with bumps?
thanks!
ahhhh!!
So if you want to have multiple signers, you need to add another layer.
Because each `&[&[u8]]` is a single signer.
i.e. why `&[&[&[u8]]]` rather than `&[&[u8]]`
why are seeds an array of arrays of buffers rather than an array of buffers?
USDC is a great coin, the market cap keeps increasing
Is it possible to read the updated token amount from an account, after the Transfer CPI (in the same transaction)?
I don‚Äôt think Anchor is the reason for USDC being up 0.15%
How is USDC up 0.15%???
Ok, thanks!
I believe USDC is just another SPL token
This may be a stupid question, but if I let my users pay in USDC, do I need to use wrapped USDC or is there a Solana native USDC token?
Thanks, so there needs to be at least 1 libs.rs correct?
Thank you! üôÇ
yes i can imagine because opening your walllet everytime to send a message would be pretty prohibited for end users. im just curious about whats possible with solana and how it would look haha
they've all been mostly ignored and unused
despite many of them winning hackathons
though to my knowledge there's been no successful chat apps deployed on solana
you can look up some messages from @ hana to see their discussion of chatroom structures
haha im just curious how it would work and the architecture for it
got it , thank you üôÇ
generally speaking i avoid "filtering" accounts but not sure how your design would work exactly
i don't really know about the chatroom stuff. There are chat examples that won previous hackathons but i wouldn't recommend going down this route if you're a beginner + chatrooms are really expensive because of how solana rent works at the moment
omg thank you so much for this, i think i was completely in the wrong direction haha 

would it be possible to then to filter those accounts either through the frontend or in the program itself?

For example if i have a chat room with users and messages , would i be able to filter users e.g. where users.chatroom == chatroomId ? So i can then get all the users who belong to that chatroom
PDAs are the way to go though for reliably keeping track of accounts
but you can have a variable in a struct on an account that indicates who its "owner" is, like how SPL tokens do it
only programs can own accounts
oh got it, my other question is then, its possible for accounts to own other accounts and reference them in the program?
don't make an account with a variabe amount of data!
ah im so confsued about the ring buffer, do you know if therers any readings i should do for this specifically? 

im trying to make an account with a variable amount of data in my program üòï
Nope just the code üôÇ
Heyy, is there a detailed explanation of this example somewhere? 

https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs
yup! there is an example in the tests folder you can use as a reference:

https://github.com/project-serum/anchor/tree/master/tests/misc/programs/misc/src


//////////////////////////////////////////////////////////////////////////////////////////

Yes. That limit is imposed by the solana runtime on CPI only, which means the limit also applies to all PDAs since they must be created via CPI.
Hmm, yeah, seems to be broken for me too ü§î
yes, consumers of the contract would need to manually construct the instructions in order to use it or have access to the IDL
> `SystemProgram::CreateAccount data size limited to 10240 in inner instructions`

<@!501570363566587905> Is it possible to create large accounts like the Bids/Asks as long as it's not an inner instruction?
is it possible to create an contract with anchor and not have a client side?
Hi, does anyone know if this tictactoe example still works for them? 

https://github.com/project-serum/anchor/tree/master/tests/tictactoe

When I  cloned it , and ran the tests it seems like every rpc call  except init dashboard / init game results in an error. 

Some of the errors im getting: 
Player 0 joins: Error: 143: A raw constraint was violated
Player x joins: Error: 302: Wrong expected state
Player o plays: 300: You are not authorized to perform this action.
Player x plays: Wrong expected state
Thanks!
I just had to `return Err(ErrorCode::ActiveVotes.into());`
The Err(ErrorCode::stuff.into()) is the same... the Result<()> is different, but when I change it, it is the same error
What do you mean???
Code from tutorial doesn't looks like your code on screenshots.

But why??? I though ProgramResult returned either nothing or an error already

It looks like I need Result<()>
https://project-serum.github.io/anchor/tutorials/tutorial-4.html#defining-a-program
Do I need to replace ProgramResult with Result<()>

Can you show the full function code and give a link to tutorial? It's hard to say what's wrong with small part of the code, especially by screenshots üò¶
It still is angry
Haha... duhhh. The tutorial I was referencing didn't have a semicolon, but thank you
`return Err(...);`


Dumb question, but how do I error out of a funciton???
<@!134416332509675520> would I be right in assuming that the first thing I do with a new anchor repo is run `solana address -k path/to/kp` and replace the pubkey in `declare_id`?
hmm, so there is no way to narrow down where the error actually occured? any tips for debugging cases like this?
thanks for this! I did indeed have an outdated version (0.13), and updating to 0.18 helped. But now I have a new problem - when I run `anchor test` I don't get any output saying the tests have passed. All I get is:
```
To deploy this program:
  $ solana program deploy /Users/ilmoi/Downloads/anchor_play_4/target/deploy/anchor_play_4.so
The program address will default to this keypair (override with --program-id):
  /Users/ilmoi/Downloads/anchor_play_4/target/deploy/anchor_play_4-keypair.json
node: --dns-result-order= is not allowed in NODE_OPTIONS
```
is this normal?

edit: the tests definitely aren't running. 

Even when I do `throw new Error()` inside one of them, I get no output. What might I be missing?
Why is this the case, when the bump can be computed on demand in the program?
I've been trying to figure out how to work use pdas, and I'm seeing this pattern of pushing the pda bump seed to clients (example https://github.com/chronologic/deep-waifu-payment-contract/blob/71ad0da3b1741fcb748ff064d897a41a0ce21056/programs/deep-waifu-payment-contract/src/lib.rs#L121)
Ah, the file it's pointing at is internal to anchor (you can find it in the anchor source), but yeah, probably not going to be super helpful to look at‚Äîit's saying the anchor cli tried to generate the idl but got confused üòî
I think one way to get this kind of error is to have a slightly out of date `anchor` cli. What does `anchor --version` say?
and another - how does one find out where in the code an error occured? because the above error is pointing to a non-existing file with at least 450 lines of code (which I assume come from macro expansion). How do I narrow down to where the error actually happend in the code?
another question - how does one find out the ID for `declare_id`? Maybe that's what I'm missing..
got past this one by adding `associated = True` before `payer = user` (no idea if correct, just going off intuition). Now stuck with:
```
thread 'main' panicked at 'Could not resolve Accounts symbol', lang/syn/src/idl/file.rs:450:22
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```
How do I create a Associated Token Account by doing a cross program invocation
getting `thread 'main' panicked at 'Code not parseable: Error("associated or seeds must be provided before payer")', lang/syn/src/idl/file.rs:337:58` when trying to run `basic example 1`. How should I debug this? Is there code I can look at?
Oop looks like I did miss it, rip!
Don't know if I'm late on this, but yeah total beginner to anything on Solana, deployed 1 small eth loot clone erc 721 contract. Watching a presentation would be really fun if you have yet to hold it.
did I miss this one? üò¶
(if i am following you -- still dont knwo what the schedule is)
following you is going to be a tough act :>
Ok this is great feedback. Thanks.
the cargo expand is really confusing compared to what most devs are using
if you have time do both, but the non anchor contract w/ enum dispatch is what most people do
I.e. using enum dispatch.
I wonder if this should be `cargo expand`ed anchor code or an actual non-anchor contract.
the thing that took me the longest amount of time was learning the abstractions as there was no one to one map üòõ
sounds good
Maybe at the end of the rust section.
Great idea.
Where do you think we should add this?
sorry i have no mic atm
lol the specific thing
no
the thing you asked about being too much magic
Whole thing?
What was too much magic?
would be really helpful so people can see the abstractions
I think having a non-anchor version and anchor version
i would hope so
your current approach is great i think
too much magic
Going to start in 5.
Probably 15 mins
what time are you out?
I am in a meeting right now!!! üò¢
<@!847130012879814668> <@!185307556032413697> hop into the voice channel
<@!134416332509675520>  I want to mint half of the connected wallets to my app, some no. of $ABC SPL tokens, and to the other half, I want to mint $XYZ SPL tokens, using typescript.

Question: is it valid to create new Token class instances for the tokens $ABC, $XYZ in the typescript code, every time just before the mint( ) function is called? 
I‚Äôm thinking to use arbitrary keypair using new web3.KeyPair( ) every time during generating the Token class instances.
I can hear this all day
I would love to listen
Cool lets do it. Hopefully we can find a couple more as well.
Meeeeeeeeeee
Any tips/documentation on how to require that signer holds an nft of a collection and in order to proceed with the transaction for anchor? Would this require cpi to metaplex program? Also curious how to ensure that the holder legitimately has nft of collection and make sure it is not exploitable?
This is great - thank you!
Alright. Thanks üôÇ Will check all the accounts one by one!
Ok, yeah, so you've got lots of these account owner checks happening‚Äînot sure I can help debug which one is failing, but any of those TokenAccounts or Mints could be the issue
Here's the context
So e.g. if you say `Account<'info, TokenAccount>` but don't actually pass something owned by the spl token program
These AccountNotProgramOwned checks run for all `Account<'info, T>`s in there
Can you post your `#[derive(Accounts)]` struct for the instruction that fails?
So here‚Äôs how I deployed: 
1. Ran  anchor build that generated a keypair in target/deploy
2. Fetched the program ID using Solana address -k path-to-keypair.json
3. Copy pasted that PID to declare_id! and Anchor.toml.

4. If mismatching of pid would really be an issue, the RPC call to the first ix handler that just sets the vars in the context should fail too right? It succeeds actually when called from the browser
There is. If you're running things in vscode, you can do this https://code.visualstudio.com/docs/nodejs/nodejs-debugging and turn on auto-attaching. You can also change your Anchor.toml file to do `mocha --inspect-brk ...` and then debug the tests in chrome by going to chrome://inspect
Ah, ok, are you using the right deployed id then in `declare_id!` and Anchor.toml? Couldn't tell from your post above if you changed them after learning your deployed id
It works well with a local test using workspace. Just fails when i call the deployed version of it on devnet from the browser
Are there any total beginners online that would like to listen to an Anchor presentation?
In general 0xa7 means AccountNotProgramOwned‚Äîit's true that having an incorrect declare_id! can cause this, but it can also be caused by having an account that's not owned by the program üôÇ Are you sure your accounts have the right owners?
Hey guys, I am getting a Program failed: custom program error: 0xa7. I searched the previous conversation here and found that it has most likely to do with some mismatch of the pid in declare_id!( ) and Anchor.toml but I‚Äôve checked and the values at both places are the same. 

1. I‚Äôm able to call one of the RPC ix handler that doesn‚Äôt do much other than setting up some vars, perfectly fine.
2. The error is thrown with another RPC  handler where I do have some constraint checks in its context. 

What might be wrong here? Please help üôÇ
But it does not work.
Well, I set the clusterapiurl as `localnet` in this way.
Gotcha okay. Thanks, I'll try looking through the CLI code for the test command to see if there's a way
There probably is, though I haven't done it.
Hmm got another question - is there a way to hook up a node debugger to the `anchor test` process to debug through the client JS test suite?
Ah I see - got it. Thank you!
1. The `counter` keypair needs to sign because we're creating an account at its address (creating an account at a given address always requires that address's signature)
2. (and also kind of 1.) The wallet implicitly signs the tx, so no need to pass it in `signers`. Because `authority: provider.wallet.publicKey`, no need to sign for it explicitly.
I'm looking through some of the tests in the basic tutorials and have some questions.

1. In the basic-2 tests, how come the `counter` keypair is passed to the signers array? I thought that since the `provider.wallet` is the payer that the wallet would be the signer.

2. Also in basic-2 tests - in the "Updates a counter". How come no signers are passed here? In the instruction for increment, it looks like the `authority` needs to be a signer. Is this implicitly passed through somehow?
Neat, ty for the help! And great job on the framework!
Exactly.
Ah I think I figured it out, I can essentially define an `Accounts` struct for a single "dynamic account" and then pass that single account as an one element array into `<Accounts>::try_accounts`
Maybe my lack of Rust experience is the issuer here, however how can I do so without making a struct for every permutation of my dynamic accounts?
Not exactly. Those attributes need to be inside `#[derive(Accoutns)]`. So instead you can make new structs for the dynamic portion.
Something like this should work right?
```rust
let mut account_info_iter = &ctx.remaining_accounts.into_iter();
#[account(owner = *ctx.program_id)]
let mint_ai: Account<Mint> = Account::try_from(next_account_info(&mut account_info_iter)?)?;
#[account(constraint = mint == mint_ai.key())]
let token_ account: Account<TokenAccount> = Account::try_from(next_account_info(&mut account_info_iter)?)?;
```
nvm this is retarded, so afaik i can only use `#[account]` on a accounts struct with static attributes. Is there a way I can use it programatically over `AccountInfo`, I want to avoid unnecessarily manually checking all constraints of accounts in the `remaining_accounts`
Yeah, I tend to just use invoke directly
Ok makes sense, so I can either see how anchor cpi maps accounts to the underlying invoke or use invoke directly
There isn't really anything anchor-specific to do‚Äîyou can see some examples if you look at how `anchor_spl` talks to the spl token program (you wind up using `invoke`/`invoke_signed`)
Also what is the best approach to call a non-anchor program via anchor CPI?
kinda like this, if I understood you correctly?
```rust
let accounts = Accounts::try_accounts(ctx.program_id, &mut ctx.remaining_accounts, &[])?;

#[account(<constraints>)]
let account = accounts[0];
```
You can one by one, if you use the `Accounts::try_accounts` trait.
can I use the macros for account constraints somehow on them?
You can pass them in on the client side via the `remainingAccounts: [...]` field in the context, which takes the bare bones AccountMeta objects.
ctx.remaining_accounts
How can I handle with anchor a variable number of accounts? for example I have an escrow service where two parties can exchange from 1-5 token accounts at a time?
may be the community can create a space calculator ü§î
thanks, it works when i add enough space
in your program file, and just experiment with how big stuff is when borsh serializes it
my bad, i'm not very comfortable with borsh thing .. yet
One way to check is to stick a
```.rs
#[test]
fn test_something() {
  ...
}
```
In general you need to just check how borsh does things
ok, but wait, how do you know how many byte it will take, how to figure it out?
So doing `space = 8 + 8 + 8 + 4 + 10 * 32` would give you enough space for up to 10 pubkeys, etc.
Seems like you aren't allocating enough space for the `VoteAccount`. It will take 8 bytes for the account discriminator (anchor thing), 8 + 8 for the trump/obama counts, and then you'll need additional space for the pubkeys in `addresses`. Borsh stores vectors as 4 bytes for the length + n * however many bytes for each elements (pubkey = 32 bytes)
Yeah, you can store whatever you want in there as long as you have some kind of serialization/deserialization strategy
How come? You can store a vec in an account just fine (borsh won't care).
Hello, I'm learning anchor and i'm trying to make a program based on anchor tutorial 1 program. It will allow people to vote . I also want to track every pubkey of all the people tha vote in an array. The folowing is what i made:
```
use anchor_lang::prelude::*;

declare_id!("7BCox2YWxLoMcWwvyBNXgkr89PKjCJD51EJRbexxQib8");

#[program]
pub mod trump_vs_obama {
    use super::*;
    pub fn initialize(ctx: Context<Initialize>) -> ProgramResult {
        let vote_account = &mut ctx.accounts.vote_account;
        vote_account.trump = 0;
        vote_account.obama = 0;
        vote_account.adresses = Vec::new();
        Ok(())
    }
    pub fn vote_obama(ctx: Context<Vote>, address :Pubkey) -> ProgramResult {
        let vote_account = &mut ctx.accounts.vote_account;
        vote_account.obama += 1;
        vote_account.adresses.push(address);
        Ok(())
    }
    pub fn vote_trump(ctx: Context<Vote>, address :Pubkey) -> ProgramResult {
        let vote_account = &mut ctx.accounts.vote_account;
        vote_account.trump += 1;
        vote_account.adresses.push(address);
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize <'info> {
    #[account(init, payer = user, space = 16 + 16)]
    pub vote_account: Account<'info, VoteAccount>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program <'info, System>,

}

#[derive(Accounts)]
pub struct Vote<'info> {
    /// Marking accounts as mut persists any changes made upon exiting the program, allowing our votes to be recorded
    #[account(mut)]
    pub vote_account: Account<'info, VoteAccount>,
}

#[account]
pub struct VoteAccount {
    pub trump: u64,
    pub obama: u64,
    pub adresses: Vec <Pubkey>
}
```
I cant get the test work specially for the vote fn and  i have no message error , just test failed. Do you guy know what i'm doing wrong here ?
I got too many error codes and I played around with it... I am now just keeping the seed in a seperate PDA
what roadblocks?
I was trying to implement what we were talking about earlier... ran into too many roadblocks so changed my approach
need more context
How come the testing framework is in mocha? Aren't the rust integration tests better?
I'm on linux so it should be supported right
hello, I'm having trouble installing anchor. I keep getting `Package binary version is not correct. Expected "anchor-cli 0.18.1", found "anchor-cli 0.18.0".`
when I fix the version I get `Package binary version is not correct. Expected "anchor-cli 0.18.0", found "anchor-cli 0.17.0".` so I can't seem to win :p
What does it mean that Error: Assertion failed
```ts
import crypto from 'crypto'
const hash = crypto.createHash('sha256').update(pwd).digest('hex')
const seed = hash.slice(0, 20)
```
Thanks
its not an anchor feature, node has a `crypto` builtin package you can use to create the hash
Sorry, noob question
What is the anchor.web3.... thing I need to call to run a sha256 hash??
Ok, thanks!
you could sha256 the string and just grab the first 20 characters
How do I get something that is 20 bytes long in JS???
For anyone wondering, this is it

```
    await PublicKey.findProgramAddress(
      [
        Buffer.from("metadata"),
        TOKEN_METADATA_PROGRAM_ID.toBuffer(),
        mint.toBuffer(),
      ],
      TOKEN_METADATA_PROGRAM_ID
    )
```
cheers <@!501570363566587905> <@!847130012879814668> and others helped us out. This is the best community
Need to use the metadata PDA
Question: Given the address of an NFT, how do we query for its metadata?
Thanks!
boom, known length
yeah just do a crc32 hash of the name of the topic or something and the seed will always be 8 bytes
ahhh i see
That is what I am doing... I just don't know how to have the voting topic be a unique PDA without passing in the seed for it from outside the contract
solves the multi-topic voting collision issue
this is purely a design issue then. take it with a grain of salt cause this is just my opinion, but if that's the case, i'd have each voting topic be a PDA, that way you can pass in the topic and voter accounts to the `init_vote` instruction and seed from the combination of the topic and voter pubkeys
So that users can vote on multiple things

So each vote needs to have a uniqe seed
That is what I am doing, but we want to be able to vote on multiple things
what about seeding from the key of the voter?
I am doing a voting protocol where each vote has its own seeds
I know... I need a new seed for each PDA I init
(bumps, yes)
passing seeds through the instruction is kind of an anti-pattern imo
Gotcha... thanks
but if you already know this, its best to have it in the program instead of passed as an instruction var
borsh can't deserialize `[u8]` because it doesn't know the length of the array. if you _know_ what the seed is and it has a constant length (for example 20 bytes), you need to use `[u8; 20]` as the type
What does that mean?
ahh if you're passing it in like that you probably need to know the size of the seed so you can establish a known `[u8]` length

What is this??
Thanks!!!!
something like that
```rs
pub fn init_vote(ctx: Context<InitVote>, seed: [u8], nonce: u8) -> ProgramResult {
  Ok(())
}

#[derive(Accounts)]
#[instruction(seed: [u8], nonce: u8)]
// ...
#[account(init, seeds = [seed.as_ref()], bump = nonce)]
// ...
```
Thank you!!!!
right now you have
```rs
#[instruction(big_nonce: u8)]
```
if you want to retrieve a seed from the instruction arguments, you need to make sure you're handling function accepts one, and then add it to the `instruction` attribute
How do I pull in seed?
you're pulling `big_nonce` and not seed

the variables you're pulling in the instruction attribute don't match
That is the lesser of my issues
Yea, intelisense says seed is not in scope
seeds are `&[u8]`

Can I pass a seed into a function for the initialization of an account like this?


//////////////////////////////////////////////////////////////////////////////////////////

got it thanks!
Maybe you can just leave off the `--upgrade-authority` arg entirely, since it's the default?
You can get more info by doing `solana program set-upgrade-authority --help` to see other options
That's make sense!
Honestly, to some extent the whole idea of passing numeric literals to a bignum constructor is kind of odd, because of precisely this issue‚Äîjavascript numbers aren't bignums.
thanks!
You'll probably need to pass that argument as a string. When you pass a numeric literal like that, you're passing an actual javascript number, and javascript numbers can only safely represent integers up to 2^53 = 9007199254740992, which is smaller than your number.
This may be a stupid comment, but I am using WSL and found very slow build times... I transitioned my files to the native ubuntu file system rather than in Windows and speeds have increased incredibly
what's the command to sign?
this command:
```
solana program set-upgrade-authority FenXtiLSWaS4J99CuASuV5acFM3NkUddkatydGnvQf7v --upgrade-authority 31tLWFGWyHn2aWNX3ryMqrAgxNLt335kZEhhoA4eK3Fp --new-upgrade-authority 6bZR8Nijh4wnP7UG5EwsCcaJyhJ581vnhKt97euZEhcE
```
bc you aint signing it
what's the command you're actually sending?
```
Program Id: FenXtiLSWaS4J99CuASuV5acFM3NkUddkatydGnvQf7v
PROGRAM_ADDRESS: FenXtiLSWaS4J99CuASuV5acFM3NkUddkatydGnvQf7v
UPGRADE_AUTHORITY_SIGNER: 31tLWFGWyHn2aWNX3ryMqrAgxNLt335kZEhhoA4eK3Fp
NEW_UPGRADE_AUTHORITY: 6bZR8Nijh4wnP7UG5EwsCcaJyhJ581vnhKt97euZEhcE

solana program set-upgrade-authority <PROGRAM_ADDRESS> --upgrade-authority <UPGRADE_AUTHORITY_SIGNER> --new-upgrade-authority <NEW_UPGRADE_AUTHORITY>
```

but it's raising a "Error: Dynamic program error: missing signature for supplied pubkey: 31tLWFGWyHn2aWNX3ryMqrAgxNLt335kZEhhoA4eK3Fp"
thanks for the tip.  I'm hoping to update the Upgrade authority from `/Users/user/.config/solana/id.json` to `/Users/user/.config/solana/localhost.json`

i am debugging a candy machine and its failing here https://github.com/project-serum/anchor/blob/0a660d26c4ae65a772d2ef76623f6c468adf1d58/ts/src/program/namespace/rpc.ts#L30 with no error message indicator. is anyone familiar with what would make that fail ?
hey guys! I am quite new to anchor. I have a quick question about new anchor.BN() function. what is the maximum value of the parameter? I met errors when the input is this new anchor.BN(16592058239843898)
Sounds like you can do it like this https://docs.solana.com/cli/deploy-a-program#set-a-programs-upgrade-authority
hey guys, how can one change the address for `Upgrade authority`?  I'm working on localhost at the moment
ok nice!! thank you ser ill get crackin on it
Cool! Yeah, for big accounts I'm pretty sure have to use zero_copy/AccountLoader (boxing won't help much since solana's heap is only 32kb)
beat me to it
ah thank you haha was gona look for an example and ask you LOL
Like this https://github.com/project-serum/anchor/compare/master...cqfd:big-account-example?expand=1
Mm, I think if you're going to use a big account you'll have to use an `AccountLoader` rather than an `Account` (pretty sure you'll blow the stack trying to deserialize the struct)
what am i doing wrong here (probably loads of things <:omegakek:883831890187018290> )
say in the pyth feed example i want the account data to be of type Counter (as in the counter example)
like when you use init the account is created by the program from the keypair pubkey afaik and you pay as a payer and the size is capped at 10kb, when you dont use init you have to create it yourself and allocate space/pay rent and include it in the tx call.. however if i don't use Init i can't seem to be able to use a struct
What do you mean by "instead of the init account"? The keypair-ness just affects what kind of address it has/how you sign, not really how you init it.
hey sirs if i use a keypair generated account instead of the init account does that mean i have to serialize/de-serialize the data myself like in the pyth example here? https://github.com/project-serum/anchor/blob/master/tests/pyth/programs/pyth/src/pc.rs
not sure if I need to `anchor new` first of I can just dump the directory in there.
I got dumb dev question. I want to include the SPL token-swap program in my project for localnet testing, what's the best way to do that? should I do a sparse-checkout into the programs directory or should I just copy externally?
Just Solana tx fees
lol what are you charging them by the account?
PDA privkeys are off of the elliptical curve that wallet generated ones have, that's what the bump seed is for. they're still in the same cryptographic function domain, but they're not derivable by the one the solana-keygen uses
I am upgrading as we speak
No... the issue was I was on Anchor 0.17 which doesn't support empty seeds
lol, this comma thing is usually from not using `declare_id`
Yep, most likely caused by RPC connectivity issue.

I still face similar issues with `onProgramAccountChange`, I just restart the node app every 10 minutes =\
Do you know if there is a benefit to splitting up funcitons across programs vs having all the funcitons in one program??? I am curious if my contract design is correct or if I am overtly overcharging my customers when they have to make CPI calls in favor of cleaner code for me
Ok... I will upgrade
Yep, need to use 0.18 I think.
Probably... I am on 17
Mm, maybe not on a recent enough version to support empty seeds like that?
Hey, what is going on here?
afaik
10MB size limit instead of 10kb
that was it. thank you ‚ù§Ô∏è
hmm when would one use normal accounts (those with keypairs) and still have them program owned instead of PDAs? When are they more attractive?
you're probably on an old version of anchor
I don't want to init this TokenAccount. Just validate that its mint and owner match what we expect
I've seen some examples that use constraints like `token::mint`, but keep getting errors when I try to replicate them. For example:
Are there constraints I can add to these macros to require that the `creditor_tokens` account is owned by `creditor` and matches the mint account:
```
#[account(mut)]
pub creditor: AccountInfo<'info>,
#[account(mut)]
pub creditor_tokens: Account<'info, TokenAccount>,
pub mint: Account<'info, Mint>,
```
I think this should be socialised, as every repo I found using these constraints have assigned `bump=instruction_argument` , where the `instruction_argument` is pushed to the client or stored in the state.
Ok ty
The syntax is funky, but you can leave out the bump by doing `#[anchor(seeds = [...], bump, other_thing = ...)]`, so no equal sign after bump. (It's apparently intended to remind you, "this isn't free", since it requires a call to find_program_address)
I haven't found one, however I usually have luck scavenging through github, so you can try that.
Is there any good repo that show casing idiomatic anchor npm usage in front end? Will be nice if it‚Äôs a larger project that involves different wallet and different network environment.
I could just do this 
```rust
#[account(address = generate_pda(seeds)]
```
but I want to avoid workarounds unless necessary.
I want to avoid using seeds as instruction arguments, as that unnecesarily complicates the client logic, and the `bump_seed` can be derived in the program when needed.
Hello, I'm going through the docs and  for derive accounts and when setting constraints for `seeds` the `bump` is marked as optional.
```
#[account(seeds = [<seeds>], bump? = <target>, payer? = <target>, space? = <target>, owner? = <target>)]
```
however when I omit it in the code I get an error
`bump must be provided with seeds`
`rustup update`  `solana-install update` Don't know about anchor cli
https://project-serum.github.io/anchor/getting-started/installation.html
anyone knows how to upgrade anchor cli version and solana version, rust version ? üôÇ
Ok after 2 super frustrating hours I fixed it. For anyone searching for this problem in the future here's what worked for me:

1. wipe out existing node and yarn installations (`nvm uninstall 16.x.x`)
2. install latest version of node (`nvm install node`)
3. install anchor/mocha related packages globally (I prefer yarn): `yarn global add @project-serum/anchor mocha chai ts-mocha @types/chai @types/mocha`
4. (!) IMPORTANT - also install `npm -g i @project-serum/anchor`, despite yarn modules being in both my PATH and my NODE_PATH, anchor wouldn't pick it up from there. So I had to also add it to npm. In other words I now have only 2 packages in npm (anchor and yarn), and the rest in yarn.

Hope helps anyone in the future...

Thanks to everyone who chimed in üôè
see https://github.com/project-serum/anchor/issues/945, tldr run `cargo install --git https://github.com/project-serum/anchor anchor-cli --force --locked` (for the NODE_OPTIONS error above)
ok this feels to me like a `mocha` issue. For some reason it's not detecting the test files in `tests/`:
<@!501570363566587905> any thoughts on the above? Tests not running neither after fresh `anchor init`, nor in the examples in anchor's own repo:(
Then you can diagnose if it's an anchor problem or a web3/rpc node problem.
No I mean `connection.onLogs`
Do you mean like a `program.addEventLisener("onLogs", (){})`? Tried this. It doesn't seem to work.
and global node packages:
here are the relevant versions:
what's a "master" cli?  I did `cargo install` as per instructions on this page - https://project-serum.github.io/anchor/getting-started/installation.html (I'm on mac)
Did you try installing the master CLI?
Still stuck with this. Did someone have a problem with tests simply not running on `anchor test`? After upgrading to 0.18 there's simply no output from testing functions, as if they don't exist. Any suggestions?
to answer my own question: use `AccountInfo`, then construct the loader via `Loader::new(account_info)`
I see, looks like we want `AccountLoader`, but that's only available on 0.18 that targets 1.8.0 (which is not available on mainnet yet)
trying to use `#[account(owner = controller::ID)]` now but I'm not sure my ID is correct in the testing environment
I'm trying to pass in a `#[account(zero_copy)]` state from another program (for read only use). `pub controller: Loader<'info, Controller>,` doesn't seem to work for me on 0.17, I get "The given account is not owned by the executing program". Replacing `Loader` with `Account` doesn't compile because the type doesn't implement `AccountSerialize`
(though I think those have been fixed for some time now)
In the past there has been issues with websockets on the rpc nodes.
Can you try an `onLogs` subscription and see if the log fires?
Facing a very similar problem. I am trying to listen to two events in my node app, The node app itself seems fine but it doesn't pick the events properly. 
Like it randomly hears a event and drops another one fired within minutes of each other.
Yes, I used `getAccountInfo` But can't find 113
<@!134416332509675520> ?
BTW another silly question, why people use `zero-copy` account?
Thanks. Let me try.
One thing you could try, just to debug, is to fetch the account with `program.provider.connection.getAccountInfo`, and just inspect the bytes to see why you've got a 113 for `stake_status` (I assume). Only have to look at something like 8 + 8 + 8 + 32 bytes before it, so not *that* tedious.
It actually might work fine, I'm not totally sure. I feel like it's not guaranteed to work, as I mentioned above: zero_copy means you don't use borsh (amongst other things), you just look at the bytes in the account's data and hope they have the right layout for the type of account they're supposed to be. At any rate, no borsh. But the way you're fetching the account on the client I think *does* use borsh, so that's a potential clash.
I am low beginner. What is `zero_copy` account?
I see. what is the reason?
You can double check this, but I'm not sure that `zero_copy` accounts will necessarily work well with the way you're trying to fetch them (with `program.account.theAccountName.fetch`). You may have to use the lower-level way, `program.provider.connection.getAccountInfo`, which will give you access to the raw bytes inside the account.
I am not sure what do you mean. üò¶
ü§¶
I must have had some silly mistake somewhere else
it's working now
son of a
Pretty sure you're going to have to manually decode the bytes in that account üò¨ Using `program.provider.connection.getAccountInfo`
To fetch All list of the campaigns.
This is invoked in the very begging of the site.
I'm not sure that the `program.account.someAccount.fetch` stuff will work with zero_copy accounts ü§î They don't use borsh but I think the `program.account...fetch` stuff does, and there's no guarantee that will work, right?
This is campaign account structure.
But ran into this error
I am going to fetch account.
I'm trying to fetch history of the value of an LP back in time. Any recommendations on where to start?
It's funny, I had never thought of the program's address as having a private key (not sure you ever use it besides deploying?), but I guess so, yeah. And right, PDAs are explicitly constructed so they don't have private keys (they aren't actual public keys)
Not really, since the address is a public key, and there's no way (if you know of one, lmk lol) to figure out the corresponding private key‚Äîand you need it in order to sign for the deployment
Thanks.
Yep.
Well, is that address same everytime?
You need to manually change the declare_id! to match the deployed address (it doesn't set it‚Äîit unfortunately needs to *match* it)
But the program id is different.
And I deploy the code.
I used `delcare_id!`
What error do you get when you try to do that?
Hmm, OK. I'll try that again, thanks.
Well,
Yeah, not sure, my rust code is taking a `Vec<Pubkey>` instruction argument (same as the account).
Maybe I'm doing something else wrong tho
That works for me if the Rust code accepts an array but isn't working for a Vec<Pubkey>
Actually, maybe I did read your question correctly haha, everything seems to work fine if I pass the pubkeys as an array, and writing them to the account works fine too.
I seem to be able to just pass them as an array, `[pubkey1, program.programId, someKeypair.publicKey]` etc. [Edit: sorry, reading too quickly, will double check how to actually write them to the account ü§¶‚Äç‚ôÇÔ∏è]
Can anyone show me the example of `solana-keygen recover `please?
Thanks.
make sure you walk through tutorial/basic-0 and all those
pay attention to the deploy command and check the output.
i used declare_id!
I can't remember, but when you build and deploy you might have a different pubkey for the program than the one that gets listed in the anchor.toml
About solana explorer.
Oh, just confirm one thing please..
sorry, it's past my bedtime and I gotta turn in, but maybe post console screenshot or something and maybe someone else can help you. good luck
yeah.
and you ran anchor deploy?
I just manualy run by `solana-test-validator -r`
well are you deploying to a test-validator, or are you running anchor tests, or what are you doing?
Yeah, I develop on localhost
your explorer is on localhost
I am confused.
if it does not exist, why solana explorer does not say `it does not exist`?
Can anyone check if this program exists?
`const pool = await program.state.fetch();`
might need to post some code
What's wrong with me?
`Account xxxxxx does not exist` error happened
I just invoke `program.state.fetch()` but
No worries, thanks for the response anyway
no, I'm still trying to wrap my head around that one still, unfortunately.
Is there client-side code for that I'm missing? My issue is I don't know how to create a JavaScript data type that will be serialized correctly and then deserialized by the program into a Vec<Pubkey> on-chain.
have you looked at the lockup program yet? https://github.com/project-serum/anchor/blob/master/tests/lockup/programs/lockup/src/lib.rs
How do I serialize something on the client side can be deserialized into a `Vec<Pubkey>` in the program?
I have a program that accepts a Vec<Pubkey> and then writes those addresses to an account:

```rust
    pub fn add_whitelist_addresses(
        ctx: Context<AddWhitelistAddresses>,
        addresses: Vec<Pubkey>,
    ) -> ProgramResult {
        let whitelist = &mut ctx.accounts.whitelist;
        whitelist.list = addresses;
        Ok(())
    }
...
#[account]
pub struct Whitelist {
    authority: Pubkey,
    counter: u64,
    list: Vec<Pubkey>,
}

```

Pretty confident I'm allocating enough space:

```rust
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = user, space = 8 + 32 + 8 + 4 + 32 * 10)]
    pub whitelist: Account<'info, Whitelist>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```

but can't figure out how to create an object in the client that can be succesfully sent to the program handler. 

I tried just passing an array of PublicKeys but that had deserialization errors, so now I'm hand crafting a `Uint8Array` of 324 bytes: the first four bytes are the Vec length and the 320 bytes are 10 public keys at 32 bytes each.

So it looks like:

```bash
Uint8Array(324) [
    0,   0,   0,  10, 141,  14,  90, 168, 147,  32, 191, 163,
  119,  14, 230, 205, 169,  73,  24, 142,  34, 248, 193, 233,
  ...
```

Now I'm getting `TypeError: key.toBuffer is not a function`.
relatable
seen so many different libs lately my head hurts
just don't remember which ones they were.
I've seen examples that use FS to import keys also. You can use web3 libs as well
if you follow the escrow example, just generate a new pubkey and airdrop: https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts
yea, that's what I got too.
Yeah honestly when I try it in my code now though I get a "Property 'payer' does not exist on type 'Wallet'" error so idk
https://project-serum.github.io/anchor/ts/classes/provider.html#wallet
thanks! why didn't I see that when I was looking at that earlier?
Oh, it's because the *wallet* property doesn't link to that page for some reason.
it looks like provider.wallet.payer implements the Signer interface https://project-serum.github.io/anchor/ts/classes/wallet.html but I'm a ts noob so could be mistaken
So when I call program.rpc.initialize within a test it deploys using the provider context, it doesn't look like there's a way to pass this default provider signer explicitly is there? for example, as the payer in a Token.createMint tx?
yeah that's my understanding, create the account (set the program as the owner when creating) and then pass it in, i think as a zero_copy account
Actually, I came here for this exact question! 
How can we allocate space to an account in anchor more than 10kb?
#[account(init, payer=user, space = 10000)] won't work. 

So - this is supposed to create a PDA then?
How do we create a non-PDA with > 10000 bytes? Would it have to be done before initializing the program? (aka not within the anchor program itself)?
ah okay thanks!
on all nets it's 10mb for an account and 10kb for a PDA inited account
is there a max space for an account on devnet? i cant seem to make an account larger than 10000 bytes
all the primitives are almost there, there's a new instruction for clearing out all the orders in the orderbook. After that it's just a matter of setting the market to closed and retrieving all the rent
daffy are you perhaps motivated enough to add retrievable market rents on serum permissioned markets?
yeh, i got serum market init working with all PDAs except the three big ones
rephrased a bit for to fit in the meme <:pepeLaugh:892381377692041277>
I just wasn't aware of it
No there was always this restriction with PDAs
circling back on this, did something change recently that I'm not aware of?
hi , does anyone know if  .to_account_info().key  can be called from zero copy accounts? 

I get the following while trying:
no method named `to_account_info` found for mutable reference
ok, just posting for posterity: 
```
yarn install v1.22.11
warning package.json: No license field
warning No license field
[1/4] Resolving packages...
warning Lockfile has incorrect entry for "@project-serum/anchor@^0.18.2". Ignoring it.
Couldn't find any versions for "@project-serum/anchor" that matches "^0.18.2"
? Please choose a version of "@project-serum/anchor" from this list: (Use arrow keys)
‚ùØ 0.18.0 
```
The npm package is currently ahead of the anchor-lang crate.
That would explain it.
anchor? npm
Or cargo installed version?
Are you using the npm version?
but why is 0.18.2 being generated when I selected 0.18.0 and that's what's published? If this is a bug I can fix
updated cargo.toml
```
Failed to obtain package metadata: Error during execution of `cargo metadata`:     Updating crates.io index
error: failed to select a version for the requirement `anchor-lang = "^0.18.2"`
candidate versions found which didn't match: 0.18.0, 0.17.0, 0.16.2, ...

```
0.17, just installed 0.18 and starting over
Though I suppose it's related since accounts are large.
This isn't serum specific though.
Ah fascinating
relevant: https://twitter.com/aeyakovenko/status/1453229972110385158
What version are you on?
No garbage collector + performance is the main reason. Given you need that, rust is attractive for other reasons (e.g. safety, ergonomics, etc)
I just init a new project using the -ts switch and anchor test fails to init the provider:
`TypeError: Cannot read property 'Provider' of undefined`

Any suggestions?
Is there a certain pattern among which types of projects use Rust as the main language?
Yep, i tried debugging it but didnt get very far haha
Awesome
the limitation. But "no eta"
yeah they said it's being removed
Maybe ask in "solana complaints department"
I thought I'll do everything with PDAs now and got rugged yet again üôÅ
It's not Anchor specific, but yes that would be true.
yeah just tested it out and you're right. So with anchor rewrite of Serum, the Bids/Asks accounts are not PDAs?
Needs to be done at a top level ix.
Not larger than 10240 bytes unfortunately.
Ok so it's *not* possible to create serum Bids totally via CPI?


//////////////////////////////////////////////////////////////////////////////////////////

Is that the system program?
Now that I think about it, I don't actually know who owns programs.
If it's a program, then the owner doesn't really need to be checked. Just the address (and that it's executable though that's kind of redundant).
But then you will need to check `owner`? `Id` trait generated by `#[account`]?
Apologies if I'm confused and derailing the question, but you can use `Program<T>` for your own program.
For you own program you need to use an `Account` instead of `Program` where `Owner` trait is used.
https://github.com/project-serum/anchor/blob/f682164addd084391d9a0b9c21ed659322d4e3a3/lang/src/account.rs#L25-L27
`crate::program::<mod-name>`.
It's generated via the `#[program]` macro.
or is the declare_id taking care of that?
is there an example of how to get the same convenience for my own program?
btw, for addresses `address` constraint is simpler `#[account(address = token::ID)]` üòâ
Yes
https://github.com/project-serum/anchor/blob/f682164addd084391d9a0b9c21ed659322d4e3a3/spl/src/token.rs#L405-L409
https://github.com/project-serum/anchor/blob/f682164addd084391d9a0b9c21ed659322d4e3a3/lang/src/program.rs#L24-L26
```
    #[account(constraint = token_program.key == &token::ID)]
    pub token_program: Program<'info, Token>,
```
Is this constraint redundant?
thanks!
new anchor.BN(n)
Hi, I'm not yet familiar with how to wrap ints into `BN`, is it something we need to execute on the shell?  The current code I'm running is a fresh clone from v0.18.0 tag (229e335)
Perfect, thanks for explaining all of this üôè
Yeah, no "past" authority here (the mint's authority definitely isn't changing)
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L2289
Ok got it, I was thinking you were referring to the past authority's public key to use as a seed for the pda; which confused me üòÖ
So if I want to send you some AlanTokens, but you don't have a particular/special place to put them, I'm going to put them in [KwengosWallet, AlanTokens] (pseudo-code), the "obvious" place to put them
An associated token account's address is based on the "logical owner" of the tokens (so, like your wallet), plus the type of the tokens (the mint).
Could you say more? Don't think I understand your question
Guys `anchor deploy` gives error `--program-id <PROGRAM-ID>`and when I put the program-id option in the command it further shows `use -- --program-id` I do this but this doesn't work as well, how can I deploy the contract?
if the PDA is based on the authority's public key (and the mint) doesn't that mean that the new account's address that will hold the mint (owned by the destination human) is based on the previous owner of that mint?
But basically yeah, you can have your program check if a destination exists, and if not go create an associated token account on the fly.
The typical approach here is to use the "associated token account" for that user + mint, which is a program-derived address based on the authority's public key + the mint (so, an "obvious" address for where to put some tokens of mint M for user U)
Yeah, good q. Basically yes, you'll need to have a real, already-created destination token account, somehow.
Do you have to check if human B has a token account and if not, create it?
This is were I'm a bit confused; if the program is transferring a token mint from human A to human B, human A will be the authority, the token account will be the from but if there isn't a token account held by human B's wallet, what can you do?
well explained thanks mate
To tie it into what I wrote above, you're asking the spl token program to do some account mutations for you (it owns the `from` and `to` accounts, and you always need to ask an account's owning program if you want to change its `.data` or spend its `.lamports`‚Äîno one else has the power to do those mutations). The spl token program will only agree to this if the `authority` signed.
The actual token account (`to` is a token account too, with the same mint).
Who's account is `from` then? the spl token program or the human's account?
Gotcha!
Right, authority might be their wallet.
So in the anchor spl token transfer struct `pub struct Transfer<'info> {
    pub from: AccountInfo<'info>,
    pub to: AccountInfo<'info>,
    pub authority: AccountInfo<'info>,
}`
authority should be the human's account right
Yeah, this is unfortunately just one of those things that's pretty confusing at first, but eventually clear from context ü§∑‚Äç‚ôÇÔ∏è
ahh `authority` ok I've seen that a few times and was also confused on who it should be
Anchor uses `authority`, e.g. `token::authority`, `associated_token::authority`, etc.
"authority", "delegate",... it's definitely a bit confusing that the official spl token term is just "owner"
cause that's not the owner then
I see, is their an other commonly term used for "logical owner" ?
Yeah, to add to what <@!788122420765917184> said, the `.owner` field on an `AccountInfo` is the *program* that owns the account (the one that is allowed to mutate its data + spend its money‚Äîin this case the spl token program). The token account's "logical" owner lives in the AccountInfo's `.data` and requires you to deserialize that data somehow to go find it.
You might want to read this blogpost to understand the difference between two types of ownership
https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/#building-the-escrow-program-alice-s-transaction
Appreciate man üíØ
https://github.com/project-serum/anchor/blob/master/tests/escrow/programs/escrow/src/lib.rs#L150
check `:tests/escrow`
or can I just pass in the public key of the mint and it can convert it ?
alright thanks! Do you have any reference/example for using that type?
Because you need `owner` not of an AccountInfo, but of Account<TokenAccount>
but the `account.owner` of an nft seems to be the token program and not the actual human holder's address
I've been using this 
`pub fn assert_owned(account: &AccountInfo, owner: &Pubkey) -> ProgramResult {
    if account.owner != owner {
        Err(CampError::IncorrectOwner.into())
    } else {
        Ok(())
    }
}`
am I right that for `events` it's only possible to collect live events using `addEventListener` and there's no way to collect historic events?
hi guys, what should i pass in array of signers(in client), if i want anybody to be able to call that function and pay the respective fees for the txn?
How do you check for ownership?
Cause when I check the owner of the nft mint, it says it's main token program id (TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA)
Is there a way to check if an nft is owned by the Signer in a program?
I think you forgot to wrap your ints into `BN`
hey guys, has anyone encountered this error when running `node client.js` on `tutorial/basic-0`
```
basic-0 git:(229e335) ANCHOR_WALLET=/user/.config/solana/id.json node client.js
Running client.
(node:82715) UnhandledPromiseRejectionWarning: Error: Non-base58 character
    at Object.decode (/user/.nvm/versions/node/v14.17.3/lib/node_modules/@project-serum/anchor/node_modules/base-x/src/index.js:111:11)
    at new PublicKey (/user/.nvm/versions/node/v14.17.3/lib/node_modules/@project-serum/anchor/node_modules/@solana/web3.js/lib/index.cjs.js:1808:50)
    at main (/anchor/examples/tutorial/basic-0/client.js:16:21)
    at Object.<anonymous> (/anchor/examples/tutorial/basic-0/client.js:27:1)
    at Module._compile (internal/modules/cjs/loader.js:1085:14)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1114:10)
    at Module.load (internal/modules/cjs/loader.js:950:32)
    at Function.Module._load (internal/modules/cjs/loader.js:790:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:76:12)
    at internal/main/run_main_module.js:17:47
(Use `node --trace-warnings ...` to show where the warning was created)
(node:82715) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)
(node:82715) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```
Hello everyone. We are planning to build a project manager application on Solana. In which there was a list of projects, and each project has its tasks. Everyone has an option to join a project if it is public. And tasks of that project should be shared between different users are those users have to update the status of tasks. Currently, we are using account data for storing that information and when we need to share that data with other users. I don't know how can I approve requests of others who are willing to join and able to share tasks from my account data to update. Any leads on data storage using Solana are much appreciated.
<@!134416332509675520> btw an update, I was able to figure out the issue. A transfer was being made to an associated token account before creating it. Forgot that the associated token addresses already exists, they just needs to be ‚Äúcreated‚Äù or ‚Äúactivated‚Äù. Used @saberhq/token-utils getOrCreateATA for it. Thanks for the help üôÇ
I installed anchor 0.18.2 and tried to "anchor init projectName", but I can see this issue. Waht is wrong?

This worked. Thanks for your help. Curious to know this wasn't necessary when using the anchor.provider's public key
Conceptually, `user` needs to be `mut` because they're the `payer`. But again, good to think through why this didn't seem to matter for some tests.
The issue here is a bit tricky, you need to mark `user` as `#[account(mut)]`. (Good exercise to think through why things worked fine for your first few tests though‚Äîhappy to explain why if you want)
Any advice to resolve this appreciated.
Code is here. Program: https://github.com/gpalrepo/crunchy-vs-smooth-experiment/blob/main/programs/crunchy-vs-smooth/src/lib.rs Test:https://github.com/gpalrepo/crunchy-vs-smooth-experiment/blob/main/tests/crunchy-vs-smooth.js
I am trying to extend <@!363246496210092035>'s crunchy-vs-smooth v2 by creating an independent counter for each user. I am able to get the everything to work for provider.wallet account but when I initialize a new account, I get the following error:   Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
I don't really have anything to share yet, I'm just going through the anchor tests (CFO is probably the hardest) and seeing how Armani sets everything up, on localnet.
I'm aware, I just want to see one that's used in production
It is just a token program transfer...
Yo! Anyone have an example of an nft (metaplex standard) transfer within a program, called by the owner?
can you link pls
TIL you really want to look at the anchor travis.yml and all of the anchor toml files to really understand what's going on. I've only been looking at the lib.rs and test.js files and there's a *lot* more going on.
I'm building everything out in a TS test script before I even start to build the program. using the anchor tests to figure out how to do that. The cfo program has examples of deploying serum dex.
thats the way I'm approaching it.
Got it. Thanks. This was super helpful/enlightening.
So any on-chain program calling the System program to create an account is a CPI?
Ahhh
But you'll hit the same cap even with a keypair address if you try to do the `init` route, from within your anchor program. (It's a bummer.)
It's for accounts that are initialized via a cross-program invocation, weirdly. So the address type doesn't strictly speaking matter‚Äîthe connection to PDAs is just that when you allocate an account that lives at a program-derived address, you *have* to do it via CPI (not possible from the client), so you necessarily run into the 10kb cap.
Other than the System program
So the 10kb limit isn't for PDAs but for *accounts* initialized by a program?
You'll also likely need to use `AccountLoader` (or maybe just `Loader` if you're on 0.17.0) because otherwise the big-ness of the account data will blow the stack (or maybe even the heap if you use Box)
Oh perfect, thanks so much!
Yep, the example I posted does that
The fact that the address is program-derived in general doesn't really tell you anything about the account itself
So I should allocate the account with a call from client to System program and then assign ownership to the program?
Accounts are the storage part, addresses are where they live
Sorry what's the difference between "address" and "account" here?
https://github.com/project-serum/anchor/compare/master...cqfd:big-account-example?expand=1
But yeah, it allocates the account with a cross-program invocation. If you want to use a bigger account than the 10kb CPI limit, you'll have to do it in a separate instruction
The PDA-ness is about its *address*, not the account (PDA = program-derived address, not account)
Does the #[account(init)] macro create a System account owned by the program or an actual PDA?

```rust
[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = user, space = 8 + 32 + 8 + 4 + 32 * 1000)]
    pub whitelist: Account<'info, Whitelist>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```

I am getting this error:
```bash
'SystemProgram::CreateAccount data size limited to 10240 in inner instructions',
```
What is the best approach to testing programs that use cpi internally with `anchor test`? Should I just deploy the dependency program on the local validator?
this is really n00b question and one that's not necessarily anchor specific; but hoping to learn about it.
- I am making an rpc call to a program handler, and the wallet balance before and after the transaction is the same; the handler doesn't create an account or do any sort of logging, CPI, etc, it only transfer lamports from a program-owned account to the signer account; does this mean this transaction is free and won't cause any transaction fees?
- If this first point is false (I find it hard to think it is true), is there a way to make the transaction "payer" be the program?
`git submodule update --init` from the root directory does the trick
they're empty when I clone

is it a submodule or something?
how do I init these directories in my git repo? https://github.com/project-serum/anchor/tree/master/tests/cfo/deps


//////////////////////////////////////////////////////////////////////////////////////////

FYI: Fixed this via: ```
$ rustup default stable
$ rustup self update ``` ... then building from source with:```cargo install --git https://github.com/project-serum/anchor --tag v0.16.2 anchor-cli --locked
```
I hid some of the fields in my Account struct and tried redeploying the anchor program onto the devnet. After doing that, my program started receiving invalid argument error. I created another exact struct and handler and that works fine. 

Is there some caching that is done on devnet that makes modifying fields Account structs that are already deployed buggy?
but i am using #account(signer) itself
Yeah, we paired for a bit‚Äîit was an issue with using anchor 0.16.0, this bug I think https://github.com/project-serum/anchor/blob/master/CHANGELOG.md#fixes-1
got a fix on this?
ohke thanks
but yet already old
but stake-v2 is more recent anchor
lol
stake-v2 is an attempt at updating it, which i gave up on
stake is what is running in production
thanks
one is just stake, other is stake-v2
What is the difference between the 2 stake repos in the project-serum github page, i am trying to implement a staking program for my project, which code should i use, it there a new one i haven't noticed, Thanks
https://explorer.solana.com/tx/5y4GGmePGaZoC9x7pR9TMkdswQviqJpUcDwpT3Uq9gJ7cV7bLKo6S3giGJAPdDynj8RbCMsx1beC3Wd95B97ypfi/inspect the raydium crank is 10 ixs, with #22 accounts
yes one tx
Deduplication for the win.
19 ix's in a single tx? Nice.
a crank
it is actually crazy when you repeat stuff, we have a program with a tx using 19 instructions, all having the same big amount of accounts
And then theoretically tx size stays constant.
Then we can just build in the init/close into a new instruction.
Hmm
so the penalty should be minimal
wrapping SOL uses sytem program
those oh so sweet address maps
need 1.8 to come in
üòí
it's already close to limits
yes and that is bad!
the only additional account is the systrem program no?
(which has to wrap üò¶ )
E.g. for a transitive swap on SOL
might hit limits though!
but 2 signatures => less cheap, but very negligeable yes
otherwise that seems fine
no need to use createAccountWithSeed if it's atomic
for the swap:
instead of relying on this shared open orders which increases convolution anyway, would it make sense to ignore existing open orders account, createAccountWithSeed always, init, trade then close it after (so no need a second keypair which multiplies the fees by two!!!)? Seems lighter than the whole other arrangement
ok
My weak guess is that getting people to migrate is a waste of time. Better to save that mental energy for the migration to the new version of the orderbook.
It's not more layers. It's state replicated to PG and served from PG.
nice
Though the next version of serum built by Bonfida will have PDAs for open orders.
lol
more layers = better solution?
Probably the better solution tbh.
I'm optimistic about that as well.
yes, tech debt forever
There's also the postgres plugin that's being worked on currently.
100%. It's just an equally big hassle to deal with the migration though. Associated token accounts took forever.
and that makes the UI quite sluggish
but this seem like a good way to reduce abysmal load on the project serum free endpoint
to close them
Maybe people can still search for existing open orders accounts
And so the UI is still required to do getProgramAccounts?
Agreed that's preferred. But then you need to get everyone to migrate.
Can create account with seed save us all to have a deterministic open orders without any change to the DEX?
the getProgramAccounts to get open orders for a user in the serum sdk seems to take ~5 seconds
So it's like an N to 1 mapping. N history events for 1 account
Scenario is: I want to track interactions with my app. I have the client pass a 'history' keypair that gets turned into an account that stores the meta data of what the interaction was.
Normally you can get around it by using PDAs.
`getProgramAccounts` is really burdensome for the RPC node so if possible, don't use it.
https://project-serum.github.io/anchor/ts/classes/accountclient.html#all
If possible, don't use getProgramAccounts. But if you really need to then, yes, there's a filter.
<@!134416332509675520> Do you happen to know if the Anchor ts library has a filter function I could use similar to: https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getProgramAccounts
Is it possible to turn off the Transaction simulation when sending a tx?
how do I create an AccountInfo in rust from and existing Wallet address? To transfer some Sols to it.
(You'll probably need to `npm uninstall -g @project-serum/anchor-cli` too so that your shell finds the cargo one)
The npm anchor-cli package doesn't work on macs unfortunately, you'll need to install the anchor cli via cargo https://project-serum.github.io/anchor/getting-started/installation.html#build-from-source-for-other-operating-systems
Hello! I'm getting this error: ```
$ anchor --version
Only x86_64 / Linux distributed in NPM package right now.
Trying globally installed anchor.
```
after installing brew, nvm, node, and rust all under a rosetta terminal, applying ```arch -x86_64 {brew|rust|nvm|node}``````npm i -g @project-serum/anchor-cli``` for each binary to accommodate the M1 chip architecture on my macbook air.
```
$ rustup toolchain list
stable-x86_64-apple-darwin
bpf
1.52.1-x86_64-apple-darwin
```
Any assistance is appreciated! : )
Ok, that tip is actually SUPER useful!! Thank you!
One tip, you can experiment with how Borsh serializes things:
```
// Stick this in your program file
// Can run it via vscode
#[test]
fn hmm() {
    #[derive(AnchorSerialize)]
    enum CurrencyType {
        Solana,
        Usdc,
    }

    eprintln!("{:?}", CurrencyType::Solana.try_to_vec());
    eprintln!("{:?}", CurrencyType::Usdc.try_to_vec());
}
```
true, i could add a `claim_prize` instruction üëç
Borsh serializes enums like that one with a single byte. So `Solana` will turn into `0` and `Usdc` will turn into `1`.
Is it actually stored as a string? So I should plan to reserve the min-length string * 8?
Noob question (I'm also new to rust): What size should I allocate for an enum type? 
`#[account]
pub struct SomeAccount {
    pub account_owner: Pubkey,             // 32 bytes
    pub storage_currency: CurrencyType,   // 8 bytes
}

#[derive(Clone, AnchorSerialize, AnchorDeserialize)]
pub enum CurrencyType {
    Solana,
    Usdc
}`
well it could work like real lotteries work. You give each entrant a pda account with its numbers. Who ever is the winner calls your program and by proving its winnings with a pda he gets the prize.
ohh this kind of throws a wrench into my plans then. I've been implementing a lottery example to learn solana/anchor (mostly based on your excellent help and examples in this channel actually haha, thanks üôè ), but doesn't that make something like a lottery impossible then? You have to store all entrants pubkeys and then transfer to the winner..?
This is the funny thing about solana‚Äîyou can't üôÉ You have to pass in every single account your program needs, no dynamic lookups allowed.
truly a beginner question: if my program stores a bunch of PubKeys, how do I then fetch the associated AccountInfo when needed (also inside the program)?
got it. works now.
Ideally the client would have some type of intelligent fallback, e.g., reading the Anchor.toml or just assuming a default path.
This is a bug in the tutorial (will make a PR if no one fixes it sooner), the client.js file expects you to have a `ANCHOR_WALLET` env var (further on you'll run things with e.g. `anchor test`, which sets it for you). Try doing `ANCHOR_WALLET=~/.config/solana/id.json node client.js` for now.
it is the client.js in anchor/examples/tutorial/basic-0
have errors running the example:

‚ûú  ~/Code/anchor/examples/tutorial/basic-0 git:(3d21d33) ‚úó node client.js
node:internal/fs/utils:634
    throw new ERR_INVALID_ARG_TYPE(propName, ['string', 'Buffer', 'URL'], path);
    ^

TypeError [ERR_INVALID_ARG_TYPE]: The "path" argument must be of type string or an instance of Buffer or URL. Received undefined
    at Object.openSync (node:fs:487:10)
    at Object.readFileSync (node:fs:396:35)
    at Function.local (/Users/dsu/Code/anchor/examples/tutorial/basic-0/node_modules/@project-serum/anchor/dist/cjs/provider.js:154:92)
    at Function.local (/Users/dsu/Code/anchor/examples/tutorial/basic-0/node_modules/@project-serum/anchor/dist/cjs/provider.js:38:35)
    at Object.<anonymous> (/Users/dsu/Code/anchor/examples/tutorial/basic-0/client.js:8:36)
    at Module._compile (node:internal/modules/cjs/loader:1108:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1137:10)
    at Module.load (node:internal/modules/cjs/loader:973:32)
    at Function.Module._load (node:internal/modules/cjs/loader:813:14)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:76:12) {
  code: 'ERR_INVALID_ARG_TYPE'
}


//////////////////////////////////////////////////////////////////////////////////////////

thank you! ‚ù§Ô∏è
You can call `.to_account_info()` on the `Signer` (and lots of other anchor types)
is there a way to convert between  `anchor_lang::prelude::AccountInfo`, and `anchor_lang::Signer`. I have Signer in the instruction accounts struct, and I'm trying to add that account as `account_infos` for the `invoke`.  
I've tried simply doing the `.into()` , but no good. üò¶

I know I can work around that with just turning it to  `AccountInfo` in the struct and adding the `#[account(signer)]`, but I thought using Signer looks a bit neater. üòâ
```
[package]
resolver = "2"
```
Maybe try mvines's suggestion to use resolver-2 https://doc.rust-lang.org/cargo/reference/resolver.html#feature-resolver-version-2
Maybe rrelated https://github.com/solana-labs/solana/issues/20761
https://github.com/solana-labs/solana/issues/21067
üòÑ
i think i'll just add a second program
i see, well if i do i am able to compile the code, but then every instruction will fail to execute with the following error:
`'ELF error: Multiple text sections, consider removing llc option: -function-sections'`
```
default = ["cpi"]
```
Add it as a default feature
I have it in Cargo toml. Do I need to enable it inside the lib res as well?
Did you compile with the feature above?
Getting ‚Äúcould not find CPI in crate root‚Äù
I see! Will do that - thanks Ser ‚ù§Ô∏è
Each of which has a 4kb limit
No you just (presumably) create new stack frames.
i see, by moving the code into separate functions, I can use the heap memory instead?
You'll need to compile with features = ["cpi"]
And dong `#[inline(never)]`
Stack overflow. Can you try extracting the code into separate functions?
Hi! My program is failing when I try to do 5-6 token transfer CPIs in the same transaction, with the error of ` Access violation in stack frame 5 at address 0x200005ff8 of size 8 by instruction #39616`. Is there a way i could resolve this?
That should do it.
`crate::cpi::initialize_distributor(cpi_ctx, ...)`
I tried CPI first but couldn‚Äôt figure out how to CPI my own program
`use anchor_lang::InstructionData` for those wondering.
Confirmed it is not so you need to import it.
Trait in prelude was the issue.
No `try_accounts` is the only way to execute the initializers. The alternative would be to cpi to the same program (and waste compute but may look prettier)
That should work. Maybe the trait is not in the prelude?
feel this is the completely wrong direction. is there another more convenient way to execute the account inititalizers, then manually calling try_accounts?
in the above example ix.data() can't be resolved. I was hoping that this method would return the instruction encoded as  Vec<u8>
```
  pub fn initialize_budget(ctx: Context<InitializeBudget>, args: BudgetArgs) -> ProgramResult {
        let ix = instruction::InitializeDistributor {
            args: args.distributor_args,
        };

        let mut remaining_accounts = ctx.accounts.to_account_infos().as_slice();

        let accounts = InitializeDistributor::try_accounts(
            ctx.program_id,
            &mut remaining_accounts,
            ix.data(),
        )?;

        let ctx = Context::new(ctx.program_id, &mut accounts, remaining_accounts);
        initialize_distributor(ctx, args.distributor_args)
    }

    pub fn initialize_distributor(
        ctx: Context<InitializeDistributor>,
        args: DistributorArgs,
    ) -> ProgramResult {
```
have been trying to use cpi to call my own program, to leverage the already defined init blocks on my other instruction and not repeat myself. somehow can't figure out how to recreate ix_data inside my instruction handler
In a perfect world, one would never use `AccountInfo` or `UncheckedAccount`.
Correct. It's just supposed to be a bit of a warning to the developer, similar to `unsafe {} ` in rust.
got it, thank you
yes, all of those account type structs are just `AccountInfo` wrappers with special behavior if warranted. `UncheckedAccount` has no special behavior or checks
oh so its basically the same thing as AccountInfo then?
Yeah ‚òùÔ∏è  It's just a wrapper around AccountInfo https://github.com/project-serum/anchor/blob/master/lang/src/unchecked_account.rs
(soon, as in when i get this PR's new e2e test passing lol)
soon there will be a `SystemAccount` struct that will be used instead of `UncheckedAccount` for 99% of use-cases
`UncheckedAccount` is a mechanism to pass in any arbitrary public key/address and it will not go through any predefined account validation checks (e.g. if you use `Signer`, anchor ensures its designated as a signing account in the context for you)
what is `UncheckedAccount` for and how is it different than `AccountInfo`?
so the question really is, what is the big difference between the anchor running the validator and solana?
yes
you said it works perfectly fine when you let anchor manage the local validator/deployment?
```
pub fn test_event(_ctx: Context<TestEvent>) -> ProgramResult {
        emit!(MyOtherEvent {
            data: 6,
            label: "bye".to_string(),
        });
        Ok(())
    }

    #[derive(Accounts)]
    pub struct TestEvent {}

    #[event]
    pub struct MyOtherEvent {
        pub data: u64,
        #[index]
        pub label: String,
    }
```
example:
```
it("Test event", async () => {
    let listenerTwo = null;

    let [eventTwo, slotTwo] = await new Promise((resolve, _reject) => {
      listenerTwo = program.addEventListener("MyOtherEvent", (event, slot) => {
        resolve([event, slot]);
      });
      program.rpc.testEvent();
    });

    await program.removeEventListener(listenerTwo);

    assert.ok(slotTwo > 0);
    assert.ok(eventTwo.data.toNumber() === 6);
    assert.ok(eventTwo.label === "bye");
  });
```
can you paste the test code
for me it seems an issue with the websockets of the solana-test-validator
the tests calls the instruction... just hangs forever waiting for the event
yes.
did you deploy the program to your local validator before running the tests?
I was running the test with `anchor test --skip-local-validator` and having the solana-test-validator running locally. 

When I tunred the solana-test-validator off and ran the tests with `anchor test` only worked.

Anyone have any idea why?
<@!464320185327943681>  can you paste the relevant code?
I am trying to catch event I am sending with emit!, with a program.addEventListener. But my tests just hang forever. Am I missing something?
any help would be greatly appreciated!
Thanks!
https://solana-labs.github.io/solana-web3.js/classes/Connection.html#onAccountChange
Can anyone point me in the right direction to how I would subscribe to receive notifications when transactions are made involving a specific solana account?
or bpf
yes


//////////////////////////////////////////////////////////////////////////////////////////

oh, exactly what I was looking for! thanks a lot. ‚ù§Ô∏è
Example https://github.com/project-serum/anchor/blob/master/tests/cfo/Anchor.toml#L29
For testing you can embed at genesis time via the Anchor.toml.
it is in a dependencies list of my program, but `anchor test` doesn't seem to deploy deps before testing
I'm looking to deploy metaplex program, so it's there when I do `anchor test`.
You can use the `--bpf-program` flag in solana-test-validator to give the program an address at genesis.
ok, another noob question... is there an example somewhere how to deploy 3rd party programs to my localnet, that I'm CPIng before tests?
Brilliant! Thanks Alan will have a peek at thag
Can experiment with it be looking at a minting example in the explorer and then snooping the chrome network tab to see what requests the page makes: https://explorer.solana.com/tx/mkCuYSvfe1boMk1q2HpbhtwsfXYFu7fj7G4LPQJLkjcqep4tUf1Y9Z7vuJ9XFAyqUvKASZYuiCeCJgoD88FuKiT?cluster=devnet
Not sure if this is the easiest way, but the `getConfirmedTransaction` rpc call gives you that information already at least sorta parsed:
given a tx ID for the minting of an NFT, I was wondering if there is a straight forward way to derive the NFT address.
Ok, guess I have to do that till the next version comes out. Thanks!
Uffff..... what a mistake lol
So it does indeed exist in the code in 0.1.8, but typescript doesn't know about it unfortunately (yet). You can still use it, just need to tell ts to ignore it probably.
Think you're running into this issue https://github.com/solana-labs/solana-program-library/pull/2484, someone forgot to add that method to the typescript types
I'm using latest version of the spl lib

Anyone know how to do syncNative in js using @solana/spl-token?

The logic is here ‚Üì
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L2250

but I cannot use it
oh, sweet ‚ù§Ô∏è
You can actually use the solana explorer on your local net, just have to put `http://localhost:8899` in the custom field in the cluster chooser dropdown
are there tools that are similar to solana explorer, but for the local net?
One slight trickiness is that when using an `init` attribute, the max size you can use is actually only 10kb, because solana restricts account allocations done via CPI (as opposed to allocating the account with a separate instruction issued by the client). If you want a big account you'll need to do it from the client unfortunately.
thanks!
It's a "lifetime" annotation: https://doc.rust-lang.org/rust-by-example/scope/lifetime/explicit.html
In the same transaction, yeah (not quite the same thing as in the same instruction unfortunately https://github.com/project-serum/anchor/pull/604)
It's allocating the maximum amount of space possible. So not surprising.
Hoping to find a coach too
gm guys, noob question.  What do you call this syntax in rust or anchor? single quote info: `'info`.  Used in struct  `pub struct Create<'info>` and variable `pub authority: Signer<'info>`
Did you ever figure out this issue? Running into the same thing.
I'm trying to deploy a simple anchor smart contract, and I have no clue what I'm doing üôÇ . I think i have it coded, but not really sure how to test it/use it. Would anyone be willing to coach me for an hour or two over zoom.  I'm happy to pay for the time&advice. Please DM me if so.
You can use a PDA with fixed seeds to get the exact same behavior.
It kind of fights against the account model.
**why was state deprecated?
will do ! thanks
ok thanks!
yes it does, you need to need handle the appropriate error or you add a check for the available supply before allowing the user to mint
Not sure but probably. Only option is to probably read the code tbh.
or does canday machine have built in feature?
im kinda noob so can u be little more explicit? that would help a lot!üòä
Can build this into the candy machine or whatever minting mechanism you use.
Deleted at the end of the tx not ix.
im thinking of using db to stopping this, but if u guys have better solutions let me know!
hey anyone knows how to stop nft minting after certain number like 1000? cuz i saw lot of project failing to mint after announced supply.
I thought if you set the balance of an account to zero, it is deleted in the same instruction, no?
So what‚Äôs interesting is a new build doesn‚Äôt trigger a new program address unless I delete/create a new key pair
hmm i dont think u necessarily need to delete the keypair, you could also change the program address but just change the program id in anchor .toml and in declare_id in the rust program
Haha update on above, I ran `rm -rf /Users/flynn/mysolanaapp/target/deploy/mysolanaapp-keypair.json` and just deleted that key-pair and things seem to work fine now!

Is it recommended to just delete that keypair when we want to deploy to brand new program address?
Running into something pretty weird. I did a `solana-keygen new --force` completely by accident and am not getting errors like:

```
Error: Program's authority Some(33yNvSPK5hEtDdzu6q13NfzMoFkectARZa4FSNhRimC9) does not match authority provided DSPHDqyyqX47wx5USdiTPhNstdFSSbqttSymA46oSPyQ
```

So, looks like my *old* program address is still being used. How can I force a brand new deploy to a new program account :o?
Yup, makes sense :).
the only downside <@!163804384193413120> to making it bigger is rent is higher (rent meaning u have to fund the account with some sol to keep it from getting cleaned up at a later epoch)
yep thats right max is 10mb currently though it may get bigger
Looks like you can allocate all the way to 10MB? Correct me if I am wrong. https://docs.solana.com/developing/programming-model/accounts#creating
if you have Vec<String> or something that you need to decide how large to make that
+ 8 bytes for the discriminator
you should set it to the struct size that you define
Changed to `#[account(init, payer = user, space = 128 + 128)]`.

Now curious -- can I make this like as big as I want? What's a decent # to set here if I'm building something like a basic chat app?
Really appreciate your help.
Yo woah!! That worked!!! SO COOOOOL.
So the `TokenAccount.owner` can be anything, but `TokenAccount.to_account_info.owner` must be `token::ID`
and when you read the AccountInfo off that, there's the actual account `owner` too
seems like the TokenAccount struct itself has an owner
i think i got a little confused
thanks!
> I am still able to authorize transactions from that TokenAccount despite the user not being an owner of the account.
correct, thats how the solana program model works. All token accounts (accounts that have token balance) are owned by the token program, and then have an authority that is the user. So the user has full control over the account. The "owner" in this context being the token program is just how it works so that program is the only one that can modify the data in the account
its possible you ran out of bytes. u only have 32 bytes
I am still able to authorize transactions from that TokenAccount despite the user not being an `owner` of the account.
does that matter if the `authority` of the TokenAccount is set to the user?
When I do a TokenAccount init with `#[account(init, seeds = ..., bump, token::authority = user)]`, the token account is still owned by the token program?
Made a lil public gist if that helps :).

https://gist.github.com/farzaa/7d6269db57044a3b85aba04535709b66
Hmmmm same deal `Error: 164: Failed to serialize the account`.
thanks
owned by the *program, you mean?
yea, by doing init, the program will try to init this account and so it will then be owned by the account
maybe try String::from("farza");
Hi, when you do `#[account(init, seeds = ..., bump]` is it implied that the account is set to be owned by the program?
OoOOo interesting.

This works.

```
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
pub struct CustomStruct {
  pub num: u64,
}

#[account]
pub struct BaseAccount {
  pub count: u64,
  pub data_list: Vec<CustomStruct>,
}
```

Then doing 

```
let cs = CustomStruct {
  num: 0,
};
base_account.data_list.push(cs);
```

But, this breaks (when using strings).

```
pub struct CustomStruct {
  pub num: u64,
  pub name: String,
}
```

Then doing:

```
let cs = CustomStruct {
  num: 0,
  name: "farza".to_string(),
};
base_account.data_list.push(cs);
```
Woah!! Going to to test rn üôÇ
you can store an array of custom structs, as long as the struct is serializable. something like this should work. I think you probably need to derive AnchorSerialize and AnchorDeserialize from the `CustomStruct` like i did below

```rust
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
pub struct CustomStruct {
  pub name: String,
  pub image: String,
}

#[account]
pub struct BaseAccount {
  pub data: String,
  pub data_list: Vec<CustomStruct>,
}
```
Gotcha -- looks like it's going to be deprecated so I'll stay away from it :).

On a similar note, I want to be able to store an array of a custom struct on the `BaseAccount` . Figured out how to store a vector of strings. Curious how I could create an array of custom structs!

```
#[account]
pub struct BaseAccount {
    pub data: String,
    pub data_list: Vec<String>,
}
```
ya - this example in particular is out of date - but yes the "program" itself on solana is stateless, but it can interact with any number of accounts which can store and persist data across transactions
Hey all! I thought Solana was stateless but I see a `#[state]` in this example an am tying to figure out how it works  -- would this store the data in the variable across different transactions? 

https://github.com/project-serum/anchor/blob/master/examples/tutorial/basic-4/programs/basic-4/src/lib.rs
yes that solved it, thank you
Ok, you also need to tell node to look for global packages (kind of surprising). You can do e.g. `NODE_PATH=$(npm root -g) anchor test`, or install the packages locally, not globally
ok, so I did that, and then ```npm install -g``` 'd a few other packages. Then it came to ```Error: Cannot find module '@project-serum/anchor'``` and i tried npm install -g on that, but it still ist complaining
Yeah, you'll need to do something like `npm install -g ts-mocha`
Well, i think I have ts-mocha 8.0... but I have mocha 9.1.3, earlier it's been causing some conflicts
i get nothing
i guess not üôÇ
Do you have `ts-mocha` installed? If you do `which ts-mocha`, what do you get?
when i try to run anchor test I get 
```Failed to run test: ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts: No such file or directory (os error 2)```
assuming you are using anchor - something like (general example) - you just have to pass the existing account in as on of the accounts in the ix
```javascript
    return program.rpc.InstructionName(args, {
      accounts: {
        counter: new web3.PublicKey(existingPublickey),
      }
    });
```
where you can get existing public key from a string like that
nvm i'm an idiot, i forgot I switched to my local validator üôÇ
That should actually work (`Mint` is smart enough to know it should be owned by the spl token program)
How can I use the `Accounts` struct to load an deserialise an account not owned my my program, for example, I want to load a mint account.
```
pub base_asset_mint: Account<'info, Mint>,
```
however this errors out as my program is not the owner of the mint account
Ah -- this makes good sense. But, been tryna hack something together that does this -- and, no dice.

Any examples of something like this?
instead of generating a new keypair, you can just pass in an existing one and the program will be able to modify that existing one (assuming it owns that account) - basically each transaction u have to list all of the accounts that the transaction may read or modify
Double checking! 

Currently following the counter code in the blog post below.

CMD + F `base_account.count += 1;` to see the program.

And, in my web app I do: `baseAccount = Keypair.generate();` 

So -- I assumed that was functioning as expected where every time I refresh the page -- the counter resets (since it's a brand new account). 

Now trying to kinda see, "Okay, how can I store the counter data on-chain such that *anyone* come in, connect wallet, and increment the counter".

https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291
https://project-serum.github.io/anchor/tutorials/tutorial-1.html#clone-the-repo when yo ufollowed the first tutorial did the data you updated disappear when you switched wallets?
you would just store the counter on chain and increment it with an increment action and then fetch the data to display it
Yeah, exactly! üòÑ
you mean you want a single COUNTER for everyone who signs
maybe i misunderstood sorry
oh
but the problem is, someone will just bot it as soon as they see this
so you would have to have your own server that pays transaction fees or something and send an api request to it
you cant because you need a signer to interact with a dapp
I have a "counter" program built w/ anchor deployed to the testnet and also have a basic react app that interacts w/ it üöÄ.

As expected, every time I refresh the page a new keypair is generated for the account and the counter is refreshed back down to 0.

If I wanted to have a "global counter" where anyone could come to my web app, connect wallet, and increment the counter, what would be the path towards doing that?
Makes sense, ty üôÇ
state is deprecated and this should be a pr to remove
Also, noticed here the docs say 

https://project-serum.github.io/anchor/tutorials/tutorial-3.html#next-steps

`Up until now, we've treated programs on Solana as stateless. In the next tutorial we will learn how to add a global state to our program.`

But the next tutorial actually goes over errors.

If anyone has an example of a how to add a global state drop it here :).
Perf -- will do :).
Have you walked through the PaulX tutorial? I would look through that first, (or 2x like I had too), then look at the Anchor/test/escrow folder to see how a client looks.
AHHH I gotcha!

So, when users interact w/ a dapp do they essentially trust creators to efficiently create accounts for them in the program? (since dapp users need to pay rent for their accounts -- yah?)

Ex -- I'm using an escrow dapp, this escrow dapp creates accounts for me, I pay rent on these accounts, I assume the dapp does this efficiently. 

(Mainly just trying to see if I have a big misunderstanding in how it all works out).
There are various types of addresses; one type is a public key, but there are also "program-derived addresses", which *aren't* public keys (may have to do some doc reading here‚Äîhappy to explain further, lots of posts about this in the discord)
Accounts are blobs of storage/lamports and live at addresses (so addresses and accounts are separate concepts in solana).
Would anyone be able to explain Solana accounts vs Ethereum addresses?

Read all the Solana docs on accounts but what's tripping me up is -- is the "account" attached to a users public address where they have one account per public address? 

Trying to create a mental model. Is the mental model of -- "a Solana account is like an ETH address, except it lets you store stuff on it like a file" correct, if so where is it wrong? Ty üôÇ


//////////////////////////////////////////////////////////////////////////////////////////

Passed it in, get the same thing
If you have some time later for a quick example i would appreciate it, i'm struggling here üôè
i git cloned the swap program from project-serum repo                                                                                                                                                                  
and i tried the verify command to verify the program deployed on Solana and my local code matches,                                                                               
 but the command returns no account found, does that mean they dont match? or something else. Thanks
Not sure if this is your problem, but I think you need to pass in the bump as an argument like here: https://github.com/cqfd/anchor-visitors/blob/master/tests/visitors.js#L25
Hi, I'm trying to implement an instruction to initialize a program like the following, but I'm not sure of the correct way to sign the transaction. I'm probably missing something obvious

Instruction
```
#[derive(Accounts)]
#[instruction(bump: u8)]
pub struct Initialize<'info> {
    #[account(
        init,
        seeds = [
            b"TestContract" as &[u8],
        ],
        bump = bump,
        payer = user
    )]
    pub contract: Account<'info, PredictionMarket>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,

    pub underlying_mint: Account<'info, Mint>,
    pub mint_a: Account<'info, Mint>,
    pub mint_b: Account<'info, Mint>,
}
```
RPC Call that fails:
```
const marketAccount = anchor.web3.Keypair.generate();
....
const tx = await program.rpc.initialize({
  accounts: {
    contract: marketAccount.publicKey,
    user: provider.wallet.publicKey,
    systemProgram: anchor.web3.SystemProgram.programId,
    underlyingMint: underlyingMint.publicKey,
    mintA: mintA.publicKey,
    mintB: mintB.publicKey,
  },
  signers: [marketAccount],
});
```

Error when attempting RPC:
```
error:
       Is initialized!:
     Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0:
 Cross-program invocation with unauthorized signer or writable account
      at Connection.sendEncodedTransaction (node_modules/@solana/web3.js/src/connection.ts:3668:13)
      at processTicksAndRejections (internal/process/task_queues.js:95:5)
      at Connection.sendRawTransaction (node_modules/@solana/web3.js/src/connection.ts:3628:20)
      at sendAndConfirmRawTransaction (node_modules/@solana/web3.js/src/util/send-and-confirm-raw-tran
saction.ts:27:21)
      at Provider.send (node_modules/@project-serum/anchor/src/provider.ts:114:18)
      at Object.rpc [as initialize] (node_modules/@project-serum/anchor/src/program/namespace/rpc.ts:1
9:23)
```
if you can't find that, swing wildly through source code for stuff.  about to hop on call - can give a solid example after.
oh shoot you already mentioned that before, sorry thanks
`from_account.try_account_ref_mut()?.checked_sub_lamports(lamports)?;`
I think I got what you were saying about PDAs, thanks for the explanation. How would you do this in anchor tho, `AccountInfo` doesn't seem to have the `checked_` functions you mention and google gives a whole 3 results üò¨
Very cool, thanks for explaining that üôè
Having the debited accounts' address sign is a requirement of the system program - not a requirement of Solana .  <:mindblown:334058415385083911>
No signer needed - your program owns the Lottery account so it's allowed to debit it, signature or not.
yep, just use `checked_sub_lamports` and `checked_add_lamports` on a mutable reference to the accounts' data.
Thanks for the response! I'm really new to solana so this goes a little bit over my head right now, but I'll dive into the things you said. For reference, I'm just trying to build a simple lamport lottery example for learning, it fails in this claim_prize instruction:
Mm, interesting!
and if there is data allocated, it must be in "allocated but pre assign" state - because there is simply no reason for a system program owned account to have data.
If your program owns the account, it'd hit an error right after that when system program attempted to directly debit an account it doesnt own.
Huh, I wonder why solana has that "must not carry data" restriction
If you're fiddling with lamports on an account with data, I assume that your program "owns" it.  Thus, you can just debit the lamports directly - no need to use the system program. 
`from.try_account_ref_mut()?.checked_sub_lamports(lamports)?;`
<:mindblown:334058415385083911>
see runtime policy as described here: https://docs.solana.com/developing/programming-model/runtime#policy
note, you have to credit an account the same amount, or your operation will fail. One check not described in that runtime checks section is that with regards to lamports, credits - debits == 0
oh thank you!
any suggestions on setups here?
it appears that a PDA with data can receive lamports, but not send it, is that correct? I got ```Transfer: `from` must not carry data',``` when using `invoke_signed`
No it did not make sense, I wanted to check the ownership of a passed account, that might have been unitialized
which line are you talking about?
Else I'll just fallback on AccountInfo, I'm pushing üòÅ
`owner = Pubkey::from_str(metadata::METAPLEX).unwrap() || Pubkey::None`
Or maybe there is a way to represent that condition (ADDR || None) in a anchory way?
yes
Thanks for this morning help, did solve my issue. No I have another issue, is that when I pass a mint that does not have metadata, there is an ownership check that fails for this `Account`, was that why you suggested to use `AccountInfo`?
ser
or deserve it
if you bought a MAC you can afford it
go and rent a server and use remote IDE
so basically, re do everything but on rosetta
solana doesn't support ARM
üò¶ here we go
This was published just a few days ago and does a full walkthrough: https://dev.to/nickgarfield/how-to-install-solana-dev-tools-on-an-m1-mac-kfn
No, kidding, you haven't set up solana correctly (it's tough on an M1). Are you building it from source?
Godspeed
yeah
M1 mac?
```
‚ûú  meme-num solana-test-validator

Ledger location: test-ledger
Log: test-ledger/validator.log
‚†ô Initializing...
[1]    53232 illegal hardware instruction  solana-test-validator```
any advise on: `Unable to start test validator`?
That's basically the anchor way (at the end of the day you need to use invoke/invoke_signed one way or another). You could wrap the calls though, like how anchor wraps the spl token program? https://github.com/project-serum/anchor/blob/master/spl/src/token.rs
Hi Friends. Any idea how I can call programs that are not built with Anchor. I am trying to use Metaplex's metadata program. At the moment, I am using Solana program's invoke and it works perfectly fine. But I am trying to find a way to make it the 'Anchor way'. Any suggestions?
interesting
Yep. Another funny example of the solana thing where you need to pass in *every* account you want to use, including accounts for programs you're going use via a cross-program invocation‚Äîand creating an account requires CPI'ing to ask the system_program to create the account.
The error is a little opaque, it gets raised by the code generated by the `#[derive(Accounts)]` macro
that solved it
why do i need to do that tho?

initing accounts require system_program?
You're doing something (init-ing an account?) that requires that you pass the `system_program` as an account
```error[E0425]: cannot find value `system_program` in this scope
  --> programs/meme-num/src/lib.rs:15:10
   |
15 | #[derive(Accounts)]
   |          ^^^^^^^^ not found in this scope```

why am i getting this issue?
Huh, yeah, looks like you do (I guess because Loader gives you `load_mut`?)
Thanks
Ok I think I was doing something that did not make sense. I was using loader, but I'm as good using Box<Account<'_, Metadata>> ? Now having some issues so maybe I better fall back on AccountInfo and deserialize myself
Humm
not sure if that works when the root isn't a workspace
or link the github folder as a crate
Yep agreed
since this isn't a crate
Thing is I was blowing the stack, seemed like a good idea, but now it does not anymore
just copy pasta the struct and traits
no point forcing it in another abstraction
Seems like a good suggestion, thanks ser
I've rewritten a matching zero copy version, not sure if that's correct, might also be my issue
just the struct they do have for metadata
no Loader, no nothing
you'd be better off loading the data yourself
I don't believe it matches the zero copy
When using `Loader` do I need to be the owner of the account? I suspect I have to but I'm not sure, I'm trying to load the metaplex associated metadata account
see this https://www.notion.so/Debugging-Custom-Anchor-Errors-b8540dd418c44a4e939ab17c56a3fd3b
Hi, who pays the fees when doing a transfer, is it the signer? I am writing a function where a user transfers tokens to a token account owned by a PDA. I have marked the "user_account" as signer and included their token account in the ctx arrays. I am generating a keypair in the js file to act as the "user_account". When I try to get them to sign the transaction I get |``Error: failed to send transaction: Transaction simulation failed: This account may not be used to pay transaction fees``Am I making an error in the account constraints or in the keypair assignment here? Do I have to do more than just mark the account as signer and have them sign on the js side?

Running client.
Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7 
    Program 5cai2qmwd3cdttepNRRmyxF5C8hUewdAYr9ECyu4nmLT invoke [1]
    Program 11111111111111111111111111111111 invoke [2]
    Program 11111111111111111111111111111111 success
    Program log: Custom program error: 0xa7
    Program 5cai2qmwd3cdttepNRRmyxF5C8hUewdAYr9ECyu4nmLT consumed 9003 of 200000 compute units
    Program 5cai2qmwd3cdttepNRRmyxF5C8hUewdAYr9ECyu4nmLT failed: custom program error: 0xa7
Translating error SendTransactionError: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7
but i get this error
so i did this :
1- cd anchor/examples/tutorial/basic-1
2- anchor build
3- anchor deploy
4- npm install @project-serum/anchor
5- solana airdrop 100
6- ANCHOR_WALLET=/home/ADev/.config/solana/id.json node ./client.js
I read tutorial-1 and test, it's work fine with test command but i can not connect to program ( smart contract ) with my client.js file
what is the right way to get a `TokenAccount` (anchor_spl) from an `AccountInfo`?
got that via solana logs. but got another error, trying to debug what's inside user. getting this `anchor_lang::Signer<'_>` cannot be formatted using `{:?}` because it doesn't implement `Debug`
ahh thanks, that's a toughie
If you want to transfer data across CPI, you need to write data into an account and read that on the caller end.
Unfortunately you can't get the msg log on that end.
at the CPI caller's end
yes
Do you want it inside the smart contract on the caller end?
Sorry for the noob qn haha
How do I get the error message from: `solana_program::program::invoke(&ix, &account_infos);`
Yes. They are in `.anchor/program-logs/`
maybe similar question to jerry haha
hey guys! glad I've found this discord! I am in need of some help. how to I show msg log from rust in anchor test? is it possible?
You have to log a message and parse the log.
Right now I am getting only failed: invalid instruction data from CPI, but that's hard to debug.
Hi, does anyone know how to return error messages from a CPI call?
Hey guys,
I'm trying to deploy a contract that i've edited to devnet to test my proposed changes. I've made my edits, and then have done:
```
$ anchor build
$ anchor deploy --provider.wallet ~/.config/solana/id.json
Deploying workspace: https://api.devnet.solana.com
Upgrade authority: /home/tags/.config/solana/id.json
Deploying program "nft-candy-machine"...
Program path: /home/tags/metaplex/rust/target/deploy/nft_candy_machine.so...
Program Id: GQgW23ZreWERRBamQisC1cXjHfgKd77E1XrE1N6pw5Wn

Deploy success
```
Now i'd assume that i was good to go, but when I update my dapp to use this ProgramID vs the original's, we fail at fetchIdl.

If I run the anchor command, i get this:
```
$ anchor idl fetch GQgW23ZreWERRBamQisC1cXjHfgKd77E1XrE1N6pw5Wn 
Error: Account not found
```
but i can't seem to figure out what i'm missing from deployment for the not found message.


//////////////////////////////////////////////////////////////////////////////////////////

thanks man
The discriminator is always at the start
For now
is 0 to 8 the correct slice, always?
I dont care about the amount right now, just trying to send sol in JS
Or however much that 50000000 number is in sol
Here is my code. I just want to send 1 sol to my wallet in localnet

Are you waiting for the airdrop to confirm? There's a nice code snippet above with `provider.connection.confirmTransaction` in it. Tbh I'm a little fuzzy on when it's necessary to wait confirmations like this though.
*do
Weird... I just airdroped that account some sol... still getting the error. I'll play around and see what I can dio
Does this mean the account I tried to send money has never received money before?
Unhandled Rejection (Error): failed to send transaction: Transaction simulation failed: Attempt to debit an account but found no record of a prior credit.
anchor keys list is better haha
yeah just solana address -k "path to keypair of program" and copy that inside declare id
Now they match. Excellent!
Yep, that was it, I had not read the key in correctly initially
TY!
I believe anchor stores keypairs used to generate the pubkey for the program to be deployed, which are stored under `target/deploy/yourprogram-keypair.json` -- so perhaps you could try to replace that keypair with the one that you used to generate the pubkey stored in the `define_id!`?

also, you can check what keys are loaded using `anchor keys list`
Any assistance is appreciated!
Anchor deploy seems to deploy to the same address each time on the recent versions of anchor, but it 's not the same address as the "define_id!" macro.
Does anyone know the anchor cli params in order to deploy a contract to the address specified by "define_id!" ?
Hi, quick question:

Sorry, I guess this is a general Solana question, but if anyone is curious, this is what I found
<@!501570363566587905>
i am trying to use serum_swap 0.4.0 and this error comes up, what to do

Does anyone know how to transact 1 Sol between wallets completely in the anchor JS
I would expect that to work, yhes.
should I be able to decode instruction data as easily as this `coder.instruction.decode(ix.data)`?
somehow I am getting different `sighash` from `ix.data` and `coder.instruction["sighashLayouts"]`

to verify I am doing this
```
  let sighash = bs58.encode(ix.data.slice(0, 8));
  console.log(sighash);
```
damn that was it. I had updated to 0.17.0 in my `package.json`. Didn't think to upgrade the CLI version as well, but doing that resolved this. Thank you!
Aha, what does `anchor --version` say?
Yes
https://support.solanium.io/support/solutions/articles/69000377685-error-processing-instruction-1-custom-program-error-0x1#:~:text=If%20you%20receive%20the%20error,to%20pay%20for%20transaction%20fees.
Do you have 3 devnet sol in the wallet you are deploying from?
Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
oh wow! good call. Yeah it has `isSigner` set to `false` for `alice`
i have 3 sol
One thing you can double check is the target/idl/faktor.json idl file and make sure it says that `alice` has `isSigner: true` (if it doesn't, then your anchor cli is doing something wrong during the build step)
I've gotten that error before'
Ususally mans you don't have sufficient funds
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
do you have problem with deploy on devnet or i just have problem ?
Your test actually passes on my machine, is that expected?
I think the general question (which I've seen pop up a few times in the Discord) is around what the best practices are for testing programs that require different signers for different transactions.
But I've only ever been able to get the test to pass when the `alice` param in `accounts` is set to `provider.wallet.publicKey`. If I try to sign the transaction from another account (like Alice or Bob), the transaction complains that the signer is unknown:
```
  1) faktor
       Creates a counter:
     Error: unknown signer: 9qX4omJtUxFo3rGWxfPGWCwfe58QNvGKbbTFpYXRZirj
      at Transaction._addSignature (node_modules/@solana/web3.js/lib/index.cjs.js:1106:13)
      at /Users/garfield/Developer/faktor/node_modules/@solana/web3.js/lib/index.cjs.js:1080:12
      at Array.forEach (<anonymous>)
      at Transaction._partialSign (node_modules/@solana/web3.js/lib/index.cjs.js:1077:13)
      at Transaction.partialSign (node_modules/@solana/web3.js/lib/index.cjs.js:1068:10)
      at /Users/garfield/Developer/faktor/node_modules/@project-serum/anchor/dist/cjs/provider.js:82:16
      at Array.forEach (<anonymous>)
      at Provider.send (node_modules/@project-serum/anchor/dist/cjs/provider.js:81:14)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at async Object.rpc [as createCounter] (node_modules/@project-serum/anchor/dist/cjs/program/namespace/rpc.js:11:31)
      at async Context.<anonymous> (tests/faktor.js:28:5)
```
And the test looks like this:
```js
const assert = require("assert");
const anchor = require("@project-serum/anchor");
const solana = require("@solana/web3.js");

const { LAMPORTS_PER_SOL } = solana;

describe("faktor", () => {
  // Setup test environment
  const provider = anchor.Provider.local();
  const walletAlice = anchor.web3.Keypair.generate();
  const walletBob = anchor.web3.Keypair.generate();
  const program = anchor.workspace.Faktor;
  anchor.setProvider(provider);

  // Aidrop SOL to Alice and Bob.
  before(async () => {
    await provider.connection
      .requestAirdrop(walletAlice.publicKey, LAMPORTS_PER_SOL)
      .then((sig) => provider.connection.confirmTransaction(sig, "confirmed"));
    await provider.connection
      .requestAirdrop(walletBob.publicKey, LAMPORTS_PER_SOL)
      .then((sig) => provider.connection.confirmTransaction(sig, "confirmed"));
  });

  it("Creates a counter", async () => {
    const counterKeypair = anchor.web3.Keypair.generate();
    const bnAmount = new anchor.BN(1234);
    await program.rpc.createCounter(bnAmount, {
      accounts: {
        counter: counterKeypair.publicKey,
        alice: walletAlice.publicKey,
        bob: walletBob.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      },
      signers: [counterKeypair, walletAlice],
    });

    // Validation
    const counter = await program.account.counter.fetch(
      counterKeypair.publicKey
    );
    assert.ok(counter.count.toString() == "1234");
    assert.ok(counter.alice.toString() == walletAlice.publicKey);
    assert.ok(counter.bob.toString() == walletBob.publicKey);
  });
});
```
I don't think it's making it that far. The error is getting thrown from `Transaction.partialSign` when adding the signatures. The contract code is setup like this:
```rs
use {
    anchor_lang::prelude::*,
    std::cmp::min,
};

declare_id!("8BHW97BHkSKUHjTxHd6g7eGRfLxQfmXniEMcAskxQTKi");

#[program]
pub mod faktor {
    use super::*;
    pub fn create_counter(ctx: Context<CreateCounter>, initial_count: u64) -> ProgramResult {
        let counter = &mut ctx.accounts.counter;
        counter.count = initial_count;
        counter.alice = *ctx.accounts.alice.key;
        counter.bob = *ctx.accounts.bob.key;
        return Ok(());
    }
}

#[derive(Accounts)]
pub struct CreateCounter<'info> {
    #[account(init, payer = alice, space = 8 + 8 + 32 + 32)]
    pub counter: Account<'info, Counter>,
    #[account(mut)]
    pub alice: Signer<'info>,
    pub bob: AccountInfo<'info>,
    #[account(address = system_program::ID)]
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Counter {
    pub count: u64,
    pub alice: Pubkey,
    pub bob: Pubkey,
}
```
Is it signing the transaction?
Updated to 0.17.0 and using the `Signer<'info>` syntax now. But still running into an issue when the signer isn't recognized if they're not the `provider.wallet` account. 
```
Error: unknown signer: 7U39RyZDpmo4AKa39GUZF1HahqHa9rcsYiZNLiATK5qu
      at Transaction._addSignature (node_modules/@solana/web3.js/lib/index.cjs.js:1106:13)
```
In particular, trying to write tests for a program where different instructions have different intended signers. My tests currently use `anchor.web3.Keypair.generate()` to generate wallets for Alice and Bob roles and then airdrops them some SOL before trying to submit transactions. But these wallets don't seem to be recognized as valid signers for some reason.
Try 0.17.0
ah! `v0.16.0` right now. Will update and try again! Thanks
What version are you on?
when writing tests, I keep running into the `Error: unknown signer:` error when using `Signer<'info>`. After switching over to the `#[account(mut, signer)]` syntax, those issues resolved but then I began running into issues with CPIs: `Cross-program invocation with unauthorized signer or writable account`
There is no difference. The `Signer` type is preferred though. Ideally programs have no usage of `AccountInfo` since it's more error prone.
<@!367907046177112064> I have had that question too. Does someone know?
What is the user of the user of the `Signer` type? Is there any difference between doing this:
```
#[account(mut, signer)]
pub user: AccountInfo<'info>,
```
versus this:
```
#[account(mut)]
pub user: Signer<'info>,
```
Try this:
```
anchor idl fetch cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ --provider.cluster Mainnet
```
Have you initted the IDL?
Error: Account not found
anchor idl fetch cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ
who can get idl with command ? only owner ?
why ?!
Error: Account not found
anchor idl fetch
Got it, many thanks
See the rust client here as an example of how to use those types https://github.com/project-serum/anchor/tree/master/client
Yes the types needed are all generated via the macro.
I'll read both then
If your program owns the account you're decrementing, fwiw, it's easier, no need to CPI, you can just snag some lamports and move them: https://discord.com/channels/889577356681945098/889702325231427584/894620241945055262
ah I should have searched the channel first, thanks man
I do lol, from a few days ago: https://discord.com/channels/889577356681945098/889702325231427584/893186284888129546 This is an example of transfering lamports from an account not owned by the program, so it has to cpi to the system_program to do the transfer.
Does anyone have an example of a contract that does a lamport transfer?
ah okay that clarifies things, thanks!
is there a way for code to be called when the system program transfers SOL into an account? (an obvious way to do it is to poll the balance, but I'm wondering if there is something more efficient I can do)
What is a good way to generate rust binding for IDL file? I know we can trivially read it and build client using JS, but is there anyway to do it in rust? Say we want to build a CLI in rust
You mean necessary for the rcp call to work?
not "helper", necessary steps
Ah, those are a helper feature‚Äîthey're a bunch of extra instructions that will run before your actual rpc instruction (so the overall transaction will do <all the instructions> + <your rpc>)
they seem to be unrelated to the function being called..
what about instructions as in here
thanks!
Signers lets you sign the transaction using the private key of one of the accounts you're passing in.
Accounts are on-chain storage that live at addresses (public keys). When you use accounts from web3.js, you're referencing on-chain storage that your program will need‚Äîan odd thing about solana is that you have to pass in *all* on-chain storage/accounts your progarm needs, from the client (as their addresses), no dynamic lookup of on-chain storage allowed.
where can i find more information about accounts, signer and instructions? (i see them being passed on solana web3js but not sure about their roles)
i see. i tried that. is this working as expected?
Do you mean the test validator? ``solana-test-validator``
how do you run a solana cluster locally?
thanks haha
the timing
const info = await provider.connection.getAccountInfo(first_user.publicKey);
`await provider.connection.getAccountInfo(somePubkey)`
err how do I get accountInfo from a pubkey? I just want to check how many lamports an account has in anchor test
<@!501570363566587905>  <@!124564013970358272>  can you check this ?
<@!847130012879814668>  do you have any suggestion ?
not working, what happen for you ?
Sorry man... I tried
It is still bugging out?
i set it but not working, it's bug
or you can set the env var in a .env file
so ? what is problem ?
yea
i'm run the client.js with this command ANCHOR_WALLET=/home/ADev/.config/solana/id.json node ./client.js
Yup, that's it
I'm checking though
Ok, you need to set an env var to that keypair path... I think its ANCHOR_WALLET
solana config get ? yes it's return default keypair
Does that return a path?
(I think... I'm looking for the exact comand)
Oh, you are running client.js. Haha, sorry. You need to find what your default keypair is by running solana config get keypair
the test command work fine
check this code ! it's not working
This is just a stab... I don't have all your code in front of me... but that is my guess
Ok, what I think I had to do to get it to work is call myAccount in the scope above the first it(). The problem when I ran it was myAccount went out of scope after the first it() then when the second it() tried to get the same myAccount, it wasn't there. I think that's why you are getting that error. I am pretty sure it's just a JS thing
in my client.js ? Yes, not working
Do you also run the second test as in program.rpc.update later in the JS code
i explain more details here

<@!751115771786035273> What does your JS code look like?
<@!134416332509675520> It looks like your error handling PR is working!!!!
why i get this error in Tutorial-1 ? "Error: 167: The given account is not owned by the executing program"
yeah like you said, you have to do both for the lottery account as well as the claimer so everything adds up at the end
Obviously in your case, `checked_sub`
Fantastic, that was it, thanks a lot üôå
That's a coincidence, because the `provider.wallet` is paying for the transaction *and* you're using it as the `payer` for the rent exemption. Two different payments.
Hey all, are there any example programs / projects? not necessarily a tutorial but just some "cool" stuff we can build on the blockchain

e.g. build x in anchor

im just getting into web3 (from a strong web2 background) and looking for small-ish projects to build / practise on
Thanks, that makes sense. So you need to mutate the signer to transfer SOL. However, when I removed the the attribute the tests still work. Is that just a symptom of the testing environment?
Because the account is used to pay for the rent exemption SOL for the account being `init`ialized.
I was going through the Anchor exampls, basic-0, basic-1, etc. I noticed that each example added the `mut` attribute to the signer account. However, none of the examples ever modify that account. Is there any reason that is being done in the examples or is it simply an oversight?
```
        let lamports = the_acct_info.try_borrow_mut_lamports()?;
        **lamports = lamports.checked_add(amount_to_add).unwrap();
```
Got this one üôÇ
documentation for Rust for kicks as well
https://docs.rs/anchor-lang/0.17.0/anchor_lang/
Thank you very much
It's not great, but best we got
https://project-serum.github.io/anchor/ts/index.html
oh okay thanks, btw where can I find the documentation for these commands?
You can then airdrop the second account lamports and it can pay for whatever you want
No, look at the code. It generates a keypair with a public key and private key
This only generates a public key right? Can this account still sign and pay for a transaction?
Do you have any example of transfer sol with program ? i want to transfer 1 sol to program then divide it and send to 2 wallet
<@!96804729597734912>
create a const secondUser (or whatever) = new anchor.web3.Keypair,generate()
Okay, thanks
*yourself
I just went through and you are right. Sorry. I don't know how I know that then, but I do know that's what you should do... test it out yourselv
Excuse me, if I am trying to simulate a second paying user for anchor test, how should I do it? I have used provider.wallet.publickey to sign the first transaction and want to use a different user to sign the second.
You will change it to your program id after you deploy it
i read all tutorials ! but i did not see anything about it, where you see it ?
Not really, just follow the tutorial. It tells you when to change declare_id!(asdfasdfasdfasdfasdhfasdf)
Aha, so we can not remove it ? or change it ?
And, yea. It will be in every anchor program
is there any document about this ?
No, don't worry about it now.
i should remove it ?
this is in Tutorial Examples
but this is in my program ! i have this before deploy !
If you fail to write it down or something
The deploy will let you know what the id is. Also, there is a json file it spits out that also has the id
That is where after you deploy your project, you put its id
what this mean ? declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");


//////////////////////////////////////////////////////////////////////////////////////////

What do your errors look like?
i want to send "all" the NFTs from one wallet to another
no, it was created days ago
anchor idl init -f <target/idl/program.json> <program-id>
before fetch, first must create account and save idl on it
Okay
If you find the answer to your problem, will you post it? I'm curious now
This one is above my paygrade. I haven't done much with the anchor cli... just anchor test, anchor deploy, and stuff like that
$ solana account DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU

Public Key: DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU
Balance: 0.00114144 SOL
Owner: BPFLoaderUpgradeab1e11111111111111111111111
Executable: true
Rent Epoch: 0
$ anchor idl fetch DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU
Error: Account not found
no i try to get idl in terminal
So is your problem that you are trying to access the program in your JS through the idl and you are getting an error?
$ anchor deploy
Deploying workspace: http://127.0.0.1:8899
Upgrade authority: /home/ADev/.config/solana/id.json
Deploying program "basic-0"...
Program path: /home/web-request/program/basic-0/target/deploy/basic_0.so...
Program Id: DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU
deploy on localnet
Is that program one deployed on devnet or is it your custom program?
So you are trying to send an NFT created 1 sec prior to another wallet? is fromWallet a keypair?
why it's not return json ?
anchor idl fetch DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU --provider.cluster localnet
Error: Account not found
Program Id: DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU
this is out put of "anchor deploy" command
Does my code even make sense?
and also not why it's failing quite often at the getOrCreateAssociatedAccountInfo part.
I do not really understand why it creates two transactions
```myMint = new web3.PublicKey(token['mintID'])
var myToken = new splToken.Token(
        connection,
        myMint,
        splToken.TOKEN_PROGRAM_ID,
        fromWallet
      );
      // Create associated token accounts for my token if they don't exist yet
      try {
        var fromTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(
          fromWallet.publicKey
        )
        var toTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(
          toWallet
        )
      }
      catch (e) {
        console.log('timeout(?) while getOrCreateAssociatedAccountInfo. Retry. Error: ' + e)
        break;
      }
      // Add token transfer instructions to transaction
      var transaction = new web3.Transaction()
        .add(
          splToken.Token.createTransferInstruction(
            splToken.TOKEN_PROGRAM_ID,
            fromTokenAccount.address,
            toTokenAccount.address,
            fromWallet.publicKey,
            [],
            1
          )
        );

      try {
        // Sign transaction, broadcast, and confirm
        var signature = await web3.sendAndConfirmTransaction(
          connection,
          transaction,
          [fromWallet]
        );

      }
```
So let me show what i have
Great!
I am working on the JS side of Anchor, specifically with regards to NFTs. Happy to take a stab, but fair warning, I probably don't know what I'm talking about haha
Not sure if i am in the right server here. I am searching help for the TS part of anchor.
What i am trying to do is transferring NFTs from one wallet to another. Should be easy, right?
I have a script that somehow works, but it creates two transactions and fails quite often. Does someone know where I could ask questions on it to better understand what's wrong?
https://github.com/maddyonline/anchor-basic-1-example/blob/5a10364a46a1a35878bac15e46ec5d53bbc35e9d/programs/xbasic-1/src/lib.rs#L3
That didn't help. I made sure the declareId is uniform everywhere. Does this Anchor.toml look correct? This is the deployed program: https://explorer.solana.com/address/2j4NMzDYQPLpS2HKLR7EnzPt5MXBt3fT9PeWTvUAznQp?cluster=devnet
```toml
[programs.localnet]
xbasic_1 = "2j4NMzDYQPLpS2HKLR7EnzPt5MXBt3fT9PeWTvUAznQp"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "/Users/maddy/.config/solana/id.json"

[scripts]
test = "mocha -t 1000000 tests/"
```
ohh this is a useful direction I didn't think about, let me make sure!
I'm guessing a bit, but I think you can get this error if you haven't done the `declare_id!` dance correctly‚Äîyour rust program's `declare_id!` needs to match the id you got when you did your deploy, *and* your Anchor.toml needs to match too.
Hello folks, trying my luck here in this channel for a question I asked yesterday. Does anyone see anything wrong with this code? I get `The given account is not owned by the executing program` error even though this seems to be doing exactly as in Anchor docs tutorial `basic-1`.
```javascript
export default function MainApp() {
    const anchorWallet = useAnchorWallet();
    React.useEffect(() => {
        const doIt = async (anchorWallet: AnchorWallet) => {
            console.log("doing it");
            const provider = new anchor.Provider(
                new Connection('https://api.devnet.solana.com'),
                anchorWallet,
                anchor.Provider.defaultOptions(),
            );
            const programId = new anchor.web3.PublicKey(IDL.metadata.address);
            const program = new anchor.Program(IDL, programId, provider);
            console.log({ program });
            const myAccount = anchor.web3.Keypair.generate();
            await program.rpc.initialize(new anchor.BN(1234), {
                accounts: {
                    myAccount: myAccount.publicKey,
                    user: provider.wallet.publicKey,
                    systemProgram: SystemProgram.programId,
                },
                signers: [myAccount],
            });
        }
        if (anchorWallet) {
            doIt(anchorWallet);
        }
    }, [anchorWallet])
    return <>
        <div>hello</div>
    </>
}
```
https://discord.com/channels/889577356681945098/889577399308656662/895200402260242442
oh woah. ignore me. just realized you can do `#[derive(AnchorSerialize, AnchorDeserialize, Clone)]`  above the enum declaration
Does anyone have any examples of implementing the `anchor_lang::AnchorSerialize` and `anchor_lang::AnchorDeserialize` traits on an enum type? (kinda new to Rust üò¨)
For program invocation do I always need to define a puppet programm like there? https://project-serum.github.io/anchor/tutorials/tutorial-3.html#defining-a-puppet-program
I need to call metaplex candy machine. So i need to duplicate definition of its api in my project too?
I'be used Phantom and Sollet in localhost with `solana-test-validator` running
Any idea about where is that error coming from?
```await program.rpc.create({
        accounts: {
          baseAccount: baseAccount.publicKey,
          user: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId,
        },
        signers: [baseAccount]
      });```
And this is the code
I am getting this error `Translating error Error: Signature verification failed`
then `anchor build -- --features coudronnet`
as many as you want
make your own feature
Is there a way to have different complier flags with anchor builds. One for `testnet` and another for `dev/test/main`?
I know, noticed that too. Kind of annoying
`IdlError: Type not found: {"type":{"defined":"f64"}}`
I noticed that the IDL doesn't support `f64`? Is there a reason for this?
Should have a first release this week or next week
The group is me!
I think there is a group working on that, but I don't know where they're at
Is there an easy way to interact with an anchor program with python directly? Or do I need to use something like zerorpc to forward from python to node that then interacts with anchor? TIA!
<@!326107472098099201> Thank you! That is very helpful. I think I need to understand the network better now
oh there is better info here https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment
what you choose probably depends on how sure you want to be üòÅ
https://solana-labs.github.io/solana-web3.js/modules.html#Commitment
i think its a solana thing for how confirmed the state is when you query it
I have seen various options on preflightCommitment. Does anyone know what this means and why I would choose one over another
const provider = new anchor.Provider(solConnection, walletWrapper, {
    preflightCommitment: 'recent',
  });
From your wallet to somewhere else

In case anyone has been following my stuff (if it's not helpful, I won't spam chat, just feel like it might be helpful to someone) here is how to send a transaction
Is all you have to run
transaction.recentBlockhash = (
        await connection.getRecentBlockhash()
      ).blockhash;
For anyone following my problems hahaha, the blockhash thing is easy
But that is copied straight from the phantom docs... anyone know what is going on?
const signedTransaction = await window.solana.signTransaction(transaction);
It occurs on this line of code
I am following the phantom docs to sign a transaction and I am getting this error Error: Transaction recentBlockhash required
Gotcha. Thanks!
PDA
Find the program address using seeds
Mm, interesting. I'm pretty fuzzy on this tx commitment level stuff, would like to understand it better if anyone has suggestions/pointers
No problem!
Yeah, it's working, thank you very much. I spent a few days to find an issueüòÉ
What does anchor.web3.publickey.findprogramaddress() do?
cut that then run again. anchor test spins up its own test-validator
Yes, I run `solana-test-validator` in the background. And set config to localhost
Are you running a test validator in the background when you run anchor test?
Example 1 and 2 from tutorial  https://github.com/project-serum/anchor/tree/master/examples/tutorial
Like JS
What is your code?
Weird...
Yes, I tried it with Anchor 0.17 the same error
I went through this with someone yesterday. Are you running Anchor version 0.17?
How to change a program owner? And should I do that in general?  When I run examples from tutorial I get an error 0xa7, which corresponds to `AccountNotProgramOwned: 167` ("The given account is not owned by the executing program")
`solana program show ` says than owner is BPFLoaderUpgradeab1e11111111111111111111111
Haha
still cant understand why that would solve though, my brain is limited haha
seems like you fixed a issue with changing the type of commitment
<@!847130012879814668> found this on js web3 docs

Not sure why that solved my issue, but it did
to     const connection = new anchor.web3.Connection(
      "http://localhost:8899",
      "recent"
    );
For anyone interested in my issue, I solved it by changing     const connection = new anchor.web3.Connection(
      "http://localhost:8899"
    );


//////////////////////////////////////////////////////////////////////////////////////////

running these specific exports fixed it.
If you need to have openssl@1.1 first in your PATH, run:
echo 'export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
I ran brew info openssl as suggested by <@!134416332509675520> which amongst other info spitted out the following info:
For reference in case someone else has the same issue:
All - I finally got to the bottom of it thanks to everyone's help. Thank you so much.
Yep, also did that, but didn't fix the issue for me.
i had to cd into the brew dir at `/usr/local/Homebrew/bin`
Would be happy to make it work on either of these two so I'm having a crack at the workaround for the M1. Hopefully it works, will report back. Thanks a lot for your time.
I actually have both a mac-mini M1 and also a Macbook x86, I run in the exact same issue on both (i.e. exact same error message) when trying to run a solana-test-validator
Installing openssl with brew is weird (check out what `brew info openssl` says). I got around this by manually specifying `OPENSSL_DIR=... whatever_command_im_doing` [edit: but I did install openssl with brew, I just didn't do any symlinking stuff for some reason]
Sorry, he did say Intel... I totally misread that
Morning, are you on an m1? Thought you said intel above
Will give it a shot, thank you
He has posted this in the past. You can try this. Just look up "m1" in the chat. Ppl have talked about the issue in the past
I'm sure he is just busy... https://dev.to/nickgarfield/how-to-install-solana-dev-tools-on-an-m1-mac-kfn
Many thanks <@!847130012879814668> , hope <@!134416332509675520> can help me out. Tried everything, including  manuel symlink
<@!134416332509675520>  I think had issues with this... He probably can solve your problems
Any ideas / fixes?
Seems like lots of mac developers have been struggling with this issue (https://github.com/project-serum/anchor/issues/95)
I did run "brew install openssl" but still get the same error
Getting the infamous: dyld: Library not loaded: /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib
I've been beating my head against a wall trying to run a solana-test-validator in local on a mac (intel chip)
Hi all -
What do you mean
Ok my mistake, looks like there's no need to include signers: ... when wallet is alr configured properly for the program.
What is the best way to create an account with an array, pass it to the program and update it?
During local testing, it works fine because I have the wallet keypair and can call the Anchor method with `program.rpc.initialize({accounts:...},signers: [walletKeypair])`.
I am trying to send a transaction from the React app with `program.rpc.initialize({accounts:...})` where this transaction should be signed by the user's wallet. How do I get that signature?
how can I get `ProgramAccount`'s pubkey?
300 is where custom program entered errors appear by default
Hi! I copied the escrow test example but I can't Anchor to generate the types in `target/types/escrow` any body knows what's missing?
Great. I have hundreds of ATAs right now and don't want to pay the rent fee, so i would need to close them manually (or through a skript that i would need to write)). Right?
yes
If i close an ATA with balance 0 the token still persists on chain and in the new ATA, right?
Context: i am running anchor 0.17.0 trying to CPI into swap code and do a swap
any help would be greatly appreciated
checked anchor error source, but there seems to be no message corresponding for the number
Hi everyone, hows it going

i got custom program error : 0x12c, = 300
https://www.youtube.com/watch?v=7p_8549sinc not sure if this helps!!! Sorry its in video format
are there resources to learn the difference between AssociatedTokenAccount and a "normal" account"?
Ah you are awesome I'll check, thank you
explore `spl-token close`
cli would be the easiest
lol
rust yes
ts yes
cli yes
Crazy. Thank you.
Do you know if there is a way to do it through TS?
This is related with the Nader's article project, the example 1.
most likely not closed, use solflare to close it, only wallet allowing closing an ATA
Asking here because in the solana discord i only get DMed bot responses:
After sending an NFT to another wallet: Do we need to close the token account in the first wallet? Or is it done automatically? It for sure would not make sense to pay rent for an unsused account
Ok, fwiw, I can contrive to reproduce your error locally by deliberately setting up a bogus wallet.
The code you pasted above looks fine to me, so I wonder if something is weird about how you're constructing your provider/wallet.
It is pretty weird. And I don‚Äôt know how to debug that.
Hmm, not sure why that would happen ü§î
spot on, thanks
That probably means you've got the wrong name for your program when you do `const program = anchor.workspace.ProgramName`, so your `program` ends up being undefined (I guess it would be nicer if anchor.workspace.Foo errored if there's no Foo program)
I am still struggling with this. Anyone tried out the Nader's article project successfully?
on `await program.rpc.initializeEscrow`
ok seems like i got past the environment issues, whew, now i'm getting this on the first test -- anything obvious?
`TypeError: Cannot read property 'rpc' of undefined`
haha I was honestly so confused about it!! You're an actual life saver thanks again
Haha awesome (wish I understood why that led to your specific bug though)
thank you so much! ‚ù£Ô∏è
That was it!!!! I tried using npm uninstall -g before which didn't do anything .. but I just nuked it with an rm -rf instead and now it's going
I'm unclear on what exactly that screws up, but it doesn't work on macs (try `npm uninstall -g @project-serum/anchor-cli`)
I think I might have yes
Just curious, did you install the anchor-cli npm package by accident?
also on an m1 mac .. I just followed the installation instructions at https://project-serum.github.io/anchor/getting-started/installation.html .. and followed solana m1 installation instructions from this medium article: https://medium.com/@entergmode/installing-solana-tooling-on-m1-macbook-b49d2e1f29ed
I'm on an M1 mac.
are you all running linux, im on mac
Hmm, how did you install anchor? It doesn't deliberately use any funky shell environment
yeah im running into something similar
I thought you might have been onto it (NODE_PATH was wasn't set properly) but even doing that doesn't fix it. I just tried to see if `node` is even available though, and it isn't ... even putting `node -v` in the test script says `node: command not found` .. my guess is that anchor/rust runs the script in some strange shell environment but I have no idea how to find it
oh perfect, thanks
Also this example is typescript https://github.com/project-serum/anchor/tree/master/tests/escrow
`anchor init --typescript` should work out of the box.
i imagine you guys have ts setup and some standard that may not be posted in the repo
hey dumb question here, normally a backend dev, been hitting my head against this one a bunch:
`SyntaxError: Cannot use import statement outside a module`
when trying to run anchor test, been messing with mocha ts-mocha and a bunch of other variations
if the main point of PDAs is to avoid the vulnerability of someone else creating the same address and having the private key, wouldn't that mean all solana wallets are vulnerable to that brute force attack?  what am I missing?
for e.g. in the contrived case, when a user signs in their wallet for the set of txns which "signAllTransactions" signs for, mutating the Provider.wallet to be the user's keypair etc.
there isn't right?
is there a difference between the provider wallet signing all transactions (where them signing it is implicit) and a user signing all transactions for each rpc call?
Is there something that will not work with this?
provider wallet isn't used in my code. I'm having a "user" account marked as mut and signer, they are generated as a web3 keypair then receive an airdrop. They are in signers in the js file. Inside the rust instruction I do a a transfer system instruction from that user account.
Think I'm being dumb here lol
Wait, so who is the provider wallet vs. who is the signer?
Having them sign for a transfer in the instruction
they can sign the transaction via integration with their wallet on the client right?
How are you able to sign for this alternative payer though? You just know their keypair?
I guess strictly speaking you could construct a tx from scratch and basically do what the provider is doing, but manually (so have the desired payer sign the tx the way the wallet currently does here https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L105)
meant that I was having the signer of a transaction do lamport transfers to the provider wallet inside of the instruction to cover the costs of the sub transactions but I think it should be okay
Yeah, I was hoping there would be a way to mark an account to pay for all instructions in a rpc call from the anchor side when you are marking the accounts but I can work with this
Think I might have to see an example of what you mean about having the signer transfer tx fees to the provider
In your original example of doing a token transfer, there's no lamport movement there‚Äîso the only payer is the tx payer (there's obviously token movement though, so some spl token account has to provide the source tokens + sign the transfer)
I think I'm maybe misunderstanding your question‚ÄîI think the tx itself only ever has one payer (they're paying to submit the tx to solana), but individual instructions that move money (e.g. initializing an account, or just a vanilla lamport transfer) have to separately specify who's providing the funding (e.g. the `payer =` annotation)
e.g. `test = "mocha -t 1000000 tests/"` or whatever you want
it just runs whatever command is in Anchor.toml under [scripts]
Thanks for helping me understand stuff üôÇ
Is there a way to specify to have a certain account pay for all transactions in an instruction? akin to how you can mark payer for rent? Currently my solution for this is to have the signer transfer transactions fees to the provider to circumvent the provider being charged
does `anchor test` only recognize .js files?
You can see where the wallet signing happens in the anchor ts code here, fwiw https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L105
The sneaky payer thing was a bit confusing to me, e.g. https://discord.com/channels/889577356681945098/889577356681945101/894808202217148446
Ah, ok yeah, this is a little sneaky‚Äîevery transaction has a payer (who also signed, of course), but it doesn't show up as an explicit account unless you pass it explicitly
Yeah, my program functions(initialize, etc).
Which functions do you mean? Your instruction handlers in rust?
i sometimes change with nvm and forget
what does which `ts-mocha` say? is `NODE_PATH` set properly in your env?
Anyone have a clue how to fix an error saying `ts-mocha: command not found` when running `anchor test`, despite the fact ts-mocha is globally installed???
got it working, thanks again
Actually wait, to follow up, provider.wallet is not loaded in any of my functions, what would be happening in live production? Would it still be my provider account paying?
That was it, thanks!
üëå  thanks
Think you'll need to install the anchor cli from master to get this to work (the type generation stuff hasn't actually been released yet I don't think)
`import { Escrow } from '../target/types/escrow';`
hey guys i copied an example test program over into a new project, any idea how to get the ts types generated/built, or where those live in the main project? not having any luck searching
If I'm understanding your q right, I think it's just the payer for the whole tx the CPI transfer call is inside of (so e.g. in an anchor test, it's provider.wallet‚Äîit's paying for the overall tx, including any cpis it makes)
When I make a PDA do a token transfer from an account it has authority over to a user token account, who pays for the transaction? I thought it would be the program account but their balance did not change
```Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```

The anchor program deploys successfully on testnet but not on devnet..
Getting this error above ^
is there a verbose logging flag for the `deploy` command?
yea this is right, see https://github.com/project-serum/anchor/blob/master/lang/syn/src/idl/mod.rs#L112
but when i run "anchor test --skip-local-validator", the tests get failed !
Did you use this  "anchor test --skip-local-validator" ? as document said, this command deploy rust program in my localnet instead of startup new localnet
Thanks the hint with anchor support Alan
I need to read that rust book ! ><
A vector actually works fine, just did it badly the first time.
I tried with a vector but its an expensive computation
It seems yes... Any work around ?

I just need an efficient way to do a FILO with a fix element size (10)
I'm not super familiar with the idl generation stuff, but my quick sense is that anchor just doesn't support VecDeque's out of the box
Thanks to <@!134416332509675520> I was able to resolve this! So looks like I'll be the one creating the tutorial üôÇ
Mostly connection issues/ timeouts.
But what I am most wondering about is that it created two transactions. One for the account creation and one for the transfer.
Normally those things are combined into one tx
Hum, i'm a bit stuck here. Can someone help me ? 
I have structs that look like this(simplified for clarity) :
```
#[account]
pub struct Stuff {
    pub tests: VecDeque<TestData>
}


#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct TestData {
    pub result: String,
    pub pda: Pubkey,
}
```

The build works fine but when doing anchor test i get : 
```
Error: Type not found: {"name":"tests","type":{"defined":"VecDeque<TestData>"}}

```
Any idea ? :x


(edited forgot to write the entire error message)
<@!867369388608061470> might already have some examples?
Request-for-tutorial (paid opportunity -- that is I will pay if someone creates this tutorial):
1. A Github repo from scratch to deploy ` anchor/examples/tutorial/basic-1` on Solana devnet
2. A react app which allows people to interact with the deployed app using *Phantom* wallet
3. Clear README for all deployment steps

I actually tried to do it but running into some errors that I am not able to debug: (1) https://github.com/maddyonline/anchor-basic-1-example, (2) https://github.com/maddyonline/anchor-react-starter
myb
turns out I was testing against the bin in deploy folder and not the verify folder
ah
rather my verify build ran against the verify sub command doesn't match
well it's working but my build & my verify build don't match ü§î
tried a few things and can't be assed to try anymore üòÜ
well installing from github works great so Im doing that for now
my program has a local depdency and I'm getting this weird import error when I try to `anchor build`
```Failed to obtain package metadata: Error during execution of `cargo metadata`: error: package `/projects/anchortest/src/rust/programs/minter/mdp/rust/token-metadata/program/Cargo.toml` is a member of the wrong workspace
expected: /projects/anchortest/src/rust/Cargo.toml
actual:   /projects/anchortest/src/rust/programs/inter/mdp/rust/Cargo.toml
```
unfortunately I'm too new to rust to know how cargo / anchor / Cargo.toml files really work to fix this myself, any insight?
so basically I'm trying to wrap anchor around an existing rust contract so I can produce verifiable builds
nvm
hey, can someone point me to some ref docs re: this topic?



//////////////////////////////////////////////////////////////////////////////////////////

--This is a for sure beginner question
<@!103986638320861184> Why would you wrap SOL?
Also, is there an anchor example for Wrapped SOL anywhere?
I guess Wrapped SOL would be easier to implement, just to keep everything in SPL-land, however I am not quite sure if there are any drawbacks to this approach.
I'm extending the escrow program to accept SOL-SPL trades (as well as SPL-SPL and SPL-SOL), and **I was wondering if the best practice is to handle Native SOL, or Wrapped SOL?**
No worries, I'll find another way to do what I want to achieve. Thanks for your help!
Ok, think I'm still confused about your use case, can you post a gh repo or something?
It's basically a counter, so the seed is derived from the item numbers. The account that I'm creating holds the data related to the item.
Also, random other question, how are you remembering the seeds of the previous accounts you've initialized? They were based on old versions of other account's data?
well yeah, I guess what I'm trying to do is not scalable , need to find another way to achieve this
I'm the noob here, spent last 3 hours on this
Hmm, ok. Well, at the end of the day if the pda depends on the other account's data, then yeah, maybe that means you'll have to wait for confirmations? No matter what you have to know its address should be in order to initialize it
yeah basically like this
Are you like initializing an account with a seed based on the other account's data, changing other account's data, then initializing another account, etc. in a loop?
Noob question, what does that mean? I think I'm still confused about your situation (or possibly just out of my depth and can't help haha)
I'm doing that and it only allows 1 transaction until 32 confirmations finish üò¶
Hmm, I think I'm confused about your situation‚Äîone way or another you'll need to find the pda's address before you can submit it as an account
`some_account` pubkey depends on `other_account`'s data, if I fetch the data before the tx then other people will need to wait until `other_account`'s data has been updated for new `some_account` pubkey
Rereading your q
Oh, sorry.
Thanks! I'm doing like this but how can I send the tx without knowing the pubkey of the `some_account` in your example?
^ And `ProgramAccount` has been deprecated in favor of just `Account` btw
You mean the seeds depend on some other pda account's data? You can do things like
```.rs
#[derive(Accounts)]
pub struct Something<'info> {
  #[account(init, seeds = [other_account.foo], ...)]
  pub some_account: Account<'info, SomeAccount>
  pub other_account: Account<'info, OtherAccount>
  ...
}
```
How to initialize a `ProgramAccount` when the seeds of the account depend on a PDA's data? If I fetch the PDA's data before sending the transaction and get the `AccountInfo` then it only allows 1 transaction until the PDA's data is updated and all the other transactions that were submitted fails because they are trying to initialize the same account.
it's a special thing for wrapped sol accounts
ah ok
it's something else i've never seen before
<https://github.com/solana-labs/solana-program-library/blob/2b3f71ead5b81f4ea4a2fd3e4fe9583a6e39b6a4/token/program/src/state.rs#L98-L101>
`is_native` must just check that it is indeed an SPL token account
That's what I thought too, but it looks like that's only for "native" tokens (not sure what those are) ü§î
that's my best guess
and destination gets the lamports
it just errors if there's a non 0 balance
Actually wait, I'm confused reading the spl_token source, I see how it transfers any remaining lamports to the destination account, but where does it transfer the remaining token balance? Maybe being dumb ü§î
because it's the Associated Token Program that signs the initialization of the token account
It's also a PDA
ATA is short for associated token account. It's a convention for a set of seeds used to create a token account for a user + mint
CPI Accounts are just an old anchor term for accounts owned by another program. They can be a PDA or not. PDA determines how they were inited and whether they were initialized either by a keypair signer or a program signer
Ah whoops, good call
they are all distinct things
not exactly
A bit confused can somebody suggest an extensive list of all types of accounts? I feel some are the same but called with many names, I have seen account, ATAs, program accounts, PDAs, cpi accounts, token accounts. I am guessing cpi accounts and pdas are same, ATAs and token accounts are the same
who gets the lamports from the closed account
no the `destination` account is where the remaining balance goes to if it is not empty
yeh, i misread and thought this was a nuclear `system program` close account
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L631
nvmd
oh, maybe they're in the spl token program
<https://github.com/project-serum/anchor/blob/e763b721c37d7b36fa283d2f973bc8c76ca96abc/spl/src/token.rs#L131-L150>
i'm not seeing any checks lol
^ I was just looking at the spl_token implementation‚Äîjust to make sure I'm understanding right, I think it asserts that you've drained any remaining token balance first
cool, now i have more work to do!
the context body you provide it defines the account, authority, and destination account to sent the remaining balance to
does this return rent?
there's the `close` keyword here
<https://github.com/project-serum/anchor/blob/master/CHANGELOG.md#080---2021-06-10>
ah cool
`anchor_spl::token::close_account`
how do you close token accounts?
is there a way to close program accounts like there is with token accounts?
Alternatively the CFO test has a script example and then you can do anchor test by skipping various things <@367907046177112064>, but yes toml approach is cleaner
here's an example from the swap program, though the anchor keywords might have changed from `test.genesis` to something about local net, i'm not sure
https://github.com/project-serum/swap/blob/master/Anchor.toml
we had a git submodule with the compiled serum program and pointed to it in the anchor toml with the required public key
i've done it before with serum as a preloaded program
spl token program is always available by default
do you have examples of setting this up with the SPL token program? looks like these examples import deps as git submodules and then points Anchor at their generated IDL files?
PDAs can't be inited except via CPI
well actually sorry, you're "forced" to do it with PDAs
you're never really forced to do it, it's just much cleaner imo to init accounts inside a program rather than outside
Hmm when is one forced to init via CPI? When the called program enforces that? Or is there an always an alternative to create beforhand?
Here is an example of how I recently did it https://github.com/microwavedcola1/psyoptions-instruction-decoding/blob/9553706c2247f9e60de20929dd6c617ec1fcccb0/src/index.ts#L86
rather than the normal max size of 10mb
it's especially annoying when it comes to initing accounts via CPI, you can only make them 10kb
solana needs to know what data it needs to load and what memory to access ahead of time so it can plan stuff
Anchor is cool though because it solves a lot of security issues with that
Thanks
No. It's a weird feature of Solana
can I initialize a `ProgramAccount` without listing it in the accounts object in frontend?
maybe that would help
there's `decoder` in the TS library
Trying to use program.account.[typename].fetch() API
Ah, sorry, I was saying that the connection itself might require a provider (can't remember)
But its just a bunch of bytes
That doesn't require a provider haha
Oh, sorry, maybe that needs a provider, can't remember
Can I get that as a deserialized object?
await connection.getAccountInfo(somePublicKey)
Does anyone know if its possible to do an Account Fetch with Anchor JS without a provider?
there's some examples of it being used in the anchor repo, but `anchor.toml` is the file to look for
https://discord.com/channels/889577356681945098/889577399308656662/891862087159128135
Thanks that makes sense!
Say I‚Äôm writing a program that makes a CPI. Is there a standard way to configure the local test environment (somewhere in the Anchor.toml?) to auto-deploy the dependency programs my protocol will need when running ‚Äúanchor test‚Äù?
yeh, what paul.e said, just use the ATA
to my understanding token accounts should always be initialised as associated accounts, which makes the account address derivable with the solana address and mint This also results in only one token account being created per mint and solana address. A lot of dapps already pick the associated address by default and im not sure non-associated accounts can be used with a lot of dapps tbh
How do apps usually handle when there are multiple token accounts from same mint in the same wallet?
You can bump to 1.7.12 - I believe that fixes the deployment issue.
any help would be much appreciated
guys, trying to deploy to mainnet and none of my transactions are getting confirmed and just keep retrying.
My solana version is 1.7.11 and anchor-cli 0.15.0
happy to help! no point in everyone having to reinvent the wheel
Man, exactly what I was looking for! Thanks a lot ton! If I build something useful I'll share a link or snippet here for documentation purposes
so you don't need to send each `getTransaction` call individually
also it's not well documented but it is possible to batch RPC calls
that way you never have to worry about your indexer crashing temporarily
then you get the transaction for each signature, which will return the program logs as part of them
<https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction>
until you go as far back as the node operator stores history
you run get signatures for address, and you iteratively call it in 1,000 signature batches
<https://docs.solana.com/developing/clients/jsonrpc-api#getsignaturesforaddress>
ok here's what you do
we lost all the previous discord chat logs when moving from serum
there's like set of commands, i'm just trying to remember how to do it
no it's possible with RPC calls
I've been thinking of doing it this way, however I can't find an RPC call that fetches programLogs. Is there anything im missing or would I have to find an RPC node operator that offers this as a service?
i haven't thought about this problem for a few months though, <@!705250151291158528> is more actively working on this
so even if your indexer crashes you should still be able to get programLogs
validators will keep like the last 2 weeks worth of history
The idea is to run an indexer for a specific event in my program. I need a way to parse previous events in case my indexer crashes. The way this can be done in eth is to specify a starting block number when initialising the event listener, however this doesnt seem to work in solana. Are you aware of any ways to achieve this?
fs.readFileSync does not work for me on a React app as well
Hi, does anyone know how to read an IDL JSON file to TypeScript IDL type?
when I deploy a program to the mainnet, do I also need to run anchor idl init after? I had to in the devnet
Yeah module name in title case
Oh, I guess it's actually the `#[program]`'s module name? So e.g. `mod basic_1` --> Basic1
Yep, just the JS-y version of your program name
One noob question `const program = anchor.workspace.Mysolanaapp;` where can I find my program name. Is it defined or just Title case of folder inside `programms`
Lol
haha it prints my env correctly
If you change your anchor test command to just, like, "env", does it say anything surprising?
Ah, interesting!
i use nvm so my global node path isn't very standard and i can reproduce it
yea not totally sure why it'd work in some cases
Or, I'm not sure‚Äîit seems like my env is the same
^ is that what happens? I was wondering that too but it seems like it keeps mine
ahh so the anchor-cli uses `spawn` in js so it'll lose all the shell env vars
And the script it uses doesn't really do anything tricky, so I'm confused how people keep losing mocha from their path ü§î
I'm confused because I can actually use the `anchor-cli` package just fine, and I'm on a mac (an M1 even)
I think it might be an npm thing
Also there are so many issues with versions without proper error messages : (
I need to actually read the anchor-cli source I think, this keeps coming up
REALLY QUICK. Thats works fine. Thanks buddy : )
Ok i'll try and get back to you
That message at the top looks like you're using the `@project-serum/anchor-cli`  npm package by mistake (sounds like you're on a mac?). Can you try `npm uninstall -g @project-serum/anchor-cli` real quick?
I have node with `v16.9.1`
Check node version... I was facing similar issue someone suggested to change the node using nvm and it worked... Changed it to node@14.18.0 using nvm and it worked
Yeah mocha installed globally `/usr/local/bin/mocha` and node path was `/usr/local/bin/node`
All out of ideas after that üò¨
Mocha is installed globally? Check NODE_PATH
No. I have used cargo `cargo install --git https://github.com/project-serum/anchor --tag v0.17.0 anchor-cli --locked`
Did you install anchor-cli via npm?
Mocha installed and I have directory for tests also : (
Either no mocha installed or no tests dir in the project directory?
Why my `anchor test`  fails
```
Only x86_64 / Linux distributed in NPM package right now.
Trying globally installed anchor.
BPF SDK: /Users/swaroopmaddu/solana/bin/sdk/bpf
cargo-build-bpf child: rustup toolchain list -v
cargo-build-bpf child: cargo +bpf build --target bpfel-unknown-unknown --release
    Finished release [optimized] target(s) in 0.18s
cargo-build-bpf child: /Users/swaroopmaddu/solana/bin/sdk/bpf/dependencies/bpf-tools/llvm/bin/llvm-readelf --dyn-symbols /Users/swaroopmaddu/blockchain/projects/tasks/target/deploy/tasks.so

To deploy this program:
  $ solana program deploy /Users/swaroopmaddu/blockchain/projects/tasks/target/deploy/tasks.so
The program address will default to this keypair (override with --program-id):
  /Users/swaroopmaddu/blockchain/projects/tasks/target/deploy/tasks-keypair.json
Failed to run test: mocha -t 1000000 tests/: No such file or directory (os error 2)
```
so not like solidity where you can't access contract state externally if there's no explicit or implicit getters
ahhh awesome ok!
If you know the address of the account you're interested in, you can pass it to whatever program you want üôÇ The account data isn't hidden or anything‚Äîany program can read it (*writing* to an account is restricted to the program that owns it though)
sorry i'm a little confused by this -> how would i be able to access the metadata pda storage from the token account?
They are different accounts. So pass in whatever one you want.
so i need to pass in the metadata pda, not the token account correct?
https://github.com/metaplex-foundation/metaplex/tree/master/rust/token-metadata
Yea just pass in the account from the client side.
so like i know the metadata account for some metadata PDA made with metaplex is  `['metadata', metadata_program_id, your_mint_id]`, but am i able to access/read the data in the account storage with another program?
hey all! Are there any examples out there of reading token metadata with an on-chain program?
it worked btw thanks a ton.
oh, is there a library for all the solana junk I can grab
You'll need to separately do `npm install @solana/spl-token`, it's a separate library
I installed this one ```npm install @solana/web3.js```
You'll need to install it separately with npm
I can build and deploy, but anchor test throws ```Error: Cannot find module '@solana/spl-token```, any hints?
ah got it, thanks
there is a cluster in Anchor.toml
hmm how does `anchor deploy` pick the cluster? My `solana config get` reports devnet, but anchor is attempting to deploy to localhost
some of the RPC node operators do offer this kind of service but how they do it is unclear
i haven't heard of any updates that would indicate this is easier to do now
do you mean running the indexer on a validator from the first block of solana onwards?
yeah that seems like a good solution, would open the floodgates for indexer providers for sure.
Im happy to share my findings. Sent a message in the solana discord but I think its drowned in all the chatter. I'll do some digging in the solana docs tomorrow.
Though i expect this  validator plugin to eventually be the canonical way of achieving this https://github.com/solana-labs/solana/pull/20047. 

RPC validator -> Logs -> Postgres

Then the indexer runs

Postgres logs -> Anchor event deserialize -> Postgres events
It would be really valuable for someone to go through the process of building a simple Anchor event indexer with postgres and share some lessons on the process ideally with some type of open source example. Doing this easily would be a huge level up for all of us.
Ok thanks for the quick reply! It does seem pretty fundamental, given you can specify a block number to start at. I will ask in the solana discord and add my answer here for documentation purposes. Keep up the insane work on anchor. Im coming from the eth world and its pretty insane how fast this is all coming together. I would say the solana tooling is ahead at this point and a joy to work with. really impressed
Seems pretty fundamental, but I myself haven't gone through the exercise so it's possible I dont appreciate some subtle complexity involved.
<@!248066053161222144> have you tried this yet? I.e. building an event indexer?
The event listener for anchor doesn't have that, since the onLogs api doesn't ahve that. But you should be able to get transactions starting at a block. I'd ask in the solana discord.
Thats pretty much what im looking for. In eth the event listener had a parameter to specify from which block number onwards event should be parsed, struggling to figure this out in solana. Can you point me to some docs maybe?
Can you replay all transactions? When you crash, just startup and replay at the last transsction who's logs you parsed.
I have a question regarding event catching. Im currently in the situation that I need to write an indexing service to feed my DB with historic program account state. The way events are handled in anchor is super simple, however one thing I cant figure out is how to consume past events in case my indexer crashes. I also checked the solana web3 docs, but I found now way of specifying a specific block/slot to recover the data emitted during downtime. Am I missing something in the docs or is this somewhat of a larger issue?
scammers everywhere huh
cool thanks üôÇ
Probably. I'd try asking in the Solana discord and report your findings. üôÇ
hmmm, I see. are there any instructions for this?
`solana-test-validator` doesn't work on M1. I think you have to compile it from source.
I am using M1 mac
I'm getting an error when running solana-test-validator
`Ledger location: test-ledger
Log: test-ledger/validator.log
‚†ô Initializing...
Illegal instruction: 4`
thanks, i am CPI the swap code which then CPI into serum-dex code, would have to check dex src then,
yeah i figured it out myself, but thanks for the help ‚ù§Ô∏è
i mean the error is described in the program you are using most of the time. https://github.com/project-serum/anchor/blob/master/tests/swap/programs/swap/src/lib.rs#L490 like if u r using this 300 would be the first error
You need to check `bytemuck` crate usage
getting BPF program panic


//////////////////////////////////////////////////////////////////////////////////////////

oh think i found it `anchor_lang::solana_program::system_instruction::transfer`
maybe there's a lower level command i'm just not familiar with
also i see a lot of anchor utilities for transferring tokens but don't see any for transferring sol
oops wrong links, fixed
quick question about the escrow example, to actually initialize, as here:
https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts#L93
you first need to have some transactions that create the token accounts?
https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts#L59
so if this were going through phantom it would be a series of transactions?
Yeah, my bad.
Try building it and then asking questions along the way.
Hi everyone! I want some conceptual help in building a program. I want to store tokens from 2 users in their separate vaults. Then at some point in time wait for an event from frontend which will allow one of the user to be able to claim both those vaults.
I was thinking to make a CPI request to a program which creates checks/vaults for each player and store this event flag in the main program. Can anyone guide me on this?
Or this synthefy code is THA workaround?

In the mean time isnt there any workaround so we can use the transfer function to send decimal amounts?
Will dive into this
Ok pretty cool
<https://github.com/Synthetify/synthetify-protocol/blob/master/programs/exchange/src/decimal.rs>
Synthetify has some code for this.
Floating point is not supported in the IDL types. I'd recommend to use integers, e.g. `u128` to do decimal math.
we cant store decimals in u64 right ?
Is decimal supported in anchor ?
hey guys
It makes sense for anchor to use a lib not supporting decimal point, Its a good choice.
I will use the other bigNumber lib just for the user convenience as to display more human readable numbers
Yep, only using that on the front end ^^
and just track what decimals places you're using somewhere else
you should stick with unsigned ints really
Well, will have to do it another way üòÑ
Thanks Alan
```Note: decimals are not supported in this library.```
It uses this library https://github.com/indutny/bn.js/
Hey everyone üôÇ
I'm using the anchor JS bignumber and trying to keep decimal precision but i can't find how to do so.
Does anyone know on what library is the anchor BN based from ? Is it done from scratch ? üòÆ For it seems to be lacking the method from the "standard" js big number lib ( https://mikemcl.github.io/bignumber.js)
if you wanted to you could look at the source for `getTokenAccount`but it seems more likely there's another issue at play
if you're getting an error from that, you probably have something to debug
getTokenAccount is the way to go
Thanks in advance ‚ù§Ô∏è
In a more general way, what are the documentation of the client side of the spl-token documentation ? üôÇ
When I write a second client and try to regenerate the token account with getTokenAccount I get an error
Hey guys I hope everyone is well. Ok I wrote a client where I basically create a token and then create a TokenAccount (using createTokenAccount) to myself. Now I have the public key of the token account. How do I create the same token account variable from scratch
I think you can find an implementation from ironaddicteddog
I am new to smart contracts and might be getting some things wrong, please correct me if you find flaws in what I state üôÇ
I saw a cashiers check example where the vaults are generated on the frontend using web3.js APIs. Is this a safe practice? Should the vaults be generated inside the program ideally?
Hi guys! Do we have any examples for escrow on anchor, I want to implement similar program like in paulx blog. https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/
Ok that's what I did, must have made a mistake somewhere, will look into it thanks!
yep, you can pass a fresh keypair as additional signers via the   `signers: [yourKeypair]` attribute in the rpc call such as in this example.

https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts#L93-L108
I wanted 2 signers to try special cases in tests
Is it possible to create a Keypair and use it to sign transactions passing it as signer? It seems to make weird stuff, should I always use the provided.wallet.payer instead?
Exactly what I was thinking of. Cewl
Thanks Davo
yes, for now the recommended way is to perform optional account initialization via the `instructions:` attribute in the RPC call , so you would either include it or leave it out. Also handling manual CPI calls is also an option. That said, there is a recent discussion on this very topic:

https://discord.com/channels/889577356681945098/889584618372734977/896143760671518750

https://github.com/project-serum/anchor/issues/852
I want to prevent having to do pre instruction local to create an account for a given program mint, but maybe (I am thinking of this solution as I type, tanks typing!) what I should do instead is have a "init call" to first have to interact with my program, that would offer nice interface to create that associated token account for the mint that the program controls
Seeing how Jet manage their test, and the API of anchor/solana, it seems that it would make more sense to create account where the mint/mintAuthority exists (be it in a program, or locally)
Another question related to associated_token, now that it works, is there a behavior similar to "get else init" is some way?
Gonna backronym it to ce qu'il fallait d√©boguer for discord üòõ
Ce qu'il fallait demontr√© üëç
Oh yes that's what I did previously iirc. Updating
Weird nothing related to that in the .zshrc, only the local solana installation (but that doesn't come with any anchor YET, amarite?)
(I actually just install anchor from my own local checkout of the source, since I want to be able to fiddle with it, but installing from a git tag works too)
I personally just don't use the npm package at all and do a direct cargo install, e.g. cargo install --git https://github.com/project-serum/anchor --tag v0.17.0 anchor-cli --locked
Yep will cleanup
Ah ok cargo is overpowering npm in your $PATH
cargo don't return any anchor with `list`. Instruction unclear <:peepodead:888947959612456980>
I installed NPM version but `which` still returns the cargo one
Does the npm version not work?
Haha you can install it from source if that works? https://project-serum.github.io/anchor/getting-started/installation.html#build-from-source-for-other-operating-systems
Wait I cannot find back how I install cargo <:pepeThink:844646497911046164> 
It's in ~/.cargo/ but cargo don't seem to have an anchor package. And tutorial offer to install using NPM. halp my brain stack is full of rust I cannot drop <a:pepelaugh:834817527900799078>
I rage quited that stash and reverted. here we go again ‚ù§Ô∏è
damn
Thanks a lot ser
Oh yes!! cli is not updated
1.17.0
I think you might get a problem like that if your anchor cli is out of date relative to the anchor library itself (the part that generates code for the associated_token stuff). If the cli is out of date it will see the new syntax used in your program and be like wtf is that
What version of the anchor cli are you using? `anchor --version`
Seems to be the parsing that fails, I'm passing correct Mint and Signer
Having issue trying to use `associated_token` init in anchor <:pepeThink:844646497911046164> 
https://github.com/project-serum/anchor/pull/790#issuecomment-939206306
That worked! Thanks so much
oh! okay i will try that, thanks! I saw the argument in the generated idl as a named parameter (`authority`, so I thought I had to pass that field in as a named parameter as well)
Try changing the call to look more like `rpc.createParticipant(authority.publicKey, { accounts: ... })`
I think the problem is that your rpc function, createParticipant, actually expects an argument (from looking at the rust code). But you're only passing accounts. The anchor rpc stuff has pretty unforgiving behavior here unfortunately, and tries to interpret your accounts object as the first argument (whoops) and then says, hey, you never passed any accounts!
super weird
every time i try to deploy on devnet, it hangs up at this part and simply refuses to continue. deploying on localnet works just fine
Hi, I'm getting an error where the accounts struct I pass into an instruction from js is undefined. Specifically, the error is `Cannot read property 'raffleParticipant' of undefined` from this line of code: https://github.com/shekarramaswamy4/solana-raffle/blob/main/app/participate.js#L33. The corresponding blockchain code is here: https://github.com/shekarramaswamy4/solana-raffle/blob/main/programs/lotto/src/lib.rs. I'm pretty stumped, this code is more or less copy paste from a working example. I tried to do some digging through the anchor internals and it looks like the "accounts" field is undefined (which makes sense), but I'm not sure why that is. Any help would be appreciated, thank you, and please let me know if I can provide any additional context. Thanks!
Hi, 

i am getting error custom program error 0x12d = 301 on the serum_dex program which i have CPI'd into, unfortunately i am not able to find a IDL for the dex nor i am able to successfully generate a idl for the serum_dex (Error cant parse IDL)so i could learn about the error. What should be my route for debugging this. 

Thanks in advance ‚ù§Ô∏è
<https://github.com/project-serum/swap>
Thanks! do you know of an example where it handles wrapping/unwrapping using JS/Rust? So I don't need to pass that overhead to the end user
trying to verify serum-dex and serum-swap programs
How to use anchor verify properly, i am getting Account Not Found and Binary dont match error
just wrap sol
OR NFT or whatever you want to do with the SPL program
Yea, basically the SPL program doesn't support native SOL to spl trades so if you want to do SOL to spl trades, you have to do what Circle does or Tether and "wrap dollars" but in this case you are wrapping SOL to be compatable with your native token
Sure! does it make sense? i think its a bit weird and honestly I have never wrapped SOL so I am not sure if what I am saying is true
Thank you for answering a dumb question. I really appreciate it!
The escrow program is built to handle SPL-SPL trades (e.g. trade 3 SBR -> 5 SRM) -- so if we wanted to allow SOL-SPL trades (e.g. trade 3 SBR -> 0.3SOL) there is a way to wrap the SOL->SPL so then the trade becomes SPL-SPL, or keep it native, but handle those scenarios separately


//////////////////////////////////////////////////////////////////////////////////////////

<<<<<<< HEAD
No. Only the program of the corresponding programid can create and write to that particular pda. everyone else can just generate a publickey.
hey i'm still stuck with this. if anyone knows more about this, please help thanks
Using the same seeds would find (as in `find_program_address`) the *same* PDA that you found last time.
So whoever has that seeds can generate new PDA ? Sorry I'm confused
I think of the seeds as a nickname for the account (or whatever, a mapping from some identifier --> the account's address)
Anyone who knows the seeds + the program's id can get the PDA's address (using find_program_address). The seeds aren't like a password though, they don't need to be secret‚Äîonly the program can use them to sign for the PDA (knowing the seeds isn't enough, you have to actually be the program).
So seeds are basically like passwords whoever has that particular seed he can generate the PDA ? I don't know if my question makes sense or not
How do you have more than 2 contracts in the same workspace? For example, if I wanted to test the multisig program here, besides testing the multisig on the contract itself (change owner), i would like to make it the authority or for another contract, create, approve and execute a multisig tx that calls a function in the other contract.
https://github.com/project-serum/multisig/
Does `#[account(zero)]` basically check the Account has not been initialized yet?
Interface description language
Sorry, I meant to ask, what is the full form of the acronym `IDL` (if any) ü§î
Yes, it's the same than ABI from Ethereum, it's use as struct schematic to serialize/deserialize
Does any know what `IDL` stands for? ü§î
You can take the candy-machine contract as example
```
#[account(init, seeds=[PREFIX.as_bytes(), config.key().as_ref(), data.uuid.as_bytes()], payer=payer, bump=bump, space=8+32+32+33+32+64+64+64+200)]

candy_machine: ProgramAccount<'info, CandyMachine>,
```
where the `seeds` is used to generate the PDA
Do we have any example/test to look into
How to create program derived addresses in anchor ?
I mean, in you contract you use snake case, but for your call you use camelCase, little bit confusing.
do `console.log(program.rpc)`
(changing it to helloWorld worked, thanks :D)
ah ah...isn't rust convention to use snake case?
anchor transform snake_case to camelCase
it's helloWorld()
i have a simple program like this:
```rs
use anchor_lang::prelude::*;

declare_id!("EjrB83rxARGanVZgkqRGLPMjge2nVTiM6RsFFiAQ5R1c");

#[program]
pub mod test03 {
    use super::*;
    pub fn initialize(_ctx: Context<Empty>) -> ProgramResult {
        msg!("Hello World");
        Ok(())
    }

    pub fn hello_world(_ctx: Context<Empty>) -> ProgramResult {
        msg!("Hello World!");
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Empty {}
```

but when i try to call the hello_world() function i get a function not found error:

```js
  it("Says Hello World", async () => {
    const program = anchor.workspace.Test03;
    await program.rpc.initialize();
    console.log("Hello World TX: ", await program.rpc.hello_world());
  })
  
```
i copy pasted the incrementing code in the test js in the counter example, but i am running up to this error, anyone know how to fix this
Ok actually I have `The given account is not owned by the executing program`, I'm trying to access to account from another program to get information from it, do you know how I can do it ?
edit: Ok I have the problem using `ProgramAccount`, so I will use `AccountInfo` and parse it
i'm getting this error and here's the corresponding line of code  ` #[account(mut)] pub amm_id: AccountInfo<'info> ` so if I change it to `#[account(mut)] pub amm_id: Program<'info, Token>`, the error goes away. However amm_id is a program_id but not of the Token Program, so would this deserialisation still work or should I be using something else?
Check the <#889606719829835816> also, something neat just got posted there
Thx you, I will read it
Good resource to get the hang of it https://2501babe.github.io/posts/solana101.html
Thx you for your help, I will do some tests
oh ok, like a pointer address
the account points directly to the data in the program
there is no "fetch"
Oh okay, I though the account was fetch from the client, but yes, it should be fetch directly from the execution.
pass the account and read it
Hum, I am looking to read an account but onchain, the goal is to cancel the transaction if the account contain a special value, the goal is to keep it atomic, if my account value change between the moment when I send the tx and the moment when the tx is executed, it have to cancel the tx.
read the account directly?
Hello guys, is it possible to get variable from another program ? like CPI but to fetch data
So when you delete the `#[error]` you end up sneakily deleting the generated definition of the Result type.
In case anyone's interested, the üëª behavior there happens because the `#[error]` macro actually generates the `Result` type for you https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/error.rs#L46
In the `anchor.toml` is it possible to have multiple test scenario? 
```toml
[scripts]
test = "asdasd"
test-xyz = "qweqwe"
```
constraint = user_source_token_account.owner == *user_source_owner.key works thanks!
If I change to ProgramResult it gets happy again
It doesn't like Result<()>

I just did, and ran anchor build. It is yelling at me
Whoops, `constraint = user_destination_token_account.owner == user_source_owner.key` [edit or maybe .key() instead of .key]
there is still some issue with user_source_owner

This is actually kind of an odd thing‚Äîtry commenting out the `#[error]` enum at the bottom of the file and try doing `anchor build` üëª
I have never seen it before an was expecting ProgramResult
This is in the Chat app

Anchor?
Is the Result<()> from a previous version of
Ah, think you might have to just do `constraint = user_destination_token_account.owner == user_source_owner` inside the `#[account(...)]` part.
It says that init must be provided before token authority. However I don't want to initialise an account, just verify the authority.
Do you maybe want `#[account(mut, token::authority = user_source_owner)]`?
ü§¶‚Äç‚ôÇÔ∏è
Hahaha
No, I mean in this case you actually need one to be running üôÇ
I dont think I am... If I am in the background, can I shut it down?
Looks like you're trying to do a local deploy, but you're not running your solana-test-validator (anchor test spins up + tears one down for you, but deploying is stateful)

Here is my anchor.toml

Why am I getting this error when I run anchor deploy?

this is the corresponding lines of code to this error. i did go through a couple of examples and they seem to be doing something similar as well so i'm not sure where i'm going wrong. any help would be appreciated.
yeah, this is my understanding from the Solana docs; but I was blown off with the lack of examples (in the docs at least) of how to make use of a PDA in order to create an account to store state and associate that with the sining address. But the tests folder you mentioned is actually a hidden gem full of juice
hey i'm trying to check if the tokenaccount is owned by user_source_owner but this is giving the below error on running anchor build. Any pointers? `#[account(mut, has_one = user_source_owner)]`
`    |                 ^^^^^^^^^^^^^^^^^ unknown field`
`error[E0609]: no field `user_source_owner` on type `anchor_lang::Account<'_, TokenAccount>`
When you create an account with a regular, non-PDA address, that address has to sign too, but it does so the old-fashioned way, with a private key. (So, PDA account creation isn't really different, it's just the funnyness with how you *sign* for them entails the weird bump + seed stuff)
you can't imagine how helpful this is! I am truly grateful üôÇ
Good to think through why the program needs them: the account you're trying to create needs to get passed to the program‚Äîits (program-derived) address, from the client. The program is going to invoke the system_program's create_account instruction, which requires signing for the address whose account is getting created‚Äîand the *only* way to sign for a PDA is with its seeds+bump.
I believe that's doable by calling the "findProgramAddress" on the client, it returns both the address and the nounce (I guess that's is the bump?)
You actually still need to pass the seeds/bump (or at least, the program needs to know them somehow‚Äîusually b/c they got passed from the client)
awesome, thank you so much! will check it out
The chat example is pretty good for pdas: https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs#L41
looking into it now
and with that, I won't need to pass it from the client?
Initializing one in your program is what the `#[account(init, seeds = [some, seeds, here], bump = the_right_bump, space = 8 + ...)]` is for
(Trying to find a simple example in tests/) Fetching an existing one is `PublicKey.findProgramAddress(seeds, programId)`, or if you already know the bump, `PublicKey.createProgramAddress(seedsPlusBump, programId)`
If you figure it out, please post the answer
ahh lemme see
that all sounds right; I am still trying to work out how to create an account from the address (if none already exist) or fetch existing one. What I can find so far is that I mgiht be able to get AccountInfo, and deal with plain &[u8] data on it
Creating an account that lives at a PDA only differs from creating an account behind a regular address in terms of how you sign for it (that's what the seeds + bump stuff is for).
find*
will double check again, but I remember I looked for any example of that and couldn't fine one
Not sure if this will help, but I think it's good to bear in mind that a PDA is only different from a regular address in terms of how you sign for it (a regular address is an actual elliptic curve public key, with a corresponding private key, whereas a PDA is this funny thing that looks like a pubkey but doesn't actually have a private key).
Sorry, I'm in here acting like I know what I'm doing, but I have no idea
I don't know either, can you change it to a Pubkey?
i believe i must change amm_id: AccountInfo<'info> to something else i'm not sure what though
It looks like you are passing it an AccountInfo struct when it wants a pubkey
amm_id is supposed to be a Program Id
so the issue seems to be coming from `ctx.accounts.amm_id.clone()` and it's corresponding `#[account(mut) pub amm_id: AccountInfo<'info>`
you just have to work your way over to the account struct of the function being called in the rust and check it out
are sure you found no examples in `anchor/tests` which use `findProgramAddress` in the javascript?
oh those are seeds
<@!723145219436183644>  what is the rust code, seems like a simple fix
that's great, just couldn't find any way so far to be able to create an account from the returned address from `findProgramAddress`
Any idea why i'm getting this error on anchor build? I'm using anchor 0.16.2 ` #[derive(Accounts)]
   |          ^^^^^^^^ expected `&anchor_lang::prelude::Pubkey`, found struct `anchor_lang::prelude::AccountInfo`
   |
   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)`
but `Account<'info, Struct` are basically owned by the program unless your `Struct` is linked to another program, e.g. `TokenAccount`
sorry, anchor deploy
Why do I get this error when I run anchor test
yeh, this new syntax doesn't make it clear that it's owned by the program
RPC request error: cluster version query failed: error sending request for url (http://127.0.0.1:8899/): error trying to connect: tcp connect error: Connection refused (os error 111)
that is program owned
if you want to associated an account with a user then use a PDA / `seeds` / findProgramAddress
so this ` 
```#[account(init, payer = user, space = 16 + 16)]
    pub base_account: Account<'info, BaseAccount>,```
should be program owned account, how do I create it on the client
you should just look at the examples
program owned accounts are just `Account<'info, YourStruct>`
it can't be that hard to store a state associated with the user wallet; yet I spent days in circles with no luck; admittedly I am not expert with react/js either, I am just able to get around things. So beside the lack of proper documentation, I am also n00b on several levels
can't agree more... but doesn't help much to get something basic done üòÑ
https://twitter.com/armaniferrante/status/1434554725093949452?s=20
how would one get around a "max seed length" error? Is there any way to rehash into a shorter seed? I worry about collisions if I just cut the seed short
A basic state aware program is almost impossible, or at least not clear how
well, there is no documentation whatsoever, and the tutorials are shattered and pretty much non-informative. Anyone says anything that might throw a pointer is helpful. Better than nothing. I am almost about to lose hope in Solana given how complicated it is to get anything useful working
No problem, hopefully I'm helpful haha
thank you as well
okay, let me try to fiddle around with it and see if it makes a difference

It might have something to do with this
and the user signs the transaction
nope, the wallet account is retrieved from the client Phantom wallet
Is the wallet account declared in your Anchor.toml the same as the account that deployed the smart contract?
I don't mind creating the base_account on the client or on the Rust side; whatever works
Sure, it is nothing fancy.
```
use anchor_lang::prelude::*;

declare_id!("7CiTJHXzv7SdK1bf14nmCnPg9c8HRs3H9DdfEJMoay5K");

#[program]
mod example1 {
    use super::*;

    pub fn create(ctx: Context<Create>) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        base_account.count = 0;
        Ok(())
    }

    pub fn increment(ctx: Context<Increment>) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        base_account.count += 1;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Create<'info> {
    #[account(init, payer = user, space = 16 + 16)]
    pub base_account: Account<'info, BaseAccount>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct Increment<'info> {
    #[account(mut)]
    pub base_account: Account<'info, BaseAccount>,
}

#[account]
pub struct BaseAccount {
    pub count: u64,
}
```

I need this base_account to be owned by the program, and created deterministically so that every time user X is the signer, I can get (or create if non-existing) the account owned by the program for that specific user
<@!444202002042454016> no promises on being able to help, but if you want to post your rust code, I could take a stab
I am probably asking this question like for 7th time; but I am really strugelling getting my head around it üôÇ
How do you guys create a "program owned" account, either in the client or in the Rust program?
Also, thank you <@!381015687486898176>  for having the question
Thank you <@!134416332509675520>
In case anyone's curious, <@!381015687486898176> and I debugged a bit and it turned out the issue was kind of interesting: anchor 0.16.0 I guess has a bug with generating incorrect IDL for `from: Signer<'info>` (the idl didn't think from should sign, but obv it should). Switching back to old-school `#[account(signer)]` annotation worked though üîÆ)
Got it.. Thanks
Anchor specific. They are from the anchor source code
Hey, probably a dumb question, but are these error codes Anchor-specific or would this help in debugging programs written in pure Rust as well?
Great, thank you so much!
looks like its 167 so   AccountNotProgramOwned: 167,
https://github.com/project-serum/anchor/blob/master/ts/src/error.ts
then comapare that against the souce code
look up what 0xa7 means in decimal format
Googling doesn't get one anywhere üôÇ
what does `custom program error: 0xa7` mean? and where one could find reference for these error numbers?


//////////////////////////////////////////////////////////////////////////////////////////

enum discriminant
why does the account size +1 here https://github.com/project-serum/anchor/blob/master/ts/src/coder/common.ts#L23 ?
There's a guide in the Solana docs for installing the CLI tools on Windows. I'm not a Windows user though, so can't confirm everything works https://docs.solana.com/cli/install-solana-cli-tools#windows
is there a beginners guide on how to setup solana dev on windows (like setting up wsl and dockef?
that really helps tie it all together. thank you!
Just to tie this syntax back into what I wrote above‚Äîwhy do you need the seeds + bump when init-ing an account that lives at a program-derived address? Account creation requires talking to the system_program via CPI (you ask it to allocate some space for an account at the desired address + decide who should own the account), and the system_program wants the new account's address to sign this intention. For regular, non-PDA addresses, they have to sign their own account creation from the client, using a private key. PDAs can't do this (not possible to sign for them from the client, only the program itself can), so the program has to use `invoke_signed` to talk to the system_program; you do so by passing along the seeds+bump of the PDA you want to sign for.
makes front-end life 100x better
```rs
#[account(
    seeds = [...],
    bump = acc.bump,
)]
pub acc: Account<'info, T>
```
Yep! I like that pattern too, use it in the repo above actually
its becoming very common for people to store an accounts `bump` value _in_ the account data itself so validation doesn't require passing it as an instruction argument
thank you!
ah that's amazing
This is an example I've posted before: https://github.com/cqfd/anchor-visitors
do you have any examples with frontend/program code of using the Anchor interfaces to initialize program accounts?  `#[account(init, seeds = [ ... ], bump = xyz)]`
But at a high level, the main thing is seeds are like the PDAs program-specific "name"; you've got a mapping from seeds => account. The bump is just this annoying little implementation detail (you only have to care about it because of annoying performance reasons‚Äîsolana could always recalculate it for you but that takes a variable amount of computation üòî)
gotcha! makes sense!
The bump exists because that hash smoosh might land on an actual curve point (bad, pda's aren't supposed to be actual public keys). So the bump is just this little fudge factor‚Äîyou start at bump=255 and just keep doing sha256(seeds+bump+program_id) until you manage to find something off-curve üôÇ
As for seeds and bumps, I think it's easiest to just understand how PDAs work under the hood: you take your seeds + the deriving program's program_id and just stuff them in a sha256 hash https://github.com/solana-labs/solana/blob/master/sdk/program/src/pubkey.rs#L223, and see if you happen to get a valid public key or not
This is useful because sometimes a program might want to have some helper accounts lying around that it needs to pass to other on-chain programs via cross-program invocations, and it might need to sign for these accounts. That would be super awkward if it needed to maintain the necessary private keys (not even sure how that's possible on-chain since they'd be public I guess?)
Why they're useful: program-derived addresses are just addresses with a funny signing mechanism: because they're not actual public keys (points on the ed25519 elliptic curve), they don't have any corresponding private key, and this lets solana hijack them as addresses that a program itself can sign for
not entirely sure what best practices are (how to pick seeds / bump)
Currently searching Github for examples of initializing PDAs because I'm running into some issues with the seeds/bump
A basic primer on what PDAs are (pushing the pubkey off the curve) and why they're useful would be helpful. And then particular examples of using Anchor to initialize PDAs would be great.
I've been meaning to write up a post like that‚Äîis there anything in particular that you're finding confusing?
does anyone have a good write up for understanding PDAs? specifically how to think about seeds and bumps and transferring account ownership?
thanks <@!168868665456984065>
i'm not sure if that's 100% (maybe <@!501570363566587905>  has an opinion here)
so heap is preferred over stack always
cool!
so when you use stack vs heap?
i no longer use `Account<'info, T>` without boxing it
i see!
yeah that's what i've started using everywhere. solves alot of memory allocation issues and non-fatal build errors
i see that you can use heap memory with Box<> instead?
and tokenaccounts + mint haha
ah
some of the structs are 500bytes
that shouldnt be too many
around 8 accounts
how many accounts are you passing into context?
hm i see that the error is related to exceeding the 4kb stack size
I am getting this `Access violation in stack frame 3 at address 0x200003c80 of size 8 by instruction #20322',` error - i am guessing it's happening because I am passing too many accounts to a single program handler?
‚ù§Ô∏è
we're here to help!
Sorry for the noob question üôÇ
Managed to do what I wanted
Yh definilty üôÇ thanks a lot ‚ù§Ô∏è
Yeah I realized this a few hours later lol im stupid. Thanks a lot brotha
the idea is just that you know how many decimals place a particular currency has, e.g. USDC has 6 decimal places in Solana. So you always represent $1 as 1_000_000 . Or if you want to send $0.20 you're actually sending 200_000 usdc tokens
there might be some useful links here to get your head around it
https://softwareengineering.stackexchange.com/a/62979
<@!485884442016219136> it seems like you haven't quite grasped representing decimals as unsigned ints
hey Neil, you need to pass amount in lamports instead of whole token units
it's something like `pubkey::default`
SYSVAR_RENT_PUBKEY and SYSVAR_CLOCK_PUBKEY from @solana/web3.js (also provided via `anchor.web3`.
From the TS frontend side of things, where can one get the clock and rent Sysvar accounts needed for an RPC call?
Yes this, and maybe you can use the merkle thing from saber for the user subscription
Nop that was for Neil
mm yeah appreciate it! I was going to do this the only catch is that we are using candy machine (metaplex) and also want to have a public sale with sol being deposited. In order to do both a custom spl-token and a solana sale we will need two candy machines which I was trying to avoid
lol I dont know if im clear and not an expert, just wanted to help üôÇ
in 1), you wan also create web page in react that redirects if the connected wallet is not in the whitelist, and create a button so the transfert from your pool of "right to buy" tokens to the user's wallet is paid by the user
This might be clostly we this is how I'd do it : 1) Airdrop to the whitelisted guys a token that gives them the right to buy   2) Write a smart contract that accepts USDC and that "I can buy" token
haha ok got it'
No I think he was speaking to me üôÇ
Ok thanks a lot üôÇ I'll try this tomorrow. Have a nice day üôÇ
is this in reference to what I was saying?
If you need sol handling, then you wrap them before hand on the client side
As a rule of thumb, you should think all your program as handling SPL token only, and any amount you treat inside should be converted into that token mint decimals
You need to convert that UI amount of usdc (1.2) into the big number/lamport (idk how to call it) representation of it using its decimals
no thats the catch, I want to make it a transaction intstruction in a wallet, they should be paying for the token
Is it for an airdrop?
I cant use this right ?

But now imagine I want to send 0.2 USDC in a smart contract
yay!
üôÇ
No no I understand what you mean
So you mint 2.0 UI amount, but 200_000 "lamports" of that token in non_ui_amount.
I'm not a good pedagogue
Because when you mint two tokens, you mint 2 * 10 ** TOKEN_DECIMALS
Thanks for your help ‚ù§Ô∏è
Or I should be expecting a balance at 0.00002?
But when I create a new token with 5 decimal and I decide to mint 2 tokens, the balance is 2.00000
hey all I have a pretty long form question and I can provide details if it doesnt make sense. Essentially I am trying to build a whitelisting mechanism by validating the users wallet against an array of whitelisted wallet addresses and then initiating a transaction to sell an spl token if the validation returns true. *I want to know* if this is possible through a series of calls to the spl program library through a typescript file hosted on a lambda serverless program like Netlify
Everything should be treated as amount in the "decimal" format. Example, if using WSol token you would use lamports representation.

If I'm handling a token amount, and it's in WSOL, then I know that this amount 900000000 is equal to 900_000_000 (9 decimals), so 0.9 wsol in ui amount.

Check the amount_to_ui_amount and the other fucking for token in the lib
After looking at their code in mango v3 it looks like their transfer functions is different from what we can see in ido-pool or in the synthefy code, but again maybe im missing something
Hey guys sorry to ask again but just wanted to confirm : we cant transfer 1.2USDC using this implementation, right ? As the input should be a u64. I feel like im missing something. I dont understand how I can send fractions of USDC on mango for example...
You have to use a literal, at this stage
2 messages below ser
^
wait did you figure out a workaround for this yet? seems suboptimal to be passing in the literal value
If yes, is there any way i can detect that Pubkey is in its default state. I thought of Option as i can check if its None or Some
something like this?
```
#[account]
#[derive(Default)]
pub struct DataWithFilter {
    pub authority: Pubkey,
    pub filterable: Pubkey,
}```
derive default
not able to figure out what's wrong. Please help üôÇ
account contains an Option field
Getting this error for Account
```    
    Checking check_creator v0.1.0 (/home/powerconstruct/home/prize_pool_contract/programs/check_creator)
error: associated or seeds must be provided before space
  --> programs/check_creator/src/lib.rs:82:21
   |
82 |     #[account(init, space = 8 + 114)]
   |                    
```
<@601811510506815536> just search for the keyword `default` in the anchor repo to see examples
It's unnecessarily complicated if you're a beginner, default works just as well surely
I meant more like, don't use option
Oh okay. So Option alone should work?
I think that will be problematic with an Option, as the data size will be too small.
Given an IDL and a programId, is there any way to retrieve the source code of a program? I've been interacting with someone else's program via Typescript client: "const program = new anchor.Program(idl, programId);", but I'm running into custom errors and looking for a good way to figure out what I'm doing wrong w.r.t their program
That would set the public key to its default value until you assign it a real value
You could also use `default`
```#[account(init, space = 8 + 8 + 32)]``` Would this work for the mentioned account?
Thank you
Yess! right! ill take care of that
When you create an account, you need to specify `space`.
No. That refers to the account discriminator.
Awesome! I'll try it out. are you talking about this line? ```#[account(zero)]```
By default the option will be zero sized.
Just need to make sure to allocate enough space for the account.
Yes.
is it allowed?
Hi everyone! Can we add option in account trait. something like this :
```
#[account]
pub struct Check {
    amount: u64,
    vault: Option<Pubkey>,
}
```
oh wow i'm pretty sure i did the same thing last time ü§¶‚Äç‚ôÇÔ∏è thanks <@!501570363566587905>
If you're on mac, you need to cargo install.
That package only works for linux.
What's the best way to update Anchor? I'm running 0.16.0 on Mac. Just run `npm i -g @project-serum/anchor-cli@0.17.0`?


//////////////////////////////////////////////////////////////////////////////////////////

It's a conditional attribute, applying the second argument only if the first condition evaluates to true.
Hi everyone, 

I am wondering what the cfg_attr line does? i found this code in cfo folder of anchor tests repo.

Thanks in advance ‚ù§Ô∏è
thanks
ok yeah! i think i got it, sorry for the ping
yeah
this maybe? `program.account.MyAccount.coder.accounts.decode`
Ah, so you already have the account's data?
yeah exactly but without making a network call
Do you mean like doing `await program.account.yourAccountStructName.fetch(somePubkey)`?
does anyone happen to have an example of decoding a program accounts data using the typescript idl?
Okay, I will try these suggestions. Thanks <@103986638320861184> <@134416332509675520>
<@!866934864917037106> Another idea you could also do to have a fixed keypair to play with is something like this:
NOTE: Don't use these keypairs in non-local environments if you are putting them in source code or sharing them on discord üòõ

```
anchor shell
> keypair = Keypair.generate()
> keypair.secretKey
[
  163, 167, 187, 170,  79,  91,  81,  42, 101,  18, 126,
   60, 170, 191, 190,  29, 241,  97, 226, 156, 161,  76,
  209, 164, 133, 194, 191,  66, 168, 250,  99, 238,  97,
   26, 110, 139, 154,  73,  67, 176, 118, 251, 187, 130,
  255,  92, 102, 237, 174,  78,  22,  40, 115,  23, 148,
  144, 128, 249, 100, 207, 170, 117,  85,  52
]
```

Then copy that array of numbers (byte array) and paste it in your source code, replacing `Keypair.generate()` like this:

```javascript
const keypair = new Keypair.fromSecretKey(Buffer.from(
[
  163, 167, 187, 170,  79,  91,  81,  42, 101,  18, 126,
   60, 170, 191, 190,  29, 241,  97, 226, 156, 161,  76,
  209, 164, 133, 194, 191,  66, 168, 250,  99, 238,  97,
   26, 110, 139, 154,  73,  67, 176, 118, 251, 187, 130,
  255,  92, 102, 237, 174,  78,  22,  40, 115,  23, 148,
  144, 128, 249, 100, 207, 170, 117,  85,  52
]
))
```
Dope thx
One way you might do that (just as an idea): store the account at a program-derived address whose seeds are your wallet's public key.
My understanding is that the tutorial is initialize a new account each time (`const baseAccount = Keypair.generate();`). If you want to talk to the same account over and over again, you would need to re-use its address somehow.
This is the punishment you get for open sourcing.
yes, free marketing üòà
Hey guys, so I am trying to learn anchor and solana and I had come accross this blog: 

https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291

On the second part of the blog, we are deploying a program which contains a list called "data_list" and we can push strings into the array from the frontend app. But, the problem in this program is that we have to first call the "initialize" function in the program which then initializes the "data_list" array. So, in this scenario, my doubt is how do we make the entries we entered into the "data_list" array persistent? Now, when I disconnect and reconnect later, I only have the array with first element pushed by the "initialize" function. How can we make the program such that when we reconnect later, we get the previous list containing the entries we made before disconnecting?
Probably need to do this inside the instruction handle instead of the macro though. Since we dont have a `base` parameter for `seeds =`
Same as a regular account, except it's a PDA and so you need to check the seeds.
Also jet https://github.com/jet-lab/jet-v1/
anyone got an example on how to auth an ix call to be coming from an expected prog? would it be similar to doing it with any normal account? for example, let's say I have prog1 and prog2. prog2 only allows calls to ix2 if it's coming from prog1. I was thinking of having the user pass in prog1's id in init to save, and then check against that in ix2
thank you
Synthetify and PsyOptions both have open source frontends
Following on the question about a larger project, is there a larger project that we can look into which doesn't limit to just the on-chain program but also the front end code? Would love to learn some idiomatic ways to structure our front end.
<https://github.com/project-serum/anchor/tree/master/tests/ido-pool> another option
Thanks!
`await connection.getAccountInfo(new PublicKey(...))`
Say ``"BDaZrrPYF5ns5xdYTdJ8hjTsLRQouT5P1Fh9k5SJbe76"`` is the address for the account I want mintA to be, how would I get access to the account in javacsript from that string
Is there a way to get an account info from a string of a public key in Javascript? I have a mint that I know the public key address  of and I want to load the mint account for an instruction like ``mint: mintA.publicKey``
ok, very cool / makes sense, thanks
There the seed would be their pubkey.
It depends on the use case, yeah. Sometimes static seeds are fine but other times you might want e.g. a mapping userPubkey => some account that stores stuff about them.
Might be helpful to note that you don't really "create" PDAs (kind of being pedantic but hopefully in a helpful way), you "find" them; they just exist. You create accounts.
so for most use cases is that fine or would it be better to define the seed based on the user?
The address only depends on the seeds + program_id (assuming you found it with find_program_address, I guess otherwise it technically depends on the exact bump you used)
Yep, they'll get the same address.
i don't fully understand how PDAs are mapped/created, if there is a seed string that is a constant, and some program_id, will different users using the same program get the same PDA address? or is it dependent on the user address as well
and just conceptually from a protocol perspective
yeah its quite different than solidity
so powerful
very different coming from eth here haha this is cool tho
thank you!
yep! everything all good
fixed?
not that i'm aware of. each account at minimum needs 8, and then you're just counting the number of bytes for the fields in the account data struct
8 for the account discriminator, and 8 for each `u64`
is there a guide n where I can learn more about space
thank you!
yep, do `space = 8 + 8 + 8`

its likely a space allocation issue
ok and then `MyAccount`

what does your context struct look like
i tried it but there are some missing features on windows like rust bpf toolchain
I'm writing a simple contract with two parameters to test, but i keep getting this error. Would love some help



thank you!
Thanks!
i've been reading the anchor tests and it got me pretty far!
we've been open source since devnet day 1
if you really want a challenge, https://github.com/jet-lab/jet-v1
I need glass to chew
Anyone have a good larger project to start and grind through? I've gone through Anchor tutorials and various hello world guides.
https://tenor.com/view/developers-gif-13292051
ur a godsend thank u
Ill check that in a bit
Erm good catch
Is the `fee_account` somehow not actually an spl token account?
```
#[derive(Accounts)]
pub struct SetFeeAuthority<'info> {
    #[account(
        mut,
        constraint = fee_account.owner == *current_fee_authority.key,
        constraint = *fee_account.to_account_info().key == vault_account.fee_account_pk
    )]
    pub fee_account: Account<'info, TokenAccount>,
    pub vault_account: Account<'info, VaultAccount>,
    #[account(signer)]
    pub current_fee_authority: AccountInfo<'info>,
    pub new_fee_authority: AccountInfo<'info>,
    pub token_program: AccountInfo<'info>,
}
```
I've assumed that it's `vault_account` triggering the err
Hmmm. Is it possible some other account is triggering the check? Can you post your `#[derive(Accounts)` struct?
programId is reutrned as the owner hmmm
One thing you could do just as a sanity check is to fetch the account after you init it, and just make sure it looks ok/has the right owner: `await connection.getAccountInfo(itsPubkey)`
so it's weird, the account is init-ed and then passed in on subsequent ix invocations
and it is the same
this is from `anchor test`, I printed out the programId in my tests
haha the ole declare_id! dance
Is your declare_id consistent with the deployed address?
I'm getting `The given account is not owned by the executing program` when passing in, what seems to be, an account owned by the prog
hey there
I think that way you're skipping the `checked_`-ness (but yeah, that syntax will work)
this is the syntax that ended up working for me:
```
**escrow.to_account_info().try_borrow_mut_lamports()? -= amount;
**bob.to_account_info().try_borrow_mut_lamports()? += amount;
```
thanks
right
Or `pubKey.toBase58()`
ah
console.log(pubKey.toString()) I think works
Is there a good way to console log a public key in the browser? Getting an array like ``0: 60697966
1: 17388275
2: 34539843
3: 196375
4: 7464282
5: 16798653
6: 638181
7: 12198435
8: 30570165
9: 1101690
10: 0``
(And then if your program doesn't own the account, you'll have to ask whichever program does own it to do the transfer for you, via CPI‚Äîhow will depend on which program is the owner.)
If your program owns the account you want to take lamports from, you can do e.g. `ctx.my_account.to_account_info().try_borrow_mut_lamports()?.checked_sub(123)`
Hmm, yeah, looks like those aren't available on AccountInfo, only on an internal solana thing? https://github.com/solana-labs/solana/blob/master/sdk/src/account.rs#L83
I was looking there and didn't see the `check_sub_lamports`/`check_add_lamports` functions, but there is wrapped mutable reference to the lamports property. Do you know how to update the value through the `Rc<RefCell<T>>` wrappers?
Those are probably on the underlying `AccountInfo`.
<@!99911938955309056> are the `check_sub_lamports` and `check_add_lamports` functions available on the accounts provided by an Anchor context? I can't seem to find those interfaces anywhere 
https://docs.rs/anchor-lang/0.17.0/anchor_lang/struct.Account.html
ahh yep ok, turns out my issue was unrelated to signatures (custom program error üí™ ), but that was informative, thanks both of you üôè
it would depend on who the designated signer accounts for the instruction are
If the web wallet is already the provider's `.wallet` (how are you initializing your provider?), then it will automatically sign the tx here https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L105
https://github.com/project-serum/anchor/blob/master/ts/src/program/namespace/rpc.ts#L20
could be very similar behavior though...
`Provider#send` signs the transaction with the associated wallet then sends for commitment
```ts
const tx = program.transaction.function(..., ctx)
const sig = await program.provider.send(tx)
```
if you use the `transaction` namespace of the program instead of `rpc` (i.e. `program.transaction.function(...)`, it'll create a transaction instruction that you can pass to the provider wallet for signing and sending
is there an easy way to sign the transaction with a web wallet (`useAnchorWallet`) when you're trying to do a `program.rpc.function` call?


//////////////////////////////////////////////////////////////////////////////////////////

kinda slow today huh
nvm, got it, thanks
It still doesn't like me haha

Mm, is it complaining about syntax? I see you don't have an `#[instruction(authority_bump: u8)]` section?
<:pepewoah:866983237141397514>
Why does VS code not like this?
No... It sounds like they need to use a different function
The issue they're facing is that the function they want to run assumes they can construct a Token, but they can't (it requires an actual keypair)‚Äîdo you know another way?
You need to run the anchorWallet.signTransaction line... that will call the wallet to open the popup
https://github.com/solana-labs/solana-program-library/blob/12732f8d5a96bbbfcf0274b208849b6de0e5b0b0/token/js/client/token.js#L509

So I guess you'll have to manually do what the lib is doing: https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L563
I can't find any higher-level api exposed by the spl token js library.
So I guess that means you need to construct the underlying solana transactions yourself?
Hmm, yeah, I don't think you'll be able to run the Token constructor using the wallet, for the reason <@!847130012879814668> mentioned (the wallet won't divulge its private key to you‚Äîit just lets you ask it to sign stuff)
thank you sir!
Ok, sorry, I understand your question now, taking a look
Create a PDA with fixed seeds, e.g. with a static string.
how are global states usually written ?
Hi, How can I get the transaction of my NFT collection from other market places?
I was going to show him what you showed me in the source code where when you call program.rpc it automatically calls the popup for the user to sign the tx
Alan to the rescue! haha

Which function/library is that? Will take a closer look
this errors rather than shows the phantom popup
do i pass in a fresh Keypair? `var payer = new Keypair();`?
Yes... The anchor program will automatically create the popup for the wallet to sign the tx
seems it needs a payer signer ```constructor(
      connection: Connection,
      publicKey: PublicKey,
      programId: PublicKey,
      payer: Signer,
    );```
The wallet will auto-magically sign any txs, no need to pass it as an explicit signer.
Does that actually require a keypair or just the public key?
any way to use `getOrCreateAssociatedAccountInfo` in that case?
No. The wallet can sign a transaction, but you cannot get the wallet's private key for security reasons
can I get a Keypair from a Wallet in the anchor js package? I am trying to execute `getOrCreateAssociatedAccountInfo`
Of course!
Got it!! Thank you so much for your patience ‚ù§Ô∏è
You unfortunately can't generate it inside the instruction (solana just doesn't allow this, it's a funny gotcha/part of the learning curve‚Äîyou *have* to pass it in from the client)
Ah, right, so `check_signer` isn't just a pubkey, it's an AccountInfo
but as you mentioned, i dont think its necessary
my goal was to generate it inside
```
pub struct ConcludeMatch<'info> {
    #[account(mut, constraint = player_2_check.to_account_info().key == &game.player_2_check)]
    player_2_check: Account<'info, Check>,
    #[account(mut, constraint = &player_vault.owner == check_signer.key)]
    player_vault: Account<'info, TokenAccount>,
    // Program derived address for the check.
    check_signer: AccountInfo<'info>,
}
```
Here i am taking the check_signer in the instruction.
No, if check_signer is a pda then only your program can sign for it (not possible for anyone/anything else to do so)
Can you post your `#[derive(Accounts)]` struct? What type is `check_signer`?
Hmm, does it compromise security in anyway? like storing the checksigner with the vault it has auth over?
Ah, you'll still need to pass that pda in from the client (which means it will arrive to your program as an account, not just a pubkey)
how do i solve this?
here `check_signer `is the pda i generated using the method you mentioned, but its a `PubKey` and i cannot call '`to_account_info` on it.
Perfect! but i ran into a problem when im trying to do this. 
specifically when i use this api 
```
Transfer {
            from: ctx.accounts.vault.to_account_info().clone(),
            to: ctx.accounts.check.to.to_account_info().clone(),
            authority: ctx.accounts.check_signer.clone(),
        };
```
To sign for a PDA you just need to know its seed+nonce (that's what you pass to `invoke_signed`)
`find_program_address` uses `create_program_address` under the hood
Yep!
I want to use the generated PDA to sign the vaults it has authority over.
Okay, thanks for confirming. another question is whether I can generate the same PDA inside the program if I have the seed, nonce, and program_id using this fn `Pubkey::create_program_address`
Yep!
Hi all!! `anchor.web3.PublicKey.findProgramAddress` will this function give the same PDA if seed and program id are the same?
I am wondering on what version of serum dex is deployed on the mainnet, 0.4.0 is that the final?
At any rate, interesting to realize Pubkeys in Solana aren't just real-vs-PDA, there's also this funny (seed, base, owner) thing sometimes.
And I guess with `transfer_with_seed` the answer is that like with PDAs you sign kind of indirectly‚Äîyou instead just have to sign for `from_base`, plus provide the `from_seed` and `from_owner` that were used to construct the `from` argument.
So the question is how are you supposed to sign for the result of a `Pubkey::create_with_seed`, since it isn't necessarily an actual pubkey with a corresponding private key (and I guess the intent is that it *isn't* an actual pubkey?).
Under the hood `Pubkey::create_with_seed` just smooshes base + seed + owner together with sha256 (somewhat similar to how `Pubkey::create_program_address` works, minus making sure it's off-curve)
Hmm, good question, I'm actually not really sure when you would want to use the base+seed+owner version of addresses ü§î
```
init(var1, var2, var3, {
accounts
```
Okay
Yes, add another one
Is there any way to send more than one variable as instruction data

```
await program.rpc.initialize(data.toString(),{
                accounts: {
                    userAccount: userAccount.publicKey,
                    user: provider.wallet.publicKey,
                    systemProgram: SystemProgram.programId,
                },
                signers: [userAccount]
            });
```
Have you started test validator ? If not start test validator. `solana-test-validator --reset`
guys, idea any ideas why there is an rpc request error?
https://docs.rs/solana-program/1.6.1/solana_program/system_instruction/fn.transfer_with_seed.html
Has anyone used ``transfer_with_seed``? What is from_base?
**deletes gross code**
ok thanks, I'll give this a shot, a good avenue to explore
my JS/react skills are... limited
ok, well that's good to hear at least, yeah i'm doing a bunch of wacky stuff in the client, but think i have a decent handle on it, the final step is here if it might help, but i think a lot of the logic is wrapped in before it gets to these objects
One way you can try to do that: `await connection.getAccountInfo(thePubkey)` will let you poke around the account in js, and you can take a look at its owner field and see it its ok
You'd basically want to check that `escrowAccount` really is owned by the program, and that the two `TokenAccount`s really are token accounts (they need to be owned by the token program)
That looks reasonable to me at a quick glance. How are you passing/creating the token accounts in JS?
```
#[derive(Accounts)]
pub struct Exchange<'info> {
    #[account(
    signer,
    constraint = escrow_account.taker_key == *taker.to_account_info().key // this one i added myself, i thought it might be missing from the example because it's difficult to simulate in a single test from a wallet, but really not sure about this
    )]
    pub taker: AccountInfo<'info>, // taker
    #[account(mut)]
    pub taker_receive_token_account: Account<'info, TokenAccount>, // where the tokens are transferred after accepting the offer
    #[account(mut)]
    pub pda_deposit_token_account: Account<'info, TokenAccount>, // token account owned by the pda where the tokens are initially deposited from the initializer
    #[account(mut)]
    pub initializer_main_account: AccountInfo<'info>, // initializer of the escrow contract
    #[account(
    mut,
    constraint = escrow_account.initializer_deposit_token_account == *pda_deposit_token_account.to_account_info().key,
    constraint = escrow_account.initializer_key == *initializer_main_account.key,
    close = initializer_main_account
    )]
    pub escrow_account: Account<'info, EscrowAccount>,
    pub pda_account: AccountInfo<'info>,
    pub token_program: Program<'info, Token>,
}
```
adding some comments to my derive(Accounts)
ok, thanks, i'll ignore them for now and circle back
Mm, not sure, I don't think there's anything special about them though
not sure if that's true
i was reading some documentation that led me to believe you can send something to an ATA without creating it first, via the AToken program, and don't need to explicitly create the account
sure, i've been messing with it a bunch so i'm probably a bit off track, but can post the current state ha, one sec
Haha, what do you mean by "just exist" here?
Token accounts are always owned by the spl token program (TokenAccount in anchor checks this), so I wonder if you're not stating that correctly in your program
Can you post that?
That particular message is usually generated by an `Account<'info, Something>` in your `#[derive(Accounts)` struct
The current state of the art debugging technique here is unfortunately to do a bunch of source-diving ü§ø. I guess anchor should probably emit more informative logs here though (maybe in debug mode or something)
i've tried creating associatedTokenAccounts (which as i understand it sort of "just exist"?) also created regular token accounts beforehand
hey all, are there any suggested approaches for troubleshooting errors? I'm trying to work through this escrow program, with a client, and keep hitting "The given account is not owned by the executing program" on the last "exchange" step. (I can initialize and cancel...) It sounds straightforward enough but I've been hitting my head against it for a while now. Any way to zero in on which account it's complaining about?
Funny, I was like, damn, that must have been tough, go phantom üò§
Oh, right!
It always simulates the txs before you submit it, that's how it catches errors beforehand
there's even a simulateTransaction() method in web3
Yeah, I wonder how hard it was to implement that. Is it easy to simulate txs? Do you need to maintain your own validator or something?
phantom recently added security features that preview the amount of SOL that gets slurped out of the wallet
Got it really appreciate the help!
I guess the counterintuitive security thing is that when you authorize a tx in say Phantom, you might not totally know what it's going to do/how much it will cost üò± Phantom tries to estimate this for you but they have to simulate the tx I think.
Mm, not totally sure either, I think at least one risk with NFT minting is that if you don't use a burner wallet, you might accidentally allow a sneaky program to drain your funds (you thought you were signing a "mint me an nft" transaction, but it was actually a "let me drain your funds" transaction)
(Haven't thought through your use case super carefully‚Äîyou'd just need to make sure you're able to sign things correctly)
Not really sure what those are haha
Well I have done something similar with candy machine and just create a transaction instruction to mint an NFT, it works but I was given advice saying theres security risks with that
Yeah, that sounds like it should be possible‚Äîhave you tried doing that?
I was suggested to create an escrow program to do this which seems a bit overkill?
Hey all super basic q, just want to make things as simple as possible. Lets say I want to send 1 spl token in exchange for SOL, is it possible to create a series of calls to the spl-token program create a transaction instruction (all using typescript on frontend) and just send that to the users wallet?
Hmm, is there a snippet on how to subscribe to the event?
Anchor events are just calls to `msg!` under the hood, so yeah, they'll run even if you trigger them via a CPI
Is anchor emit possible through CPI?
Thank you...
u8, u16, u32 don't
I thought every number passed into the Rust contract had to be a BN
Thanks!
Thank you <@!501570363566587905>
Big number. Needed for anything larger than 2**53-1. See `bn.js`.
it is just bits that the contract reads
Binary number
big num?
What's a `BN`?
ah yeah, there's tons of solana clients. anchor ones harder to come by
Looks like there's the Rust one too: https://docs.rs/solana-client/1.8.0/solana_client/rpc_client/struct.RpcClient.html
is my test borked or is my assumption correct
just want to sanity check, but I've written a test to make sure that an instruction using `init` on an acc can only be called once, and it looks to be the case
https://github.com/gagliardetto/solana-go is this the canonical go one?
there's a go one + python WIP one
I think there's the Solnet people too
Are there Solana clients other than JS/TS?
so basically when a user passes in the program owned acct, I check it against the fixed seeds?
gotcha I'm not using a state struct actually
Just use a PDA with fixed seeds instead.
They'll be removed soon.
No but you shouldn't use state structs.
Can a user fake a program's canonical state struct?
ahahaha sick thanks, i actually just realized this just before u replied üòÇ
This is the default with regular solana smart contracts. With Anchor, you can achieve this with `ctx.remaining_accounts`.
is there a way to accept a variable sized collection of accounts as input to a program with anchor (or with solana more broadly?)
If the pda was being used as an account to store data then it would be a different case, but the authority relationship can be 1:many
I think since the pda is only being used as an authority it would be fine to have multiple different escrows, they would just all have that same pda as their authority
i would need to include some other data in there (maybe from another account or something) in the seed/pda calculation for it to support multiple different escrows using the same program
https://github.com/project-serum/anchor/blob/master/tests/escrow/programs/escrow/src/lib.rs#L53
from the way this program does the PDA, it seems like it'll only support one escrow at a time right?
awesome thx
I don't like the pattern of creating in a separate instruction, because it makes it harder to reason about the intended behavior of the program when you need to consider the client in addition to the smart contract.
2. imo.
which way is more idiomatic?
1. Create a token_account, pass it to the program, and assign the authority to be the PDA
2. Create a token_account within the program with the PDA as the auth
Perfect, wasn't sure if I was just missing something.  Thanks
Taking a look at all the instructions, no, I dont think you can close a mint account and reddem the rent exemption. https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs
That's ok. Non anchor quiestions are welcomed.
guess that's not an anchor question sorry
There's no way to close and redeem the rent lamports from a Mint account, right?
you would need to implement some sort of commit-reveal scheme or RANDAO if you want on-chain rng thats secure
on-chain data is deterministic, and can easily be used as an exploit for on-chain RNG
sounds like a good way to get hacked
maybe I was supposed to delete the .anchor dir
lol a video from May 18th is "super old". Web3 moves too quick.
With root permissions.
And so when it builds, it creates files and directories.
It mounts the local workspace into the image.
but I don't understand advanced technology like this ü§∑‚Äç‚ôÇÔ∏è
yeah I thought docker doesn't even make any changes to my machine
Ok so it's definitely an issue with docker leaving around state that wasn't cleaned up. ü§î
the vid is super old though, need to come up with a new one that takes into account all the new syntax in anchor
thanks!
Goes through PDAs in a bit of depth
I found this super helpful (https://www.youtube.com/watch?v=i6Ycr5nhjH8)
cool that works
And then run the publish in there.
I mean to git clone mango in a fresh directory.
you mean this: `docker pull projectserum/build:v0.17.0`?
```
rm -rf /workdir/docker-target
rm -rf target
```
Can you try a fresh clone?
I'm thinking it's because it's trying to create, modify, or delete one of the directories that was created by the docker image.
Is there a way there could bea permissions issue with anchor publish but not with anchor build verifiable
Did you wipe the entire target dir?
didn't work
Also make sure you kill the existing docker image if it's still running.
I.e. `target/verifiable` and `docker-target`.
Can you try wiping the temporary dirs?
the solana sdk would probably load it / deserialize it for you
I'm attempting to `anchor publish mango` and nothing seems weird about my permissions but I'm getting `Error: permission denied (os error 13)`. 

Background: It did start executing the command properly the first time, but I cancelled it mid way to change something. `anchor verify -p mango <...>` is successful and I reinstalled anchor by force with the usual command. Any help would be appreciated so we can get latest deployed mango onto anchor registry
I'm having a little trouble finding an example of getting recent block hashes on the rust side. I guess you pass in the `SysvarRecentB1ockHashes11111111111111111111` account, but then does anyone know how you then get the most recent block hash?
yes
If you are confused about PDA, please go through this https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses
okay. and PDA are generated from program id with a random seed, right?
the program is not the vault owner, the PDA is the vault owner. PDA signs the Transfer instruction. Clear ?
Hi everyone! I am working on cashiers check program and have some basic doubts, please bear with me. As far as I understand 
```
let [_checkSigner, nonce] = await anchor.web3.PublicKey.findProgramAddress(
      [check.publicKey.toBuffer()],
      program.programId
    );
    checkSigner = _checkSigner;
```
this code gets you the program address. Now on rust side of things, we are using the same check signer to transfer funds from vault to some other account as shown below:
```
let cpi_accounts = Transfer {
            from: ctx.accounts.vault.to_account_info().clone(),
            to: ctx.accounts.to.to_account_info().clone(),
            authority: ctx.accounts.check_signer.clone(),
        };
```
My question is can I transfer the funds from vault to the destination without the `check_signer` ? I ask this cause I think if program is vault owner then why need `check_signer`


//////////////////////////////////////////////////////////////////////////////////////////

And my idl:

`
{
    "version": "0.0.0",
    "name": "solanaapp",
    "instructions": [
        {
            "name": "create",
            "accounts": [
                {
                    "name": "baseAccount",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "user",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "increment",
            "accounts": [
                {
                    "name": "baseAccount",
                    "isMut": true,
                    "isSigner": false
                }
            ],
            "args": []
        }
    ],
    "accounts": [
        {
            "name": "BaseAccount",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "count",
                        "type": "u64"
                    }
                ]
            }
        }
    ]
}
`
Hello guys! I'm facing a problem but I'm completely sure its really easy. I'm following medium's tutorial (the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291)

At the front end part when the code is making the instance of the deployed program its trying to access a metadata object from the idl to get the address of the program. 

After building the program several times my idl doesn't have that property object so the instance fails on the front app.

Snippet in question: `const programID = new PublicKey(idl.metadata.address);`
```ts
const b58 = "..."
const key = new web3.PublicKey(b58)
```
and on that thread, has anyone done a bonfida integration before? to lookup .sol addresses?
are there any best practices for parsing strings to `PublicKey`s? Just cast the string to a buffer and then decode? https://project-serum.github.io/anchor/ts/classes/web3.publickey.html#decode
You can see an example of where anchor does this here https://github.com/project-serum/anchor/blob/master/lang/src/common.rs
Thanks!
The lamports live in e.g. `ctx.accounts.my_account.to_account_info().try_borrow_mut_lamports()`
Anchor also has a `close` attribute that might help here (assuming your program owns the pda‚Äîif some other program owns it then you'll have to ask it nicely via CPI to do the transferring)
Ok, so what is the function to get an account's remaining lamports
Yeah, that's my understanding.
Thanks! So basically if I drain the PDA of everything, Solana deletes it
Yeah, if you can transfer those lamports then you're all good (they live with the rest of the account's lamports, not in any special place etc.)
I mean it's "rent reserving" lamports... Like I will be creating a bunch of PDAs... once they are used up in 60 seconds... I want the rent reserving lamports I sent to them back...
Yep, think all you need to do is send its lamports to your destination of choice (how will depend on which program owns the account)
Can I delete a PDA and claim back its lamports?
OK confusion on my side, I had a TokenAccount with a owner contraint, that was failing obviously. (The mint was fine just being a mint owner by the TokenProgram)
Technically a `CpiAccount` would fit 
> /// Container for any account *not* owned by the current program.
 But it seems deprecated in favor of `Account`

I'm a bit confused
So I cannot simply user account as I do to access a mint without caring of it's owner (I don't even use the #[account(...)] above it)
I wanted to avoid passing a non typed `AccountInfo`, but seems I'll have to
But a Mint... I think that's where my issue lies currently
In general `Account<'info, T>` asserts that the account is owned by `T::owner()`. That gets set to your program when you use `#[account]`, but e.g. `TokenAccount` says its owner should be the spl token program, etc.
I simply used that to conveniently access a `Mint` directely
and having some owner issues with the front end (that I did not had in my tests, but probably because of some keypair handling too many things)
reading `/// Account container that checks ownership on deserialization.`
I think I got something wrong... when I use `Account<'info, Mint>`, or other thing than mint, does that mean that the program must be the owner?
Thanks a lot DVCRN. It looks like they are creating a replica of Metadata Struct in metadata.ts. I was planning to use it in Smart Contract... So you recommend I manually create a replica of Metadata Struct and unpack it as normal?
This is likely because the tutorial is slightly out of date (looks like it needs to be re-deployed or something, bug is fixed in master): you need to have the ANCHOR_WALLET env var set. Try doing `ANCHOR_WALLET=~/.config/solana/id.json node client.js`
i used anchor test and it worked but when i use node client.js it fails
nvm
thanks, it kinda work but its now giving a new kind of error üôÉ  coding is like whack a mole(error)
in the specific project directory
that's what i often do
you could just install the package without `-g`
i will try this out
https://www.youtube.com/watch?v=oFF_QryVSJk
i dont know how to do this
how do you set the node_path?

Thanks a lot DVCRN. It looks like they are creating a replica of Metadata Struct in metadata.ts. I was planning to use it in Smart Contract... So you recommend I manually create a replica of Metadata Struct and unpack it as normal?
maybe this helps https://gist.github.com/dvcrn/c099c9b5a095ffe4ddb6481c22cde5f4
Hi Friends. I am trying to read Metaplex Metadata account data. My Problem is .. I am not sure how to pass the data in Metadata struct provided in metoplex contract state. I mean if it was my own data I would have made an unpack instruction but I am not sure how I can unpack Metadata in metadata struct. Any help/guidance would be appreciable.
Hi Boolet... Was you able to read the metadata? If yes.. can you share some tips to read the data from !!
But I don't need all
Yes that's the thing, mango is... heavy https://github.com/blockworks-foundation/mango-client-v3/blob/main/src/ids.json
OK! Great info, I was writting data and using pyth-client like Jet do in their repo before. But that's easier to clone
make sure you copy all accounts that a program needs
yes correct, and use `--reset` to reset it
good thing is that you only do it once then it's stored in the local `test-ledger` folder ? Will make a script thanks
Alright will do so then
yeah I use a bunch of --clones. For example copying metadata program etc
Have you used clone to copy more than single accounts, like for instance I wanted to use mango, but that's a lot of things to copy? Curious what was your usage of it
still running but seems to be working so far üôè
` rustup toolchain install stable-x86_64-apple-darwin`
what if you run the build command manually? 
```
cargo build --target x86_64-apple-darwin --release --bin solana --bin solana-bench-exchange --bin solana-bench-tps --bin solana-faucet --bin solana-gossip --bin solana-install --bin solana-keygen --bin solana-ledger-tool --bin solana-log-analyzer --bin solana-net-shaper --bin solana-sys-tuner --bin solana-validator --bin cargo-build-bpf --bin cargo-test-bpf --bin solana-dos --bin solana-install-init --bin solana-stake-accounts --bin solana-test-validator --bin solana-tokens --bin solana-watchtower --bin solana-genesis
```
this isn't working for me, which rustup toolchain do you have?
so the --target x86_64 flag mainly
```
diff --git a/scripts/cargo-install-all.sh b/scripts/cargo-install-all.sh
index ae795cda9..4a48b6956 100755
--- a/scripts/cargo-install-all.sh
+++ b/scripts/cargo-install-all.sh
@@ -9,7 +9,8 @@ if [[ $OSTYPE == darwin* ]]; then
   # But `greadlink` does, which you can get with `brew install coreutils`
   readlink_cmd="greadlink"
 fi
-cargo="$("${readlink_cmd}" -f "${here}/../cargo")"
+# cargo="$("${readlink_cmd}" -f "${here}/../cargo")"
+cargo="$(which cargo)"
 
 set -e
 
@@ -126,7 +127,7 @@ mkdir -p "$installDir/bin"
 (
   set -x
   # shellcheck disable=SC2086 # Don't want to double quote $rust_version
-  "$cargo" $maybeRustVersion build $maybeReleaseFlag "${binArgs[@]}"
+  "$cargo" $maybeRustVersion build --target x86_64-apple-darwin  $maybeReleaseFlag "${binArgs[@]}"
 
   # Exclude `spl-token` binary for net.sh builds
   if [[ -z "$validatorOnly" ]]; then
```

I changed it like this
let me go figure that out, weird
ah, i see it's still arm64
```
‚ùØ file bin/solana-test-validator
bin/solana-test-validator: Mach-O 64-bit executable x86_64
```
with `file <path to binary>`
yeah that script, i did everything under rosetta, so pretty sure it's x86_64
do you know a way to check?
arm doesn't work, so you need to compile to x86_64
with the cargo-install-all script? did you generate a x86 binary or arm
i did
you have to compile from scratch, the prebuilt binaries don't properly work
yeah...i got solana-test-validator and anchor build working so thought i was out of the woods on that haha
is this m1 by chance?
my `anchor deploy` on localnet is stuck on `Finalizing transaction`, it hangs for a while and then i see this error:
```
Error: Account allocation failed: unable to confirm transaction. This can happen in situations such as transaction expiration and insufficient fee-payer funds
``` 
i definitely have enough funds, checked with `solana balance --url http://127.0.0.1:8899`
seems like something dumb, any idea?
Yes I connected the dots, thanks
anchor will generate a new keypair for your program by default but if you have an address that you got from key grinding, you have to go replace it
That make sense
you need to swap the keypair json file at `target/deploy/PROGRAM-keypair.json` with the correct one
Maybe some artefact, rebuilding
But why do my program adresse deployed with `anchor test --skip-local-validator` don't match the one in anchor.toml
Before it worked with `anchor test` but when I rerun it I see that there was no "deployment".
Also looking at the generated IDL, the adresses there don't match my declare ids
Thanks again Alan.
Thanks
Jeez
solana-test-validator --help :p 
and https://docs.solana.com/developing/test-validator
Where is that documented if it is
Oh, interesting
you can clone any program/address on into your local net with the `--clone` flag
Yes that's the thing, I wanted to test on devnet for some feature that interact with mango. But I'll need to write some code in app instead
just use localnet
can you even run tests against the dev cluster?
` test        Runs integration tests against a localnetwork` that would explain why B)
Running `anchor test --provider.cluster devnet`, with the `anchor.toml`'s `provider` set to `devnet`, and using `provider.env()`, I still have issue related to localnet when attempting to call my program

```Typescrit
    export class MyProgram {
      public static ProgramId: PublicKey = anchor.workspace.ProgramName.programId;
      public static rpc: anchor.RpcNamespace = (anchor.workspace.ProgramName as Program).rpc;
    }

   await MyProgram.rpc.new({
      //...
   )};

```

`Translating error Error: failed to get recent blockhash: FetchError: request to http://localhost:8899/ failed, reason: connect ECONNREFUSED 127.0.0.1:8899`

is defining the RPC this way not viable?
much thanks, that did it, i had the syntax wrong
Yeah, can you show the line of code you're trying to use? Using multiple addresses shouldn't be a problem
create is when you have the nonce
findProgramAddress not create
`Program failed to complete: Could not create program address with signer seeds: Length of the seed is too long for address generation`
What goes wrong with something like `[addrOne.as_ref(), addrTwo.as_ref()]`?
does anyone have any clever ways to combine two account addresses into something short enough to be used as seeds for a PDA? üòÑ
```
module.exports = withTM({
  reactStrictMode: true,
  webpack5: false,
  webpack: (config, { isServer }) => {
    // Fixes npm packages that depend on `fs` module
    if (!isServer) {
      config.node = {
        fs: 'empty'
      }
    }

    return config
  }
});
```
but with
works
I had this issue as well, adding this webpack function to your `next.config.js` is a workaround I found but yeah:
```js
module.exports = withTM({
  reactStrictMode: true,
  webpack5: true,
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.resolve.fallback.fs = false;
    }
    return config;
  },
});
```
what code are you using?
./node_modules/@project-serum/anchor/dist/esm/provider.js:150:0
Module not found: Can't resolve 'fs'

Can't use it in nextjs??
thanks, I found the spl_token_metadata crate, but I don't understand what the unique identifier of the NFT collection is...
Why does Rust want this???
Thank you!
By passing its seeds+bump (`invoke` is just `invoked_signed` but without passing any seeds+bump)
If the from account is a PDA, you'll need to sign for it with `invoke_signed`

I am trying to send money from a PDA back to an account... why won't it let me?
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
Yes. Pass in the metadata address as an account and verify the address is correct in the program.
The token holds metadata that you have to be able to read... I don't know the specific funciton to call to read it, but it is possible

I have never done it, but it has to be possible
Isn't it risky, as the minter can create another collection? Can you check SPL metadata from the rust program?
You could check if they were minted from the same source... or you could read the metadata from the NFTs
Hi, anybody can explain how I can know if two NFTs are part of the same collection from within Anchor
That is right... I just had to allocate space
maybe you didn't allocate enough space for the `Vec`?
ah yep this did the trick thanks, just had to restart vs code :->  
Another question I had: if I want to make sure that a CPI instruction is done by only one specific program, I guess I would use `CpiContext::new_with_signer` but how would I then check in the called program if it's the correct one? I just tried passing `Signer::try_from(account_info)` but I guess that's not the way üòÖ


It complains when I try to push data to a vec
What does this error mean?
Makse sure you're using `<cpi-crate>::cpi::accounts::InitPlayer`
ah thanks, i'm on v0.17 and its complaining about mismatched types, so ill try that üí™
But to answer your question, you can simply do `Loader::try_from(account_info)`
In the latest version you don't need to convert into loader for CPI.
Some more CpiContext related questions related to this, bear with me plz üôè : I'm trying to CPI like this
```rust
        let player_list = ctx.remaining_accounts[3];
        let cpi_accounts = InitPlayer {
            player_list: player_list,
        };
        let cpi_program = ctx.remaining_accounts[2].clone();
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
        other_program::cpi::init_player(cpi_ctx);
```
`player_list` is an `AccountInfo` because i have to use `remaining_accounts`, but the struct expects a zero_copy loader `Loader<'info, PlayerList>`. Is there a way to turn an accountInfo into a Loader or something like that?
That way we can derive address simply from the wallet.
yw. Another thing I want to figure out (still haven't) is if there's a way to use an **associated token account** for this, instead of a  Keypair.generate()
amazing, thank you, will check it out
<@!886273867293802556> I've reused most of the code from the `Token.createWrappedNativeAccount ` which I couldn't use out of the box because it requires owner `Keypair` to be passed along, which isn't feasible when using (web) wallet. https://gist.github.com/imprfekt/90d35b599ec1016ac9649ab8ac91815b
I just did this literally today. It's a f*cking mess... Sending the gist straight away
not yet as far as i know
wonder if anchor has any shortcuts
yeah you're definitely right as far as i can tell
https://github.com/project-serum/serum-dex-ui/blob/5b4487634e3738c57ace6da1377704e95f53c588/src/pages/pools/PoolPage/PoolAdminPanel.tsx#L250-L272
I think the `transfer_with_seed` instruction you're looking at is for something else (not applicable in your case, though tbh I'm unclear on when it *is* applicable)
If it's your own program's pda, you can just do a regular transfer where you sign with its seeds+bump
I'm actually a little confused about the cashier_check example as well: in the `cash_check` instruction, wouldn't you be able to pass in any account into `to` as it isn't compared against the `check.to` field? https://github.com/project-serum/anchor/blob/master/tests/cashiers-check/programs/cashiers-check/src/lib.rs#L54
If this is for a token account, do you know what account is from_base supposed to be? I was trying to use this to transfer lamports from a PDA owned token address but didn't know the pubkey required.
Just kidding, I think it's because of this struct
Why does adding this fix the problem?
Thank you!
https://doc.rust-lang.org/std/default/trait.Default.html
its a builtin trait in rust that contains a function to implement returning a default instantiation of a struct
Exscuse my ignorace, but what is the Default trait?
To implement the `Default` trait.

What is Anchor saying here?
all leverages the same code
yes, `anchor_lang::solana_program` is just a convenient re-export of the core solana crate
the `system_instruction::transfer` just builds the instruction, you need to create the associated transaction and send it too
does cli code work the same as program code?
thats the implementation of the `solana transfer` cli command
take a look at this https://github.com/solana-labs/solana/blob/master/cli/src/wallet.rs#L627
thanks for the guidance, much appreciated
makes sense, i don't suppose there is an example somewhere for wrapping sol? i'll continue to look, but if you have one handy
Makes the code so much messier.
Agreed. Not sure why people insist on using native SOL.
in practice wrapping sol is the recommended approach though
In theory, yes.
so something like this should work fine, without any additional commands?
```
anchor_lang::solana_program::system_instruction::transfer(
            &ctx.accounts.taker.key,
            &ctx.accounts.initializer_main_account.key,
            amount,
        );
```
It is.
yeah, that's what i have, but it isn't working
starting to think `anchor_spl::token::transfer` is just for token accounts...which would make more sense
i think you need to use `anchor_lang::solana_program::system_instruction::transfer` if you wanna do lamports
for real
lol those docs are so unhelpful as usual
and then calling transfer
i just always assumed there was a lot more overhead involved, mainly moving the sol to a temporary wrapped sol SPL token account
i haven't had to do but wrapping sol and using spl token transfer is the recommended approach
how have you typically done it?
like this? https://spl.solana.com/token#wrapping-sol
that would be surprising but cool if the token program handled wrapping sol on the backend
https://github.com/project-serum/anchor/blob/master/spl/src/token.rs#L13
i _believe_ so...might need to test
oh ok that works for lamports too? cool, thanks
use `anchor_spl::token::transfer`
is this how we should be transferring sol within the anchor framework? my transaction runs fine but i don't see any balance changes -- seemed to be just ignoring it:
`anchor_lang::solana_program::system_instruction::transfer`
try turning it off and on again
No. Just VS code issues... I will ignroe
sometimes vs code is like this after upgrading your anchor version
are you getting any actual compile errors


//////////////////////////////////////////////////////////////////////////////////////////

```
    Checking governance-registry v0.1.0 (/home/dd/project-serum/governance-registry/programs/governance-registry)
error: Unrecognized option: 'pretty'
error: could not compile `governance-registry`
```
And then search for `try_accounts`.
Yes.
Is this right?
```
cd project-serum/governance-registry/programs/governance-registry
cargo expand
```
Gotcha. There's a lot that happens with the derive accounts code before it eventually gets to the code generation part.
this is the extent of my understanding lol: https://github.com/blockworks-foundation/mango-v3/blob/main/mango-macro/src/lib.rs
I'm a little bit familiar
I dont think that will be the case with proc-macros unless you're familiar with them.
so just finding the code is nicer
Weird. It shouldn't ever fail.
cargo expand often fails for me. probably not yet familiar with what it's doing
Here's the end of the macro codegen https://github.com/project-serum/anchor/blob/master/lang/syn/src/codegen/accounts/constraints.rs#L399
You can run `cargo expand` inside your crate to see what it translates into.
You mean the macro code?
I usually rely on my IDE to do everything for me but it sucks with macros
sounds good. do you know where I could find the code for `init` for example?
Docs are trailing behind still. Feel free to ask whatever questions here. I"m sure others would appreciate it in the  future.
That is the same as the link above.
has the documentation there
ah I actually have to go to defn of Accounts in lang/derive/accounts/src/lib.rs
All of this comes together so that, when you execute the instruction handler, you have a new associated token account ready to go.
`associated_token::*`  specifies the various parameters for the associated token account being created.
`payer` specifies who pays the rent exemption SOL for init.
`init` creates and initializes the account. You can do this for accounts owned by the current program, or accounts owned by other programs.
Some out of date docs for that here https://docs.rs/anchor-lang/0.17.0/anchor_lang/derive.Accounts.html.
```
#[derive(Accounts)]
#[instruction(rate: ExchangeRateEntry)]
pub struct AddExchangeRate<'info> {
    #[account(
        init,
        payer = payer,
        associated_token::authority = registrar,
        associated_token::mint = deposit_mint,
    )]
    exchange_vault: Account<'info, TokenAccount>,
    deposit_mint: Account<'info, Mint>,
    #[account(has_one = authority)]
    registrar: AccountLoader<'info, Registrar>,
    authority: Signer<'info>,
    payer: Signer<'info>,
    rent: Sysvar<'info, Rent>,
    token_program: Program<'info, Token>,
    associated_token_program: Program<'info, AssociatedToken>,
    system_program: Program<'info, System>,
}```

In this account macro, there are params like `init` or `has_one = authority` or `associated_token::authority = registrar` and they seem like magic words that I can't find in the code.  I did a simple search in the docs and they didn't show up
Just need to make sure to compile with `features = ["cpi"]`, so that you have access to the `cpi` module.
Example here https://github.com/project-serum/anchor/blob/master/examples/tutorial/basic-3/programs/puppet-master/src/lib.rs#L13-L18
we all working on behalf of mango dao
To call an Anchor program from a non Anchor program, you jsut need to use the `crate::cpi` module.
I'm really asking on behalf of Mango DAO lol CC: <@!739966689776631932>
By unit test do you mean `cargo test` vs `cargo test-bpf`
any examples/recommendations for unit testing CPIs to an Anchor program from a solana native program?
You need to pass it in on the client.
for cpi calls that use sysvars like clock, do we have to pass in clock on the anchor side and through as an account when using invoke_signed. i know we can include it in the account metas without passing in just wondering about the accounts
ok makes sense
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs#L62
So to initialize the associated token account, you need the rent AccountInfo.
It doesn't use dynamic sysvars.
Beacuse the token program needs it.
If the Sysvar accounts are being passed in, that's one thing you could get rid of. But don't know yet if Anchor actually passed in sysvar accounts (e.g. Rent, Clock, Instruction)
nevermind, using `msg!` works well enough
hey all how do you go about logging from programs while testing? I'm trying to look for a log file of some sort but can't find it
are there any suggested patterns for reducing number of accounts being used? I'm currently making several sequential cpi calls within a function which is resulting in issues with transaction being too large `1269 > 1232` since I need to pass in the accounts for all of the cpi calls
<@!501570363566587905> is there a reason why you pass in rent Sysvar? In anchor does the client pass it and take up another 32 bytes in the tx?

```
#[derive(Accounts)]
#[instruction(rate: ExchangeRateEntry)]
pub struct AddExchangeRate<'info> {
    #[account(
        init,
        payer = payer,
        associated_token::authority = registrar,
        associated_token::mint = deposit_mint,
    )]
    exchange_vault: Account<'info, TokenAccount>,
    deposit_mint: Account<'info, Mint>,
    #[account(has_one = authority)]
    registrar: AccountLoader<'info, Registrar>,
    authority: Signer<'info>,
    payer: Signer<'info>,
    rent: Sysvar<'info, Rent>,
    token_program: Program<'info, Token>,
    associated_token_program: Program<'info, AssociatedToken>,
    system_program: Program<'info, System>,
}```
nice thanks
Nope, like this:
```.rs
#[account]
#[derive(Default)]
pub struct VisitorState {
  visit_count: u64,
  bump: u8,

  is_creator: bool,
  username: [u8; 24],
  token_address: Pubkey,
  hype_value: u64,
}
```
so this is my updated code

```
// Transaction instructions
#[derive(Accounts)]
#[instruction(visitor_bump: u8, username: [u8; 28], token_address: Pubkey, hype_value: u64 )]
pub struct Introduction<'info> {
  payer: Signer<'info>,
  visitor: Signer<'info>,
  #[account(init, seeds = [visitor.key.as_ref()], bump = visitor_bump, payer = payer)]
  visitor_state: Account<'info, VisitorState>,
  system_program: Program<'info, System>,
}

// Transaction instructions
#[derive(Accounts)]
pub struct Visit<'info> {
  visitor: Signer<'info>,
  #[account(mut, seeds = [visitor.key.as_ref()], bump = visitor_state.bump)]
  visitor_state: Account<'info, VisitorState>,
}

// An account that goes inside a transaction instruction
#[account]
pub struct VisitorState {
  visit_count: u64,
  bump: u8,

  is_creator: bool,
  username: [u8; 24],
  token_address: Pubkey,
  hype_value: u64,
}
```
Lol, did you do the `#[derive(Default)]` thing?
sers pls help, anyone answering my questions will get a nice name list on real nice ui of acknowledgements page inside my ignition submission in 24 hours.
If i remove the impl Default for VisitorState {

I am getting this

```
lib.rs(29, 10): function or associated item not found in `VisitorState`
lib.rs(49, 1): function or associated item `default` not found for this
or whatever the actual import command is
it's imported in `anchor::*`
sorrry real bad
it's just there by default
Pubkey
token_address should be of type `pubkey`
yeh, `derive(Default)` is a macro that will generate that for you
you don't need to implement default
^ you can just do `#[derive(Default)]` for visitor state, shouldn't need to do it yourself
#[derive(Accounts)] is here and I have removed space
Does this look fine?

```
#[derive(Accounts)]
#[instruction(visitor_bump: u8)]
pub struct Introduction<'info> {
  payer: Signer<'info>,
  visitor: Signer<'info>,
  #[account(init, seeds = [visitor.key.as_ref()], bump = visitor_bump, payer = payer)]
  visitor_state: Account<'info, VisitorState>,
  system_program: Program<'info, System>,
}

// Transaction instructions
#[derive(Accounts)]
pub struct Visit<'info> {
  visitor: Signer<'info>,
  #[account(mut, seeds = [visitor.key.as_ref()], bump = visitor_state.bump)]
  visitor_state: Account<'info, VisitorState>,
}

// An account that goes inside a transaction instruction
#[account]
pub struct VisitorState {
  visit_count: u64,
  bump: u8,

  is_creator: bool,
  username: [u8; 24],
  token_address: [0; 44],
  hype_value: u64,
}

impl Default for VisitorState {
  fn default() -> Self {
    VisitorState { 
      visit_count: 0,
      bump: 0,

      is_creator: false,
      username: [0; 24],
      token_address: [0; 44],
      hype_value: 1,
    }
  }
}
```
it's a good encouragement to not use variable size lengths
Same with std::mem::size_of
Yeah, agreed. Kind of a bummer that there's no really bullet-proof way to auto-calculate space in general (e.g. Default won't work if you have anything variable size, e.g. a default string is empty etc.)
especially if you're a beginner or don't know what all the byte values are for the various primitives
but putting `derive(Default)` on top of a struct is a small price to pay for not having to manually calculate space
if you don't use `derive(Default)` you have to use `space`
i get you
^ if you leave off space anchor will use it real quick to see how much space to allocate for initializing an account
e.g. `Pubkey` defaults to `11111111111111`
default doesn't have anything to do with space, it just inits the variables in your struct with default values
Mm, really? I don't think anchor does any automatic space stuff, aside from the Default trick
yeh, it's handy for zero copy, not having to do a whole bunch of maths to calculate the space manually every time you want to shift around some numbers
oh really? good to know
if the array has fixed length anchor will automatically add the right amount of space
you don't even need to add it to the space allocation
in your case, you'll want to do `[u8; 24]` and then add 24 bytes to the account space allocation
here's a rough example for anyone from the future searching
```rust
#[zero_copy]
#[derive(Default)]
pub struct MarketInfo {
    pub description: Description,
}

#[zero_copy]
pub struct Description {
    pub array: [u8; 256]
}

impl Default for Description {
    fn default() -> Self {
        Description{
            array: [0; 256]
        }
    }
}
```
best to avoid strings in general!
so if you use an unsupported version you'll have to make your own default trait implementation
constant length string is best, just use `[u8; 20]` but be careful, borsch has this annoying thing where certain lengths are not supported
I want to set it to a upper limit 24 characters, like a username from twitter profile
or if the string will  be a constant length, better to store it as `[u8]`
you can set an account struct field to be `String` but since its a dynamically sized type, you need to set an upper limit on the amount of bytes it can be
How can I store a string inside account struct?
very helpful
that was helpful, thanks
But anyways you can always technically recalculate the bump based on the seeds‚Äîit's just that it costs compute to do so, so low-level solana apis won't do it for you.
But it means that in order for the program to sign for a program-derived address, you need the address's seeds *and* its bump.
Bumps are an implementation detail in solana, a pda under the hood is just a sha256 hash of the seeds + bump + the program_id + the hardcoded string "ProgramDerivedAddress". The idea of the bump is we want this hash to *not* be an actual elliptic curve public key, so to do that you just start with bump = 255 and check, did that hash wind up on the curve? If so, uh, try bump = 254? Etc. until you manage to find something off-curve.
Bumps go with seeds (so only apply to program-derived addresses). Each pda has its own bump. If you want you can also just leave out the bump and let anchor calculate it for you‚Äîit costs more compute but is fine for learning. The syntax is funny looking, `#[account(..., seeds = [...], bump)]`
if I create more keys to be stored in account struct, 
do i need to pass in this macro
https://github.com/cqfd/anchor-visitors/blob/58972af564867155b2e6f236227bf0178c5d8314/programs/visitors/src/lib.rs#L32
yes
Do you mean what's the purpose of bumps?
What is bump apart from a variable in account?
This is a pretty similar example of the per-user approach: https://github.com/cqfd/anchor-visitors/
If you want a different counter per-user, you could use the user's wallet public key as the seed.
If you want a single counter, global to all users, then you could give it a static seed
Ah ok, got it. Yeah, I think you basically have two options if you want to have a stable account rather than a new one every time you reload etc.: you could hardcode a fixed private key (probably annoying), or you could use a program-derived address.
I am so sorry <@!134416332509675520> 
I was trying to follow this tutorial 

https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291#:~:text=create%20an%20account%20%20*/-,const%20baseAccount%20%3D%20Keypair.generate()%3B,-const%20opts%20%3D%20%7B%0A%20%20preflightCommitment

I saw they created a new keypair called baseAccount, 
Now i am more confused on which account the data is being stored
Howdy y'all, if I am interested in transfering a decimal amount of SPL tokens between wallets, it seems I must use `spl_token::instruction::transfer_checked` instead of `spl_token::instruction::transfer` -- however in the `anchor_spl` there is no wrapper for that `transfer_checked` instruction.

Is this the case because its wrapper just hasn't been implemented in anchor, or is there some other reason like it is discouraged to use those or something?
alright
Can you say more? Not quite sure what you mean. Also, what's baseAccount?
because i don't want to create the account everytime
Nope i am not getting such function, i was asking if I can do something like this
What's findOrCreateAccount? Where are you getting that function?
<@!134416332509675520> can you help pls
How can I get the baseAccount using something like findOrCreate account?
Ah, yeah, I'm just saying that doing js stuff involving solana isn't any more complicated than any other js stuff
awesome, i want to be able to atleast do the client and solprog
oh crap, what kind of js level? im planning to learn just the basics
thanks I will try that!
Yeah, realistically the actual frontend stuff is 100x more complicated than the part where you interact with solana (you can learn how to do that part just by copy-pasting examples of rpc calls etc, no JS fanciness involved really)
i have minimal javascript knowledge but i just use JS to write tests for my anchor programs. And let a frontend dev handle the actual JS and react stuff
pretty variable depending on your needs
Right, I'm lazy/shell-dumb and just do `NODE_PATH=$(npm root -g) anchor whatever`
i followed that at first but it was giving me error that it cannot find the @project-serum/anchor so i had to install it to to the folder, but i will try to run the next tutorial using this method
You can install it globally with npm, yeah, `npm install -g` (though you have to set the `NODE_PATH` env var to tell node to actually search for global packages)
i have no idea what i did but its now working properly, it might be that i need to install the @project-serum/anchor for every tutorial folder (any fix on this so that it works globally? its taking up memory on my pc)
how much javascript should i learn to write client programs for solana programs?
alright
Nope, your contract is sealed off from the outside world unfortunately/fortunately.
can I make a rest api call inside my contract?
definitely helped! thanks
so knowing that's no longer a limitation is definitely cool
it used to be the case in many anchor versions ago that if your struct wasn't in `lib.rs` it wouldn't appear in the IDL
yeh for sure
idk if that answered your question though
a lot of anchor is macros that generate code for you, so when the code is compiled/generated/built, the IDL generator has everything it needs regardless of segmentation
this makes sense for sure
anchor just used to not support multiple files so well
the logical layout is cool too
wow ok cool, so it really is as easy as `use error::*` and `pub mod instructions`
the goal is just to take a hyper complex program, and make it maintainable and readable
things like errors, common macros, and utility functions are separated as well
contains the handler function, accounts context struct, custom account data struct (if needed), associated events (if needed), etc
we basically took the approach of separating out all logically related components for an instruction, so each instruction is its out file
file segmentation has no impact on IDL generation.
<https://github.com/jet-lab/jet-v1/blob/master/programs/jet/src/instructions/mod.rs> this also seems like an important file
you probably had to go through a lot of trial and error to figure out the best approach for each of the different kinds of data. For example, for important structs and functions and other stuff to appear in the IDL what are the requirements
you have stuff like `instructions::init_reserve::handler(ctx, bump, config)` as a wrapper to the internal function in separate functions
just because it's obviously not as straightforward as just `use state::*`
right, i was just wondering if you'd be up for writing up something short with some of the high level approach you took
Look at how we did it here. I like this pattern a lot
https://github.com/jet-lab/jet-v1/tree/master/programs/jet/src
but it does seem like there's some advantage to do it, at least for stuff like errors and some of the functions
(omg you guys have so many files, it's like looking at JS package)
<@!168868665456984065> do you have any _top tips_ on splitting up anchor programs into multiple files
It seems like it might've crashed
Maybe check the validator log?
```js
  it("funds test signer", async () => {
    console.log("test signer ", testSigner.publicKey.toString());
    let tx = new anchor.web3.Transaction();
    tx.add(anchor.web3.SystemProgram.transfer({
      fromPubkey: provider.wallet.publicKey,
      toPubkey: testSigner.publicKey,
      lamports: 99e9,
    }))
    await provider.send(tx);
  })

    it("create mint and vault", async () => {
        let [_Mint, _Vault] = await serumCmn.createMintAndVault(
            provider,
            new anchor.BN(100),
            provider.wallet.publicKey,
            9
        );

        Mint = _Mint;
        console.log("in mint ", Mint.toString());
    });
```

```shell
    :heavy_check_mark: funds test signer (539ms)
    1) create mint and vault


  1 passing (639ms)
  1 failing

  1) initialize
       create mint and vault:
     FetchError: request to http://localhost:8899/ failed, reason: socket hang up
```

anyone got some pointers on how to fix this
this same test works on my intel mac but wont on my M1 üòê
Looks like you've written a constraint that was violated somehow? It'd be easier to see from the source of the program
it gives me a `custom program error: 0x8f`
I guess that my program address should be a token of a different type?
can someone help me decipher this error message?
``` 
ProgramError: 
    at Function.parse (/Users/raven/imo-launchpad/example-server/node_modules/@project-serum/anchor/src/error.ts:41:14)
    at Object.rpc [as exchangeUsdcForRedeemable] (/Users/raven/imo-launchpad/example-server/node_modules/@project-serum/anchor/src/program/namespace/rpc.ts:23:42)
    at processTicksAndRejections (node:internal/process/task_queues:96:5) {
  code: 143,
  msg: 'A raw constraint was violated'
}
```
gotcha ty!
Yes though you need to implement the relevant traits. Here's what we do for the spl token program https://github.com/project-serum/anchor/blob/master/spl/src/token.rs#L317
does `Account<'info, Struct>` work for accounts that are initialized outside of anchor -- so ones without the 8-byte discriminator?
Running my script, then  `anchor test --skip-local-validator` do work though. Troubleshoted thanks ‚ù§Ô∏è
but now I tried, the anchor test does not have the account that's the issue, it must have it's own `test-ledger` env. i.e. what I set is not being used by anchor test
Yes I do in a script, that I run before running any tests, then I stop it once initalized and run the usual `anchor test`
`--reset` it to initialize from 0
Yes just checked too. Maybe the solana-test-validator anchor starts is not using my local `test-ledger` folder
I made sure to clone the executable data as well (PwDiXFxQsGra4sFFTT8r1QWRMd4vfumiWC1jfWNfdYT)
I just checked for you - with the startup cmd I sent the metadata program is executable on localnet
so I shouldn't have the issue
Ho but as long as you do invoke call, then it mean that the account is properly set as executable
was too lazy to write the CPI stuff myself and had it already with the `invoke()` calls üôÇ
Oh okay that might be it then.
I don't use CPI stuff in anchor yet, so in my case AccountInfo is fine. I don't need anchor to do anything with those
Thanks for the feedback
but anyway I have no issues with it and am able to submit and query metdata fine
Ok, you could replace that by something similar to `pub associated_token_program: Program<'info, AssociatedToken>,` technically, but that should do the same
In Anchor I just use
```
    #[account(address = spl_token_metadata::ID)]
    pub metadata_program: AccountInfo<'info>,
```
and use that with `invoke_signed()`
Hum ok, and do you pass any of these account to a `Program<'_, Token>` or similar afterward?
(last one is associated token program)
Hmm I just added clone commands until I got it working 
```
solana-test-validator --clone metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s --clone PwDiXFxQsGra4sFFTT8r1QWRMd4vfumiWC1jfWNfdYT --clone EDshWM3jBy2YUszMiFLAFLx3WkbtqR9An7JZzvg22R1P --clone ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL  --url devnet
```

this is my startup script for my nft project and it was enough to get metadata working perfectly
Any specific manoeuvre to clone accounts that are executable? You mentionned Metadata program, but the program I clone seem to not be set to executable (when it is on devnet)
probably a more helpful response: it's my impression that demand is high or is going to skyrocket, so if you can work through some of the more complex tutorials and build out a program/client that you understand that will be a great start, (context: i'm a relative noob in solana but a pretty senior engineer generally)
jk
the word "blockchain" üòÜ
what concepts should one know in order to be hire-able in Solana web3 space?
I think I fixed it... sorry to spam the chat with my issues so much
TS is still mad at me...
Thank you!!!
scroll up, some people have fixed this
yes

Has anyone tried to work with Anchor in NextJS?
Yea, and cool idea...
It is already high quality work, as an hackathon entry
Yes, let's remain open minded
You are right... I am sorry
These takes feel harsh. We should support people building and provide them productive criticism directly to them rather than in here.
It also doesn't look like it simplifies Anchor that much... maybe I haven't done enough research, but that is my initial take
https://www.youtube.com/watch?v=gcDTv06ipSM&ab_channel=HeavyDutyBuilders
I don't know if it is stupid, i need to understand what it is first
`new Keypair.fromSecretKey(new Uint8Array(JSON.parse(process.env.BLABLA....)))`
Is a .env variable even the best way to do this?
I want to store a super secret keypair in my .env file so only my backend can talk with my contract, but the keypair looks like an array but gets spit out as a string... any guidance as to how to handle a situation like this?

TS doesn't like this because it is a string, not an Ed25519Keypair... how to I convert my .env variable to a Ed25519Keypair... It looks like [29,93,393,.....] right now
Guys, how are you validating user input when it comes to wallet addresses?

What checks do you do to make sure user inputted address is initialized, it's a wallet address (not a token account, executable account etc...)
Yea... helped me out a ton.
Legend thank you for that, hadn't come across that
I would study it
A really great example of a react front end is thishttps://github.com/exiled-apes/candy-machine-mint
Probably speaks to my lack of JS/TS knowledge. But for example how I could do something like in an escrow example, after the initializing party has processed their transaction, that it displays in another part of the app for a taker to accept the trade.
Good question... I am working on that stuff rn and think it is very well documented
what are you looking for that wasn't covered by all those guides?
Any good docs on how to interact with a program in a react app? (I have already been through the complete guide to full stack solana development with react anchor rust and phantom tutorial)
Yea... Thanks!
hmm, ok problem solved then haha
https://github.com/project-serum/anchor/tree/master/spl
Yes.. I deleted the test-ledger and redid it and it worked
how can i use https://spl.solana.com/token in anchor
what solana version are you on
not a deployment issue
ok, so deploy is failing cause you local validator is failing
Yea... It cuts its self off like this
are you leaving the validator running in a separate terminal tab/window?
the second screenshot indicates your terminating the validator process if you have a new prompt

Why is there an error when I deploy to localnet?... I am running a test validator

I just need to create a token and mint it, do I need to add it to market?
(though the PDA `seeds, bump` is optional)
Example here https://github.com/project-serum/anchor/blob/master/tests/cfo/programs/cfo/src/lib.rs#L338-L346
how can I create a spl token from my anchor program
no necessarily out of scope, but `anchor deploy` does some nice quality of life things in the background
do anchor deploy and see the program id, replace it in declare id and then anchor build
`anchor deploy` will deploy every .so file under my target folder to the cluster?
`solana program deploy` this command is out of the scope of anchor, right?
Perfectly. Many thanks!
all good now?
That's exactly it! I was running the suggested command from the CLI but it wasn't specifying on which cluster
so if you run a local test validator and do `anchor deploy --provider.cluster local` it'll deploy to your local validator and add the `metadata.address` field
<@!813484321313783839>  `metadata` is injected into the idl after you deploy it to a cluster


//////////////////////////////////////////////////////////////////////////////////////////

Yes, I do `anchor deploy --provider.cluster https://X.solana-devnet.quiknode.pro/Y/` for my devnet deployment. The public devnet has a very tight rate limiter so sometimes deployment transaction don't go through.
For extra context, when connected to the regular devnet URL, the deployment begins, my account is debited devnet SOL, the first transaction is finalized, and then the terminal briefly says `Finding leader nodes...` before erroring out with the `HandshakeIncomplete` error
but the deploy command is getting the same "Method not found" issue
Balance seems to work:
```
‚ûú  faktor git:(main) ‚úó solana balance
5.099675149 SOL
```
interesting! thanks for the pointer. Are you able to deploy through these nodes? it looks like they only support read operations right now? Just setup a quicknode, switched the solana config over to the URL, and tried to airdrop, but got a "method not found" error
```
‚ûú  faktor git:(main) ‚úó solana airdrop 1
Requesting airdrop of 1 SOL
Error: RPC response error -32601: Method not found 
```
I personally uses https://quicknode.com/, they have free trial üôÇ
where could I find one of those / set one up?
Try a private rpc server
Is anyone familiar with this `ConnectionError(Protocol(HandshakeIncomplete))` error when trying to deploy to devnet?
I would like to do it. But need some help with it. To see if I am understanding this well: the IDL is defined from the rust code through https://github.com/project-serum/anchor/blob/master/lang/syn/src/idl/file.rs. In https://github.com/project-serum/anchor/blob/master/lang/syn/src/idl/mod.rs several `IdlType`'s are declared (e.g., u8, string, array), so should I add a BTreeMap (HashMap, Map, whatever) type there? The BTreeMap is currently being identified as `IdlType::Defined`, which I don't know what it means. Is it just the default type that unknown values assume? After changing things in Rust side, it's necessary to change something on JS side. The IDL types are defined at https://github.com/project-serum/anchor/blob/master/ts/src/idl.ts and I think the mapping between IDL and JS objects is done at https://github.com/project-serum/anchor/tree/master/ts/src/coder. Here I am particularly lost. I don't know what should be done here. What's the role of `Layout` from `buffer-layout`?
?
üò¶
it works well but only problem is that I cannot see the token in my wallet because I cannot add that token address into my wallet
and then I passed that info like this

I got PDA in the frontend like above

I should show this token in my wallet but not.
Normal token's program id is System program but our token's program id is my contract's PDA. because it was assigned by program id in the script
The difference between this token and normal token is the Mint authority address
Right, but what specifically goes wrong? I don't have enough information

I cannot add that token address into my dev wallet
What goes wrong? What error etc.?
I can add any other tokens into wallet but I cannot add only this one (PDA assigned token)
This is PDA

<@!134416332509675520>  Please take a look. it's wired. This token authority is PDA. but I cannot add this token into my dev wallet.
https://explorer.solana.com/address/EZ2UM6GmW6HmaLhGgw5o3hSzEQE8JF1SUWrbFc7y4nPy?cluster=devnet
I solved the problem... for some reason the way I was passing the public keys into my funciton was weird and it didn't like it... I just converted them to strings before passing them into the funciton then back into a publickey in the function
It will depend on what kind of value you're talking about. If it's a static variable in the program source (for example, something like `spl_token::ID`, the ID is a static variable embedded right in the program text), do what <@!168868665456984065> said. If the value lives in an account on-chain, you can just pass that account to your program and read its data. If the value is supposed to be "returned" when you do a cross-program invocation to the other program, you'll have to do what Armani said (solana doesn't really have CPI return values).
Still getting error... weird

I am very close with my project btw...
Thanks!
I always use `.toBuffer()`, not sure if it's different
What is weird about the error is that VS code think .toBytes is a function
can you send me example?
for example?
You need to write the "return value" into an account to get it back from the caller side.
I know what I am passing in is a Pubkey because of that console log... I am cofused because .toBytes worked in my anchor test

Is there an alternative to .toBytes?
Are you there?
in this case, how about it?
And smart contract B is built in Anchor and am going to build to devnet.
smart contract A is built in Rust and deployed to devnet already
you can just require one as a cargo dependency of the other and use public items
take a look at this multiple program example
https://github.com/project-serum/anchor/tree/master/examples/tutorial/basic-3
Are you there?
smart contract A and B deployed to devnet each other.
in this case, how can get smart contract A value in smart contract B?
And smart contract B need to get this value from contract A and calculate with it.
smart contract A exports value (for ex; 10)
okay, for example, there are smart contract A and B
Can you explain more? I personally have no idea what you mean haha, maybe someone else does though
how can I get value(for example, 10)?
?
for example, I get any value(10) from contract A and then I need to calculate it in other contract.
https://github.com/project-serum/anchor/tree/master/lang/syn/src/idl
Could you point me (in the source code) where are you generating the IDL?
Thank you very much
What do you mean by value here? Can you explain more about what you want to do?
How I can get value of another smart contract in smart contract?
No üò¶ I'm not super familiar with the IDL generation part, but it doesn't support BTreeMaps yet (maybe you could figure out how to add it though?)
This is my struct
I am getting this error. Can't I use BTreeMap?
Nice to meet you.
Hi, everyone.
And of course I have the token program since I need to mint/burn
Ah, so I have the token account, but I also want to get token metadata since I also didn‚Äôt see a way to get this from the account.
Maybe I should have started with that?
Ah, yeah‚Äîthe documentation has been updated in master, but I guess not deployed? You need to use the `ANCHOR_WALLET` env var, e.g. `ANCHOR_WALLET=~/.config/solana/id.json node client.js`.
pool token is a token account?
lol
pub pool_token: Account<'info, **TokenAccount**>,
i am dumb
and anchor-spl 0.17
on anchor 0.17
hey, thanks - this doesn't compile though
(doesn't have the anchor_lang::AccountSerialize or anchor_lang::Owner) traits implemented is the error I get
pub pool_token: **Account**<'info, Token>,
This seems far harder than it should, so I'm assuming I'm approaching the problem wrong
Hey, I'm running to some roadblocks with passing token accounts into anchor and validating them.

I want to give a solana program mint authority on a token account (easy enough), but also have access to information like the decimals of the token since I need to reason about those

As far as I can tell passing something like:

"""
    #[account(mut)]
    pub pool_token: Program<'info, Token>,

    pub pool_token_mint: Account<'info, Mint>,
""",

However these apprea to be totally opaque structs. Is there some way to get information about the token itself from the anchor-spl token api?
I am following https://project-serum.github.io/anchor/tutorials/tutorial-0.html#generating-a-client documentation and stuck at "node client.js" command it gives me following error, is this documentation outdated?
That would be amazing
And throw it into `target/types/<program-name>.ts`, which is where the IDL type lives for typescript.
We could pretty easily generate that.
Basically looking for a way to typedef a new `Invoice` type to the type being from this fetch call:
```
const invoice: any = await 
program.account.invoice.fetch(address);
```
With a Typescript frontend, is there a straightforward way to generate account types from the IDL file? Would love to setup a system where we don't have maintain separate frontend types that could diverge from the IDL file
https://github.com/neilfutureftr/Swap-UI/blob/main/src/components/Swap.tsx
For info this is an implementation of anchor code in js hope it helps
I really don't like the library though... it's not very user friendly right now
Yea... if you explained how to do that, that would be awesome!... if not, might be easier for me just to use the wallet adapter
But the issue above is that window.solana doesn't already know how to `.signTransaction` (those wallet adapters do that, but you could do it yourself too)
You could definitely just teach `window.solana` how to do what you want it to (basically, re-implement the adapter library lol, but could be fun)
Here is the Github repo for the benefit of the chat
https://github.com/solana-labs/wallet-adapter
I don't want to, but I think I'm going to have to... I want something simpler than that, but I don't think I get that option
Have you tried using the wallet adapter stuff mentioned e.g. here? https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291
My issue is that I am using       const resp = await window.solana.connect(); to connect to my Solana wallet... I think I need to use something more sophisticated... The weird part is that I am sending the wallet into the function

I have a new error... will post when I find the answer...
I read it's because I haven't run anchor idl init
Has anyone run into this error when working with React? (I am using NextJS)

when creating a function for generating TransactionInstructions in typescript, does the dataLayout always look something like this (instruction index followed by arguments) ```
...): TransactionInstruction {
    const dataLayout = struct([u8('instruction'), nu64('amount')])
```
if so is the u8 instruction just the index of the instruction handler within the module for anchor?
Hello I'm just getting started with Anchor and running into this issue when running `anchor build` is this the place to ask for help? I'm running this on windows wsl
<@!748249199606497502> the more questions the better. We're still trying to rebuild enough chat history with useful info that the discord search will act as semi-docs
I'm more likely to be useful to Anchor that way
I'm just going to take a shot at understanding the macros


//////////////////////////////////////////////////////////////////////////////////////////

üòÖ
Thanks, @ssj. I fixed that.
post the full error
<@!867148037397676092> then u didnt provide all accounts as in the struct
üòÜ
@ssj?
If not, `acocunt not provided` error happened.
But the problem is that, when I all increment, I should include all unneccessary context accounts to their.
then merge Increment and Create into a single struct
But I'd like to use from both of them. l)
Context<Increment> change to Context<Create>
üòÖ
What do you mean?
<@!867148037397676092>
Context<Create>
<@!210756938332504065> ?
What should I do?
This code.
@sj, tickerSource is defined in Create. But I want to get that account in
The IDL is somewhat limited to a small set of rust data types (it's not ready for BTreeMap, for example).  What should I do when designed my account structs using some data type that's not compatible with the IDL? For example, BTreeMap is such a generic struct that I am sure that someone else  already faced the same problem. What's the solution in this situation? Redesign my account structs to use another data type? I would rather `anchor.workspace` ignore the accounts structs that are IDL incompatible and/or allow me to specify a custom encoder/decoder between the borsh representation and javascript object. Maybe this is possible but I don't know how (if it is please tell me how). I love the automatic (de)serialization, signature validation, etc. that Anchor offers on the on-chain side by declaratively defining the instruction accounts, but the IDL thing seems very limited and incapable of scaling (to any data type).
üëçüèª
Cool. Error resolved. I can't believe it.
`5e6` try this
not BN <:study:700462627880566805>
the datatype of amount is `number`
Oh, errorüòµ
Awesome.
üôåüèª
<:yes_pepe:874246210897182800>
So likewise?
Maybe. Really confusing. üòÖ
it can be confusing at first <:sweaty:882326902973530162>
Ah, I see.
the `owner` defaults to `provider.wallet.publicKey`
when you do `createMintAndVault`

it created a new token with the mint address `mint`

and then it created a `vault` / token account for the provided `owner`
so in solana there are 3 addresses
1) your wallet address 
2) token mint address
3) token account address

each token has a unique mint address
and for each mint address / token you need a token account address for your wallet address
no
@ssj, but isn't it owner = mint?
I see.
see what `_god` is
https://github.com/project-serum/serum-ts/blob/b6799603bc2260607d7e0b22c740803f97fad14a/packages/common/src/index.ts#L75

look at the implementation of `createMintAndVault`
<@!867148037397676092>
not owner
source = `_god`
If source = owner, how can owner be provider.wallet.publicKey?
which as we know is `provider.wallet.publicKey`
u care about the owner of `source` only
owner = `provider.wallet.publicKey`
destination = receiver
try this <:thonking:586452614015614986>
<@!210756938332504065> ?
And would like to transfer from mint to receiver.
For example, if I set receiver as above.
im gonna let u guess that <:PepeLa:758383347994460251>
Is that source's owner or destination's owner?
https://github.com/project-serum/serum-ts/blob/b6799603bc2260607d7e0b22c740803f97fad14a/packages/common/src/index.ts#L81-L83
`provider.wallet.publicKey`
what is owner?
source = `_god`
destination = `sender`
How can I transfer some token to the sender account, <@!210756938332504065> ?
And created token account in this code.
Well, I created token in this code
https://github.com/solana-labs/solana-program-library/blob/5436ac239e14843fcefbaf258fa4321aed3c9eca/token/js/module.d.ts#L191-L198

this has the function signature
In terms of object type, source is TokenAccount and Owner is PubKey?
try `provider.wallet.publicKey` for owner <@!867148037397676092>
Source = Account

Owner = output of `solana address`
Likewise?
owner = owner of address A
A being source
B being destination
u send money from address A to B right
source token account
source token program id?
owner of the source token account
Thank you. Well, what is owner field?
```js
import * as splToken from "@solana/spl-token";

 await provider.send(
      new anchor.web3.Transaction().add(
        splToken.Token.createTransferInstruction(
          splToken.TOKEN_PROGRAM_ID,
          source,
          destination,
          owner,
          [],
          amount
        )
      )
    );
```

https://github.com/solana-labs/solana-program-library/blob/5436ac239e14843fcefbaf258fa4321aed3c9eca/token/js/module.d.ts#L191-L198

something like this shud work<@!867148037397676092>
Yeah, in test javascript file.
~~dont see any crash in the log <:sad:877222447483609088>~~

edit: nvm it is indeed crashing
in tests?
Also, I'm pretty excited for v0.17.1 (auto type generator). wen is it coming?
For non-x86 linux users, when we want to upgrade, do we have to delete the old anchor and install + build using this command everytime?
```
cargo install --git https://github.com/project-serum/anchor --tag v0.17.0 anchor-cli --locked
```
<@!248066053161222144> , how can I transfer token in client? I can't find it in samples.
In this file?
thanks, forgot about this
program.account.<account>,fetch(<pk>)
Tried using getAccountInfo, but data is encoded, any idea on a better function to do it, or just decode the data, would be very helpful
What the best way to retrieve Data from a account in JS side?
In the program logs
But where can I see that msg?
Thank you so much. üòÜ
It's `msg!`
Have you read some of the examples
Another question, please? Is there any way to print values in the program?
But generally it's just a public key
Check out the web 3 docs and examples in the anchor repo
Thank you, but what should I put as parameter of  `fetch`?
Just use the `.fetch`method and the account that gets loaded will be automatically deserialised
but i guess that's just an example
should probably name account something more descriptive fwiw
```
const program = anchor.workspace.MyProgram as Program<MyProgram>;
const something = await program.account.account...
```
Dear <@!134416332509675520> , How can I get this value in the .js?
No worries!
apologies in advance if I have some spammy questions, we had to make some last minute contract changes before the hackathon deadline
this fixed it!
At any rate yeah, `declare_id!` needs to match whatever the deployed program_id is (think you'll also need to change Anchor.toml as well)
yep
So you're running this against your local `solana-test-validator`?
to be clear, should I just copy/paste whatever anchor deploy gives as the program id into the declare macro?
no! thanks so much, I'll try that
yes!
Oh, also, can you double check that your program's `declare_id!` matches `program.programId`?
Hmm. Just to check, `local` here is your provider you used in `anchor.setProvider`?
This does not map to my understanding,, where the account doesn't need to be owned since it has signed the transaction
However I get the error:
Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7

which looks like it's AccountNotProgramOwned

and removing the account_data field from the struct solves this
which as far as I can tell is exactly following some of the anchor tutorials

hit enter too soon, apologies
Hey, I'm running into a strange issue trying to get account initialization to work.

I have the anchor account and ts init code defined as in the screenshots, and an empty init function.
thank you <@!134416332509675520>
hmm... understood
And you will have to pay for this storage of course
You mean like literally indefinitely? If you really need to store something larger than the max individual account size (currently ~10mb, and only like ~10kb for PDAs I think), you'd have to hack something together where you spread your ever-increasing, unbounded, relentless storage increases over multiple accounts
or is this not possible by design?
so, how can I create something that can grow indefinitely?
I might be misunderstanding you, but the base account will however much space you allocate to it (currently fixed, but this might change soon in solana I think)‚Äîso if you keep pushing strings you'll run out eventually (or even if you have one extra big string)
so people can grow this vector indefinitely
the limitation will be on the string not on the entire base account
hmm I think I thinking in a wrong way about this right
for 2, does it affect only deploymnet cost? or a tx for adding for this vector through a contract function would also cost more?
if someone keeps adding new stuff to the data list at some point in time it will overflow the space allocated, right? or I'm missing a foundational point about Solana dev here?
thinking about this example from nader dabit guide

hmm... and how do i know the max size I would possibly need?
1. Not really. Just allocate the max size you could possibly need. 2.  yes.
ps: Solana programming with Anchor is amazing!!!
so then my qs are: 1 is there a rule of thumb to know how much space I should designate to an account? even one that might grow indefinitely? 2 more allocated space for account more deployment cost? only deployment cost or does this influences other stuff like tx cost?
Only problem I imagine
And what can happen if it is too small alocated space? It will throw an error to the user calling the contract function that stores in it, right?
How do I consider that it might grow indefinitely (imagine a vector of strings object in this account) and set a correct size?
what is a good guide for measuring how much space an account might take?
Where can i find some example typescript anchor programs üôå‚ù§Ô∏è
btw I found the anchor lang Cargo.toml too
updating the cli to the latest version and creating the project architecture again worked, thanks <@!501570363566587905>!
ooh the good old restart your computer and try again
I will try upgrading the cli and doing it all again
btw I created the project using the anchor cli with the command `anchor init`
it has only this

Update everything to the latest versions and it should be solved.
Cargo.toml.
how can i see anchor_lang ver?
anchor cli is at v0.15.0, which is the tool that generated the project
What version of Anchor are you using?
Could you help a humble Rust and Anchor & Solana noob? haha
which exactly like this one: https://github.com/project-serum/anchor/blob/master/examples/tutorial/basic-1/programs/basic-1/src/lib.rs
error in my rust code
I'm receiving the ```cannot find type `Signer` in this scope```
guys another beginner q
you should add whatever constraints are necessary to prevent someone else passing in the wrong accounts and getting your program to do something you don't want it to do
Yes checked this, it does indeed have sol
You can also debug by doing `await program.provider.connection.getAccountInfo(someAccountPublicKey)` and just checking if it has the amount of sol you expect it to
Can you post your `#[derive(Accounts)]` block? Something is transfering sol here, but I'm not sure what
https://github.com/project-serum/anchor/blob/v0.14.0/examples/tutorial/basic-3/tests/basic-3.js <- essentially following this for the usage
I suspect that it is complaining about the `REGISTRY_ACCOUNT`?
Yes, I checked with `solana balance --keypair <pair>` and verified it does indeed have SOL.
Have you airdropped any money to the `userKeyPair`? (Is it paying for an account initialization?)
I'm on anchor 0.14.0 and this is basically the same as the examples in the 0.14 tag
It complains that `failed to send transaction: Transaction simulation failed: Attempt to debit an account but found no record of a prior credit.`
Trying to setup the puppet account like this before I pass it into the modified struct for the CM call

I'm trying to do CPI with candy machine (CM) but am having a bit of trouble with this. Was trying to use the puppet program from the examples as a test. Managed to modify CM to do the CPI call by modifying the CM struct to include the additional account info. However, I'm running into problems when i want to call the CM rpc via typescript with the modified struct.
thanks again
Will also work on these hacking attemps
Ok i'll look at how synthefy handeled these
Magic lol
Oh...
Thanks again for taking on your time
No need for any on those types in your example.
Ok any constraint you would add ?
I still need to write attemps to hack these smart contracts, will do my best and will put it on github
You should use the new `Signer` and `Program` types.
The thing is it looks like this is not enough and I cant really understand why
We wrote this and thought the constraint were strong enought to make sure no one can use funds in a bad way
Ownership handling should all be done automatically if you use the standard anchor account tyhpes.
Ok any open source code using anchor and having good practices with ownership handeling etc ?
The main thing that's kind of anchor specific--though not really--is having multiple `mut` accounts that are of the same type. In that case, you should assert they are unique.
Oh...
The only mango code that is anchor curently is the IDO.
#[derive(Accounts)]
pub struct GetFixedRate<'info> {
    #[account(mut, has_one = pool_usdc)]
    pub pool_account: Account<'info, PoolAccount>,
    #[account(signer)]
    pub user_authority: AccountInfo<'info>,
    #[account(
        seeds = [pool_account.fixed_rate_mint.as_ref()],
        bump = pool_account.nonce,
    )]
    pool_signer: AccountInfo<'info>,
    #[account(
        mut,
        seeds = [user_authority.key().as_ref()],
        bump = user.bump,
        has_one = user_authority,
        
    )]
    pub user: Account<'info, User>,
  
    #[account(mut, constraint = pool_usdc.owner == *pool_signer.key)]
    pub pool_usdc: Box<Account<'info, TokenAccount>>,
    #[account(mut, constraint = pool_ftr.owner == *pool_signer.key)]
    pub pool_ftr: Box<Account<'info, TokenAccount>>,
   
    #[account(mut, constraint = pool_fixed_rate.owner == *pool_signer.key)]
    pub pool_fixed_rate: Box<Account<'info, TokenAccount>>,
   

    #[account(mut, constraint = user_usdc.owner == *user_authority.key)]
    pub user_usdc: Box<Account<'info, TokenAccount>>,

    #[account(mut, constraint = user_ftr.owner == *user_authority.key)]
    pub user_ftr: Box<Account<'info, TokenAccount>>,

    #[account(mut, constraint = user_fixed_rate.owner == *user_authority.key)]
    pub user_fixed_rate: Box<Account<'info, TokenAccount>>,

 

 
    #[account(constraint = token_program.key == &token::ID)]
    pub token_program: AccountInfo<'info>,
    pub clock: Sysvar<'info, Clock>,
}
We wrote this
and synthefy code ?
Ok i should try to look at mango code
Not currently. Would be great though.
A lead dev from another project took on his time to look at our code
for anchor
Is there any specific docs about security
Hello guys
nvm I was using the wrong program id lmao
but the anchor test then fails with `This program may not be used for executing instructions`
It generates the project, builds, deploys
`anchor init`
I'm getting an error with the default program generated by the anchor cli


//////////////////////////////////////////////////////////////////////////////////////////

a very noob question: im trying to read through the metaplex candy machine test code, I‚Äòm noticing that within the context in the RPC call there is an "instructions" key like this: 
```
const tx = await program.rpc.<my-program-instruction>(
          {
            accounts: {
              // some stuff
            },
            signers: [myWallet, this.authority, this.config],
            instructions: [
              ... // some instructions here?
            ],
          }
        );
```
https://github.com/metaplex-foundation/metaplex/blob/397f488935f2075b0798946c30cf5f7b0ddcd3f0/rust/test/nft-candy-machine.ts#L291

What are these instructions and what's the sequence of execution here?
i am following bfriel voting app tutorial https://github.com/bfriel/crunchy-vs-smooth-v2
also just checked my transaction history on the explorer and can see hundreds of transactions being made... not sure why this is the case
yeah its pretty high, idk.
Just tried deploying the basic-2 program to the devnet and it cost ~2.5 SOL. Why is the cost to deploy a program so high?
yh np
ie not this video, but the others in this playlist
this is the likely path I'll follow, thanks for the help! the ido repo should be useful in the future for sure
ah sry, rookie mistake haha https://www.youtube.com/watch?v=Jz5v_u75xk8&list=PL41Cw3fN3CfdbmhgxADwyDyIoDrxc22v2&index=3
the paulx escrow tutorial is great but you're probably don't need it if ur focusing on anchor
which guy u didn't specify lol
with documentation i haven't seen any. the SPL programs in the solana directory, and spl-token are amazing. this guy does a good job at explaining some complex programs once you've been through it
Ah I see. I believe how it's usually handled is that the client pings the endpoint. Or you spin up a CRON job that pings the rpc endpoint periodically, that does that. not aware of solana tools that do that (i.e. no trivial ones)
would require the code to figure out. you could airdrop exactly one of the two to figure out which one it is
the one that you assigned as payer. could be either
which account? The wallet account or the program account?
The account doesn't have SOL.
what does this error mean?
Hey everyone, I went through the four basic examples in the tutorials directory of anchor....

Apart from these 4 examples are there any more Rust programs with some documentation that I can read to solidify my understanding before moving onto writing my own programs?

Thanks.
this is great! thanks for this! but ideally the program could send back tokens on its own after a timestamp without a nudge from a client, what I see here is something that checks conditions based off of timestamps. Will update here when I finish my stuff :D
I think unix timestamps have something that would work. here is an example of how times are used. would be curious to know what learninigs you have when progressing through your process. https://github.com/blockworks-foundation/ido-pool/blob/main/programs/ido-pool/src/lib.rs
I guess `::authority` would also work for non-tokens (i.e. if the program initializes a sub-address, for example), whereas the mint is (as the name suggests), only for tokens and mints
and see if it resolves the issue
the environment variable is probably not being read. Try running 
``` 
ANCHOR_PROVIDER_URL=https://api.devnet.solana.com ANCHOR_WALLET=/Users/raven/.config/solana/id.json node client.js
```
what is the significance of the account in declare_id! and would we need to change this to another account when deploying to the devnet?
Thank you!! I figured that out‚Ä¶ Rust is very interesting
Small asterisk on that ^ since you can now fetch sysvar accounts dynamically (you can do `Clock::get()` now, when you used to have to pass the clock as an account)
Yep, every time (not possible in solana for your program to look up accounts dynamically‚Äîany accounts it needs will have to be specified/passed in from the client).
Was curious about this too, the mint needs to be writable because the mint account keeps track of its extant supply: https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L533
I hit this problem earlier in my dev when I was getting a writable privilege escalation error. I fixed it, but conceptually still don‚Äôt fully understand why the mint itself need be writable.
thanks again man super helpful! this might help me get started on the application i want to make, but probably won't put it on mainnet until a more widely approved way to get random numbers comes about
Yeah, I'm curious about this too, not sure what you're supposed to do. There was a recent hackathon crate published about randomness, https://docs.rs/solana-anchor-rando/0.1.1/src/solana_anchor_rando/lib.rs.html#5, but I can't actually comment about whether the approach works/haven't looked at it very carefully
Oh makes sense now. Thank you sir!
also one more beginner question, as randomness can't be done on chain, what would be the security considerations with getting a veritably random number off-chain and having a client write to an account? doesn't seem to be the recommended way of doing things
Think I'm misunderstanding your question‚Äîwhat do you mean by two for the same token? In the snippet you've posted, it's telling anchor to initialize a token account with mint = mint and owner/authority = whoever the initializer is.
thanks, that was super helpful!
Seems like the tutorial needs to be redeployed (this is fixed in master), you need to use an `ANCHOR_WALLET` env var. Try doing `ANCHOR_WALLET=~/.config/solana/id.json node client.js`
As far as I know you'll have to have something off-chain poke the program after a set period of time, yeah.
hi everyone! more of a solana question than an anchor question, but basically say i wanted an escrow to cancel after a set amount of time (as opposed to a user canceling the escrow). how would i go about doing this? would a non-human client call a cancellation after a set period of time, or is there a way for a program to send back tokens at a specified unix timestamp? thank you!
Question.
Are `token::mint = mint` and `token::authority = initializer` constraints? 
And if it is, what is the purpose of passing two for same token?

```
  #[account(mut)]
  pub initializer: Signer<'info>,
  pub mint: Account<'info, Mint>,
  #[account(
        init,
        seeds = [b"token-seed".as_ref()],
        bump = vault_account_bump,
        payer = initializer,
        token::mint = mint,
        token::authority = initializer,
    )]
```

full code here: https://github.com/ironaddicteddog/anchor/blob/improve-escrow-example/tests/escrow/programs/escrow/src/lib.rs#L122
Hey fellow buidlers!!

I was trying out the basic-0 example from anchor and following the instructions here (https://project-serum.github.io/anchor/tutorials/tutorial-0.html#generating-a-client) and I'm getting this error when I run `node client.js`

I have deployed the program and also updated the program ID in the client.js file. Anyone can help me with this?
you might be missing a `mut` on the `mint` account
was never finished
<:2627_pepe_hmm:868902359298899998>
https://github.com/solana-labs/solana/issues/1558
dont think so
is there a source of randomness in solana programs?
Question.
Even if you want to just reference data from state variables, do you have to pass in the account public key everytime?
ah, ok got it, makes sense
idk why it didnt error though
not anchor's fault my perms are just really fucked on this wsl build
I think it just didn't have write privileges to my windows folder
Interesting, curious what the fix was
ok cool, yeah sorry a little stumped
thanks for the help thouigh
I think I might have found the issue, wsl problem
' is rust lifetime
yeah the `.so` file and my keypair
is there anything under `target/deploy`
yes its successfully building `Finished release [optimized] target(s) in 4.62s`
but you are seeing an output something like: `Finished release [optimized] target(s) in 2.09s`
yes its empty
in `target/idl`?
my idl is not being generated when running `anchor build` and there's no error being outputted, does anybody know why?
I tried replacing that with `Buffer.alloc(layout.span)`, and got a `Transaction too large: 1341 > 1232` error
gotcha, I'm just trying to do a random init so I can get by with less, thanks
At any rate the hardcoded 1000 is here https://github.com/project-serum/anchor/blob/master/ts/src/coder/instruction.ts#L79
https://github.com/solana-labs/solana/issues/17102
Ah, wait, maybe this really isn't possible, or at least almost not possible‚Äîthe whole tx has a max size of only 1232 bytes as far as I understand it, so passing 1024 bools is already cutting it close
Yeah. Signer<'info> is preferred nowadays but does the same thing as far as I know.
Either way, you're a life saver. It worked. Thank you for saving me from 4 hours of headache
Is this equivalent to adding the #[account(signer)] macro if specifying it as an AccountInfo type?
^ This tells anchor's IDL generation stuff to expect `account1` to sign‚Äîif you don't include it then the JS code complains about an unknown signer
Ah, ok, then the problem is that you haven't marked that `authority` account as needing to sign‚Äîtake a look at your `#[derive(Account)]` struct and make sure it has e.g. `pub authority: Signer<'info>`
Perfect! This definitely got me further along (or at least to another error). In this case, I included the keypair in my signers array and switched to just using ::new. However I'm not seeing "unknown signer: {address}" and I assume {address} is coming from account1 in the client
For regular keypair addresses though, their signature has to come from the client (and it seamlessly extends across the CPI, no need for any additional signature/seeds stuff‚Äîyou'd just use `::new` rather than `::new_with_signer`)
If the authority is a PDA though, only then will you need to use the `new_with_signer` thing‚Äîthat lets your program itself sign for its own PDA
Ah, ok‚ÄîI think the thing you're maybe confused about is that in order to do the CPI here, you just need to make sure that the `authority` account signs the transaction. If that account is a regular keypair account, it will need to sign the tx from the client (either implicitly if it's the wallet, or by including its keypair in the `signers: [...]` array)
sorry, I tried to keep it as short as possible without copying and pasting üòÑ . account1 is just an arbitrary account that was initialized in an earlier instruction in the transaction. I tried doing this same thing without a signer (as I didn't expect any of the accounts' permissions need be changed) and I got the same unauthorized signer error.
Afraid you're going to just have to pass 2 boolean arrays of length 512 üòÜ
Gonna try this locally
512 also works (=:
Oh really?
I'm having a little trouble understanding your code, but in this case, is `account1`'s address a PDA? (so account1.key() == _pda?)
yeah sorry, i mean you have to pass multiples of 2 right, for arrays otherwise the borscht thing complains
Sorry, what about 64? Think I misunderstood that
because of serialization
but 64
ah yeah then it works
Interesting‚Äîout of curiosity, can you pass shorter boolean arrays? Like if you change the expected argument type to `[bool; 10]` does it work better?
```
RangeError [ERR_OUT_OF_RANGE]: The value of "offset" is out of range. It must be >= 0 and <= 999. Received 1000

```
Dumb q, what happens if you use a big array of booleans? Does that not serialize correctly?
Does anyone know how to pass a `[bool; 1024]` instruction argument on the javascript side?
Hello, I'm trying to wrap my head around the MintTo instructionr. I have a Mint whose mint_authority is account1, derive a PDA for my program with 
        let (_pda, nonce) = Pubkey::find_program_address(&[&ctx.accounts.account1.key().to_bytes()], ctx.program_id);
and structure the relevant seeds (for later input into mint_to) into a var signer, and then create a new CpiContext with
let cpi_ctx = CpiContext::new_with_signer(cpi_program, cpi_accounts, signer);
where cpi_program=ctx.accounts.token_program.clone(); and cpi_accounts = token::MintTo {
            mint: ctx.accounts.mint.to_account_info(),
            to: ctx.accounts.token.to_account_info(),
            authority: ctx.accounts.account1.to_account_info().clone(),
        };

I was under the impression that find_program_address would create the given address and the seeds would provide new_with_signer with the information necessary for the program to sign the accounts when they're passed to the token program, but I'm getting a "Cross-program invocation with unauthorized signer or writable account" error. Does anybody have insight into what I'm doing wrong/what is causing this error?
ü•≤ thank you for the help haha
Aha üôÇ
nvm seems to work fine after re-deploying
hmm oh god i know why haha. I only deployed once in the beginning and have been running `anchor test` without re-deploying
You could also check for logs in your project's `.anchor/program-logs` directory
yep
Ok, so you've got a local validator running in the background?
I've deployed the program and running `anchor test`
hmmm I tried without the log masks first. and Im not getting any logs. which is why i tried
Just to double check, you're running the program by deploying it to a local validator, not just by running the tests etc.?
Mm, I seem to get logs fine doing what you just posted, but I haven't touched any log masks‚Äîmaybe that's the problem?
What kind of more complex phantom interactions are you interested in? My understanding is that you just ask phantom to sign the transaction you want to do‚Äîall of the complexity would be within the transaction itself, which doesn't depend on phantom
hello folks, i'm here with a very noob question: how do I get logs from my rust program? I've been trying to get my custom print on `solana logs --url localhost`. I'm attempting to use the `msg!` macro from solana_program crate and have my log mask setup to be 
```solana_runtime::system_instruction_processor=trace,solana_runtime::message_processor=info,solana_bpf_loader=debug,solana_rbpf=debug```
would appreciate a few pointers!
ok, thanks
I don't think whether an account lives at a PDA or a regular address influences how you close it‚Äîyou need to drain its lamports (how you do that depends on which program owns the account)
also, what does custom program error `0x12f` refer to?
hmm looks nice. i know too little about how the IDL is used to interact with the RPC call tho, not sure if typing is just interpreted through binarised string (i.e. JSON.stringify), or if there are more detailed format specifications required when interacting with the rpc
Alright, thank you. I'll post it later. I also have an idea about using wasm_bindgen to generate the JS types automatically instead of using the IDL. But don't know if it makes sense. I will post it later. Just dinner
Also, does anyone have any examples on how to use phantom with solana / anchor? There is the https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291  guide, but it does not seem to address how to invoke more complex programs. Or am I missing something?

I only see how to invoke a simple transaction (send SOL from A to B), but how do I use phantom if I want to invoke a more complex function on my smart contract? Would appreciate any help and pointers anyone has! üôÇ
it's in the "development/rust" in this discord. your question is mostly rust-related as much as I can tell, not quite a "beginner-question" haha
Thanks for the answer. Where-s the rust chat?
you might want to ask this in the "rust" chat, there will likely be better responses there
hmm good questino, I think rust offers some nice trait implementation that you can (de) serialize. I think perhaps it's easiest to serialize to some json-structure (i.e. add a trait that it can be serialized, and deserialized)? not super clean bcs types are lost, but will work for the IDL. might be easier to implement it manually using "serde json"
or just accounts owned by it
once we're "done" with a PDA is there anything that needs to be done to "close" it?


//////////////////////////////////////////////////////////////////////////////////////////

is what you want to run... I don't know the latest on faucet stuff, but I think there might still be a cap on the amount you can airdrop yourself
yes... solana airdrop 1 ~/my-wallet/whatever
Awesome. Thank you! I assume that just consists of airdropping to my payer account while connected to the devnet?
And I agree with the mentality 100%
Yes... it costs devnet sol
Is minting on devnet free? I'm trying to get through as much of my dev as possible without having to pay for minting (until I need to scale my app)
I would just use devnet... maybe Armani or Alan have better solutions though... they are much more senior to me in terms of understanding
or just docs, I haven't been able to find any
I know this probably belongs in the Metaplex channel, but if you know how to do this and have the time to DM me I'd really appreciate it üòÉ
That is your problem... the Metaplex program is not loaded on your localhost connection
Did some searching and that seems likely... I'm trying to pass in a program ID of the Metaplex Token Metadata program (localhost connection) and that account is resolving to null right now. Hopefully can proceed once I figure out where to import that from, thanks
Could also be that you're passing a publicKey in `signers` (needs to be a keypair)
Yea, it looks like the error is happening before you call the rust part of the code
Probably passing in an invalid publicKey in the accounts?
This is all I get... no log feedback

Something like this?
Like a picture of it?
Can you post the error message?
Anything, really. Right now I have a transaction failing and the only error message I get is from when my test script is trying to write a tx to stdout, which it can't do because the tx is undefined given my Rust code failed
Do you mean the funky hex code errors?
Hi, is there a standard approach to tracing Rust errors through 'anchor test' runs?
based on what you sent, which makes a lot of sense
ok thing this is what i wanted:
```rs
set_authority(
  CpiContext::new(
    ctx.accounts.token_program.to_account_info(),
    SetAuthority {
      account_or_mint: ctx.accounts.asset_account.to_account_info(),
      current_authority: ctx.accounts.owner.to_account_info(),
    },
  ),
  spl_token::instruction::AuthorityType::AccountOwner,
  Some(ctx.accounts.recipient.key()),
)?;
```
So you need to CPI.
And only the token program can write the account info.
ahhh duh
Because the token account is a copy of the bytes.
why does something like this not work:
```rs
...
pub borrower: UncheckedAccount<'info>,
pub asset_account: Box<Account<'info, TokenAccount>>,
...

let asset = &mut ctx.accounts.asset_account;
asset.owner = ctx.accounts.borrower.key();
```
I am mistaken. `SetAuthority` exists https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/instruction.rs#L153
I don tthink it exists.
I don't see any owner transfer instruction.
Phantom just does a transfer.
Good point.
Hmm
instead of just mutating the owner directly
Yes.
that requires initializiing a new token account for the mint for the recipient prior to transfer correct?
Can verify by sending an nft to another wallet.
Just an spl token transfer
what's the common pattern for transferring ownership of token accounts (for nft transfers) code-wise
I want it so it says there is a 99% chance the user payed their fair share to the contract so I can speed up my dApp, right now it takes about 30 secs for someone to pay the contract which is too long imo
Does anyone know how I can speed up the time it takes to call a smart contract function.... (That is a bad way to phrase the question... like can I decrease the preflight commitment or something so my UX is faster... right now the preflight commitment is at recent)
Thank you. <@!501570363566587905> . But I tried to find PDA or zero-copy in there but I haven't found it.
This will get you started https://project-serum.github.io/anchor/getting-started/introduction.html.
Source? üòµ‚Äçüí´
Reading the source üßô‚Äç‚ôÇÔ∏è
I tried to find ultimate documentation of anchor framework. But I haven't.  Can anybody inform me the ultimate learning source of anchor please?
So the problem is that your open orders account is not "owned" by the correct program. So you are either passing in the wrong account or you haven't created the account with the system program correctly.
Amazing, that's pretty cool
Wow, fascinating, would never have guessed that
This is your error probably https://github.com/project-serum/serum-dex/blob/9f776c45fa37ec80109ea1f46461a75125f3f334/dex/src/state.rs#L136, though it depends on if you've changed the dex in any way locally, since that obviously affects yoru line number.
0x88 => line 136
1 => state.rs
The high order bits of the error code refer to the file. The low order bits the line number.
This is a panic in the dex
You'd basically have to just look at whatever CPIs you're doing (including any that anchor itself might do, I guess). Or maybe you could pause your test validator (can show you how I'd do that) and then look at that program_id in the solana explorer (not sure how much that will tell you)
Yep, sent you a dm!
i do not, how could I find out? yeah ss would be great, are you free later today?
Hmm, do you know which program is 9xQeW above? Happy to try to solve this over a screenshare if you want
the stack traces are similar
I am getting similar errors with other tests that do different things (one closes the open orders account, one doesn't pay rent exemption)
thought so too, but it seems strange to run out of compute with just an init account instruction no?
That sounds like you're running out of compute, but I thought you'd get a different error for that ("exceeded maximum number of instructions allowed")
yeah exactly
Ah, sorry, trying to read more carefully‚ÄîI missed that the first one is for instruction 0 and the second is for instruction 1, hmm
what does that mean?
im not 100% certain tbh sort of new to the codebase, but if i had to guess i think one comes from the swap and one from the dex
You're also getting that compute units log line
I think I'm being dumb‚Äîhow do you get both of those errors? Is it nondeterministic or something?
this is the second trace for the same error

For sure:
Could you post the whole stack trace/log etc?
i believe 0x0 is a flag somewhere for custom program error: 0x1000088
nothing, two different stack traces for the same test
What changed from the 0x0 from before?
it seems im reaching custom program error: 0x1000088
I guess that log comes from here https://github.com/solana-labs/solana/blob/master/cli/src/program.rs#L2147, so maybe you're having trouble getting a recent blockhash?
yup
Just to double check, are you able to load api.devnet.solana.com?
yeah that function exactly, I think there may be an issue with how I'm allocating the account - thanks for the help
Basically I think what you'll have to do to debug is figure out which CPI you're doing, and then go find the actual instruction handler that processes that instruction (that's how I found the possible error above, but I guess I might be looking at the wrong instruction)
localnet works just fine though
deploying on devnet always hangs up on me for some reason
Just to make sure I'm following, you're invoking anchor's `anchor_spl::dex::init_open_orders` function? Or some other `init_open_orders`?
mmmmm strange,  im not sure if that's the error that's getting reached since its in the dex (im currently working on swap), however there is a dependency there so i suppose its possible
but idk which parts of it are unique
I can see that some of it already exists in other places like `spl-token`
I never found out what the deal is with `project-serum/common`
I think it's at least possible you could hit that error doing what you're doing (maybe your `market` account is weird?)
Hmm, I'm not familiar with the serum dex code, but from source-diving could it be this error? https://github.com/project-serum/serum-dex/blob/master/dex/src/error.rs#L37
For sure. I'm running some tests on an init_open_orders function (trying to make some changes to the serum swap). The open_orders account is a PDA. I haven't come across that error before, but Im just running tests on anchor, not deploying üëçüèª
No...
Can you say more about how you're doing things? I thought that 0x0 meant you were trying to deploy and didn't have any sol in your wallet ü§î
I‚Äôm attempting to initiate an account
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 1: custom program error: 0x0
What could an arrow like this mean?
I was thinking about it weirdly for some reason
Ahhh yep that makes sense. Thanks guys ü§ù
signer only means the account needs to have signed the transaction, so you can have multiple i don't see the problem
It'll go by the order the accounts get passed in (or if you're using the anchor js stuff, you get to explicitly name them, `{ accounts: { foo: ..., authority: ..., ... } }`
for example, this line is in an ix context struct for an ix with 3 signers, so which one is `authority`?
if an instruction has multiple signers, how does the anchor `Signer` know which one it's assigned?
Because it installs the dependencies defined in Cargo.toml
Unlike in nodejs, they are installed during build.
https://github.com/project-serum/anchor/blob/master/examples/tutorial/basic-0/programs/basic-0/Cargo.toml#L16

it seems like my Internet Connection Issue; I did not know that I need it. Btw do you know why I would need it?
Hmm, sorry, then I don't know. Hopefully the core dev can help you with this.
and checked cargo ver -1.55
i've checked (node 14.18.0 , npm6.1415) all setup, is on ubuntu 2004 WSL@
solana-test-validator is a local node. You don't need it when you are compiling. Also, when you are running anchor test, you have to close the node, else they are going to collide.
no
do i need to run local validator: solana-test-validator
yeah , everything was perfect
During the installation process, did you follow this?
https://project-serum.github.io/anchor/getting-started/installation.html

you don't see anything like this?
i've also check anchor and solana vesions - them are present (0.17.0 1.7.15)
hanging
is it like hanging? what do you see in the terminal?
is it long process to generate js file ?
and more than 5 minutes gone nothing happened
fired anchor build
hey everyone. today first time using anchor. I'm on Minimal example (first tutorial)
well it is more ergonomic
Uuuuuu nice thank you!
lol found a v janky way of accomplishing depositing the right amount:

```
# Initialize wSOL ATA with just the rent amount for the token data
$ spl-token wrap 0
Wrapping 0 SOL into YOUR_WRAPPED_SOL_ATA

# Transfer desired funds
$ solana transfer YOUR_WRAPPED_SOL_ATA 2

# Sync-native
$ spl-token sync-native

# Check balance
$ spl-token balance So11111111111111111111111111111111111111112
2
```
spl-token wrap 1.0020....
easy UX
so the other day i wanted 1
Yeah that's a definite lol
ok then i give you 0.99796072
i know :/
I want 1 wSOL
lol
also the fact that the CLI does not take account rent
yep this should work
this cost a lot less size wise as well
cool! so then it would be like:

```
$ spl-token wrap 1
Wrapping 1 SOL into YOUR_WRAPPED_SOL_ATA

$ solana transfer YOUR_WRAPPED_SOL_ATA 1

$ spl-token sync-native

$ spl-token balance So11111111111111111111111111111111111111112
1.99796072
```
^ yeah that's what I would have guessed
actually i think all apps should switch to:
If ATA exist, send to ATA then syncnative
if ATA does not exist, create it with expected amount

no more AUX madness
would be nicer if wrap did the transfer + syncnative itself
so you can do a transfer to the ata then syncnative, yes the CLI is a bit painful
to update the wSOL balance with the (lamports - rent)
`spl-token syncnative ...`
you need to call syncnative
I agree with <@!134416332509675520> , am a bit surprised it doesn't work. It seems it is always trying to create the ATA for the wrapped SOL mint for your wallet, instead of checking if it already exists, and not try to create it in that case

One way to accomplish this, albeit a little bit convoluted.

```
# Initial wrap to your wSOL ATA
spl-token wrap 1
Wrapping 1 SOL into YOUR_WRAPPED_SOL_ATA

# Secondary wrap to your wSOL AUX account
spl-token wrap 1 --create-aux-account
Wrapping 1 SOL into YOUR_WRAPPED_SOL_AUX_ACCOUNT

# Transfer all balance from your wSOL AUX to your wSOL ATA
spl-token transfer So11111111111111111111111111111111111111112 ALL YOUR_WRAPPED_SOL_ATA --from YOUR_WRAPPED_SOL_AUX_ACCOUNT

# Claim rent back from your wSOL AUX
spl-token gc
```
(just replace the `YOUR_WRAPPED_SOL_ATA` and `YOUR_WRAPPED_SOL_AUX_ACCOUNT` with your base58 addresses)
I think under the hood wrapped sol is just sol that has been transferred to your associated token account for the "native mint", so I guess wrapping more just means transferring additional sol to that J8ZfB... address?
Huh, I haven't looked at wrapping sol before but I'm a little surprised that doesn't work.
Do you know why they call it 'info?
Hello, how do I wrap more if I'm using the spl-token command line?
Whenever you initialize an account, its address needs to sign too. So if you're initializing an account at a program-derived address, you'll need to sign with its seeds+bump.
try signing with PDA seed
yeah, but the signer is the same as the signer who call the program so it should be passed through right?
Perhaps you are missing the `cpi_ctx.with_signer(&seeds...)` ?

example:
https://github.com/project-serum/anchor/blob/master/tests/escrow/programs/escrow/src/lib.rs#L75-L83
keeps getting `Cross-program invocation with unauthorized signer or writable account'` error
How do I init via CPI?
My guess is that the other tests depend on an actual anchor version, whereas escrow's package.json points directly at the ../../ts directory
that worked, weird that i didn't need it for the other typescript tests
so im assuming that means only master branch supports it then? thanks, also a follow up question do i have to make changes to any config files or will the master branch cli just generate the types on `anchor build` in my existing project?
You can cargo install the master branch.
can the current npm build generate ts types for client? if not is there a build for master branch anywhere?
Think you need to run `yarn build` in the `anchor/ts` directory, though tbh I'm actually not sure why you need to do that (doesn't ts-mocha work directly with ts files? Why does it need the build to have been run?)
I think `.sendAllTransactions` ? I have a similar error though, would be curious what it was for you
I can run all the tests except for `escrow`. That one gives me `Error: Cannot find module '/home/kheavey/anchor/ts/dist/cjs/index.js'` ü§î
or actually it'd execute the ones in `instruction` first so i guess the order will be wrong
btw a simpler way is to append the extra insturctions to the `instructions` array of first txn <@!788122420765917184> 
that shud also work
yeh thats wat i was looking at too <a:Hmmmm:695129200260153375> 
but then i realized `send` calls `sendRawTransaction`
Looking at `send`, I forgot to set quite a few things.
https://github.com/project-serum/anchor/blob/6eead56/ts/src/provider.ts#L88
oh nvm
what happens if u do `provider.send` here instead of `connection.sendTransaction` ?
not sure <a:Hmmmm:695129200260153375>
<@!210756938332504065> do you know what went wrong with the other version above? I haven't used the `program.transaction.foo` stuff before
<:yay:877222447059980328>
It worked!
Thank you! I'll try it out
NOTE: `program.instruction` not `program.rpc`
<@!788122420765917184>
```js
const txn = new anchor.web3.Transaction();
txn.add(program.instruction.xxx...)
txn.add(program.instruction.yyy...)
await provider.send(txn)
```
```
    const tx = await program.rpc.update(
      {
        accounts: {
          stakingWallet,
          lockedRewardsWallet,
          stakingPool,
          pda,
          tokenProgram,
          clockSysvar,
        },
        signers: []
      }
    );
```
This one is not
```
  const ownerSign = provider.wallet.payer;

  async function update_same_tx(ix = null, signers = []) {
    const updateTx = await program.transaction.update(
      {
        accounts: {
          stakingWallet,
          lockedRewardsWallet,
          stakingPool,
          pda,
          tokenProgram,
          clockSysvar,
        }
      }
    );

    await connection.sendTransaction( 
      ix === null? updateTx : updateTx.add(ix),
      [ownerSign].concat(signers),
      { skipPreflight: false, preflightCommitment: "finalized" }
    );

  }
```
This one is failing when called with zero arguments.
Letting anchor spin it up
If you're using an actual `solana-test-validator` etc., you'll need to check the id that got printed when you deployed
Are you testing this with your local validator? Or just with letting anchor test spin up a validator for you?
Also I haven't touched `declare_id!` so far since it was generated with an `anchor init`. Should I change it, where can I get the right one?
```
const provider = anchor.Provider.env();
anchor.setProvider(provider);

const connection = provider.connection;

const tx = await program.transaction.foo(...);
await connection.sendTransaction(tx, ..., { preflightCommitment: "finalized" };
```
Ah, sorry, what did you mean by this ^ then?
Yes, but the thing is, if I call this instruction through `program.rpc.update(...)` nothing is failing
^ It's also possible that your `declare_id!` is wrong/doesn't match the program's actual deployed runtime id
Each of those `Account<'info, T>`s checks account ownership, so seems like one of them is failing. The TokenAccount ones are supposed to be owned by the spl token program, and then I guess the `staking_pool` is supposed to belong to your program?
If I try to do the same thing with a single instruction I still get the same error
```
#[derive(Accounts)]
pub struct Update<'info> {
    #[account(mut, has_one = staking_wallet, has_one = locked_rewards_wallet)]
    pub staking_pool: Box<Account<'info, StakingPool>>,
    pub pda: AccountInfo<'info>,

    #[account(mut)]
    pub staking_wallet: Account<'info, TokenAccount>,
    #[account(mut)]
    pub locked_rewards_wallet: Account<'info, TokenAccount>,

    pub token_program: Program<'info, Token>,
    pub clock_sysvar: Sysvar<'info, Clock>,
}
```
What do your `#[derive(Accounts)]` structs look like for those two instructions?
But I'm also not sure where to look at definitions of generated functions
I think it has something to do with `program.rpc.foo(...)` setting up something I miss
Thanks!
The process is a little goofy atm, convert to decimal and go find them in `error.ts` file üòõ
Also where can I get anchor errors myself, so I wouldn't need to ask next time
I'm not sure for now, I'll check it, thank you!
0xa7 means AccountNotProgramOwned, so is an actual anchor error‚Äîdoes that mean anything for whatever `foo` and `bar` are doing?
And I'm not sure what the problem even is, as calls seem to work separately with `await program.rpc.baz();`
But it fails with 
```
     Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7
```
Good day! How can I call two instructions in a single transaction in tests? 
I've been trying to do something like this:
```
const provider = anchor.Provider.env();
anchor.setProvider(provider);

const connection = provider.connection;

const tx = await program.transaction.foo(...);
const ix = await program.instruction.bar(...);
await connection.sendTransaction(tx.add(ix), ..., { preflightCommitment: "finalized" };
```
ok seems like this is how maybe: https://github.com/project-serum/anchor/blob/b1ef7431eca809dbca41601008fa220e19b8dee7/tests/pyth/programs/pyth/src/pc.rs#L99-L112
not sure exactly how to phrase this question, but how do you turn the AccountInfo from one of the remaining accounts into one of my defined account types in order to modify saved data (or how do you load remaining_accounts as a specific type)
for reference: https://github.com/project-serum/anchor/blob/3958533750c83c3e90709448c4f30ed9cce0b9b8/tests/multisig/tests/multisig.js#L109-L124
perfect, thank you
there's a `remaining_accounts` field for that
ya
You mean an arbitrary number of accounts?
does anyone know how to send an arbitrary length list of ~~pubkeys~~ accounts to a program call?
actually been looking for a good example of how to do this, thanks
gotcha!
They are extra instructions to include within the same transaction, and they run *before* your rpc instruction.


//////////////////////////////////////////////////////////////////////////////////////////

Best way is then to generate the hash yourself?
Not generically, no.
using the `anchor_client` if possible?
is there a good way to query for all the PDAs of an instruction?
Sorry I went to sleep last night. I meant to put mut on `user`.

This is because since `user` is paying the fee to create the account, the account must mark as `mut` as it's changed. 

```
#[account(mut)]
pub user: Signer<'info>,
```
is a cleaner way as Rohan suggested
You can approximate this by having a readonly instruction that emits an event
No `mut` accounts?
Does anchor have a pattern to implement an equivalent of view functions in Solidity?
Hmm, I guess anchor doesn't have any built-in help for that. If you happen to be using the zero copy/Loader<'info, T> stuff then it would work automatically I think, but yeah, if you're using `Account<'info, T>` it won't.
If I'm to call an instruction from another one, and if it updates a state of an account I have in my `Context` , how can I get this account's updated state?
Oh my bad. Looks like you've solved that already
<@788122420765917184> have you tried
```
#[account(mut)]
pub user: Signer<'info>,
```
I will dig into this
Much appreciated <@306185268879425538>
First address is mock usdt token mint, second your mock usdt token  account.
FYI, **here the account is owned by the program**.
And then you can manually mint to the mock usdt token account of your choice using the folllowing cmd:
`spl-token mint FPEgtzdJU9DnvnTQSusiwi2Sf8cM1C4toJGGnsayjuQ6 1000000  5R9G9ewjtSCnJj2JfgEdvuyLz4cthvxRdcx3kDZ5c2td`
You could add sthg like that to your migrations/deploy.js
```
  const [authority, nonce] = await anchor.web3.PublicKey.findProgramAddress(
    [YOUR_SEED],
    yourProgram.programId,
  );

  usdtTokenMint = await Token.createMint(
    connection,
    payer,
    provider.wallet.publicKey,
    null,
    6,
    TOKEN_PROGRAM_ID,
  );

yourProgramUsdtTokenAccount = await usdtTokenMint.createAccount(authority);
```
Do you happen to know if any documentation or tutorials exist for reference?
Thanks for the tip <@306185268879425538> - I'll look it into it
Basically yes
You're saying deploy an SPL token on my localnet and use that to mock interactions on a custom smart contract on that same localnet?
Otherwise you can deploy to testnet everytime to directly access it.
Deploy your own SPL token with 6 decimals to mock it. Afaik USDT is just another SPL token.
hey all, I'm trying to wrap my head around CPI and the ability to use other smart contracts in development. I'm trying to find any solid tutorial or documentation on how one would go about building a smart contract that one could deposit/withdraw an SPL token like USDC for examplle
can anyone point me in the right direction?
The tutorial on the documentation used a custom external smart contract, but I'd like to use one that already exists on the testnet (like USDC, for example)
It works but just seems weird.
Hi I have a question regarding the handling of large integers. I am in a position where I need to multiply two fairly large integers. Is it usual to do something like:
```
        return amount_usdt
            .checked_div(u64::pow(10, USDT_DECIMALS))
            .unwrap()
            .checked_mul(pool_circulating_supply)
            .unwrap()
            .checked_div(pool_liquidity)
            .unwrap()
            .checked_mul(u64::pow(10, USDT_DECIMALS))
            .unwrap();
```
Basically I reduce the precision by first dividing by 10^6, which allows for the following multiplication to work. I then re-add the decimals to keep the 6 decimals used by my spl token.
Ohh, makes sense. Thank you very much for the detailed explanation!  
It's just sooo different from Ethereum haha xD
Ah, ok, that wouldn't work‚Äîif you want to interact with an account, solana just forces you to pass it from the client as its public key. If you tried to store the actual `Account<'info, TokenAccount>` itself in storage, you would be storing a weird snapshot of its state, not really the account itself (not even 100% sure this would serialize, haven't tried it)‚Äîat any rate when you tried to then use it solana would reject you, since the client didn't actually declare your interest in that account (solana forces you to do this for performance reasons).
Here's an example project from the Anchor test.

Stores pubkey of pool_usdc in storage:
https://github.com/project-serum/anchor/blob/master/tests/ido-pool/programs/ido-pool/src/lib.rs#L548

Client passes pool_usdc:
https://github.com/project-serum/anchor/blob/master/tests/ido-pool/programs/ido-pool/src/lib.rs#L505

All you want to do is withdraw usdc. If Account<'info, TokenAccount> of pool_usdc was stored in storage instead of PubKey (of usdc), then there is no need to pass pool_usdc from client side. Or is it not possible to store that in storage?
https://github.com/project-serum/anchor/blob/master/tests/ido-pool/programs/ido-pool/src/lib.rs#L225
What badness are you envisioning? And what storage are you referring to? `Account<'info, TokenAccount>` just means the client is passing the specific token account to the program, not necessarily that we're additionally storing anything about it in our own account storage (the token account itself is of course an account, but managed by the spl token program, not us)
Is it a bad practice to store Account<'info, TokenAccount> in storage? I see many projects storing PubKey for ATA. Because it's kind of weird that you have to pass ATA from the client side everytime, for example when you simply want to withdraw token when there is only one type of token.
The wallet will show up as writable while the explicit user keypair won't!
^ You can verify this by doing something like `msg!("{}", ctx.accounts.user.to_account_inf().is_writable)` for the two cases, the one that works (using the provider wallet) and the one that doesn't, both without the `mut` annotation
Ahh, I see, thank you!
It's a bit sneaky why you *didn't* need a mut there when the wallet was the payer‚Äîthe wallet was actually implicitly mut even though you didn't mark it as so, because it's already the provider's wallet aka the way to pay for the transaction, and paying for stuff always requires `mut`
Why don't I need it for `provider.wallet.payer.publicKey` then?
You'll need a `mut` on the payer though (the user account)
I can call an rpc with `provider.wallet.payer.publicKey`, but with any other key it fails
Oh, sorry, jeez haven't had enough ‚òï yet.
Extra mut is not allowed.
you're right. i didnt make the `recipient` a TokenAccount, was just passing in a freshly generated pubkey for some reason. i bet thats it
Which part are you stuck on? Did the extra `mut` not fix things?
Ok, are the other `Account<'info, ...>`s you're using also set up correctly? Are those TokenAccounts owned by the token program, etc.?
Oh, sorry, need to read more carefully ü§¶‚Äç‚ôÇÔ∏è 1 sec.
arent they initialised in the `create` ix after i mark them as `init` or is that not how it works?
Ah, ok, if they're undefined then that means you haven't initialized them yet (hence they aren't owned by your program)
0.17.0
syntax seems a little outdated so im curious
which version of anchor are you using?
Sadly, I'm stuck here as well.
both are undefined...
`token_vesting` should simply be passed a `anchor.web3.Keypair.generate().publicKey` right?

as for `vesting`, i'm deriving it on the client like so:
```
const [vesting_pda, vesting_bump] = await PublicKey.findProgramAddress(
      [
        payer.publicKey.toBuffer(),
        recipient.publicKey.toBuffer(),
        tokenMint.toBuffer(),
      ],
      program.programId
    );
```
guess ill just try it on all non-misc accounts
i've doubled checked the declare_id! and it's the right one. will try your second suggestion rn
(Still looking at your code) but there are basically two things you could check: 1) is your declare_id! correct? if not, it will lead to spurious AccountNotProgramOwned errors :(; 2) you can always `await program.connection.getAccountInfo(somePublicKey)` and double check on the client which program owns some account‚Äîdo those accounts have the correct owner?
can share more code if necessary
hate to bump things that were probably ignored for a good reason but its been 5 hours and im still on this - anyone have any ideas?
The alias for `Result<()>` all by itself is kind of fun, it's actually sneakily generated for you whenever you use the `#[error]` macro ü•∑
Got it. Thanks <@!168868665456984065>
just for brevity
`ProgramResult` is just an alias for `ResultGeneric<(), ProgramError>`
What's the difference between Result<()> and ProgramResult? I have seen both used in anchor examples but I am not sure what the diff is
Thanks for the confirmation. My build must have been wrong, it worked flawlessly after two tries.
yes instructions are ordered <@!306185268879425538>
Hi. Do you happen to know wether instructions can be ordered ?
Doing sthg like:
```
tx.add(spl_transfer_instruction)
tx.add(my_program_instruction)
```
Does not seem to enforce any ordering.
Thank you
I see.. then I'll need to make them integers and use in the program.. what if I need to store some ratios, like a calculated value within the program?
https://github.com/Synthetify/synthetify-protocol/blob/master/programs/exchange/src/decimal.rs
i dont think you can use floats in solana smart contracts
Why do I get this error when trying to send in an `f32` or `f64` value as a parameter (not happening with other types like `u64`)?
```IdlError: Type not found: {"name":"data","type":{"defined":"f64"}}```
It's also strange that the `type` field doesn't have a direct value of the premitive type `f64` but gets it wrapped in another object. I'm a beginner in both Rust and Anchor, so I'm kinda lost about what's going on here.
tried refactoring with the `program.instruction` pattern but im getting the same thing

yes
How do you call this instruction, with `rpc`?
getting an `0xa7` - AccountNotProgramOwned error on this accounts context struct. afaict, the issue is either with `vesting` or `vesting_token`. `vesting` is generated via `anchor.web3.Publickey.findProgramAddress(...)` and `vesting_token` is generated via `anchor.web3.Keypair.generate()` so im not sure what it could be... a little stumped here
```
    const tx = await program.rpc.initialize(
      {
        accounts: {
          user: provider.wallet.payer.publicKey,
          local,
          systemProgram,
        },
        signers: [
          localSig,
        ],
      }
    );
```
And..
```
    ‚úî Is initialized! (545ms)

```
And yep!
```
error: mut cannot be provided with init
  --> programs/test/src/lib.rs:18:15
   |
18 |     #[account(mut, init, payer = user)]
   |               ^^^

```
I don't think it is allowed and, either way, it works if I use `provider.wallet.payer` as a `user`. I don't even need to pass a signature with it
try `#[account(mut, signer)]`
```
    pub fn initialize(ctx: Context<Initialize>) -> ProgramResult {
        Ok(())
    }
```
No
Do you have the CPI code in your init?
Or am I missing something obvious?
Currently I'm getting
```
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
```
Good day! How can I `init` accounts in test with accounts other than `provider.wallet.payer`?

More concretely, say I have this simple contract:
```
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(signer)]
    user: AccountInfo<'info>,

    #[account(init, payer = user)]
    local: Account<'info, Data>,

    system_program: Program<'info, System>,
}

#[account]
#[derive(Default)]
pub struct Data {}
```

How can I make this test to stop failing on CPI?
```
const anchor = require('@project-serum/anchor');
const web3 = require('@solana/web3.js');

describe('test', () => {
  const provider = anchor.Provider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.Test;

  const userSig = web3.Keypair.generate();
  const user = userSig.publicKey;

  const localSig = web3.Keypair.generate();
  const local = localSig.publicKey;

  const systemProgram = web3.SystemProgram.programId;


  it('Is initialized!', async () => {
    await provider.connection.confirmTransaction(
      await provider.connection.requestAirdrop(user, 10000000000),
      "confirmed"
    );
    const tx = await program.rpc.initialize(
      {
        accounts: {
          user,
          local,
          systemProgram,
        },
        signers: [
          userSig, 
          localSig,
        ],
      }
    );
    console.log("Your transaction signature", tx);
  });
});
```

i did not change defalut path const anchor = require('@project-serum/anchor');
what do you get if you do `npm ls -g`?
also make sure your PATHs are set correctly
i've checked package-lock.json (i have only that one) and the versions are a bit different 0.17.0 from my 0.17.1

i've installed locally and globally and locally
normally you would work on a project with a `package.json` which would define project-specific js dependencies
try to install the dependency globally `npm install -g @project-serum/anchor`

tryan@DESKTOP-J536S9G:~/anchor/examples/tutorial/basic-0$ node client.js
internal/modules/cjs/loader.js:905
  throw err;
  ^

Error: Cannot find module '@project-serum/anchor'
i'm getting error
hey everyone. i'm trying to use "node client.js" basic - 0 tutorial
üëç üëç  thank you
I think Orca is based on it, for example.
It's just an example that other projects can use.
is spl-token-swap active at all? nobody talks about it much
ahh got it, thanks
Totally different. One is an orderbook and the other is an AMM.
I can't tell if one is based on another, or it's the same thing, or they're completely different, or smtg else
does anyone know the relationship between Serum DEX and the spl-token-swap program (https://spl.solana.com/token-swap) ?
agreed, yeah if we can stand on the shoulders of giants by taking some piece of what they did and extending it in a different direction, that'd be very good for everyone
At the same time, the community should also not support copy + paste competitors.
First excuse is kind of lame. I've heard many projects say this. We should encourage competition. It's good for the ecosystem.
Yeah i think there's two main concerns, 1) copy/paste competitors, and 2) vulnerabilities. In Raydium's case the first is understandable, but as the ecosystem gets built out and companies benefit from different kind of edges (network effects) that will change. In the 2nd case that will also change as people become more comfortable with standards and aware of common program flaws.
Yea unfortunately closed source is kind of the standard right now. Though it's slowly pushing in the other direction.
that makes me incredibly disappointed given what the DeFi community normally stands for
I don't think they're open source.
bump super curious about seeing the code for the biggest defi platform on solana
Is the raydium permissionless pool code open and up to date ? Did anyone play with it yet ? üôÇ
Does anyone know AMM examples written with anchor and working with serum ?
Hello guys I hope everyone is well
Don't know why not passing in the accounts it wants would give me a rent exempt error though...
I figured it out... I wasn't passing in the accounts it wanted me to
ConstraintRentExempt: 145,
What is error 145 (account is rent exempt)? I am trying to delete an account from existence by moving all its lamorts out... why am I getting an error?
I don't want to turn them off entirely because they help when writing tests, maybe just hide logs for passing tests if that's possible
A pr would be great.
We can hide the logs with a feature flag.
You end up with a lot of transaction simulation failed etc etc
any way to get rid the of all the console messages you get when writing tests that should error like this: ```    try{
      await somerpcthing(
        inst, {
        accounts:{
          whatever: something,
        },
      });
    }catch (err){
      assert(something about err);
    }```
til üôÇ
interesting
got it
The trick above just uses a different `BuildHasher` choice that doesn't do anything illegal
https://doc.rust-lang.org/src/std/collections/hash/map.rs.html#2874
Yeah, it turns out that the HashMap type in Rust by default actually uses some sneaky thread-local static state (something about caching keys or something? haven't looked at it too closely). Static mutable state is forbidden in solana, so this strategy just doesn't work.
hm didn't know you couldn't use hashmaps. can you explain what you're doing here a bit more re: global state & why it matters <@!134416332509675520>?
```
TypeError: Cannot read properties of undefined (reading 'web3')
  653 |   find(LENDING_RESERVES, (reserve) => reserve.name === name);
  654 | 
> 655 | export const TOKEN_PROGRAM_ID = new anchor.web3.PublicKey(
      |                    
```
anyone know why this could be undefined?
I have initalized: 
`import anchor from "@project-serum/anchor";`

it i just use `PublicKey` it works
yeah doing something like this
Ah ok, if you really want to you could do something like this https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L234
<@!134416332509675520> yeah - just testing things out - thank you!
Using something like this https://github.com/solana-labs/wallet-adapter, or this https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291
Ah, ok‚Äîthat's not the way you would ordinarily do it, you'd ordinarily use phantom's js api to ask it to sign things for you, without ever touching secret keys
<@!134416332509675520> i think i can do it like this: `const wallet = new Wallet(Keypair.fromSecretKey(new PublicKey(privateKey).toBytes()))`
Am maybe misunderstanding what you're trying to do‚Äîcan you not just ask your phantom wallet to sign things for you?
phantom ui
i see the secretkey - but to use it i need it to come in as a Uint8array
Where are you getting that secret key from?
const secretKey = "askdjajsd" // comes as a string
const wallet = new Wallet(Keypair.fromSecretKey(secretKey))
Not sure I'm following your question‚Äîbut with phantom at least, you don't (phantom will never reveal the secret keys to you, at least not via their JS api that is).
A private key is the same thing as a secrete key
<@!134416332509675520> got it
Each wallet is a public/private keypair (the trick is that they're all generated from the same seed phrase, as ssj posted above)
how do you convert a private key to a Uint8Array secretkey?
it seems like a phantom wallet can have multiple sub wallets? a wallet has one secret key? and each sub wallet has a private and public key? is that right?
https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
It is definitely confusing, I think phantom wallet mentions something like they are generated off the same seed or somthing like that, but they are all different keypairs
im being a n00b. i see the different private keys üôÇ 
why do i ask the dumbest questions i have no idea
No
you can have multiple wallets. but they are all tied to the same key pair?
all I have for this is modeled after what I saw in that video,
```
#[derive(Accounts)]
pub struct CreateMint<'info> {
    #[account(mut, signer)]
    pub account1: AccountInfo<'info>,
    #[account(
        init,
        payer = retail_account,
        mint::decimals = 0,
        mint::authority = retail_account
    )]
    pub mint: Account<'info, Mint>,
    #[account(address = token::ID)]
    pub token_program: AccountInfo<'info>,
    #[account(address = system_program::ID)]
    pub system_program: AccountInfo<'info>,
    pub rent: Sysvar <'info, Rent>,
}
```
that's interesting... given it was written correctly, shouldn't just the mint need to be a signer?
Well, you can sort of use HashMaps, just have to customize them a bit to avoid that hidden global state üòà
This looks like an error in your rust code... specifically in the struct
Trying to now use the Anchor init macro to create a mint. I have an account, `account1`, who will serve as both the payer and the `mint_authority` -- <@!501570363566587905> very similar to your basic4 example in the YouTube Anchor video. To my understanding, I need the mint's keypair as a signer in my RPC call and account1 to be designated as a signer with the signer macro. If I only have mint's keypair in my signers array, I get "Signature verification failed." But if I put both mint's and account1's keypair in my signers array, I get a variety of errors depending on my structuring of the context's accounts. 1) Does the payer need to be a signer here? 2) How can I make sure the payer has enough lamports to instantiate a new account (given it has 1 SOL in its wallet)?
About solana not allowing hashmaps, you can do `cargo build-bpf --dump` and take a look at the ELF file https://docs.solana.com/developing/on-chain-programs/developing-rust#elf-dump, and sure enough, there will be an offending `.bss` section related to hashmap state:
```
  [11] .bss.std::collections::hash::map::RandomState::new::KEYS::__getit::__KEY NOBITS 000000000002a7a0 02a7a0 000018 00  WA  0   0  8
```
Conceptually, your phantom wallet isn't going to give you access to the actual keypair‚Äîit's job is to keep it secret üôÇ
Why does sealevel not support hashmaps??? Too much memory usage
Wow, that's actually fascinating, thank you for pointing that out! I had no idea.
that way the user can sign the tx
Follow this code... you have to add a method to the wallet that calls window.solana.signtransaction

No... you can't get the keypair... you have to ask the wallet to sign the tx
`Keypair.fromSeed()`?
I prefer to use the phantom wallet though... go to their docs
i want to write a script? 
and i need to test on main net üò¶
https://github.com/solana-labs/wallet-adapter
You are supposed to use the wallet adapter
Though you can export if you really want it.
You don't.
how do i instantiate new Wallet(keyPair)

where do i get this keyPair from my phantom wallet?
Oh wow, interesting
my understanding is you can't use a HashMap in a Solana program. Like Sealevel doesn't support it
(Dumb question), supports it where?
weird. HashMap seems like the more primitive type
Sounds like it
so Solana supports BTreeMap but not HashMap?


//////////////////////////////////////////////////////////////////////////////////////////

Instead, we can make it required and force the user to call `getProvider` implicitly, if he wants to use it.
Yea we should change that. It's optional only if `setProvider` was called.
ü§¶‚Äç‚ôÇÔ∏è
I fixed my issue. <@&889579250720575488> your docs say that, for the Class Program, provider param is optional:

https://project-serum.github.io/anchor/ts/classes/program.html#constructor

But using it for first time on a react app client using create react app it is in fact required. Maybe update the docs this was very confusing and will prob trip others up
It's a little bit of an adventure (part of the reason I knew what was up with your setup was that I was just screensharing like ten minutes ago with someone who had a similar issue, also on M1 lol). But now that I've ironed out some local install issues I seem to be running things just fine ü§û
if i replace this part of the config with the relevant Python command to use anchorpy will it just work?
```
[scripts]
test = "mocha -t 1000000 tests/"
```
tks for the help. appreciate it.
btw, does macbook m1 work well with solana/serum/anchor? had problems when m1 first came out.
yeah works now. i did that because .cargo/bin/sdk was "bad file" or something like that. i guess my installation had problem
Actually not sure why you need to do this at all though if the active_release/bin stuff is in your path
Ok yeah, that's not quite right, replace the first path with `/Users/dsu/.local/share/solana/install/active_release/bin/sdk` I think
i did a soft link since it was complaining not finding the bpf
ln -s /Users/dsu/.local/share/solana/install/active_release/bin/cargo-build-bpf /Users/dsu/.cargo/bin/sdk/bpf
<@!740067760541007894> how did you setup the path for you BPF SDK? That path ought to point to an actual directory, like something/something/sdk/bpf
yes macbook M1
Are you on macos?
did "anchor init <my anchor proj name>, " then "anchor build".
got this error:

BPF SDK: ~/.local/share/solana/install/releases/1.7.11/solana-release/bin/cargo-build-bpf
thread 'main' panicked at 'Failed to install bpf-tools: "Not a directory (os error 20)"', sdk/cargo-build-bpf/src/main.rs:473:6
stack backtrace:
   0:        0x104d80064 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h6a8908fa3ed6f9e8
   1:        0x104da34fc - core::fmt::write::h4be00f71c5582919
   2:        0x104d78b4a - std::io::Write::write_fmt::h49e76926070788f1
   3:        0x104d81e8f - std::panicking::default_hook::{{closure}}::h1577f0656e419c0e
   4:        0x104d8198d - std::panicking::default_hook::h1aef594179c4fd25
   5:        0x104d82590 - std::panicking::rust_panic_with_hook::h10bc487d002f6c42
   6:        0x104d82035 - std::panicking::begin_panic_handler::{{closure}}::hf4cfa78c105ce648
   7:        0x104d804d8 - std::sys_common::backtrace::__rust_end_short_backtrace::h1df96a166e4351c4
   8:        0x104d81f9a - _rust_begin_unwind
   9:        0x104dbcd9f - core::panicking::panic_fmt::hea8fe6c9e0720810
  10:        0x104dbce85 - core::result::unwrap_failed::h58357c1be19e8a7d
  11:        0x1049c90b0 - cargo_build_bpf::build_bpf_package::h7ddf28dc943fd08a
  12:        0x1049cc760 - cargo_build_bpf::main::h37509757f9eec6ef
  13:        0x1049e357a - std::sys_common::backtrace::__rust_begin_short_backtrace::h1ab7d653eac93687
  14:        0x1049e392c - std::rt::lang_start::{{closure}}::h4f5d41ef74d9aef1
  15:        0x104d82ab1 - std::rt::lang_start_internal::h4428f22d05a79c62
  16:        0x1049ccdc9 - _main
I have no idea tbh. I‚Äôve always used next js with typescript. Sorry I couldn‚Äôt be of more help.
No I am using reg js. Am I able to just us reg js?
That rep is also an example with it and also using a wallet
https://github.com/exiled-apes/candy-machine-mint/blob/main/tsconfig.json
Maybe checkout this tsconfig
Are you using typescript with it?
Are there any examples for cra that you know of?
I am
If you‚Äôre using vanilla create-react-app it‚Äôs something a bit different but should be a similar thing.
Yeh so I was using next js and had to add this to my next config file
```

/** @type {import('next').NextConfig} */
module.exports = {
  reactStrictMode: true,
  webpack5: true,
  webpack: (config) => {
    config.resolve.fallback = { fs: false, os: false, path: false, crypto: false };

    return config;
  }
}
```
And if so what is the proper way to connect to contracts
Is anchor the write tool to use to connect and interact with contracts in a client web app?
but it is failing due to fs not being allowed in browser
Trying to connect to my deployed programs via a react app using Anchor
So e.g. you'd get a similar flavor of error if you tried doing `ix_data: AccountInfo<'info>` etc.
Each field in your Accounts struct turns into a line like `let <field_name> = ... try to deserialize that field ...`, and this happens in a scope where `program_id` is already taken as a name (it's the program id)
This ended up being kind of interesting actually, <@!723145219436183644> had a field in their Accounts struct called `program_id`, and that breaks the output of the derive macro üôÉ
both `payer` and `formulaKeypair` show up in accounts
Mm, interesting
the code seems to run on someone else's machine just fine though - they're on an intel mac and im on an m1
can i dm you?
No worries! I think you'll need to post a bigger chunk of your code‚Äîrust  is telling you you're not lining up the types right, but I don't have enough code to look at to tell exactly what you're doing wrong
I think that means you're accidentally signing the tx with a signer that doesn't show up in the accounts list (aside from whoever is paying for the tx, they don't need to be in the accounts)
does anyone get `Error: unknown signer;` when signing a transaction with a keypair generated using `anchor.web3.Keypair.generate();`?
so i'm getting this other error at #[derive(Accounts)] as well. i'm not sure if both the errors are related. I'm using anchor_lang 0.16.0
sorry for bringing this back again i've been trying to make sense of how to proceed with this for almost two days now with nothing conclusive üò¶
hey sorry for getting back to this again but when I just use an AccountInfo<'info>, Anchor says `expected struct anchor_lang::Program, found struct anchor_lang::prelude::AccountInfo` at the ctx.accounts.amm_id.clone() line.
any other alternative path?
stack size is not enough for decode and store all data, in some cases it's possible do not use Box but you need to be careful with this
is it for the dynamic sizing of the aaccount?
why should we use Box here?
What's the difference if we do anchor deploy or solana program deploy {path to so file} ?
And what's the use of storing bump into VisitorState  in that PDA account
Hey Alan, Thanks for this I was kind of asking this only. I will go through the program and let you know if I find any difficulty here. One question Can we make use of this PDA into some other program that I have to verify this current user state ?
I'm a bit confused with the `declare_id!`, can anyone help me explain? So firstly you need to put some program_id into that `declare_id!` before deployment. Then you get the output of the `anchor deploy` and update the source code and Anchor.toml again. So what is actually compiled into the Solana program and stored on the program account? The previous input program id or the post-deployed program id?
Yeah, you could just use an `AccountInfo<'info>` (anchor won't check anything for you). You could also just do some of the anchor checking manually, e.g. `ctx.accounts.amm.key == &whatever_it_should_be`
Ahh alright. I'm just trying to see if the code actually works so is there any other way I can get it running say by just using maybe AccountInfo or something else to solve that error?
You'll just have to have a custom `impl anchor_lang::Id for TheAmm` that returns whatever the amm's actual program id is.
Don't think it will work to use `Program<'info, Token>`, because that will check that the account's address matches the spl token program's address (it won't). My understanding is that you'll need to do `Program<'info, TheAmm>`, and implement a `TheAmm` struct in the same kind of style that `Token` is implemented in Anchor: https://github.com/project-serum/anchor/blob/master/spl/src/token.rs#L337
yeh
Ah, ok, like this? https://github.com/cqfd/anchor-visitors/blob/master/programs/visitors/src/lib.rs#L40
<https://github.com/cqfd/anchor-visitors/blob/master/programs/visitors/src/lib.rs#L40-L41>
it's just a nitpick but i would re-use the seeds here instead of the constraint. It might mean also storing the u8 bump in `VisitorState` though that's not 100% necessary
Here's an example of what I was thinking of https://github.com/cqfd/anchor-visitors
`find program address` will only give you the public key. You'll need to `fetch` the PDA's pubkey and check that it's not `null`
So I create a program which will itself create a PDA whose owner is that program and if someone visits the site I create a PDA for that user from my program and can check if PDA for that user exists using find_program_address and if it does'nt exist means he has not visited my site . Am I assuming it correctly ?
that would be a good use case for a pda.
You could however have your program create an account that lives at that PDA you found, and assign itself as the owner. I guess that would be enough state to indicate that someone has visited your site? If the PDA points to an uninitialized account owned by the system program, not a visitor; if it points to an account owned by your program (so one your program actually created), then yep, a visitor.
Finding a program-derived address doesn't create anything‚Äîif you pass a fresh pda to your program (one that doesn't already point to an account), it will arrive at your program as an uninitialized account. Zero data, no lamports, and its owner is the system program (that last bit is possibly counterintuitive‚Äîjust because the address was derived from your program, and hence your program can sign for it, doesn't mean that your program *owns* the address!)
To clear up some things though: *finding* a program-derived address is one thing, actually creating an account that lives there is another.
I'm still getting used to thinking in terms of accounts, so not totally sure what the idiomatic way to do that would be.
To restate that: there are two ownership-like notions floating around. Only the program from which a PDA was derived can *sign* for that address; totally independently, only the program that *owns* the account can write to it.
So what I mean by generate is I want to create a PDA for each user who is accessing my site so that later on I can check if that user/wallet has accessed the site before by just checking if PDA exists for that user
This isn't quite right, you can have e.g. a PDA that points to a token account (token accounts are owned/written to by the spl token program‚Äîthe PDA-ness just means that only the program that derived the DPA can *sign* for it).
The PDA is just an address (one that gets signed for in a funny way, unlike regular addresses which are elliptic curve public keys, and get signed for the usual way, via a private key).
<@!637172855360061440> can you say more about what you mean by "generate" the PDA?
So if I am authority of that program that generates the PDA means... no one else can generate that PDA but anyone can access that using find_program_address as suggested by alan


//////////////////////////////////////////////////////////////////////////////////////////

Thanks <@!103986638320861184>
the `instructions:` bit on the rpc call is where you can specify a list of instructions to be executed _before_ your main program instruction. So in this case it is specifying 2 additional instructions, one to create the check with 200, and then a createToken account (which possibly returns an empty array, or null, if the token account already exists, thus the splat `...`) -- both of these are using `await` because part of calculating the inputs needed for the instruction probably require generating a PDA or checking if an ATA account already exists
I am trying to make sense of  the Cashier Check implementation. https://github.com/project-serum/anchor/blob/master/tests/cashiers-check/tests/cashiers-check.js  What's going on in lines 59-63? This is new syntax. ty
try doing:

`solana transfer RECIPIENT_ADDRESS ALL --keypair /path/to/your/program/keypair.json --url devnet` (replace RECIPIENT_ADDRESS with your target pubkey, and keeping the `ALL` as it will transfer all the lamports)
Is there an easy way to drain it so there's definitely 0 in there?
ohhhhh, that definitely happened
Looks like it says System Program and Executable set to "no"
if so, perhaps you deposited lamports before deploying or something, perhaps you can drain the account first, so it gets deleted, and then trying to re-deploy again
Is the "Assigned Program Id" set to "System Program"? -- and "Executable" set to "no"?
We checked that and it says it's a "system program", that's incorrect right?
<@!840057433128435722> To add to this, I would also recommend checking the status of the account/program in Solana Explorer in devnet:
https://explorer.solana.com/?cluster=devnet

Perhaps a hint could come up
You can also search the solana codebase for that client error above, only a few hits so could be a good starting point.
Sounds like your account is ostensibly executable, so maybe something about those `bpf_loader_upgradeable` checks?
I'm not sure why you're getting that error, but it's only triggered in a few places in the solana codebase: https://github.com/solana-labs/solana/blob/master/runtime/src/accounts.rs#L311 https://github.com/solana-labs/solana/blob/master/runtime/src/accounts.rs#L426 https://github.com/solana-labs/solana/blob/master/runtime/src/accounts.rs#L455
We've deployed a program to devnet but we're getting some weird errors.

In the frontend: 
```
failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions
```

So we are thinking maybe the program isn't actually deployed. But if I we to redeploy or update we get this error:

```
Error: Account <programId> is not an upgradeable program or already in use
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```

I feel like there's some beginning mistake we're making
Did not know that. Thanks ü§ù
One thing, 0xa7 will get triggered by *any* `Account<'info, T>` ownership check, no need for `T`  to need to be owned by your program. For example, `Account<'info, TokenAccount>` checks that the account is owned by the spl token program.
I think mismatching seeds would trigger a different error, there's 0x92 = 146 = ConstraintSeeds for when seeds+bump don't find the address that got passed in
Reading the source! üßô‚Äç‚ôÇÔ∏è
0xa7 is an account ownership error which usually means mismatching seeds
trying setting up the same seed configuration for the vesting token account as what you're generating the key/bump to be
and `receiver` maps to `recipient_token.owner`
`vesting_pda` is the value for `vesting` when making the accounts ctx
`pubkey` is the correct `funder` 
`devnetTokenMint` is the correct `token_mint`
can you share what that looks like
its likely an issue with the seeds being provided from the front-end/testing script
im getting 0xa7 errors in this struct. as i understand it, the `vesting` and `vesting_token` accounts are marked as `init`, so they should have no owner when they are passed into the ix. 

none of the other accounts need to be owned by the program afaict, so why do i get error 0xa7?
Tests like this one
Good day! When trying to run tests which listen for events with `anchor test --skip-local-validator --skip-deploy`, tests block indefinitely. How can I fix it?
how did you figure out this? is there any log file? how to follow those calls
there was mentioned bug by <@!134416332509675520> and need of adding environment variable - ANCHOR_WALLET

Finally made it

export NODE_PATH="/home/tryan/.nvm/versions/node/v14.18.0/lib/node_modules"
getting new error
I've setup NODE_PATH and NODE, with my NVM path

"tryan@DESKTOP-J536S9G:~/anchor/examples/tutorial/basic-0$ which node
/home/tryan/.nvm/versions/node/v14.18.0/bin/node"
my node installed via NVM
may be problem with NODE_PATH variable, but i don't understand what path should i provide
node, anchor, npm all setup globally
J536S9G:~/anchor/examples/tutorial/basic-0$ node client.js
internal/modules/cjs/loader.js:905
  throw err;
  ^

Error: Cannot find module '@project-serum/anchor'
Require stack:
getting same error
install again
Hi, everyone. Now i just tried again to run minimal example. So I've Removed anchor, and unistall packages.
I just look at the quality of docs and solana market cap and kinda connect the dots üôÇ
I've read your blog posts!
Obviously you don‚Äôt mean actual harassment üôÇ
I don‚Äôt think the dev team prioritizes this
I just look at the abysmal docs and a $45B market cap and connect the dots
No I know what you mean
However initializing accounts is a different story
Loading programs at genesis to specific known public keys is no problem
I'm not suggesting actual harassment
Maybe you take me too literally. If they never hear you say anything about it they won't prioritize it
You can load programs no problem
hassling Solana devs to do smtg isn't a productive use of time üôÇ
It's definitely important and missing functionality for Dev ux
hmm I wonder how hard it is to hack the test validator to try cloning missing addresses just in time
They need to think about prioritising it
You should hassle the Solana devs in GitHub issues and in their dev support channel
üò¶
No you pretty much just have to init all your programs in a script on the local test validator
is there a way to start the test validator cloning mainnet without having to explicitly specify every address that needs to be cloned? Specifically listing them for complex programs is basically impossible.
So how can I find the one who used this program to create the candy machine account?
Like the owner program for candy machines are always https://solscan.io/account/cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ
how I would be able to search for all Candy Machines created by a specific wallet address?
How can I save a Map or Dictionary in account data.
What do?
I deployed a program to devnet but I'm getting some weird errors.

In the frontend: 

```
failed to send transaction: Transaction simulation failed: This program may not be used for executing instructions
```

So I'm thinking maybe the program isn't actually deployed. But if I go to redeploy or update I get this error:

```
Error: Account <programId> is not an upgradeable program or already in use
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```
I just used this as an illustrative example of these traces
so I'm ignoring that one
Ooh, interesting.
this error only happens on M1, it works fine on x86
Yeah‚Äîkind of either a :/ or a üòÉ situation depending on mood/amount of free time haha
At any rate, that particular error sounds like you're somehow sending a malformed instruction (kind of surprising since you often construct the ix via some helper function)
yep yep, so just figure out which instruction fails and then dig into the code
Huh, this repo is organized a little differently than I'm used to, but e.g. you can see a ton of process_x_instruction handlers here https://github.com/solana-labs/solana-program-library/tree/master/governance/program/src/processor
I'd have to binary search
I'm not sure which one fails in this particular case, I package like ten of them into a transaction
Which CPI call are you doing?
so no easy way üôÇ
ah got it
When you make a CPI you know which instruction your trying to call, so you can generally find the actual instruction handling code that handles that ix, and just poke around (not always easy)
spl-governance
I think basically all you can currently do is source-dive. Which program is BUGKq...?
(this one is probably not worth looking into deeper because it's on an M1, but in general trying to figure out tips for how to debug these problems)
these aren't my own programs either, it's just standard stuff
invalid instruction data errors are super hard, like how do I debug those
```
Transaction simulation failed: Error processing Instruction 2: invalid instruction data
    Program 11111111111111111111111111111111 invoke [1]
    Program 11111111111111111111111111111111 success
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA invoke [1]
    Program log: Instruction: InitializeMint
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA consumed 2279 of 200000 compute units
    Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA success
    Program BUGKqJzYi7hirjuKWCXr2Bkj7uQGbSUm5gXVV9vNkBw7 invoke [1]
    Program log: Error: InvalidInstructionData
    Program BUGKqJzYi7hirjuKWCXr2Bkj7uQGbSUm5gXVV9vNkBw7 consumed 3039 of 197721 compute units
    Program 11111111111111111111111111111111 failed: invalid instruction data
SendTransactionError: failed to send transaction
```
like for example
do you guys have general tips for debugging solana stacktraces?
Also, what should `declare_id!()` macros be, and how can I choose the right one
Can I change it somehow in `tests/*.js`?
What would be _the_ way to mock time in programs?
perfect thank you
Yeah if you literally set the token's owner/authority to the program_id, I think you've basically locked those tokens in there for good lol, since I don't think it's possible to sign for the program's own address
i think you read it correct?
Or maybe I didn't lol
Oh, sorry, I misread your q :/
yea that's the issue I'm running into as we speak haha
I think using the program's program_id wouldn't work here, since you can't sign for it as far as I know (whereas if you use a PDA, the program itself can sign for them)
does it make sense to have a program be the auth of some token account or use a program owned account as the auth?
find investors
thanks
üëç
rpcpool (best i think), genesys go, both $500/motnh
what's an example of an expensive one?
with a trial period
the only cheapo one i know is quicknode
there a several, but most are quite expensive for 1 dev
if there is, it's not easily googlable
<@!831450660146642974> -- is there a service that will host a validator? (like alchemy or infura in etherland)
ahhh got it
How do I get info from a Tx from its signature in JS?
some heavy or abused endpoints are just switched off
might be the public endpoints
actually, I'm using `estimate` from `@project-serum/swap` and getting this error while calling it.
```
{"jsonrpc":"2.0","error":{"code": 410, "message":"The RPC call or parameters have been disabled."}, "id": "048a0638-616c-4a49-a231-3ce6ca6e8d57" }
```
did solana mainnet disable `simulateTransaction` call? I'm getting this:
How do I send one SPL token to someone else in the JS?
That means your account you want to edit is not owned by the program that is trying to edit it...
I'm a little stuck here too, 0xa7 seemed to pop up randomly when the ix worked properly before. Did you have any progress on this?
nice that worked! Just had to do `yarn build` in the `anchor/ts` repo, which is also a trick i learned from you
Can't remember exactly whether you need a package.json for this or not ü§î
One thing you can do is run `npm link` from within the `ts` directory, and then in your actual tests, do `npm link @project-serum/anchor`
like say I modify the TS client and want to use my fork to test `basic-1`
how do I test against a local version of the Typescript client?
this is essentially all I do:         

let ctx = CpiContext::new(ctx.accounts.dex_program.clone(), ctx.accounts.into());
oh i see, like what you did here? with the chatroom? thanks
https://github.com/project-serum/anchor/blob/master/tests/chat/tests/chat.js#L22
I'm just referring to the accounts you're passing to the other program inside the CPiContext.
Of course, you can't do this for PDAs, though.
So if you want a bigger account, you need to create it in a separate instruction.
The account size created via CPI is limited unfortunately. The runtime has an upper bound as the error message is sayhing.
i'm trying to initialize a zero_copy pda, which contains an array of small structs, the sizes seem pretty reasonable but i'm running into this error:
`SystemProgram::CreateAccount data size limited to 10240 in inner instructions`
any thoughts?
at the moment my only cpi call is to set context, is that what u mean?
Could be passing in the wrong account then, when you are doing CPI to the dex.
yeah I do this, in my struct I assign ownership via: owner = dex::ID
I derive accounts in my struct yes, but the tests at the moment use the instruction prior (havent touched those since cloning)
Here's an example of how to do that https://github.com/project-serum/anchor/blob/master/tests/cfo/programs/cfo/src/lib.rs#L437-L445
Are you creating the account declaratively via `#[derive(Accoutns)]` ?
id like something like acc::cpi::set_owner I think
I followed CpiContext to the source but I'm not sure I see some sort of set owner function i can use
how could I find an example of this? Looked in here: https://project-serum.github.io/anchor/tutorials/tutorial-3.html#defining-a-puppet-program but this only sets the data
You can either create the account in an instruction prior, or via CPI inside the smart contract. The current code does the former, if you're using `init, seeds, owner` inside the `#[derive(Accounts)]`, then you will do the latter.
sorry I think im misunderstanding. So it seems like I've assigned ownership of open orders incorrectly. My instruction prior is the same as the OG swap code, but I thought that this assignment was meant to happen in the smart contract (not in the tests/instruction prior). Does this happen in the OG swap code or is this only the case in this new version (which makes open orders a PDA)?
I guess I can scratch my own itch and contribute back to the community.
Looks like bfriel has made a walkthrough here (https://www.brianfriel.xyz/learning-how-to-build-on-solana/) with a follow up here (https://github.com/bfriel/crunchy-vs-smooth-v2)
`cargo expand` is very useful for this, if you want to see what the macros are doing.
Ok thanks for the quick response. I'll try to dig through the code myself and see if I can grok some of it.
Just the basic tutorials and examples.
<@!688968670059429948>  In the instruction prior https://github.com/project-serum/swap/blob/master/tests/swap.js#L106
Is there a high level walkthrough of the code structure for Anchor? Using it feels a bit arcane and I'd like to understand what's happening under the hood. It looks like it's not that many total lines of code but my Rust is too rusty to easily read the stuff in anchor/lang.
For example, in the original swap program at: https://github.com/project-serum/swap/blob/master/programs/swap/src/lib.rs where is ownership assigned to the dex?
Correct.
right but this ownership is established in the smart contract, not the test right?
And the owner needs to be the DEX not the system program.
That doesn't assign ownership. That just passes in the pubkey.
which I'm fairly sure is correct
systemProgram: SystemProgram.programId
gotcha. In my test, i assign ownership to the system program via:


//////////////////////////////////////////////////////////////////////////////////////////

Ok, so I'm now using `Loader` instead of `Account` in `Initialize`, and I have `let ledger_account = &mut ctx.accounts.ledger_account.load_init()?;` in the `initialize` method. This works, except if I try to write to `ledger_account.market_account` in `initialize`, the program panics because of an access violation
You need to use `AccountLoader` with zero copy.
Still getting the same error, here's a minimal example: ```#[program]
pub mod market_program_anchor {
    use super::*;

    pub fn initialize(
        ctx: Context<Initialize>,

    ) -> ProgramResult {
        let ledger_account = &mut ctx.accounts.ledger_account;

        ledger_account.market_account = Pubkey::new_unique();
        Ok(())
    }
}

#[account(zero_copy)]
#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct LedgerAccount {
    pub market_account: Pubkey,
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer=administrator, space=8+904)]
    pub ledger_account: Account<'info, LedgerAccount>,
    #[account(mut)]
    pub administrator: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```
If so, you need to also `#[derive(AnchorSerialize, AnchorDeserialize)]`
Are you using it in an API method?
If not, does anyone know why I would get ```the trait `anchor_lang::AccountSerialize` is not implemented for `LedgerAccount``` when I try to initialize an account defined as ```#[account(zero_copy)]
pub struct LedgerAccount {
    pub market_account: Pubkey,
}```?
Are there any good examples available for defining a zero_copy account?
Is there a game theory on deciding how many tokens your project should have and it‚Äôs inflation rate
One other debugging option is to just edit the anchor codebase to log more info here https://github.com/project-serum/anchor/blob/master/lang/src/account.rs#L26, e.g. `info.owner` versus the expected `&T::owner`.
Thanks you soo much now error was solved.
Right, so that's a different error (gotta just follow the compiler): change to Task::try_from_slice(&_instruction_data)
Now getting `mismatched types` since  try_from_slice was expecting an &[u8]
Mm, I'm not totally sure why you're getting that error, but I'm a bit confused how passing a `&[u8]` handler argument would work here‚ÄîI at least need to give it an explicit lifetime, and it's not clear to me which one to give it etc. If you change to `_instruction_data: Vec<u8>`, what happens?
No change even
`use anchor_lang::*`
```
#[derive(AnchorSerialize,Default, AnchorDeserialize, Clone)]
pub struct Task { 
    pub id: String,
    pub desc: String,
    pub name: String
}
```
<https://github.com/project-serum/anchor/blob/master/tests/ido-pool/programs/ido-pool/src/lib.rs#L555>
I have added trait `use anchor_lang::AnchorDeserialize;`
check code examples in anchor repo for how to do it
you need to add the deserialize trait
no @s please
Please someone reply. Error was `the method exists but the following trait bounds were not satisfied` <@!248066053161222144> <@!134416332509675520>
How do I interact with the Solana token program using anchor?
gm, is it possible to build NFT projects on Anchor?
do you know why this could be causing me issues: 
```        const unsafeRes = await connection._rpcRequest("getMultipleAccounts", args);
```
getting:
```
Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'web3')```
A: my localnet anchor tests were working, react + devnet integration was not working, I basically started botching input one by one localnet tests, to see which account was been processed at what compute unit consumption level to start matching compute consumption to depth in code, hope this trick helps someone
Q: somehow I keep ending up at `Error: 167: The given account is not owned by the executing program` when integrating with react+devnet, I have double triple checked the declare_id, the localnet tests run fine, how can I reverse engineer which account amongst the input has the issue? could I possible count from the how much compute was used what line in the program the simulation failed? could I somehow cargo expand and figure our which line the expanded program the issue appeared in?
not a direct answer, but usually cargo expand helps, it demystifies all the macro code
are there any good examples of using `#[interface]`, i've looked at the docs which uses Empty accounts (too simple) as well as the `lockup` program in anchor repo  (too advanced, can't really understand what's going on)
Can some one help me with this error?
following your advice, i'm going to do that. 2 questions, in general what tools you would suggest (in c or python there is Understand by Scitools is there some similar you are using) ? 2. I see wallet address in Anchor.toml - but how you figure out that we should add environment variable with name ANCHOR_WALLET (regarding bug when we launch minimal example with node client.js)? thanks in advance
for sure, i think i can figure out the rest of the implementation details, thanks for the help
But in terms of remembering what its address is, hmm, yeah, I guess you just have to find some way (I suppose you could store it on chain, or anywhere really)
You'll have to pass the account in no matter what (the usual "solana just makes you do it that way" lol)
unless there is a better way for the program to remember where the data is stored
got it, got it, thank you! (no i only mentioned the PDA as a small data store / a way to have a pointer to the zero-copy account that is passed in)
If you want a big account, you won't be able to store it at a program-derived address, because of the size restriction, unless I'm misunderstanding you
If you want your program to be able to directly mutate the account's data, it should be the "owner" in the general solana sense (the terminology is so confusing lol, super unfortunate). Look through the codebase for examples of `SystemProgram.createAccount`; the owner is the final argument, the programId.
ok cool, thanks a lot for explaining that, i think i vaguely understood the limitations without knowing the why, so then -- if i want a program to be "in charge" (whatever that means) after the account is created client side, i'll still need to do some ownership(?) transfer of the account to the program? or is that not necessary, and then, either way i can just save the account address in a PDA?
I guess a function that consumes an AccountInfo would work and I can construct a Loader internally
If you want to make a big account (> 10kb limit on accounts at PDAs), you'll have to initialize it from the client with a keypair.
But zero-copy is orthogonal to PDA-ness
What are some good examples on exposing functions / read queries to other contracts as a library?
There are limits on how big an account can be if it lives at a PDA (and the connection to CPI is that if you're trying to initialize an account that lives at a CPI, you *have* to do it via CPI, rather than in like a separate system instruction issued from the client, because whenever you initialize an account in solana, its address has to sign‚Äîbut PDA's can only be signed for by the program they're derived from, so it's just impossible to initialize them from the client ==> have to do a CPI)
Actually, am I right here? Is account ownership definitely write-once or can you relinquish ownership to a different program? I'm assuming no
so based on the (let me see if i get this right) data limitations on the cpi context, zero-copy accounts need to be created outside of the program and then passed in, i'm really just looking for a way that a program can mutate a lot of data (without having to rely on anything on the client side, past the initial set-up)
What kinds of accounts/what kind of ownership? Spl token "ownership" refers to the "owner" field on a token account's data (might be, say, your wallet's public key). That's a different level of abstraction from general solana account ownership though (= which program is allowed to mutate the account). Ownership in the sense of "which program can mutate me" is immutable/non-transferrable, whereas the more abstract "who has authority over me" is something each kind of account would have to implement for itself (it's not a general solana thing).
Yeah, the IDL just doesn't support floats (not 100% sure why actually, I'm fuzzy on this). Solana itself also seems to have weird float support? https://docs.solana.com/developing/on-chain-programs/overview#float-support
Yeah I think you‚Äôre right, curious if it‚Äôs actually just not possible to use floats tho or if I‚Äôm doing something wrong. Setting types to f32 in rust causes my TS test to throw an exception
i think fixed point is strongly encouraged, not sure though
Is there a way to pass in floating point numbers from the TS api, or is it just fixed point?
anyone knows what could be the issue? I'm thinking some M1 related issue but can't find solution by searching on discord here.
hi all. Done all the set up for Anchor + solana cli on M1 mac. Anchor init testing1 --> cd testing1 --> anchor build and nothing happens
does anyone happen to have a good example of account owner transfer to a program (as above ^) for a non-token account? having trouble finding one..
I guess I can do:
ClientSide > generate random KeyPair -- create account -- call program passing Pubkey and signing with secretKey
ProgramSide > transfer ownership -- store the pubkey in the program state -- cpi..
It's a mango account that I wanted to be own by my program <:pepemcaps:830881220371808297>
Oh ok that's my issue then, been turning it in several way without success
Since you need to create them via CPI.
There's a smaller limit for PDA sizes.
If it's a PDA that might be a problem.
Or just create it with the right owner right away, make more sense
Thanks Armani
Ok ok make sense, so also in program doesn't work then. I need to do a ownership transfer as CPI as it's a PDA
CPI has a limit.
Needs to be priior instruction client side if `init` doesn't work.
The classic init doesn't work cause too big, the zero copy cannot either cause not compatible, can only init in the program code or as a prior instruction in the client side?
How would I go to initialize a huge account (that is from another program, so not zero copy compatible) with anchor? Size is 28k
It's non existant unfortunately. Just code.
Oh,  I meant the documentation for serumCmn. Googled it and couldn't spot anything
Awesome! Sounds fun.
Ah this helps so much!! I think it's all cleared up now for me, thanks. I hate to read code and not understand what's going on, it makes it hard for me to move on lol

right now building out a nice front end for this chat app, maybe wanting to release it as an example and maybe another blog post soon, the help I've gotten here has been invaluable
(an unfortunate collision of nomenclature)
Notice this line here https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs#L58, as it uses `#[account(zero)]`. Not to be confused with zero copy. The zero keyword here means the account discriminator is zero initialized.
Immediately after creating the account, its zero initialized, which means that anyone can use it with your program. So by convention, it's inserted as in instruction prior to your intended instruction, which will use the zero data and initialize it.
It simply invokes the system program's create account instruction, which you can think of as "malloc" for solana.
`createAccount` doesn't have anything to do with zero copy, though it can indeed be used with it.
using `ctx.remaining_accounts.get(0)` will give you an `Option<AccountInfo>` - so then you can create some kind of handling logic around that.

Another useful trick is to use `Account::try_from` if you want to deserialize the data, and check ownership into a known struct.

Here is an example:
https://github.com/cofre-hq/cofre/blob/main/programs/cofre/src/lib.rs#L47-L53
Hey y'all I got another question regarding variable number of accounts - `ctx.remaining_accounts`

I found this PR comment: https://github.com/project-serum/anchor/issues/227#issuecomment-828188669

Near the bottom he says -
"Related, you can use Options<T> inside an #[account] as you would normally."

Can someone provide an example or more context about what he's talking about?

Does that mean I can specify something like `Option<Account<'info, MyAccount>>` in the struct? That wouldn't work because it doesn't implement the account serialization methods right?
Does using it have anything to do with usage of `zero_copy` and the asynchronous nature of the Loader in this program?

https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs
Do you mean the `...` syntax? That's https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
Curious, is there documentation to read up about this?
This is incredibly helpful, thank you!

I saw the code here when trying to implement a version of this chat example on the front end and was unsure what exactly was going on üòÖ https://github.com/project-serum/anchor/blob/master/tests/chat/tests/chat.js
I think this may have been more important in earlier versions of anchor?
So adding a call to `program.account.someKindOfAccount.createInstruction` to the `instructions: ` array will throw in an extra instruction to your tx to create an account at the address in question, and automagically make the `program` its owner + give it enough space (not 100% sure how accurate that space calc will be though ü§î)
The `instructions: [...]` argument to rpc calls is a little confusing, it adds instructions to the tx you're building, and they run *before* your main rpc function.
It's defined here: https://github.com/project-serum/anchor/blob/master/ts/src/program/namespace/account.ts#L308
Did anyone ever find if this is documented anywhere?

How `createInstruction` is supposed to be used?
I use rust-analyzer and it resolves the macro-generated types and methods just fine after the fact but I don't think it ever gives me good code completion.  not sure why
Also - is there a way to get VSCode code completion / error highlighting working w/ Anchor? For example for the IDE to recognize the methods on the generated workspace client
ah yes, it was set incorrectly there. thanks
perhaps your wallet keypair configured in the `Anchor.toml` is not present?
Usually it is set to `~/.config/solana/id.json` perhaps you should check you have that file present
I am running into an issue where running `anchor test` is complaining about `Error: Unable to read keypair file`.

It says that it will default to using a keypair generated in the `/target/deploy` directory. I checked to see that this keypair exists and can be recognized by the Solana CLI and it seems fine. Any idea what I'm doing wrong here?
I literally am so stupid... I thought about this for 30 mins... I have one funciton called stakeBum and one called unstakeBum... I thought I was calling unstakeBum but in fact was calling stakeBum twice
Does your ix handler take multiple arguments maybe?

Why am I getting this error??? I am providing the bumHolder

You shoiuld never use an `impl` block in there.
Everything inside the `#[program]` mod is an API endpoint.
yep
Are you referring to e2e tests via `anchor test`?
what is the difference between fn and impl? I understand that one is for a struct and the other is just a general function, but when does a client/test invoke fn vs impl?
Sweet, I'll check it out - thank you
Yes, check out `ctx.remaining_accounts`
Howdy! Is there a way for instructions to accept a dynamically sized list of accounts?

For example - can an instruction either one or two accounts as arguments, and then the implementation branches in logic depending on how many accounts were passed in?
When you make a new struct rust/anchor doesn't know how you want to serialize it
That makes sense... Thanks!
Because all account data ultimately needs to get serialized into bytes, so you need to specify your serialization strategy somewhere
Thanks!!! Can I ask why??
Add a `#[derive(AnchorSerialize, AnchorDeserialize, Clone)]` I think on top of your Spacebum struct
What is this error?
any help would be appreciated.
hello. Beginner question here. When looking at minimal example and running "anchor build" there was no response - idl folder didnt' generate the files
Run `cargo doc` in your crate.
How do I deserialize data assoicated with an account
Where can I find docs on what's exported in `::cpi`?


//////////////////////////////////////////////////////////////////////////////////////////

Gonna go source-diving ü§ø
Is the cost of deployment just for rent-exempting the program's .so file? Or are there other fees?
Hmm, I'd like to understand this better too.
I thought it might be this, but I changed it to Message; 100 instead of ~30k and seeing the same thing.

```

#[account(zero_copy)]
pub struct ChatRoom {
    head: u64,
    tail: u64,
    name: [u8; 280],            // Human readable name (char bytes).
    messages: [Message; 100],
}
```
On devnet testing something out and what seems like a simple program I'm getting this error:

Transfer: insufficient lamports 20950769160, need 72981279360
That can't be right? It needs 72 SOL??

Playing with this: https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs#L57


```
    const program = new Program(idl, programID, provider);

      const chatRoom = web3.Keypair.generate();

        await program.rpc.createChatRoom("Test Chat", {
      accounts: {
        chatRoom: chatRoom.publicKey,
        rent: web3.SYSVAR_RENT_PUBKEY,
      },
      instructions: [
        await program.account.chatRoom.createInstruction(chatRoom),
      ],
      signers: [chatRoom],
    });
```

Any idea why it costs that much to call that function?
1. Is bad for PDAs where the existance of the account means it belongs to someone. ATAs for example.
1. How would this hijacking look like? If I void the data completely, even if it will be revived, it will be empty. So when u say hijacking you mean it can be reinitialized with different params?

2. I remember that in the past u could only reassign under the conditions you mentioned but Ive checked the system program again and I cannot find where constraint is enforced https://github.com/solana-labs/solana/blob/6196c80a3d0cefef75fc62aeb09a99f7613cd027/runtime/src/system_instruction_processor.rs#L106
If you don't explicitly say how much space to use, anchor will end up seeing if the struct implements `Default`
good catch
...yup that's it
Are you `init`-ing something without a `space =`?
If so, what's the usual approach to fixing it?
Is this a common beginner's error when defining contexts?
When adding in an `instruction` macro to a context definition, I get a compile error on the `#[derive(Accounts)]` preceding it. 

`no function or associated item named 'default' found for struct <structName> in the current scope`
Thank you for sharing, I will check it out!
Ah, ok. Yeah, tbh this library is kind of awkward to use as-is/doesn't quite fit your intended use case I don't think. Maybe check out https://discord.com/channels/889577356681945098/889577399308656662/900404365070835723
For example, let's say I created a new token: 
```
const tokenMintAccount = await Token.createMint(...);
```
Then I can easily do like transfer and get balance:
```
tokenMintAccount.mintTo(...)
tokenMintAccount.transfer(...)
const aliceTokenAccountInfo = await tokenMintAccount.getAccountInfo(aliceTokenAccount)
const balance = aliceTokenAccountInfo.amount;
```

But for the tokens I didn't createMint, for example WSOL, how can I do transfers and getAccountInfo?
Not sure I'm reading your question right, but you can get the mint's account info with `await provider.connection.getAccountInfo(theMintsPublicKey)`. Not sure that's what you actually want to do though
In the client side, how do you get AccountInfo of token by just giving the pubkey of mint account?
For example, WSOL mint account is `So11111111111111111111111111111111111111112`. How do I like transfer and get account info?
Correct. The downside of this approach is that you can have dead accounts in limbo. The upside is that you can't hijack an account.

The real thing that we need to do once the runtime supports it is resize the account to zero length and reassigsn to the owner to the system program.

Until then, tombstone + force defund is the recommended approach.
I think this is to deal with the danger of people maliciously adding sol back into an account in a follow up instruction and keeping the account open
Bumps are functions of your program_id + seeds, but different PDAs often end up having the same bump: there's roughly a 50/50 chance any given choice of bump will work, so lots of PDAs end up having 255, or 254, etc. That means if you accidentally swapped bumps of two PDAs, things might still work with one program_id but randomly not with a different one.
There was actually a fun example of this recently in the discord: https://discord.com/channels/889577356681945098/889577399308656662/900256485320294400
Nope, gotta have somebody else listen to them off-chain and then poke your contract
One other example to add to the ones <@!347689664855015424> posted, all of anchor_spl is anchor interacting with a non-anchor program via cpi (the spl token program).
I am wondering why anchor is doing https://github.com/project-serum/anchor/blob/df51a27a48e5d03005e841f383f407aef74e3555/lang/src/common.rs#L6-L24
Rather than closing accounts like the escrow program,  effectively closing the account right now
1. You dont call the system program to close an account (unless its a system program account). The program closing the account has to own the account to decrease its lamports so it always has to be done by the program itself. This is how anchor closes accounts https://github.com/project-serum/anchor/blob/f68cc50e5bcb9a01ff958e41b5e15056f18d2fd6/lang/src/common.rs#L6

2. a) search for `invoke` and `invoke_signed` in this file, the mango processor, https://github.com/blockworks-foundation/mango-v3/blob/main/program/src/processor.rs
b) there's also examples in this file https://github.com/paul-schaaf/solana-escrow/blob/master/program/src/processor.rs#L88
I have an addon question to spakhm's query : Can I use Anchor without ever write raw Solana Rust? I read in an article that its important to know raw Solana before moving to Anchor because you might get stuck from time to time.
or call to some of the programs in the solana program library
are there examples of how to do CPI for programs that aren't written in Anchor? For example, how do I call the system program to close an account?
can you have a smart contracts listen to events?
not totally sure tbh, just seems like a common disconnect in moving from local -> dev
or maybe it's something simpler just about the format you're passing in for seeds
(like, what does the error generally mean)
for my education, why would a difference cause this error?
thanks
that's my only guess
are you sure the address you deployed to is the same one that is set in your `declare_id!(`
I moved from a local test validator to devnet and instructions that used to work now get back `InvalidSeeds` error. What could be a plausible reason for this? (A hint for what this could be would really help debug)
Good point, but if it will cost 70 SOL obviously need to rewrite stuff to deploy it haha.
and depending on how you're deploying, you can set the cli to use it with `solana config set -u l`
works the same
`solana-test-validator -r`
it might be easier to use a localnet to test things like that
so only 100 messages
```

#[account(zero_copy)]
pub struct ChatRoom {
    head: u64,
    tail: u64,
    name: [u8; 280],            // Human readable name (char bytes).
    messages: [Message; 100], // Leaves the account at 10,485,680 bytes.
}
```
Maybe it didn't redeploy correctly but I updated and still get the same message
yeah that example in particular creates a zero_copy account and allocates like 30k messages worth of space (i think the max at 10mb)
Is that what's happening? I'm just fiddling with the examples to learn.
oh shit... didn't realize i'd have to pay infinite to deploy a program that uses zero_copy
```
    const program = new Program(idl, programID, provider);

      const chatRoom = web3.Keypair.generate();

        await program.rpc.createChatRoom("Test Chat", {
      accounts: {
        chatRoom: chatRoom.publicKey,
        rent: web3.SYSVAR_RENT_PUBKEY,
      },
      instructions: [
        await program.account.chatRoom.createInstruction(chatRoom),
      ],
      signers: [chatRoom],
    });
```
Playing with this: https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs#L57
That can't be right? It needs 72 SOL??
On devnet testing something out and what seems like a simple program I'm getting this error:

`Transfer: insufficient lamports 20950769160, need 72981279360`
hey, anyone having problems w/ no logs being written to .anchor/program-logs. what are the potential solutions?
Thanks for your help!
I also had an additional issue in my test code with how I was generating the token accounts. The `sender` account wasn't actually the owner of the `sender_tokens` acount
Got it working!
Ah! Okay that makes sense
It's impossible to sign for program-derived addresses from the client (whole point of them is that only the program itself can sign for them), so you need to add them explicitly to the CPI (no chance for the signature to just be there automatically like for a client-side signature)
Think of `CpiContext::new_with_seeds` as being `CpiContext::new_with_additional_pda_signatures`
With `CpiContext::new`, the receiving protocol will see everyone who signed your original tx (everyone who signed from the client, most likely‚Äîsignatures transfer seamlessly across CPIs).
Interesting! So when you just use `CpiContext::new()` to do a CPI, who does the receiving protocol see as the signer? The invoking program or the originating signer?
I think you'll need to do `CpiContext::new_with_seeds` and pass in the `&[&[PROGRAM_AUTHORITY_SEED, &[bump]]]`
or are there tags to add to the `#[account()]` macro for setting up token account constraints? (e.g. `token::owner = sender`, `token::mint = mint` ?)
was wondering if the approval instructions needs to get wrapped with the signer account somehow..? (first time messing around with the SPL token program and CPIs)
And then for the approval instruction where the error gets thrown, passing in the program authority account with these properties:
```
#[account(mut, seeds = [PROGRAM_AUTHORITY_SEED], bump = program_authority.bump)]
pub program_authority: Account<'info, ProgramAuthority>,
```
I believe so.. Initializing the program authority account like this:
```
static PROGRAM_AUTHORITY_SEED: &[u8] = b"authority";

#[derive(Accounts)]
#[instruction(bump: u8)]
pub struct InitializeProgramAuthority<'info> {
    #[account(init, seeds = [PROGRAM_AUTHORITY_SEED], bump = bump, payer = signer, space = 8 + 1)]
    pub program_authority: Account<'info, ProgramAuthority>,
    #[account(mut)]
    pub signer: Signer<'info>,
    #[account(address = SYSTEM_PROGRAM_ID)]
    pub system_program: Program<'info, System>,
}
```
```
pub fn initialize_program_authority(
    ctx: Context<InitializeProgramAuthority>, 
    bump: u8
) -> ProgramResult {
    let program_authority = &mut ctx.accounts.program_authority;
    program_authority.bump = bump;
    return Ok(());
}
```
Are you using the pda seeds properly?
the `signer` is the owner of the `signer_tokens` account, and I'm trying to delegate transfer authority to the `program_authority` account (PDA initialized in a prior instruction). Thinking I might have the accounts argument mixed up, but I've tried different configurations and can't seem to figure out why this CPI won't go through.
but I keep running into this error about the signer's privilege being escalated:
```
Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account 
    Program 9LjA6DjxKDB2uEQPH1kipq5L7Z2hRKGz2yd9EQD9fGhU invoke [1]
    Program 11111111111111111111111111111111 invoke [2]
    Program 11111111111111111111111111111111 success
    2VHqWbvz7pcnqgTXWH6ZknnHmjrxCReWUhVWcHTwNPne's signer privilege escalated
    Program 9LjA6DjxKDB2uEQPH1kipq5L7Z2hRKGz2yd9EQD9fGhU consumed 200000 of 200000 compute units
    Program 9LjA6DjxKDB2uEQPH1kipq5L7Z2hRKGz2yd9EQD9fGhU failed: Cross-program invocation with unauthorized signer or writable account
```
I'm trying to approve a program transfer funds from a signer's token account. In one instruction, I'm trying to make this CPI request to get the approval:
```rust
approve(
    CpiContext::new(
        token_program.to_account_info(),
        Approve {
            authority: program_authority.to_account_info(),
            delegate: signer.to_account_info(),
            to: signer_tokens.to_account_info(),
        },
    ),
    balance,
)?;
```
I see. Thanks <@!210756938332504065>
no idea why its called god <:Shruge:759542487680548898>
and address `provider.wallet.publicKey`
for the mint
its the token account
Does god stand for stand for anything or is it just the placeholder. This is from the anchor/cashier-check example: https://github.com/project-serum/anchor/blob/master/tests/cashiers-check/tests/cashiers-check.js
huh, interesting. I'll keep trying, thanks!
I just tried doing something similar on my machine and it worked fine. You can see what I tried here: https://github.com/project-serum/anchor/compare/master...cqfd:token-mint-burn-example?expand=1 (ignore the token minting stuff, that was for an example for someone else lol)
as far as I can tell, it's correct -- 40 bytes for the pubkey plus the descriminator
did you specify the right space size?


//////////////////////////////////////////////////////////////////////////////////////////

> It would be a bit like if you wanted to implement a web app but had to work with the raw bytes of requests.
yea that doesn't sound too fun haha
I think it's helpful to `cargo expand` your anchor programs so you can see how they turn into vanilla solana. At the end of the day, vanilla solana isn't really that complicated, it's just that the signature you have to implement is quite low-level; there's a lot of room for tedium and error. It would be a bit like if you wanted to implement a web app but had to work with the raw bytes of requests.
unless u r doing alot of CPI and want to squeeze every ounce of compute from your program you prolly dont need plain rust
I know <@!501570363566587905> has said that unless you need to use a more compact library to serialize/unserialize your data than Borsh, you shouldn't use Anchor... Also, Anchor does certain things to an account so that the first 8 bytes (or bits... not sure) of an account are used to tell Anchor what kind of an account it is.... if that is too much for you, that is also another downside to anchor.... I don't know anyone though who has written a smart contract in Anchor who would go back though
Also, curious if there are any downsides/limitations to using Anchor vs. plain Rust?
Not sure where to specify that?

```
    await program.rpc.increment({
      accounts: {
        counter,
      },
    });
```
something has to change
or something else
change the blockhash
Is there an easy way to get around the "This transaction has already been processed" error, if I actually want to send the same tx twice?
Got it, thanks. I'm learning a lot üòÑ
(And by the way, receiving money counts as a mutation too)
Gotcha... good to know
If you search for `token::mint` in the anchor codebase you can see some `init` examples like that
Yeah, usually‚Äîthought it can do slightly fancier things, like `init` spl token accounts, in which case ownership actually goes to the spl token program
Ah ok. So is the main point of `init` to transfer ownership to the current program?
This is because paying for stuff counts as modifying an account
So e.g. your phantom wallet (or at least one of its keypairs) is a system_program account with sol in it
Ah, yeah, not necessarily‚Äîif you generate an address (either with a keypair's public key or with a program-derived address) and no account already lives there, then it implicitly acts like a system_program account
Also, why does the user need to be mutable? I don't modify it in my code
One thing I'm confused about is when to use `#[account(init)]`

Because in this case, I never used it for the new public key I generated

But I thought you had to initialize the account before using it?
Perfect, that worked!
Yeah, think so (you can search the anchor codebase for requestAirdrop
guess I need to give the keypair some lamports in the test?
`    'Transfer: insufficient lamports 0, need 953520',`
Oh... tricky
This is another kind of sneaky thing, when `user` was the wallet it was automatically mutable :/
Ah, ok, you'll also need `#[account(mut)]` above the user account
`anchor-cli 0.17.0`
Mm, what does `anchor --version` say?
But when I do sign, I get an error

```
Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
```
Oh ok, I was wondering why I didn't have to sign there
(You didn't have to explicitly sign for the wallet because it happened behind the scenes since the wallet pays for the tx)
You'll need to explicitly sign for the keypair user, `signers: [theirKeypair]` in the rpc call
Ah, what actually goes wrong above?
When you generate a keypair on the fly like that, you can airdrop it some sol and it will be a wallet-like account (it's owning program is the system_program, but that's fine, it can hold money etc. just no data)
```
pub fn increment(ctx: Context<Increment>, _bump: u8) -> ProgramResult {
    let base_account = &mut ctx.accounts.base_account;
    base_account.count += 1;

    let has_incremented = &mut ctx.accounts.has_incremented;
    has_incremented.has_incremented = true;

    Ok(())
}

#[derive(Accounts)]
#[instruction(_bump: u8)]
pub struct Increment<'info> {
    #[account(mut, seeds = [b"base_account".as_ref()], bump = base_account.bump)]
    pub base_account: Account<'info, BaseAccount>,
    #[account(init, seeds = [user.key().as_ref()], bump = _bump, payer = user)]
    pub has_incremented: Account<'info, HasIncremented>,
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```
I might be doing this totally wrong... basically I'm trying to make it so that you can only call `increment` once per user
How are you using the second user on the rust side?
Hm actually, I'm still confused. 

I want to try calling `increment` twice, once with one user and once with another.

For the first call, I set `user: provider.wallet.publicKey`

For the second one, I thought I could use `Keypair.generate()`. But it seems like I have to create the account associated with the public key before using it. Is there a way to skip over this in tests?
Ah, interesting.
Ohh, I didn't copy over the IDL. So the deployed program is fine it's just the frontend thinks it isn't yet.
I'm still having trouble figuring out why this is saying it needs 70 SOL to call createChat
Another noob question‚Äîis there an easy way to get two different providers when writing a JS test? I'm getting the first one with `anchor.Provider.env()`

Oh wait‚ÄîI think what I want is two keypairs, not two providers
Thanks üòÑ
Ah I see. Yea lots of ways to get the public key
Whereas the `.key()` version is a different anchor trait, `Key`‚Äîthey end up doing the same thing here
Ah, yeah, here `Signer` implements Rust's Deref trait with Target = AccountInfo<'info>, so doing `.key`, no parens, ends up giving you the `.key` property on the underlying `AccountInfo`
Ah thanks, that worked. I was doing `Buffer.from(pubkey.toString())`
Try doing `pubkey.toBuffer()` in there
Also on the client, when I try to do `findProgramAddress(pubkey)`, I get an error `Max seed length exceeded`
ah nice, thanks! how does `key.as_ref()` work? based on https://docs.rs/anchor-lang/0.17.0/anchor_lang/struct.Signer.html it looks like `key` should be a function?
You can see an example similar to what you describe here https://github.com/cqfd/anchor-visitors/blob/master/programs/visitors/src/lib.rs#L32
Yep, you can see some examples in the anchor tests/, you can do e.g. `#[account(seeds = [signerPubkey.as_ref()], ...)]`
serum isnt written in anchor <@!335954300897329153>
it depends on the deployer
also note that not all programs will have their idl onchain
When using the `#[account]` macro, is there a way to use the public key of the signer as a seed? E.g. something like

```
#[account(seeds = [signerPubKey])
```

Higher level, I'm building an example program where each user can increment a counter once. And I'm trying to store whether a user has incremented the counter already in a PDA (i.e. one PDA per user). Not actually sure if this is the best way to go about things
Huh, interesting, I can't seem to build the master branch anchor cli anymore‚ÄîI get a `import resolution is stuck, try simplifying macro imports` error about clap ü§î
I think you probably need to specify which cluster to fetch from (`--provider.cluster mainnet`) etc, but yeah, seems like serum_dex hasn't uploaded their idl?

and even though serum_dex v3 is listed here, it still won't pull the idl? https://anchor.projectserum.com/build/1
The latter.

so is `anchor idl fetch` a general purpose idl generator, or does it only work with programs that have been deployed with anchor? I'm reading it might be the case that they have to be the same version as well?
One way is to use `program.account.yourAccountType.fetch(itsPubkey)`
how might I deserialize the data value of an account generated by an anchor program on the frontend?
üëç
Yes. The runtime forces you to sign with the address you deploy to.
the private key just means I can deploy to that public address?
But when you are communicating with devnet/mainnet, you should make sure the address matches whatever is in your `declare_id!("")` and `Anchor.toml`
You can replace it with whatever keypair you want.
That file is used as the default keypair for deploys.
I wouldn't check it in.
its the address of your program thats all I thinnk
is `target/deploy/program-keypair.json` meant to be checked into the source control? What's the best practice there? Presumably it's a private key, what does that key grant permissions to do? (upgrades?)
It sets your provider to the provider you specify... i.e. local net and your wallet
https://github.com/project-serum/anchor/blob/f68cc50e5bcb9a01ff958e41b5e15056f18d2fd6/ts/src/provider.ts#L292-L294
what does anchor.setProvider do?
rent-exemption cost = 10mb * rent/(byte*year) * 2 years = 10^7 bytes * 3500 lamports/(byte year) * 2 years = 7 * 10^10 lamports = 70 sol üôÄ
Oh, whoops, I misread your q ü§¶‚Äç‚ôÇÔ∏è Not sure why the change you made wouldn't have an affect, but yeah, rent-exempting a maxed-out 10mb account costs 70 sol üôÄ
Mm, yeah, at first glance it looks like the deployment cost is just for storing the program's code?


//////////////////////////////////////////////////////////////////////////////////////////

When I run `connection.getAccountInfo(watermelonMint.key);` I get a `null` object, although it should return an `AccountInfoObject`. Any idea why this is the case? When I look for the address associated with this mint on solana explorer, I get normal statistics (https://explorer.solana.com/address/7vLEZP5JHhKVg3HEGSWcFNaxAKg7L633uMT7ePqmn98V?cluster=devnet)

```
console.log("Watermelon mint is: ");
console.log(watermelonMint);
```
returns
```
Mint {conn: Connection, key: PublicKey}
conn: Connection {_commitment: undefined, _confirmTransactionInitialTimeout: undefined, _rpcEndpoint: 'https://api.devnet.solana.com', _rpcWsEndpoint: 'wss://api.devnet.solana.com/', _rpcClient: ClientBrowser, ‚Ä¶}
key: PublicKey
_bn: BN {negative: 0, words: Array(11), length: 10, red: null}
[[Prototype]]: Struct
[[Prototype]]: Object
``` 

any idea what could cause this?
Perhaps we can revist migrations once/if we add versioning to accounts.
I started down the path when first getting started but seemed not really necessary so I punted it.
Yea maybe we should remove it until something better is built.
The migrations feature is pretty bare-boned, `anchor migrate` will just call `migrations/deploy.js`'s export with a provider hooked up to the deploy cluster.
Hello 
Is there any examples of how to write deploy scripts in the migration/deploy.ts?
And how do I run the code?

https://github.com/project-serum/anchor/blob/master/tests/cashiers-check/migrations/deploy.js
Found it. Import useWalletModal and setVisible to true.
https://github.com/solana-labs/wallet-adapter/blob/master/packages/ui/react-ui/src/WalletModalButton.tsx#L11
I think you do that on the client side. Haven't found an example that does wrapping in program side...
thank you so much! I need to read a bit about it to get better understand of how to make the wrapping work on the program side
Spl-token library offers wrapping feature.
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L596
But I heard that wrapping sol is a better practice
that looks great and extremely simpler than I thought!
Lamports transfer example
https://github.com/cqfd/anchor/blob/lamport-transfer-example/examples/tutorial/basic-1/programs/basic-1/src/lib.rs#L21
another question; I want to allow the user to deposit SOL tokens into the program alongside other data in the same transaction.
I prefer this transaction to happen on the program side (and not on the frontend) so that the entire set of transactions happen or fail together atomically.
Does anyone have any reference for any sample (or open source) program that does something like this?
okay. thank you ^_^
afaik you cant use windows, youd need to run a linux vm
Got it! thank you so much!
ATA stands for associated token account. Your tokens live in ATA.
Thank you! and a follow up: what does ATA mean?
hello, super beginner question, can i use windows, or does anyone use windows?
Or do I have to set up linux in a vm? My laptop is windows
owner of ATA
the owner of from account.
in the `Transfer` struct: https://docs.rs/anchor-spl/0.17.0/anchor_spl/token/struct.Transfer.html
What does the "Authority" field represents?
Hello
Is there anyway to make custom connect wallet + select wallet button with wallet-adapter?
In other words, is there anyway to activate the connect wallet and select wallet popup but by function call? 

The library gives us `<WalletMultiButton />` component but I only want the popup functionality part, not the button. 

Thanks

https://github.com/solana-labs/wallet-adapter
currently i'm having to either comment out tests or change the file path in `anchor.toml` to do this
is there a way to run a single test file by specifying some flag with `anchor test`?
too dangerous
I am moving everything back to my bank account
he wants your liquidity üòõ
:-)
which protocol are you trying to break so i remove my money right now?
Cool
and i do a fair amount of poking
I will look into that
Great
Given assumptions about other txs sent in the same block
you can run test transaction with `simulateTransaction`, that is always how i poke something i don't have source for
Before sending?
Maybe you can just see what would happen if a certain tx cleared?
Maybe a sandbox is not even needed for that
the program yes trivial, but it often comes with a lot of sattelite accounts
So I can run test queries and see what would happen
yes/no
Ok new question, can I easily clone a contract in a sandbox local environment
etherscan style
no tick => bad look
So that there is an incentive to do so
also solscan
the problem is that it doesn't really show anywhere, so maybe your the solana explorer could query your service and add a tick if verified?
Even though it's quite straightforward.
Though in reality, not many people seem to do that.
In any language, it's going to be better to have the source, compile it yourself, and match the build artifact against whatever is deployed on chain. Which is what we can do with solan as well.
Right
Sure you can probably do that, but it's going to be a pain and not give you easily readable code.
I'm not much of a knower about compiled languages but my understanding is that most binaries can be reverse engineered
mmmh how would that reveal the logic?
Yeah but the instructions themselves are public info, just not human readable
What's weird? You need the source to verify.
This seems like a really weird thing to me, transparency is an important component of smart contracts in my mind
Damn yeah I don't have the source. Maybe would be more accurate to say I want to sleuth, not audit
You can use the anchor CLI for this via `anchor build --verifiable` or the docker image at `projectserum/build`. But the program you're verifiying must be built with the same image.
seems like the only sane approach right now is to audit a verifiable build
I think all the current mechanisms people use boil down to building inside a docker image.

So if you have the source, you can build inside docker, and verify the resultant binary is equal to the expected one.
https://github.com/solana-labs/solana/issues/12232 this is the only topic i know of that addresses this issue in depth. Ryoqun would be the person to ask about this in general though
At any rate much appreciated
<@867369388608061470>
Are there any other tools ppl use to inspect program logic
none
Yeah. I assume there are decompiler tools? Do you know of them?
Thanks
but it wont give you the original code only the built code
solana program dump <ACCOUNT_ADDRESS> <OUTPUT_FILEPATH>
rather how do I download the BPF
Given the address of an executable program, how do I view the actual smart contract itself so that I can audit it?
basically, doing this with a PDA rather than state macro:
```
    #[state]
    pub struct ExampleScheduled;

    impl<'info> Scheduled<'info, IncrementUnsafe<'info>> for ExampleScheduled {
        fn run_scheduled(ctx: Context<IncrementUnsafe<'info>>) -> ProgramResult {
            let counter = &mut ctx.accounts.counter;
            counter.count += 1;
            msg!(&format!(
                "{{ \"increment\": \"{}\" \"{}\" \"{}\" }}",
                counter.key(),
                counter.count,
                counter.authority
            ));
            Ok(())
        }
    }
```
if if `#[state]` is getting deprecated, is there an alternative way of implementing an `#[interface]`? since you need to `impl` it for some struct, all the examples set up a state struct and implement it for that
if i use a PDA would i just implement it for the account struct that holds my bump?
but i haven't tried it because I tried putting this in the Cargo.toml for `ido-pool` and it took effect but didn't reduce the build time:
```
[profile.release]
opt-level = 0
overflow-checks = false
lto = false
incremental = true
codegen-units = 256
```
https://doc.rust-lang.org/cargo/reference/environment-variables.html
looks like you can `export CARGO_PROFILE_RELEASE_OPT_LEVEL=0` and do some other stuff
Not sure. If you find out let me know üôÇ
do you know if there's any way to jam that info into the command line? Easier to run the Anchor tests from CI without editing them
ah
I think so!
You can set those profile settings inside your Cargo.toml, which will apply.
Ah so you don't want `cargo build-bpf` to compile release?
i just want it to compile faster for testing
as in Cargo https://doc.rust-lang.org/book/ch14-01-release-profiles.html
idk if it applies in BPF land
What does that mean?
I was thinking more like setting a dev profile
What are you looking for? Some type of `watch` comand?
is there anything we can do when `anchor build`ing to make local development faster? None of the `cargo build-bpf` flags look proming


//////////////////////////////////////////////////////////////////////////////////////////

There hasnt to be one called "lib.rs" that's what i mean
General question about .rs files: if I want to have multiple .rs files for doing some CPIs, can they be named anything in that src folder?
booo üëéüèº
more sol locked onchain = numba up <:megadab:461044728377376768>
¬Ø\_(„ÉÑ)_/¬Ø
kind of annoying though
most likely <:study:700462627880566805>
it's gotta be a security feature to permanently retire program addresses
`EQMtCuSAkMVF9ZdhGuABtgvyXJLtSRF5AQKv1RNsrhj7 | active since slot 81648000  | enable closing upgradeable program accounts`
yeh can only close upgradable accounts, went live this month
all the buffers closed fine though
yeah, just have 0.0012 SOL locked in a program I can't get back lol
which consumes most of ur sol
actually <@!168868665456984065> seems u r right <:study:700462627880566805> 

u cant close a program 
u are basically able to close the `Executable Account` for the program
hmm the address i was trying was deployed to devnet, but i guess i'll keep an eye out for that addition
U can on devnet maybe but hasn't been enabled on mainnet
U can't close programs yet 
It'll be possible in the future iirc
Managed to deploy my program(after changing to snake case) yaay
Now i've got an error that there isn't sufficient funds on the account. So airdropped some SOL, which shows up when i check with solana balance <ADDRESS>, but for some reason when re-trying to deploy it tells me that the balance is still 1.24... Did i miss a step here? thanks
yeah doesn't look like the program address is ever cleaned up, just marked closed
Actually, maybe `solana program close` just closes the "buffer" accounts associated with the program?
Yeah, hmm. Trying to see the intended behavior by source-diving.
that was my assumption, unless this is a mechanism to permanently retire addresses to avoid malicious overrides or something
Hmm, sounds like it ought to drain all of the lamports ü§î
still showing it has lamports after closing
when you do `solana program close` on a program address, is that address permanently locked?
Will do that now ‚ú®
By the way, if you wanted to contribute to anchor, this could be a good first issue üòõ
haha that's what i was doing right now, testing with snake case
Mm, funny, I can reproduce a similar error if I just do `anchor init MyFirstProject` üò¨ Guess anchor isn't handling CamelCased project names correctly? Lol, I'm kind of amazed that hasn't come up yet
I will try to make a new project to test
Here's my toml file in case it gives you a hint..
Nothing special tbh. it's Users/mynamewithoutspces/ ...
Good day! With using `close` on my accounts can I be completely sure that their state can never be reused again?
hmm I'm getting service unavailable when trying to deploy to devnet, anyone else seeing that?
Turns out this bug was due to an invalid data structure of the Keypair I was simulating.
PHEWWWWWW üòÖ
Gonna take a break lol. This is starting to blow my brains out ..
Tried a bit different as the following
```
Buffer.from(
    Uint8Array.of(
      0,
      ...pubKeys[0],
      ...pubKeys[1],
      ...pubKeys[2],
      ...pubKeys[3],
      ...pubKeys[4],
      ...pubKeys[5]
    )
)```

Still the same
So this is what I did to return an array of Buffers. 
```
const pubKeys = [1, 2, 3, 4, 5, 6].map(() => {
    const pubkey = Keypair.generate().publicKey;
    return pubkey.toBuffer();
});
```

And passed in the data field as
```data: Buffer.from([
        0,
        ...pubKeys[0],
        ...pubKeys[1],
        ...pubKeys[2],
        ...pubKeys[3],
        ...pubKeys[4],
        ...pubKeys[5],
      ]),```

But when I do it like this, I get an error as the following
It would be amazing if Discord has a feature to make conversations as a thread (and make em downloadable as a doc or something). I could have saved this as a thread and keep it refreshing all along haha.
Huge fundamental hole lol.
Wow.
Right.
So endianness matters just for numbers, not for alphanumeric characters per se?
Ahh okay.
I think he only uses endianness when dealing with *numbers*, which require them, not pubkeys
Well, depends on what you're doing with them in your program
My biggest curiosity is why did Paul choose the endianness route? If it ain't a problem?
So just pass them as 32 * 6 -> 192 bytes in sequence?
At any rate lol for pubkeys it doesn't matter, because you generally don't make the leap to interpreting them as (huge) numbers, they're just sequences of bytes
So that's what those are?
OMGGGG
But you could also have chosen to read the bytes in little endian order: 1 * 256^0 + 2 * 256^1 = 513
Right, that's *one* choice, for big endian: 1 * 256^1 + 2 * 256^0 = 256 + 2 = 258
I give up ROFL.
Ok, 0000000100000010 -> 258 üòÖ
But you can also think of it more directly in terms of bytes
Nope, the binary you wrote there is too short‚Äîthat's 8 bits, whereas a u16 is 16 bits
oops 18 I guess.
Nope üôÇ
00010010 -> 17?
For example, if I give you a u16 (two bytes), and the bytes are [0x01, 0x02], which number is that?
No, for comprehensibility
So like, why exactly do we need endianness tho? For shrinking?
And a pubkey is 32 *bytes* = 32 * 8 bits = 256 bits
A u32 though is 4 bytes, so it's big enough to require picking an endianness
Ah ok.
8 bits (= 1 byte) is too short to be little or big endian‚Äîit's just itself, 1 single byte üôÇ
I'm guessing we are kinda shrinking a number into array of little endian right? of 8 bits each?
Ahhh, shoot aight. So what exactly is happening here then?
A u32 = 32 bits = 4 bytes
So a u8 is 8 bits = 1 byte
Ah, maybe you're getting mixed up with bits and bytes here? A Uint8Array is an array of u8s (individual bytes)
Right, that's exactly what I wanna convert it.
No, each pubkey will turn into an array of length 32 (for the 32 bytes)
Sorry, never been this low level in JavaScript b4 haha.
So the length of those would be 4 then eh?
No, because the pubkey bytes are just bytes (little/big ending applies to interpreting some number of bytes as a number, but you're not doing that here‚Äîthey're just bytes)
This is tough lol.
So like I don't want to convert to LE?
I don't think you need to‚Äîit's already in the format you want, as bytes üôÇ
The .toBuffer() is not a problem tbh. It's spitting into bytes, but in 32 sized. I'm stuck where it needs to be shrunk in the form of Uint8Array Little Endian lol.
Ah, ok. If you want to ultimately turn these pubkeys into bytes that go over the wire to your solana program, I'm guessing you want to just concat some `.toBuffer()` calls
So this is how I am expecting to parcel the `instruction_data` 
0 th byte -> tag
1st byte -> 24th byte (6 PubKeys in &[u8] le)
I kinda did over the same way, but got kicked out with an error like this

Over the Paulx's tutorial a u64 was like converted to little endian integers (on the client side), so I was thinking of doing it in the same way.
Ah, ok
6 PubKeys.
Which six addresses do you mean?
and I'm trying to figure out how I can do this from the client side.
so, it's sequentially packed one after another as in total 6 addresses.
yeah
Ah, just as your own custom thing?
As 4 8 byte little endian
Well, that's how I am trying to accept over the smart contracts tho.
Ah, why not?
Yeah, that's not what I want tho.
I think it will be those 32 bytes
toBuffer reduces it's size then?
Given a PublicKey, I think you can do `myPk.toBuffer()`?
Ok, the back end is done. 
Now I'm stuck over the client side. 

So I can like create a PublicKey using `new PublicKey()`

How may I now convert this PublicKey into a Uint8Array of little endian (coz a pubkey would be 32 bytes, and I don't want that, instead it should be represented in 4 * 8 byte little endian integers) ?? 

lol
Thank you sir!
So for now, the migration files are more of like script files such as initialization after the deployment.
Hmm, that's a weird error to get since it's just rust saying it can't find the file. Do you have anything odd about your home directory? Like, spaces etc.?
You could check your anchor.toml
Jk, sorry‚Ä¶ I forgot what you needed. Don‚Äôt do that
Ok, cut it‚Ä¶ anchor test runs its own validator
I do !
Strange‚Ä¶do you have a test validation running in the background??
(and of course anchor build just before)
yep
It looks like it, did you just run anchor deploy?
Trying to anchor deploy my first program after building.. Getting this path error. Does that mean that the program path is wrong? I can see MyFirstProject/target/deploy/MyFirstProject.so in the Finder..
They definitely not cheap. 1 to start with, I think I deployed my simple programs for 2-3. It's not far off from devnet.
Just curious, do you know how much that ends up being? My understanding is that the bulk of the cost is allocating an account for your program's code‚Äîlooking at the examples, `basic_1.so` is already ~150kb, which is something like ~1 sol üò¨
Should be very similar to devnet
how much does it cost to deploy a simple program to mainet?


//////////////////////////////////////////////////////////////////////////////////////////

ahh yeah i just confused myself, trying to copy a program i created in solana in anchor and forgot i derived from my program address. thanks!!
At the end of the day you'll always have to ask the deriving program to create an account at one of its derived addresses, because that's the only thing that can sign for them.
You won't be able to init an account whose address is derived from a *different* program, at least not directly, because solana requires that address to sign the account creation‚Äîand the point of program-derived addresses is that only their deriving program can sign for them.
<@!134416332509675520> hi sorry i don't mean to @ you & it won't happen again but just a follow up on the last question i asked,

since `seeds` cant be used to validate another program pda, does that mean you also can't use `init` with `seeds` to create an account for another program as owner too?
does it happen at a random time, like how long after you've connected? or is it immediate
im not sure why this is happening. i dont explicitely disconnect, either via UI or programitcally. anyway to tell what is triggering this?
Okay, I'll look into it, thank you!
Hmm, not sure. You might have to read through https://github.com/project-serum/anchor/blob/master/ts/src/workspace.ts and see if you can spot where something could go wrong (could also just set a breakpoint in there too)
Yes, it exists
Hmm, what happens if you do `anchor build` first? Does the right IDL exist in target/idl?
and all `program.rpc.INSTRUCTION()` calls fail
<@!134416332509675520> sorry for asking it one more time, but how can I run tests on devnet with `--skip-deploy`?
Right now 
```
  const program = anchor.workspace.StakingPool;
``` 
returns an empty set
ahh gotcha, and clone that instead. That makes sense
You can add it to your `[account]`
No
üòÇ that would solve all of my problems. Was strugglingh with `clone()` earlier
Yes
Okay, so it is #[derive(Accounts)], I can change that to #[derive(Accounts, Clone)] and that implements the `clone()` functionality?
Or you can `derive(Clone)` on your account, `clone()` it in the function call and then at the end write it to `ctx.accounts.account1`?
Can't you modify them at the end of your function call?
Because I'm modifying the values of `example_account` just after the transfer
Why do you need to borrow it as mutable in the first place?
Ah, ok. I wonder if you could do something like
```.rs
let a1 = &ctx.accounts.account1;
let big_condition = a1.value == something;
if big_condition { ... } else { ... }
```
`example_account` is not one of hte accounts involved in the `transfer` if it makes any difference
this definitely works, the reason I have it structured the way I currently do is that `example_account` has quite a few attributes so it is cleaner to call it as `example_account.value1 ... example_account.value2` rather than `ctx.accounts.account1.valueXX` every time
Sure! Hopefully shouldn't need to fiddle with that command too often unless you're actively working on the cli
Sounds very complicated to me right now (just starting out and wanted to try some tutoritals) üòÖ
I'll wait till this gets fixed. But thank youu!
What happens if you just do `if ctx.accounts.account1.value == something`?
something like that
`let example_account = &mut ctx.accounts.account1
if example_account.value == something:
  ctx.accounts transfer

use example_account again down here`
Hey all, so I'm trying to do something similar to armani's escrow example but the `transfer` is based on the outcome of a conditional. The conditional is mutably borrowing one of the accounts which then blocks me from being able to call `ctx.accounts` in the transfer. Is there a common way of cloning all of `ctx.accounts` or another good work around?
Ok, looks like you currently need to use the --locked flag: `cargo install --path cli --locked --debug`. That didn't use to be necessary though, so I wonder if our clap dependency is in a funny state?
Ah, I see, thank you! I use pda's only for transferring ownership of accounts to my program, so I don't need to use it for initializing, right?
It's necessary to specify the seeds + bump here because whenever you create an account in solana, its address has to sign. For a program-derived address, you need to know its seeds + bump in order to sign.
When you do `#[account(init, payer = somebody, seeds = [...], bump = some_bump)]`, you're initializing an account that will live at the program-derived address specified by those seeds + bump.
And whether I can use it to verify mint ownership there at declaration
Oh, sorry, misread
What seeds attribute does
Oh, no
Just to make sure I understand your question, you mean what does the `init` attribute do?
<@!134416332509675520> oh, I've been wondering about what `seeds` macro is used for. Can you, please, explain what is the usecase for it in `init` up there and in general? 
```
pub struct InitStakingPool<'info> {
    // Staking accounts
    #[account(init, payer = owner)]
    pub staking_pool: Box<Account<'info, StakingPool>>,

    // Owner accounts
    pub owner: Signer<'info>,

    #[account(mut,
        // mint_authority is verified later,   !!!!!!!!!!!
        // as we can't easily get pda here
        constraint = synthetic_mint.supply == 0,
        constraint = synthetic_mint.freeze_authority == COption::None,
    )]
    pub synthetic_mint: Account<'info, Mint>,
----snip----
```

And then in an instruction I verify things like here:
```
        if ctx.accounts.synthetic_mint.mint_authority != COption::Some(pda) {
            return Err(ErrorCode::NotOwnedSyntheticMint.into());
        }
```
Though that failed when I tried it just now lol. Does no one else get errors about `clap`?
The way I do it: `cargo install --path cli --debug` from within my checkout of the anchor repo
i could be wrong though
you should be able to with just `cargo build`
I think if you really wanted to verify some *other* program's PDA, you'd have to do it manually, anchor doesn't automate this
probably should've asked sooner
I see, thanks! this had me confused for like 2 days LOL
Ah, ok, if you have two different programs here then this won't work: program-derived addresses are a function of seeds + bump, but also + the program_id, so if there are two programs floating around they'll each use their own program_id above.
if that matters
im on version `0.17.0` rn
<@!134416332509675520> i'm having a slight issue then, i have two programs one that inits an account 

```rust
    #[account(init, payer = user, seeds = [b"config" as &[u8], &seed.to_le_bytes()], bump)]
    pub config: Loader<'info, Config>,
```

and I have another program that is reading that account

```rust
    #[account(seeds = [b"config" as &[u8], &seed.to_le_bytes()], bump, owner = config_key::ID)]
    pub config: AccountInfo<'info>,
```

I call these programs right after each other so i'm using the same exact derived address for both, yet I get `0x92` error. When I remove the `seeds` field and check `&ctx.accounts.config.data` the program doesn't error out and I also can see that it's the correct address because the data is there, can you spot what i'm doing wrong?
is `#[account(seeds = [<seeds>])]`  used for validating pdas when reading also?
Okay. How do I do that?
Nothing in the CLI suite works right now.
I followed the instructions in the anchor docs
You need compile yourself, at least while correct binary will not be published üò¶
are you seeing this e.g. when you click disconnect?
<@!784251009202913321>  what command are you installing with?
Saw that this is an open issue too. Does this mean i can't do anything now? Installing anchor for the first time here
trying to install anchor but getting this error with anchor version-
Package binary version is not correct. Expected "anchor-cli 0.18.1", found "anchor-cli 0.18.0"
I'm not sure what was causing the second problem, but I think it is resolved now, yay!  Still wonder about the first one
Good day! I have a couple of problems with running tests on devnet.
First, when I try to run tests with `--skip-deploy`, `anchor.workspace.PROGNAME` returns an empty set instead of my program's idl. What can I do about it? And how can I get it manually?
```
  const provider = anchor.Provider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.OmStakingPool;
  // program is an empty set
```
Also when I try to listen for events as done  in `tests/events` with `addEventListener` tests block indefinitely either on local or dev nets, and only work on automatically generated workspace.
if you can afford it reload is cleaner
it depends what you need to read
Thanks alan. I saw in the swap program that`token::accessor::amount()` is used. Is that preferred over doing an account reload?
anybody know why i keep getting this?
I think you can do `ctx.accounts.usdc_account.reload()`
Hi, one beginner question. Is it possible to read the updated token amount from an account, after the token Transfer CPI in the same transaction?
E.g.
`let start_amount = ctx.accounts.usdc_account.amount;
... do transfer...
 let updated_amount = ctx.accounts.usdc_account.amount; // get updated amount here
`
I didn't think of that attack vector
ahh
If you could do that, everything would be hopelessly broken üòõ
So how are you going to get the private key for that?
For the PDA, the address is hashed.
But you can't do anything with it once deployed.
For an executable, it doesn't matter. You need the private key to deploy anyway.
Do you mean on the curve?
I don't think there is. I don't see why you can't just use the derived address on the curve, since you can't find the private key for it anyway.
hmm, there must be a better reason
Yeah, I think it's an interesting question too‚ÄîI've wondered the same thing. As a funny related example, `Pubkey::create_with_seed` *doesn't* ensure the result of the hash is off-curve, as far as I can see.
The unsatisfying answer, if I had to guess, is that using a bump is bullet proof and feels better. But I defer to the solana core team for the real answer.
Yup I think that is true.
I'm full of random questions today, but... Why does it matter that a PDA be off the curve? If it is on the curve, it isn't possible to derive the private key from the public one so nobody could sign for it anyway. So why do people bother with bumps?
thanks!
ahhhh!!
So if you want to have multiple signers, you need to add another layer.
Because each `&[&[u8]]` is a single signer.
i.e. why `&[&[&[u8]]]` rather than `&[&[u8]]`
why are seeds an array of arrays of buffers rather than an array of buffers?
USDC is a great coin, the market cap keeps increasing
Is it possible to read the updated token amount from an account, after the Transfer CPI (in the same transaction)?
I don‚Äôt think Anchor is the reason for USDC being up 0.15%
How is USDC up 0.15%???
Ok, thanks!
I believe USDC is just another SPL token
This may be a stupid question, but if I let my users pay in USDC, do I need to use wrapped USDC or is there a Solana native USDC token?
Thanks, so there needs to be at least 1 libs.rs correct?
Thank you! üôÇ
yes i can imagine because opening your walllet everytime to send a message would be pretty prohibited for end users. im just curious about whats possible with solana and how it would look haha
they've all been mostly ignored and unused
despite many of them winning hackathons
though to my knowledge there's been no successful chat apps deployed on solana
you can look up some messages from @ hana to see their discussion of chatroom structures
haha im just curious how it would work and the architecture for it
got it , thank you üôÇ
generally speaking i avoid "filtering" accounts but not sure how your design would work exactly
i don't really know about the chatroom stuff. There are chat examples that won previous hackathons but i wouldn't recommend going down this route if you're a beginner + chatrooms are really expensive because of how solana rent works at the moment
omg thank you so much for this, i think i was completely in the wrong direction haha 

would it be possible to then to filter those accounts either through the frontend or in the program itself?

For example if i have a chat room with users and messages , would i be able to filter users e.g. where users.chatroom == chatroomId ? So i can then get all the users who belong to that chatroom
PDAs are the way to go though for reliably keeping track of accounts
but you can have a variable in a struct on an account that indicates who its "owner" is, like how SPL tokens do it
only programs can own accounts
oh got it, my other question is then, its possible for accounts to own other accounts and reference them in the program?
don't make an account with a variabe amount of data!
ah im so confsued about the ring buffer, do you know if therers any readings i should do for this specifically? 

im trying to make an account with a variable amount of data in my program üòï
Nope just the code üôÇ
Heyy, is there a detailed explanation of this example somewhere? 

https://github.com/project-serum/anchor/blob/master/tests/chat/programs/chat/src/lib.rs
yup! there is an example in the tests folder you can use as a reference:

https://github.com/project-serum/anchor/tree/master/tests/misc/programs/misc/src


//////////////////////////////////////////////////////////////////////////////////////////

Yes. That limit is imposed by the solana runtime on CPI only, which means the limit also applies to all PDAs since they must be created via CPI.
Hmm, yeah, seems to be broken for me too ü§î
yes, consumers of the contract would need to manually construct the instructions in order to use it or have access to the IDL
> `SystemProgram::CreateAccount data size limited to 10240 in inner instructions`

<@!501570363566587905> Is it possible to create large accounts like the Bids/Asks as long as it's not an inner instruction?
is it possible to create an contract with anchor and not have a client side?
Hi, does anyone know if this tictactoe example still works for them? 

https://github.com/project-serum/anchor/tree/master/tests/tictactoe

When I  cloned it , and ran the tests it seems like every rpc call  except init dashboard / init game results in an error. 

Some of the errors im getting: 
Player 0 joins: Error: 143: A raw constraint was violated
Player x joins: Error: 302: Wrong expected state
Player o plays: 300: You are not authorized to perform this action.
Player x plays: Wrong expected state
Thanks!
I just had to `return Err(ErrorCode::ActiveVotes.into());`
The Err(ErrorCode::stuff.into()) is the same... the Result<()> is different, but when I change it, it is the same error
What do you mean???
Code from tutorial doesn't looks like your code on screenshots.

But why??? I though ProgramResult returned either nothing or an error already

It looks like I need Result<()>
https://project-serum.github.io/anchor/tutorials/tutorial-4.html#defining-a-program
Do I need to replace ProgramResult with Result<()>

Can you show the full function code and give a link to tutorial? It's hard to say what's wrong with small part of the code, especially by screenshots üò¶
It still is angry
Haha... duhhh. The tutorial I was referencing didn't have a semicolon, but thank you
`return Err(...);`


Dumb question, but how do I error out of a funciton???
<@!134416332509675520> would I be right in assuming that the first thing I do with a new anchor repo is run `solana address -k path/to/kp` and replace the pubkey in `declare_id`?
hmm, so there is no way to narrow down where the error actually occured? any tips for debugging cases like this?
thanks for this! I did indeed have an outdated version (0.13), and updating to 0.18 helped. But now I have a new problem - when I run `anchor test` I don't get any output saying the tests have passed. All I get is:
```
To deploy this program:
  $ solana program deploy /Users/ilmoi/Downloads/anchor_play_4/target/deploy/anchor_play_4.so
The program address will default to this keypair (override with --program-id):
  /Users/ilmoi/Downloads/anchor_play_4/target/deploy/anchor_play_4-keypair.json
node: --dns-result-order= is not allowed in NODE_OPTIONS
```
is this normal?

edit: the tests definitely aren't running. 

Even when I do `throw new Error()` inside one of them, I get no output. What might I be missing?
Why is this the case, when the bump can be computed on demand in the program?
I've been trying to figure out how to work use pdas, and I'm seeing this pattern of pushing the pda bump seed to clients (example https://github.com/chronologic/deep-waifu-payment-contract/blob/71ad0da3b1741fcb748ff064d897a41a0ce21056/programs/deep-waifu-payment-contract/src/lib.rs#L121)
Ah, the file it's pointing at is internal to anchor (you can find it in the anchor source), but yeah, probably not going to be super helpful to look at‚Äîit's saying the anchor cli tried to generate the idl but got confused üòî
I think one way to get this kind of error is to have a slightly out of date `anchor` cli. What does `anchor --version` say?
and another - how does one find out where in the code an error occured? because the above error is pointing to a non-existing file with at least 450 lines of code (which I assume come from macro expansion). How do I narrow down to where the error actually happend in the code?
another question - how does one find out the ID for `declare_id`? Maybe that's what I'm missing..
got past this one by adding `associated = True` before `payer = user` (no idea if correct, just going off intuition). Now stuck with:
```
thread 'main' panicked at 'Could not resolve Accounts symbol', lang/syn/src/idl/file.rs:450:22
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```
How do I create a Associated Token Account by doing a cross program invocation
getting `thread 'main' panicked at 'Code not parseable: Error("associated or seeds must be provided before payer")', lang/syn/src/idl/file.rs:337:58` when trying to run `basic example 1`. How should I debug this? Is there code I can look at?
Oop looks like I did miss it, rip!
Don't know if I'm late on this, but yeah total beginner to anything on Solana, deployed 1 small eth loot clone erc 721 contract. Watching a presentation would be really fun if you have yet to hold it.
did I miss this one? üò¶
(if i am following you -- still dont knwo what the schedule is)
following you is going to be a tough act :>
Ok this is great feedback. Thanks.
the cargo expand is really confusing compared to what most devs are using
if you have time do both, but the non anchor contract w/ enum dispatch is what most people do
I.e. using enum dispatch.
I wonder if this should be `cargo expand`ed anchor code or an actual non-anchor contract.
the thing that took me the longest amount of time was learning the abstractions as there was no one to one map üòõ
sounds good
Maybe at the end of the rust section.
Great idea.
Where do you think we should add this?
sorry i have no mic atm
lol the specific thing
no
the thing you asked about being too much magic
Whole thing?
What was too much magic?
would be really helpful so people can see the abstractions
I think having a non-anchor version and anchor version
i would hope so
your current approach is great i think
too much magic
Going to start in 5.
Probably 15 mins
what time are you out?
I am in a meeting right now!!! üò¢
<@!847130012879814668> <@!185307556032413697> hop into the voice channel
<@!134416332509675520>  I want to mint half of the connected wallets to my app, some no. of $ABC SPL tokens, and to the other half, I want to mint $XYZ SPL tokens, using typescript.

Question: is it valid to create new Token class instances for the tokens $ABC, $XYZ in the typescript code, every time just before the mint( ) function is called? 
I‚Äôm thinking to use arbitrary keypair using new web3.KeyPair( ) every time during generating the Token class instances.
I can hear this all day
I would love to listen
Cool lets do it. Hopefully we can find a couple more as well.
Meeeeeeeeeee
Any tips/documentation on how to require that signer holds an nft of a collection and in order to proceed with the transaction for anchor? Would this require cpi to metaplex program? Also curious how to ensure that the holder legitimately has nft of collection and make sure it is not exploitable?
This is great - thank you!
Alright. Thanks üôÇ Will check all the accounts one by one!
Ok, yeah, so you've got lots of these account owner checks happening‚Äînot sure I can help debug which one is failing, but any of those TokenAccounts or Mints could be the issue
Here's the context
So e.g. if you say `Account<'info, TokenAccount>` but don't actually pass something owned by the spl token program
These AccountNotProgramOwned checks run for all `Account<'info, T>`s in there
Can you post your `#[derive(Accounts)]` struct for the instruction that fails?
So here‚Äôs how I deployed: 
1. Ran  anchor build that generated a keypair in target/deploy
2. Fetched the program ID using Solana address -k path-to-keypair.json
3. Copy pasted that PID to declare_id! and Anchor.toml.

4. If mismatching of pid would really be an issue, the RPC call to the first ix handler that just sets the vars in the context should fail too right? It succeeds actually when called from the browser
There is. If you're running things in vscode, you can do this https://code.visualstudio.com/docs/nodejs/nodejs-debugging and turn on auto-attaching. You can also change your Anchor.toml file to do `mocha --inspect-brk ...` and then debug the tests in chrome by going to chrome://inspect
Ah, ok, are you using the right deployed id then in `declare_id!` and Anchor.toml? Couldn't tell from your post above if you changed them after learning your deployed id
It works well with a local test using workspace. Just fails when i call the deployed version of it on devnet from the browser
Are there any total beginners online that would like to listen to an Anchor presentation?
In general 0xa7 means AccountNotProgramOwned‚Äîit's true that having an incorrect declare_id! can cause this, but it can also be caused by having an account that's not owned by the program üôÇ Are you sure your accounts have the right owners?
Hey guys, I am getting a Program failed: custom program error: 0xa7. I searched the previous conversation here and found that it has most likely to do with some mismatch of the pid in declare_id!( ) and Anchor.toml but I‚Äôve checked and the values at both places are the same. 

1. I‚Äôm able to call one of the RPC ix handler that doesn‚Äôt do much other than setting up some vars, perfectly fine.
2. The error is thrown with another RPC  handler where I do have some constraint checks in its context. 

What might be wrong here? Please help üôÇ
But it does not work.
Well, I set the clusterapiurl as `localnet` in this way.
Gotcha okay. Thanks, I'll try looking through the CLI code for the test command to see if there's a way
There probably is, though I haven't done it.
Hmm got another question - is there a way to hook up a node debugger to the `anchor test` process to debug through the client JS test suite?
Ah I see - got it. Thank you!
1. The `counter` keypair needs to sign because we're creating an account at its address (creating an account at a given address always requires that address's signature)
2. (and also kind of 1.) The wallet implicitly signs the tx, so no need to pass it in `signers`. Because `authority: provider.wallet.publicKey`, no need to sign for it explicitly.
I'm looking through some of the tests in the basic tutorials and have some questions.

1. In the basic-2 tests, how come the `counter` keypair is passed to the signers array? I thought that since the `provider.wallet` is the payer that the wallet would be the signer.

2. Also in basic-2 tests - in the "Updates a counter". How come no signers are passed here? In the instruction for increment, it looks like the `authority` needs to be a signer. Is this implicitly passed through somehow?
Neat, ty for the help! And great job on the framework!
Exactly.
Ah I think I figured it out, I can essentially define an `Accounts` struct for a single "dynamic account" and then pass that single account as an one element array into `<Accounts>::try_accounts`
Maybe my lack of Rust experience is the issuer here, however how can I do so without making a struct for every permutation of my dynamic accounts?
Not exactly. Those attributes need to be inside `#[derive(Accoutns)]`. So instead you can make new structs for the dynamic portion.
Something like this should work right?
```rust
let mut account_info_iter = &ctx.remaining_accounts.into_iter();
#[account(owner = *ctx.program_id)]
let mint_ai: Account<Mint> = Account::try_from(next_account_info(&mut account_info_iter)?)?;
#[account(constraint = mint == mint_ai.key())]
let token_ account: Account<TokenAccount> = Account::try_from(next_account_info(&mut account_info_iter)?)?;
```
nvm this is retarded, so afaik i can only use `#[account]` on a accounts struct with static attributes. Is there a way I can use it programatically over `AccountInfo`, I want to avoid unnecessarily manually checking all constraints of accounts in the `remaining_accounts`
Yeah, I tend to just use invoke directly
Ok makes sense, so I can either see how anchor cpi maps accounts to the underlying invoke or use invoke directly
There isn't really anything anchor-specific to do‚Äîyou can see some examples if you look at how `anchor_spl` talks to the spl token program (you wind up using `invoke`/`invoke_signed`)
Also what is the best approach to call a non-anchor program via anchor CPI?
kinda like this, if I understood you correctly?
```rust
let accounts = Accounts::try_accounts(ctx.program_id, &mut ctx.remaining_accounts, &[])?;

#[account(<constraints>)]
let account = accounts[0];
```
You can one by one, if you use the `Accounts::try_accounts` trait.
can I use the macros for account constraints somehow on them?
You can pass them in on the client side via the `remainingAccounts: [...]` field in the context, which takes the bare bones AccountMeta objects.
ctx.remaining_accounts
How can I handle with anchor a variable number of accounts? for example I have an escrow service where two parties can exchange from 1-5 token accounts at a time?
may be the community can create a space calculator ü§î
thanks, it works when i add enough space
in your program file, and just experiment with how big stuff is when borsh serializes it
my bad, i'm not very comfortable with borsh thing .. yet
One way to check is to stick a
```.rs
#[test]
fn test_something() {
  ...
}
```
In general you need to just check how borsh does things
ok, but wait, how do you know how many byte it will take, how to figure it out?
So doing `space = 8 + 8 + 8 + 4 + 10 * 32` would give you enough space for up to 10 pubkeys, etc.
Seems like you aren't allocating enough space for the `VoteAccount`. It will take 8 bytes for the account discriminator (anchor thing), 8 + 8 for the trump/obama counts, and then you'll need additional space for the pubkeys in `addresses`. Borsh stores vectors as 4 bytes for the length + n * however many bytes for each elements (pubkey = 32 bytes)
Yeah, you can store whatever you want in there as long as you have some kind of serialization/deserialization strategy
How come? You can store a vec in an account just fine (borsh won't care).
Hello, I'm learning anchor and i'm trying to make a program based on anchor tutorial 1 program. It will allow people to vote . I also want to track every pubkey of all the people tha vote in an array. The folowing is what i made:
```
use anchor_lang::prelude::*;

declare_id!("7BCox2YWxLoMcWwvyBNXgkr89PKjCJD51EJRbexxQib8");

#[program]
pub mod trump_vs_obama {
    use super::*;
    pub fn initialize(ctx: Context<Initialize>) -> ProgramResult {
        let vote_account = &mut ctx.accounts.vote_account;
        vote_account.trump = 0;
        vote_account.obama = 0;
        vote_account.adresses = Vec::new();
        Ok(())
    }
    pub fn vote_obama(ctx: Context<Vote>, address :Pubkey) -> ProgramResult {
        let vote_account = &mut ctx.accounts.vote_account;
        vote_account.obama += 1;
        vote_account.adresses.push(address);
        Ok(())
    }
    pub fn vote_trump(ctx: Context<Vote>, address :Pubkey) -> ProgramResult {
        let vote_account = &mut ctx.accounts.vote_account;
        vote_account.trump += 1;
        vote_account.adresses.push(address);
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize <'info> {
    #[account(init, payer = user, space = 16 + 16)]
    pub vote_account: Account<'info, VoteAccount>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program <'info, System>,

}

#[derive(Accounts)]
pub struct Vote<'info> {
    /// Marking accounts as mut persists any changes made upon exiting the program, allowing our votes to be recorded
    #[account(mut)]
    pub vote_account: Account<'info, VoteAccount>,
}

#[account]
pub struct VoteAccount {
    pub trump: u64,
    pub obama: u64,
    pub adresses: Vec <Pubkey>
}
```
I cant get the test work specially for the vote fn and  i have no message error , just test failed. Do you guy know what i'm doing wrong here ?
I got too many error codes and I played around with it... I am now just keeping the seed in a seperate PDA
what roadblocks?
I was trying to implement what we were talking about earlier... ran into too many roadblocks so changed my approach
need more context
How come the testing framework is in mocha? Aren't the rust integration tests better?
I'm on linux so it should be supported right
hello, I'm having trouble installing anchor. I keep getting `Package binary version is not correct. Expected "anchor-cli 0.18.1", found "anchor-cli 0.18.0".`
when I fix the version I get `Package binary version is not correct. Expected "anchor-cli 0.18.0", found "anchor-cli 0.17.0".` so I can't seem to win :p
What does it mean that Error: Assertion failed
```ts
import crypto from 'crypto'
const hash = crypto.createHash('sha256').update(pwd).digest('hex')
const seed = hash.slice(0, 20)
```
Thanks
its not an anchor feature, node has a `crypto` builtin package you can use to create the hash
Sorry, noob question
What is the anchor.web3.... thing I need to call to run a sha256 hash??
Ok, thanks!
you could sha256 the string and just grab the first 20 characters
How do I get something that is 20 bytes long in JS???
For anyone wondering, this is it

```
    await PublicKey.findProgramAddress(
      [
        Buffer.from("metadata"),
        TOKEN_METADATA_PROGRAM_ID.toBuffer(),
        mint.toBuffer(),
      ],
      TOKEN_METADATA_PROGRAM_ID
    )
```
cheers <@!501570363566587905> <@!847130012879814668> and others helped us out. This is the best community
Need to use the metadata PDA
Question: Given the address of an NFT, how do we query for its metadata?
Thanks!
boom, known length
yeah just do a crc32 hash of the name of the topic or something and the seed will always be 8 bytes
ahhh i see
That is what I am doing... I just don't know how to have the voting topic be a unique PDA without passing in the seed for it from outside the contract
solves the multi-topic voting collision issue
this is purely a design issue then. take it with a grain of salt cause this is just my opinion, but if that's the case, i'd have each voting topic be a PDA, that way you can pass in the topic and voter accounts to the `init_vote` instruction and seed from the combination of the topic and voter pubkeys
So that users can vote on multiple things

So each vote needs to have a uniqe seed
That is what I am doing, but we want to be able to vote on multiple things
what about seeding from the key of the voter?
I am doing a voting protocol where each vote has its own seeds
I know... I need a new seed for each PDA I init
(bumps, yes)
passing seeds through the instruction is kind of an anti-pattern imo
Gotcha... thanks
but if you already know this, its best to have it in the program instead of passed as an instruction var
borsh can't deserialize `[u8]` because it doesn't know the length of the array. if you _know_ what the seed is and it has a constant length (for example 20 bytes), you need to use `[u8; 20]` as the type
What does that mean?
ahh if you're passing it in like that you probably need to know the size of the seed so you can establish a known `[u8]` length

What is this??
Thanks!!!!
something like that
```rs
pub fn init_vote(ctx: Context<InitVote>, seed: [u8], nonce: u8) -> ProgramResult {
  Ok(())
}

#[derive(Accounts)]
#[instruction(seed: [u8], nonce: u8)]
// ...
#[account(init, seeds = [seed.as_ref()], bump = nonce)]
// ...
```
Thank you!!!!
right now you have
```rs
#[instruction(big_nonce: u8)]
```
if you want to retrieve a seed from the instruction arguments, you need to make sure you're handling function accepts one, and then add it to the `instruction` attribute
How do I pull in seed?
you're pulling `big_nonce` and not seed

the variables you're pulling in the instruction attribute don't match
That is the lesser of my issues
Yea, intelisense says seed is not in scope
seeds are `&[u8]`

Can I pass a seed into a function for the initialization of an account like this?


//////////////////////////////////////////////////////////////////////////////////////////

got it thanks!
Maybe you can just leave off the `--upgrade-authority` arg entirely, since it's the default?
You can get more info by doing `solana program set-upgrade-authority --help` to see other options
That's make sense!
Honestly, to some extent the whole idea of passing numeric literals to a bignum constructor is kind of odd, because of precisely this issue‚Äîjavascript numbers aren't bignums.
thanks!
You'll probably need to pass that argument as a string. When you pass a numeric literal like that, you're passing an actual javascript number, and javascript numbers can only safely represent integers up to 2^53 = 9007199254740992, which is smaller than your number.
This may be a stupid comment, but I am using WSL and found very slow build times... I transitioned my files to the native ubuntu file system rather than in Windows and speeds have increased incredibly
what's the command to sign?
this command:
```
solana program set-upgrade-authority FenXtiLSWaS4J99CuASuV5acFM3NkUddkatydGnvQf7v --upgrade-authority 31tLWFGWyHn2aWNX3ryMqrAgxNLt335kZEhhoA4eK3Fp --new-upgrade-authority 6bZR8Nijh4wnP7UG5EwsCcaJyhJ581vnhKt97euZEhcE
```
bc you aint signing it
what's the command you're actually sending?
```
Program Id: FenXtiLSWaS4J99CuASuV5acFM3NkUddkatydGnvQf7v
PROGRAM_ADDRESS: FenXtiLSWaS4J99CuASuV5acFM3NkUddkatydGnvQf7v
UPGRADE_AUTHORITY_SIGNER: 31tLWFGWyHn2aWNX3ryMqrAgxNLt335kZEhhoA4eK3Fp
NEW_UPGRADE_AUTHORITY: 6bZR8Nijh4wnP7UG5EwsCcaJyhJ581vnhKt97euZEhcE

solana program set-upgrade-authority <PROGRAM_ADDRESS> --upgrade-authority <UPGRADE_AUTHORITY_SIGNER> --new-upgrade-authority <NEW_UPGRADE_AUTHORITY>
```

but it's raising a "Error: Dynamic program error: missing signature for supplied pubkey: 31tLWFGWyHn2aWNX3ryMqrAgxNLt335kZEhhoA4eK3Fp"
thanks for the tip.  I'm hoping to update the Upgrade authority from `/Users/user/.config/solana/id.json` to `/Users/user/.config/solana/localhost.json`

i am debugging a candy machine and its failing here https://github.com/project-serum/anchor/blob/0a660d26c4ae65a772d2ef76623f6c468adf1d58/ts/src/program/namespace/rpc.ts#L30 with no error message indicator. is anyone familiar with what would make that fail ?
hey guys! I am quite new to anchor. I have a quick question about new anchor.BN() function. what is the maximum value of the parameter? I met errors when the input is this new anchor.BN(16592058239843898)
Sounds like you can do it like this https://docs.solana.com/cli/deploy-a-program#set-a-programs-upgrade-authority
hey guys, how can one change the address for `Upgrade authority`?  I'm working on localhost at the moment
ok nice!! thank you ser ill get crackin on it
Cool! Yeah, for big accounts I'm pretty sure have to use zero_copy/AccountLoader (boxing won't help much since solana's heap is only 32kb)
beat me to it
ah thank you haha was gona look for an example and ask you LOL
Like this https://github.com/project-serum/anchor/compare/master...cqfd:big-account-example?expand=1
Mm, I think if you're going to use a big account you'll have to use an `AccountLoader` rather than an `Account` (pretty sure you'll blow the stack trying to deserialize the struct)
what am i doing wrong here (probably loads of things <:omegakek:883831890187018290> )
say in the pyth feed example i want the account data to be of type Counter (as in the counter example)
like when you use init the account is created by the program from the keypair pubkey afaik and you pay as a payer and the size is capped at 10kb, when you dont use init you have to create it yourself and allocate space/pay rent and include it in the tx call.. however if i don't use Init i can't seem to be able to use a struct
What do you mean by "instead of the init account"? The keypair-ness just affects what kind of address it has/how you sign, not really how you init it.
hey sirs if i use a keypair generated account instead of the init account does that mean i have to serialize/de-serialize the data myself like in the pyth example here? https://github.com/project-serum/anchor/blob/master/tests/pyth/programs/pyth/src/pc.rs
not sure if I need to `anchor new` first of I can just dump the directory in there.
I got dumb dev question. I want to include the SPL token-swap program in my project for localnet testing, what's the best way to do that? should I do a sparse-checkout into the programs directory or should I just copy externally?
Just Solana tx fees
lol what are you charging them by the account?
PDA privkeys are off of the elliptical curve that wallet generated ones have, that's what the bump seed is for. they're still in the same cryptographic function domain, but they're not derivable by the one the solana-keygen uses
I am upgrading as we speak
No... the issue was I was on Anchor 0.17 which doesn't support empty seeds
lol, this comma thing is usually from not using `declare_id`
Yep, most likely caused by RPC connectivity issue.

I still face similar issues with `onProgramAccountChange`, I just restart the node app every 10 minutes =\
Do you know if there is a benefit to splitting up funcitons across programs vs having all the funcitons in one program??? I am curious if my contract design is correct or if I am overtly overcharging my customers when they have to make CPI calls in favor of cleaner code for me
Ok... I will upgrade
Yep, need to use 0.18 I think.
Probably... I am on 17
Mm, maybe not on a recent enough version to support empty seeds like that?
Hey, what is going on here?
afaik
10MB size limit instead of 10kb
that was it. thank you ‚ù§Ô∏è
hmm when would one use normal accounts (those with keypairs) and still have them program owned instead of PDAs? When are they more attractive?
you're probably on an old version of anchor
I don't want to init this TokenAccount. Just validate that its mint and owner match what we expect
I've seen some examples that use constraints like `token::mint`, but keep getting errors when I try to replicate them. For example:
Are there constraints I can add to these macros to require that the `creditor_tokens` account is owned by `creditor` and matches the mint account:
```
#[account(mut)]
pub creditor: AccountInfo<'info>,
#[account(mut)]
pub creditor_tokens: Account<'info, TokenAccount>,
pub mint: Account<'info, Mint>,
```
I think this should be socialised, as every repo I found using these constraints have assigned `bump=instruction_argument` , where the `instruction_argument` is pushed to the client or stored in the state.
Ok ty
The syntax is funky, but you can leave out the bump by doing `#[anchor(seeds = [...], bump, other_thing = ...)]`, so no equal sign after bump. (It's apparently intended to remind you, "this isn't free", since it requires a call to find_program_address)
I haven't found one, however I usually have luck scavenging through github, so you can try that.
Is there any good repo that show casing idiomatic anchor npm usage in front end? Will be nice if it‚Äôs a larger project that involves different wallet and different network environment.
I could just do this 
```rust
#[account(address = generate_pda(seeds)]
```
but I want to avoid workarounds unless necessary.
I want to avoid using seeds as instruction arguments, as that unnecesarily complicates the client logic, and the `bump_seed` can be derived in the program when needed.
Hello, I'm going through the docs and  for derive accounts and when setting constraints for `seeds` the `bump` is marked as optional.
```
#[account(seeds = [<seeds>], bump? = <target>, payer? = <target>, space? = <target>, owner? = <target>)]
```
however when I omit it in the code I get an error
`bump must be provided with seeds`
`rustup update`  `solana-install update` Don't know about anchor cli
https://project-serum.github.io/anchor/getting-started/installation.html
anyone knows how to upgrade anchor cli version and solana version, rust version ? üôÇ
Ok after 2 super frustrating hours I fixed it. For anyone searching for this problem in the future here's what worked for me:

1. wipe out existing node and yarn installations (`nvm uninstall 16.x.x`)
2. install latest version of node (`nvm install node`)
3. install anchor/mocha related packages globally (I prefer yarn): `yarn global add @project-serum/anchor mocha chai ts-mocha @types/chai @types/mocha`
4. (!) IMPORTANT - also install `npm -g i @project-serum/anchor`, despite yarn modules being in both my PATH and my NODE_PATH, anchor wouldn't pick it up from there. So I had to also add it to npm. In other words I now have only 2 packages in npm (anchor and yarn), and the rest in yarn.

Hope helps anyone in the future...

Thanks to everyone who chimed in üôè
see https://github.com/project-serum/anchor/issues/945, tldr run `cargo install --git https://github.com/project-serum/anchor anchor-cli --force --locked` (for the NODE_OPTIONS error above)
ok this feels to me like a `mocha` issue. For some reason it's not detecting the test files in `tests/`:
<@!501570363566587905> any thoughts on the above? Tests not running neither after fresh `anchor init`, nor in the examples in anchor's own repo:(
Then you can diagnose if it's an anchor problem or a web3/rpc node problem.
No I mean `connection.onLogs`
Do you mean like a `program.addEventLisener("onLogs", (){})`? Tried this. It doesn't seem to work.
and global node packages:
here are the relevant versions:
what's a "master" cli?  I did `cargo install` as per instructions on this page - https://project-serum.github.io/anchor/getting-started/installation.html (I'm on mac)
Did you try installing the master CLI?
Still stuck with this. Did someone have a problem with tests simply not running on `anchor test`? After upgrading to 0.18 there's simply no output from testing functions, as if they don't exist. Any suggestions?
to answer my own question: use `AccountInfo`, then construct the loader via `Loader::new(account_info)`
I see, looks like we want `AccountLoader`, but that's only available on 0.18 that targets 1.8.0 (which is not available on mainnet yet)
trying to use `#[account(owner = controller::ID)]` now but I'm not sure my ID is correct in the testing environment
I'm trying to pass in a `#[account(zero_copy)]` state from another program (for read only use). `pub controller: Loader<'info, Controller>,` doesn't seem to work for me on 0.17, I get "The given account is not owned by the executing program". Replacing `Loader` with `Account` doesn't compile because the type doesn't implement `AccountSerialize`
(though I think those have been fixed for some time now)
In the past there has been issues with websockets on the rpc nodes.
Can you try an `onLogs` subscription and see if the log fires?
Facing a very similar problem. I am trying to listen to two events in my node app, The node app itself seems fine but it doesn't pick the events properly. 
Like it randomly hears a event and drops another one fired within minutes of each other.
Yes, I used `getAccountInfo` But can't find 113
<@!134416332509675520> ?
BTW another silly question, why people use `zero-copy` account?
Thanks. Let me try.
One thing you could try, just to debug, is to fetch the account with `program.provider.connection.getAccountInfo`, and just inspect the bytes to see why you've got a 113 for `stake_status` (I assume). Only have to look at something like 8 + 8 + 8 + 32 bytes before it, so not *that* tedious.
It actually might work fine, I'm not totally sure. I feel like it's not guaranteed to work, as I mentioned above: zero_copy means you don't use borsh (amongst other things), you just look at the bytes in the account's data and hope they have the right layout for the type of account they're supposed to be. At any rate, no borsh. But the way you're fetching the account on the client I think *does* use borsh, so that's a potential clash.
I am low beginner. What is `zero_copy` account?
I see. what is the reason?
You can double check this, but I'm not sure that `zero_copy` accounts will necessarily work well with the way you're trying to fetch them (with `program.account.theAccountName.fetch`). You may have to use the lower-level way, `program.provider.connection.getAccountInfo`, which will give you access to the raw bytes inside the account.
I am not sure what do you mean. üò¶
ü§¶
I must have had some silly mistake somewhere else
it's working now
son of a
Pretty sure you're going to have to manually decode the bytes in that account üò¨ Using `program.provider.connection.getAccountInfo`
To fetch All list of the campaigns.
This is invoked in the very begging of the site.
I'm not sure that the `program.account.someAccount.fetch` stuff will work with zero_copy accounts ü§î They don't use borsh but I think the `program.account...fetch` stuff does, and there's no guarantee that will work, right?
This is campaign account structure.
But ran into this error
I am going to fetch account.
I'm trying to fetch history of the value of an LP back in time. Any recommendations on where to start?
It's funny, I had never thought of the program's address as having a private key (not sure you ever use it besides deploying?), but I guess so, yeah. And right, PDAs are explicitly constructed so they don't have private keys (they aren't actual public keys)
Not really, since the address is a public key, and there's no way (if you know of one, lmk lol) to figure out the corresponding private key‚Äîand you need it in order to sign for the deployment
Thanks.
Yep.
Well, is that address same everytime?
You need to manually change the declare_id! to match the deployed address (it doesn't set it‚Äîit unfortunately needs to *match* it)
But the program id is different.
And I deploy the code.
I used `delcare_id!`
What error do you get when you try to do that?
Hmm, OK. I'll try that again, thanks.
Well,
Yeah, not sure, my rust code is taking a `Vec<Pubkey>` instruction argument (same as the account).
Maybe I'm doing something else wrong tho
That works for me if the Rust code accepts an array but isn't working for a Vec<Pubkey>
Actually, maybe I did read your question correctly haha, everything seems to work fine if I pass the pubkeys as an array, and writing them to the account works fine too.
I seem to be able to just pass them as an array, `[pubkey1, program.programId, someKeypair.publicKey]` etc. [Edit: sorry, reading too quickly, will double check how to actually write them to the account ü§¶‚Äç‚ôÇÔ∏è]
Can anyone show me the example of `solana-keygen recover `please?
Thanks.
make sure you walk through tutorial/basic-0 and all those
pay attention to the deploy command and check the output.
i used declare_id!
I can't remember, but when you build and deploy you might have a different pubkey for the program than the one that gets listed in the anchor.toml
About solana explorer.
Oh, just confirm one thing please..
sorry, it's past my bedtime and I gotta turn in, but maybe post console screenshot or something and maybe someone else can help you. good luck
yeah.
and you ran anchor deploy?
I just manualy run by `solana-test-validator -r`
well are you deploying to a test-validator, or are you running anchor tests, or what are you doing?
Yeah, I develop on localhost
your explorer is on localhost
I am confused.
if it does not exist, why solana explorer does not say `it does not exist`?
Can anyone check if this program exists?
`const pool = await program.state.fetch();`
might need to post some code
What's wrong with me?
`Account xxxxxx does not exist` error happened
I just invoke `program.state.fetch()` but
No worries, thanks for the response anyway
no, I'm still trying to wrap my head around that one still, unfortunately.
Is there client-side code for that I'm missing? My issue is I don't know how to create a JavaScript data type that will be serialized correctly and then deserialized by the program into a Vec<Pubkey> on-chain.
have you looked at the lockup program yet? https://github.com/project-serum/anchor/blob/master/tests/lockup/programs/lockup/src/lib.rs
How do I serialize something on the client side can be deserialized into a `Vec<Pubkey>` in the program?
I have a program that accepts a Vec<Pubkey> and then writes those addresses to an account:

```rust
    pub fn add_whitelist_addresses(
        ctx: Context<AddWhitelistAddresses>,
        addresses: Vec<Pubkey>,
    ) -> ProgramResult {
        let whitelist = &mut ctx.accounts.whitelist;
        whitelist.list = addresses;
        Ok(())
    }
...
#[account]
pub struct Whitelist {
    authority: Pubkey,
    counter: u64,
    list: Vec<Pubkey>,
}

```

Pretty confident I'm allocating enough space:

```rust
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = user, space = 8 + 32 + 8 + 4 + 32 * 10)]
    pub whitelist: Account<'info, Whitelist>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```

but can't figure out how to create an object in the client that can be succesfully sent to the program handler. 

I tried just passing an array of PublicKeys but that had deserialization errors, so now I'm hand crafting a `Uint8Array` of 324 bytes: the first four bytes are the Vec length and the 320 bytes are 10 public keys at 32 bytes each.

So it looks like:

```bash
Uint8Array(324) [
    0,   0,   0,  10, 141,  14,  90, 168, 147,  32, 191, 163,
  119,  14, 230, 205, 169,  73,  24, 142,  34, 248, 193, 233,
  ...
```

Now I'm getting `TypeError: key.toBuffer is not a function`.
relatable
seen so many different libs lately my head hurts
just don't remember which ones they were.
I've seen examples that use FS to import keys also. You can use web3 libs as well
if you follow the escrow example, just generate a new pubkey and airdrop: https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts
yea, that's what I got too.
Yeah honestly when I try it in my code now though I get a "Property 'payer' does not exist on type 'Wallet'" error so idk
https://project-serum.github.io/anchor/ts/classes/provider.html#wallet
thanks! why didn't I see that when I was looking at that earlier?
Oh, it's because the *wallet* property doesn't link to that page for some reason.
it looks like provider.wallet.payer implements the Signer interface https://project-serum.github.io/anchor/ts/classes/wallet.html but I'm a ts noob so could be mistaken
So when I call program.rpc.initialize within a test it deploys using the provider context, it doesn't look like there's a way to pass this default provider signer explicitly is there? for example, as the payer in a Token.createMint tx?
yeah that's my understanding, create the account (set the program as the owner when creating) and then pass it in, i think as a zero_copy account
Actually, I came here for this exact question! 
How can we allocate space to an account in anchor more than 10kb?
#[account(init, payer=user, space = 10000)] won't work. 

So - this is supposed to create a PDA then?
How do we create a non-PDA with > 10000 bytes? Would it have to be done before initializing the program? (aka not within the anchor program itself)?
ah okay thanks!
on all nets it's 10mb for an account and 10kb for a PDA inited account
is there a max space for an account on devnet? i cant seem to make an account larger than 10000 bytes
all the primitives are almost there, there's a new instruction for clearing out all the orders in the orderbook. After that it's just a matter of setting the market to closed and retrieving all the rent
daffy are you perhaps motivated enough to add retrievable market rents on serum permissioned markets?
yeh, i got serum market init working with all PDAs except the three big ones
rephrased a bit for to fit in the meme <:pepeLaugh:892381377692041277>
I just wasn't aware of it
No there was always this restriction with PDAs
circling back on this, did something change recently that I'm not aware of?
hi , does anyone know if  .to_account_info().key  can be called from zero copy accounts? 

I get the following while trying:
no method named `to_account_info` found for mutable reference
ok, just posting for posterity: 
```
yarn install v1.22.11
warning package.json: No license field
warning No license field
[1/4] Resolving packages...
warning Lockfile has incorrect entry for "@project-serum/anchor@^0.18.2". Ignoring it.
Couldn't find any versions for "@project-serum/anchor" that matches "^0.18.2"
? Please choose a version of "@project-serum/anchor" from this list: (Use arrow keys)
‚ùØ 0.18.0 
```
The npm package is currently ahead of the anchor-lang crate.
That would explain it.
anchor? npm
Or cargo installed version?
Are you using the npm version?
but why is 0.18.2 being generated when I selected 0.18.0 and that's what's published? If this is a bug I can fix
updated cargo.toml
```
Failed to obtain package metadata: Error during execution of `cargo metadata`:     Updating crates.io index
error: failed to select a version for the requirement `anchor-lang = "^0.18.2"`
candidate versions found which didn't match: 0.18.0, 0.17.0, 0.16.2, ...

```
0.17, just installed 0.18 and starting over
Though I suppose it's related since accounts are large.
This isn't serum specific though.
Ah fascinating
relevant: https://twitter.com/aeyakovenko/status/1453229972110385158
What version are you on?
No garbage collector + performance is the main reason. Given you need that, rust is attractive for other reasons (e.g. safety, ergonomics, etc)
I just init a new project using the -ts switch and anchor test fails to init the provider:
`TypeError: Cannot read property 'Provider' of undefined`

Any suggestions?
Is there a certain pattern among which types of projects use Rust as the main language?
Yep, i tried debugging it but didnt get very far haha
Awesome
the limitation. But "no eta"
yeah they said it's being removed
Maybe ask in "solana complaints department"
I thought I'll do everything with PDAs now and got rugged yet again üôÅ
It's not Anchor specific, but yes that would be true.
yeah just tested it out and you're right. So with anchor rewrite of Serum, the Bids/Asks accounts are not PDAs?
Needs to be done at a top level ix.
Not larger than 10240 bytes unfortunately.
Ok so it's *not* possible to create serum Bids totally via CPI?


//////////////////////////////////////////////////////////////////////////////////////////

Is that the system program?
Now that I think about it, I don't actually know who owns programs.
If it's a program, then the owner doesn't really need to be checked. Just the address (and that it's executable though that's kind of redundant).
But then you will need to check `owner`? `Id` trait generated by `#[account`]?
Apologies if I'm confused and derailing the question, but you can use `Program<T>` for your own program.
For you own program you need to use an `Account` instead of `Program` where `Owner` trait is used.
https://github.com/project-serum/anchor/blob/f682164addd084391d9a0b9c21ed659322d4e3a3/lang/src/account.rs#L25-L27
`crate::program::<mod-name>`.
It's generated via the `#[program]` macro.
or is the declare_id taking care of that?
is there an example of how to get the same convenience for my own program?
btw, for addresses `address` constraint is simpler `#[account(address = token::ID)]` üòâ
Yes
https://github.com/project-serum/anchor/blob/f682164addd084391d9a0b9c21ed659322d4e3a3/spl/src/token.rs#L405-L409
https://github.com/project-serum/anchor/blob/f682164addd084391d9a0b9c21ed659322d4e3a3/lang/src/program.rs#L24-L26
```
    #[account(constraint = token_program.key == &token::ID)]
    pub token_program: Program<'info, Token>,
```
Is this constraint redundant?
thanks!
new anchor.BN(n)
Hi, I'm not yet familiar with how to wrap ints into `BN`, is it something we need to execute on the shell?  The current code I'm running is a fresh clone from v0.18.0 tag (229e335)
Perfect, thanks for explaining all of this üôè
Yeah, no "past" authority here (the mint's authority definitely isn't changing)
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L2289
Ok got it, I was thinking you were referring to the past authority's public key to use as a seed for the pda; which confused me üòÖ
So if I want to send you some AlanTokens, but you don't have a particular/special place to put them, I'm going to put them in [KwengosWallet, AlanTokens] (pseudo-code), the "obvious" place to put them
An associated token account's address is based on the "logical owner" of the tokens (so, like your wallet), plus the type of the tokens (the mint).
Could you say more? Don't think I understand your question
Guys `anchor deploy` gives error `--program-id <PROGRAM-ID>`and when I put the program-id option in the command it further shows `use -- --program-id` I do this but this doesn't work as well, how can I deploy the contract?
if the PDA is based on the authority's public key (and the mint) doesn't that mean that the new account's address that will hold the mint (owned by the destination human) is based on the previous owner of that mint?
But basically yeah, you can have your program check if a destination exists, and if not go create an associated token account on the fly.
The typical approach here is to use the "associated token account" for that user + mint, which is a program-derived address based on the authority's public key + the mint (so, an "obvious" address for where to put some tokens of mint M for user U)
Yeah, good q. Basically yes, you'll need to have a real, already-created destination token account, somehow.
Do you have to check if human B has a token account and if not, create it?
This is were I'm a bit confused; if the program is transferring a token mint from human A to human B, human A will be the authority, the token account will be the from but if there isn't a token account held by human B's wallet, what can you do?
well explained thanks mate
To tie it into what I wrote above, you're asking the spl token program to do some account mutations for you (it owns the `from` and `to` accounts, and you always need to ask an account's owning program if you want to change its `.data` or spend its `.lamports`‚Äîno one else has the power to do those mutations). The spl token program will only agree to this if the `authority` signed.
The actual token account (`to` is a token account too, with the same mint).
Who's account is `from` then? the spl token program or the human's account?
Gotcha!
Right, authority might be their wallet.
So in the anchor spl token transfer struct `pub struct Transfer<'info> {
    pub from: AccountInfo<'info>,
    pub to: AccountInfo<'info>,
    pub authority: AccountInfo<'info>,
}`
authority should be the human's account right
Yeah, this is unfortunately just one of those things that's pretty confusing at first, but eventually clear from context ü§∑‚Äç‚ôÇÔ∏è
ahh `authority` ok I've seen that a few times and was also confused on who it should be
Anchor uses `authority`, e.g. `token::authority`, `associated_token::authority`, etc.
"authority", "delegate",... it's definitely a bit confusing that the official spl token term is just "owner"
cause that's not the owner then
I see, is their an other commonly term used for "logical owner" ?
Yeah, to add to what <@!788122420765917184> said, the `.owner` field on an `AccountInfo` is the *program* that owns the account (the one that is allowed to mutate its data + spend its money‚Äîin this case the spl token program). The token account's "logical" owner lives in the AccountInfo's `.data` and requires you to deserialize that data somehow to go find it.
You might want to read this blogpost to understand the difference between two types of ownership
https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/#building-the-escrow-program-alice-s-transaction
Appreciate man üíØ
https://github.com/project-serum/anchor/blob/master/tests/escrow/programs/escrow/src/lib.rs#L150
check `:tests/escrow`
or can I just pass in the public key of the mint and it can convert it ?
alright thanks! Do you have any reference/example for using that type?
Because you need `owner` not of an AccountInfo, but of Account<TokenAccount>
but the `account.owner` of an nft seems to be the token program and not the actual human holder's address
I've been using this 
`pub fn assert_owned(account: &AccountInfo, owner: &Pubkey) -> ProgramResult {
    if account.owner != owner {
        Err(CampError::IncorrectOwner.into())
    } else {
        Ok(())
    }
}`
am I right that for `events` it's only possible to collect live events using `addEventListener` and there's no way to collect historic events?
hi guys, what should i pass in array of signers(in client), if i want anybody to be able to call that function and pay the respective fees for the txn?
How do you check for ownership?
Cause when I check the owner of the nft mint, it says it's main token program id (TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA)
Is there a way to check if an nft is owned by the Signer in a program?
I think you forgot to wrap your ints into `BN`
hey guys, has anyone encountered this error when running `node client.js` on `tutorial/basic-0`
```
basic-0 git:(229e335) ANCHOR_WALLET=/user/.config/solana/id.json node client.js
Running client.
(node:82715) UnhandledPromiseRejectionWarning: Error: Non-base58 character
    at Object.decode (/user/.nvm/versions/node/v14.17.3/lib/node_modules/@project-serum/anchor/node_modules/base-x/src/index.js:111:11)
    at new PublicKey (/user/.nvm/versions/node/v14.17.3/lib/node_modules/@project-serum/anchor/node_modules/@solana/web3.js/lib/index.cjs.js:1808:50)
    at main (/anchor/examples/tutorial/basic-0/client.js:16:21)
    at Object.<anonymous> (/anchor/examples/tutorial/basic-0/client.js:27:1)
    at Module._compile (internal/modules/cjs/loader.js:1085:14)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1114:10)
    at Module.load (internal/modules/cjs/loader.js:950:32)
    at Function.Module._load (internal/modules/cjs/loader.js:790:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:76:12)
    at internal/main/run_main_module.js:17:47
(Use `node --trace-warnings ...` to show where the warning was created)
(node:82715) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)
(node:82715) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```
Hello everyone. We are planning to build a project manager application on Solana. In which there was a list of projects, and each project has its tasks. Everyone has an option to join a project if it is public. And tasks of that project should be shared between different users are those users have to update the status of tasks. Currently, we are using account data for storing that information and when we need to share that data with other users. I don't know how can I approve requests of others who are willing to join and able to share tasks from my account data to update. Any leads on data storage using Solana are much appreciated.
<@!134416332509675520> btw an update, I was able to figure out the issue. A transfer was being made to an associated token account before creating it. Forgot that the associated token addresses already exists, they just needs to be ‚Äúcreated‚Äù or ‚Äúactivated‚Äù. Used @saberhq/token-utils getOrCreateATA for it. Thanks for the help üôÇ
I installed anchor 0.18.2 and tried to "anchor init projectName", but I can see this issue. Waht is wrong?

This worked. Thanks for your help. Curious to know this wasn't necessary when using the anchor.provider's public key
Conceptually, `user` needs to be `mut` because they're the `payer`. But again, good to think through why this didn't seem to matter for some tests.
The issue here is a bit tricky, you need to mark `user` as `#[account(mut)]`. (Good exercise to think through why things worked fine for your first few tests though‚Äîhappy to explain why if you want)
Any advice to resolve this appreciated.
Code is here. Program: https://github.com/gpalrepo/crunchy-vs-smooth-experiment/blob/main/programs/crunchy-vs-smooth/src/lib.rs Test:https://github.com/gpalrepo/crunchy-vs-smooth-experiment/blob/main/tests/crunchy-vs-smooth.js
I am trying to extend <@!363246496210092035>'s crunchy-vs-smooth v2 by creating an independent counter for each user. I am able to get the everything to work for provider.wallet account but when I initialize a new account, I get the following error:   Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: Cross-program invocation with unauthorized signer or writable account
I don't really have anything to share yet, I'm just going through the anchor tests (CFO is probably the hardest) and seeing how Armani sets everything up, on localnet.
I'm aware, I just want to see one that's used in production
It is just a token program transfer...
Yo! Anyone have an example of an nft (metaplex standard) transfer within a program, called by the owner?
can you link pls
TIL you really want to look at the anchor travis.yml and all of the anchor toml files to really understand what's going on. I've only been looking at the lib.rs and test.js files and there's a *lot* more going on.
I'm building everything out in a TS test script before I even start to build the program. using the anchor tests to figure out how to do that. The cfo program has examples of deploying serum dex.
thats the way I'm approaching it.
Got it. Thanks. This was super helpful/enlightening.
So any on-chain program calling the System program to create an account is a CPI?
Ahhh
But you'll hit the same cap even with a keypair address if you try to do the `init` route, from within your anchor program. (It's a bummer.)
It's for accounts that are initialized via a cross-program invocation, weirdly. So the address type doesn't strictly speaking matter‚Äîthe connection to PDAs is just that when you allocate an account that lives at a program-derived address, you *have* to do it via CPI (not possible from the client), so you necessarily run into the 10kb cap.
Other than the System program
So the 10kb limit isn't for PDAs but for *accounts* initialized by a program?
You'll also likely need to use `AccountLoader` (or maybe just `Loader` if you're on 0.17.0) because otherwise the big-ness of the account data will blow the stack (or maybe even the heap if you use Box)
Oh perfect, thanks so much!
Yep, the example I posted does that
The fact that the address is program-derived in general doesn't really tell you anything about the account itself
So I should allocate the account with a call from client to System program and then assign ownership to the program?
Accounts are the storage part, addresses are where they live
Sorry what's the difference between "address" and "account" here?
https://github.com/project-serum/anchor/compare/master...cqfd:big-account-example?expand=1
But yeah, it allocates the account with a cross-program invocation. If you want to use a bigger account than the 10kb CPI limit, you'll have to do it in a separate instruction
The PDA-ness is about its *address*, not the account (PDA = program-derived address, not account)
Does the #[account(init)] macro create a System account owned by the program or an actual PDA?

```rust
[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = user, space = 8 + 32 + 8 + 4 + 32 * 1000)]
    pub whitelist: Account<'info, Whitelist>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}
```

I am getting this error:
```bash
'SystemProgram::CreateAccount data size limited to 10240 in inner instructions',
```
What is the best approach to testing programs that use cpi internally with `anchor test`? Should I just deploy the dependency program on the local validator?
this is really n00b question and one that's not necessarily anchor specific; but hoping to learn about it.
- I am making an rpc call to a program handler, and the wallet balance before and after the transaction is the same; the handler doesn't create an account or do any sort of logging, CPI, etc, it only transfer lamports from a program-owned account to the signer account; does this mean this transaction is free and won't cause any transaction fees?
- If this first point is false (I find it hard to think it is true), is there a way to make the transaction "payer" be the program?
`git submodule update --init` from the root directory does the trick
they're empty when I clone

is it a submodule or something?
how do I init these directories in my git repo? https://github.com/project-serum/anchor/tree/master/tests/cfo/deps


//////////////////////////////////////////////////////////////////////////////////////////

FYI: Fixed this via: ```
$ rustup default stable
$ rustup self update ``` ... then building from source with:```cargo install --git https://github.com/project-serum/anchor --tag v0.16.2 anchor-cli --locked
```
I hid some of the fields in my Account struct and tried redeploying the anchor program onto the devnet. After doing that, my program started receiving invalid argument error. I created another exact struct and handler and that works fine. 

Is there some caching that is done on devnet that makes modifying fields Account structs that are already deployed buggy?
but i am using #account(signer) itself
Yeah, we paired for a bit‚Äîit was an issue with using anchor 0.16.0, this bug I think https://github.com/project-serum/anchor/blob/master/CHANGELOG.md#fixes-1
got a fix on this?
ohke thanks
but yet already old
but stake-v2 is more recent anchor
lol
stake-v2 is an attempt at updating it, which i gave up on
stake is what is running in production
thanks
one is just stake, other is stake-v2
What is the difference between the 2 stake repos in the project-serum github page, i am trying to implement a staking program for my project, which code should i use, it there a new one i haven't noticed, Thanks
https://explorer.solana.com/tx/5y4GGmePGaZoC9x7pR9TMkdswQviqJpUcDwpT3Uq9gJ7cV7bLKo6S3giGJAPdDynj8RbCMsx1beC3Wd95B97ypfi/inspect the raydium crank is 10 ixs, with #22 accounts
yes one tx
Deduplication for the win.
19 ix's in a single tx? Nice.
a crank
it is actually crazy when you repeat stuff, we have a program with a tx using 19 instructions, all having the same big amount of accounts
And then theoretically tx size stays constant.
Then we can just build in the init/close into a new instruction.
Hmm
so the penalty should be minimal
wrapping SOL uses sytem program
those oh so sweet address maps
need 1.8 to come in
üòí
it's already close to limits
yes and that is bad!
the only additional account is the systrem program no?
(which has to wrap üò¶ )
E.g. for a transitive swap on SOL
might hit limits though!
but 2 signatures => less cheap, but very negligeable yes
otherwise that seems fine
no need to use createAccountWithSeed if it's atomic
for the swap:
instead of relying on this shared open orders which increases convolution anyway, would it make sense to ignore existing open orders account, createAccountWithSeed always, init, trade then close it after (so no need a second keypair which multiplies the fees by two!!!)? Seems lighter than the whole other arrangement
ok
My weak guess is that getting people to migrate is a waste of time. Better to save that mental energy for the migration to the new version of the orderbook.
It's not more layers. It's state replicated to PG and served from PG.
nice
Though the next version of serum built by Bonfida will have PDAs for open orders.
lol
more layers = better solution?
Probably the better solution tbh.
I'm optimistic about that as well.
yes, tech debt forever
There's also the postgres plugin that's being worked on currently.
100%. It's just an equally big hassle to deal with the migration though. Associated token accounts took forever.
and that makes the UI quite sluggish
but this seem like a good way to reduce abysmal load on the project serum free endpoint
to close them
Maybe people can still search for existing open orders accounts
And so the UI is still required to do getProgramAccounts?
Agreed that's preferred. But then you need to get everyone to migrate.
Can create account with seed save us all to have a deterministic open orders without any change to the DEX?
the getProgramAccounts to get open orders for a user in the serum sdk seems to take ~5 seconds
So it's like an N to 1 mapping. N history events for 1 account
Scenario is: I want to track interactions with my app. I have the client pass a 'history' keypair that gets turned into an account that stores the meta data of what the interaction was.
Normally you can get around it by using PDAs.
`getProgramAccounts` is really burdensome for the RPC node so if possible, don't use it.
https://project-serum.github.io/anchor/ts/classes/accountclient.html#all
If possible, don't use getProgramAccounts. But if you really need to then, yes, there's a filter.
<@!134416332509675520> Do you happen to know if the Anchor ts library has a filter function I could use similar to: https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getProgramAccounts
Is it possible to turn off the Transaction simulation when sending a tx?
how do I create an AccountInfo in rust from and existing Wallet address? To transfer some Sols to it.
(You'll probably need to `npm uninstall -g @project-serum/anchor-cli` too so that your shell finds the cargo one)
The npm anchor-cli package doesn't work on macs unfortunately, you'll need to install the anchor cli via cargo https://project-serum.github.io/anchor/getting-started/installation.html#build-from-source-for-other-operating-systems
Hello! I'm getting this error: ```
$ anchor --version
Only x86_64 / Linux distributed in NPM package right now.
Trying globally installed anchor.
```
after installing brew, nvm, node, and rust all under a rosetta terminal, applying ```arch -x86_64 {brew|rust|nvm|node}``````npm i -g @project-serum/anchor-cli``` for each binary to accommodate the M1 chip architecture on my macbook air.
```
$ rustup toolchain list
stable-x86_64-apple-darwin
bpf
1.52.1-x86_64-apple-darwin
```
Any assistance is appreciated! : )
Ok, that tip is actually SUPER useful!! Thank you!
One tip, you can experiment with how Borsh serializes things:
```
// Stick this in your program file
// Can run it via vscode
#[test]
fn hmm() {
    #[derive(AnchorSerialize)]
    enum CurrencyType {
        Solana,
        Usdc,
    }

    eprintln!("{:?}", CurrencyType::Solana.try_to_vec());
    eprintln!("{:?}", CurrencyType::Usdc.try_to_vec());
}
```
true, i could add a `claim_prize` instruction üëç
Borsh serializes enums like that one with a single byte. So `Solana` will turn into `0` and `Usdc` will turn into `1`.
Is it actually stored as a string? So I should plan to reserve the min-length string * 8?
Noob question (I'm also new to rust): What size should I allocate for an enum type? 
`#[account]
pub struct SomeAccount {
    pub account_owner: Pubkey,             // 32 bytes
    pub storage_currency: CurrencyType,   // 8 bytes
}

#[derive(Clone, AnchorSerialize, AnchorDeserialize)]
pub enum CurrencyType {
    Solana,
    Usdc
}`
well it could work like real lotteries work. You give each entrant a pda account with its numbers. Who ever is the winner calls your program and by proving its winnings with a pda he gets the prize.
ohh this kind of throws a wrench into my plans then. I've been implementing a lottery example to learn solana/anchor (mostly based on your excellent help and examples in this channel actually haha, thanks üôè ), but doesn't that make something like a lottery impossible then? You have to store all entrants pubkeys and then transfer to the winner..?
This is the funny thing about solana‚Äîyou can't üôÉ You have to pass in every single account your program needs, no dynamic lookups allowed.
truly a beginner question: if my program stores a bunch of PubKeys, how do I then fetch the associated AccountInfo when needed (also inside the program)?
got it. works now.
Ideally the client would have some type of intelligent fallback, e.g., reading the Anchor.toml or just assuming a default path.
This is a bug in the tutorial (will make a PR if no one fixes it sooner), the client.js file expects you to have a `ANCHOR_WALLET` env var (further on you'll run things with e.g. `anchor test`, which sets it for you). Try doing `ANCHOR_WALLET=~/.config/solana/id.json node client.js` for now.
it is the client.js in anchor/examples/tutorial/basic-0
have errors running the example:

‚ûú  ~/Code/anchor/examples/tutorial/basic-0 git:(3d21d33) ‚úó node client.js
node:internal/fs/utils:634
    throw new ERR_INVALID_ARG_TYPE(propName, ['string', 'Buffer', 'URL'], path);
    ^

TypeError [ERR_INVALID_ARG_TYPE]: The "path" argument must be of type string or an instance of Buffer or URL. Received undefined
    at Object.openSync (node:fs:487:10)
    at Object.readFileSync (node:fs:396:35)
    at Function.local (/Users/dsu/Code/anchor/examples/tutorial/basic-0/node_modules/@project-serum/anchor/dist/cjs/provider.js:154:92)
    at Function.local (/Users/dsu/Code/anchor/examples/tutorial/basic-0/node_modules/@project-serum/anchor/dist/cjs/provider.js:38:35)
    at Object.<anonymous> (/Users/dsu/Code/anchor/examples/tutorial/basic-0/client.js:8:36)
    at Module._compile (node:internal/modules/cjs/loader:1108:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1137:10)
    at Module.load (node:internal/modules/cjs/loader:973:32)
    at Function.Module._load (node:internal/modules/cjs/loader:813:14)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:76:12) {
  code: 'ERR_INVALID_ARG_TYPE'
}


//////////////////////////////////////////////////////////////////////////////////////////

thank you! ‚ù§Ô∏è
You can call `.to_account_info()` on the `Signer` (and lots of other anchor types)
is there a way to convert between  `anchor_lang::prelude::AccountInfo`, and `anchor_lang::Signer`. I have Signer in the instruction accounts struct, and I'm trying to add that account as `account_infos` for the `invoke`.  
I've tried simply doing the `.into()` , but no good. üò¶

I know I can work around that with just turning it to  `AccountInfo` in the struct and adding the `#[account(signer)]`, but I thought using Signer looks a bit neater. üòâ
```
[package]
resolver = "2"
```
Maybe try mvines's suggestion to use resolver-2 https://doc.rust-lang.org/cargo/reference/resolver.html#feature-resolver-version-2
Maybe rrelated https://github.com/solana-labs/solana/issues/20761
https://github.com/solana-labs/solana/issues/21067
üòÑ
i think i'll just add a second program
i see, well if i do i am able to compile the code, but then every instruction will fail to execute with the following error:
`'ELF error: Multiple text sections, consider removing llc option: -function-sections'`
```
default = ["cpi"]
```
Add it as a default feature
I have it in Cargo toml. Do I need to enable it inside the lib res as well?
Did you compile with the feature above?
Getting ‚Äúcould not find CPI in crate root‚Äù
I see! Will do that - thanks Ser ‚ù§Ô∏è
Each of which has a 4kb limit
No you just (presumably) create new stack frames.
i see, by moving the code into separate functions, I can use the heap memory instead?
You'll need to compile with features = ["cpi"]
And dong `#[inline(never)]`
Stack overflow. Can you try extracting the code into separate functions?
Hi! My program is failing when I try to do 5-6 token transfer CPIs in the same transaction, with the error of ` Access violation in stack frame 5 at address 0x200005ff8 of size 8 by instruction #39616`. Is there a way i could resolve this?
That should do it.
`crate::cpi::initialize_distributor(cpi_ctx, ...)`
I tried CPI first but couldn‚Äôt figure out how to CPI my own program
`use anchor_lang::InstructionData` for those wondering.
Confirmed it is not so you need to import it.
Trait in prelude was the issue.
No `try_accounts` is the only way to execute the initializers. The alternative would be to cpi to the same program (and waste compute but may look prettier)
That should work. Maybe the trait is not in the prelude?
feel this is the completely wrong direction. is there another more convenient way to execute the account inititalizers, then manually calling try_accounts?
in the above example ix.data() can't be resolved. I was hoping that this method would return the instruction encoded as  Vec<u8>
```
  pub fn initialize_budget(ctx: Context<InitializeBudget>, args: BudgetArgs) -> ProgramResult {
        let ix = instruction::InitializeDistributor {
            args: args.distributor_args,
        };

        let mut remaining_accounts = ctx.accounts.to_account_infos().as_slice();

        let accounts = InitializeDistributor::try_accounts(
            ctx.program_id,
            &mut remaining_accounts,
            ix.data(),
        )?;

        let ctx = Context::new(ctx.program_id, &mut accounts, remaining_accounts);
        initialize_distributor(ctx, args.distributor_args)
    }

    pub fn initialize_distributor(
        ctx: Context<InitializeDistributor>,
        args: DistributorArgs,
    ) -> ProgramResult {
```
have been trying to use cpi to call my own program, to leverage the already defined init blocks on my other instruction and not repeat myself. somehow can't figure out how to recreate ix_data inside my instruction handler
In a perfect world, one would never use `AccountInfo` or `UncheckedAccount`.
Correct. It's just supposed to be a bit of a warning to the developer, similar to `unsafe {} ` in rust.
got it, thank you
yes, all of those account type structs are just `AccountInfo` wrappers with special behavior if warranted. `UncheckedAccount` has no special behavior or checks
oh so its basically the same thing as AccountInfo then?
Yeah ‚òùÔ∏è  It's just a wrapper around AccountInfo https://github.com/project-serum/anchor/blob/master/lang/src/unchecked_account.rs
(soon, as in when i get this PR's new e2e test passing lol)
soon there will be a `SystemAccount` struct that will be used instead of `UncheckedAccount` for 99% of use-cases
`UncheckedAccount` is a mechanism to pass in any arbitrary public key/address and it will not go through any predefined account validation checks (e.g. if you use `Signer`, anchor ensures its designated as a signing account in the context for you)
what is `UncheckedAccount` for and how is it different than `AccountInfo`?
so the question really is, what is the big difference between the anchor running the validator and solana?
yes
you said it works perfectly fine when you let anchor manage the local validator/deployment?
```
pub fn test_event(_ctx: Context<TestEvent>) -> ProgramResult {
        emit!(MyOtherEvent {
            data: 6,
            label: "bye".to_string(),
        });
        Ok(())
    }

    #[derive(Accounts)]
    pub struct TestEvent {}

    #[event]
    pub struct MyOtherEvent {
        pub data: u64,
        #[index]
        pub label: String,
    }
```
example:
```
it("Test event", async () => {
    let listenerTwo = null;

    let [eventTwo, slotTwo] = await new Promise((resolve, _reject) => {
      listenerTwo = program.addEventListener("MyOtherEvent", (event, slot) => {
        resolve([event, slot]);
      });
      program.rpc.testEvent();
    });

    await program.removeEventListener(listenerTwo);

    assert.ok(slotTwo > 0);
    assert.ok(eventTwo.data.toNumber() === 6);
    assert.ok(eventTwo.label === "bye");
  });
```
can you paste the test code
for me it seems an issue with the websockets of the solana-test-validator
the tests calls the instruction... just hangs forever waiting for the event
yes.
did you deploy the program to your local validator before running the tests?
I was running the test with `anchor test --skip-local-validator` and having the solana-test-validator running locally. 

When I tunred the solana-test-validator off and ran the tests with `anchor test` only worked.

Anyone have any idea why?
<@!464320185327943681>  can you paste the relevant code?
I am trying to catch event I am sending with emit!, with a program.addEventListener. But my tests just hang forever. Am I missing something?
any help would be greatly appreciated!
Thanks!
https://solana-labs.github.io/solana-web3.js/classes/Connection.html#onAccountChange
Can anyone point me in the right direction to how I would subscribe to receive notifications when transactions are made involving a specific solana account?
or bpf
yes


//////////////////////////////////////////////////////////////////////////////////////////

oh, exactly what I was looking for! thanks a lot. ‚ù§Ô∏è
Example https://github.com/project-serum/anchor/blob/master/tests/cfo/Anchor.toml#L29
For testing you can embed at genesis time via the Anchor.toml.
it is in a dependencies list of my program, but `anchor test` doesn't seem to deploy deps before testing
I'm looking to deploy metaplex program, so it's there when I do `anchor test`.
You can use the `--bpf-program` flag in solana-test-validator to give the program an address at genesis.
ok, another noob question... is there an example somewhere how to deploy 3rd party programs to my localnet, that I'm CPIng before tests?
Brilliant! Thanks Alan will have a peek at thag
Can experiment with it be looking at a minting example in the explorer and then snooping the chrome network tab to see what requests the page makes: https://explorer.solana.com/tx/mkCuYSvfe1boMk1q2HpbhtwsfXYFu7fj7G4LPQJLkjcqep4tUf1Y9Z7vuJ9XFAyqUvKASZYuiCeCJgoD88FuKiT?cluster=devnet
Not sure if this is the easiest way, but the `getConfirmedTransaction` rpc call gives you that information already at least sorta parsed:
given a tx ID for the minting of an NFT, I was wondering if there is a straight forward way to derive the NFT address.
Ok, guess I have to do that till the next version comes out. Thanks!
Uffff..... what a mistake lol
So it does indeed exist in the code in 0.1.8, but typescript doesn't know about it unfortunately (yet). You can still use it, just need to tell ts to ignore it probably.
Think you're running into this issue https://github.com/solana-labs/solana-program-library/pull/2484, someone forgot to add that method to the typescript types
I'm using latest version of the spl lib

Anyone know how to do syncNative in js using @solana/spl-token?

The logic is here ‚Üì
https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js#L2250

but I cannot use it
oh, sweet ‚ù§Ô∏è
You can actually use the solana explorer on your local net, just have to put `http://localhost:8899` in the custom field in the cluster chooser dropdown
are there tools that are similar to solana explorer, but for the local net?
One slight trickiness is that when using an `init` attribute, the max size you can use is actually only 10kb, because solana restricts account allocations done via CPI (as opposed to allocating the account with a separate instruction issued by the client). If you want a big account you'll need to do it from the client unfortunately.
thanks!
It's a "lifetime" annotation: https://doc.rust-lang.org/rust-by-example/scope/lifetime/explicit.html
In the same transaction, yeah (not quite the same thing as in the same instruction unfortunately https://github.com/project-serum/anchor/pull/604)
It's allocating the maximum amount of space possible. So not surprising.
Hoping to find a coach too
gm guys, noob question.  What do you call this syntax in rust or anchor? single quote info: `'info`.  Used in struct  `pub struct Create<'info>` and variable `pub authority: Signer<'info>`
Did you ever figure out this issue? Running into the same thing.
I'm trying to deploy a simple anchor smart contract, and I have no clue what I'm doing üôÇ . I think i have it coded, but not really sure how to test it/use it. Would anyone be willing to coach me for an hour or two over zoom.  I'm happy to pay for the time&advice. Please DM me if so.
You can use a PDA with fixed seeds to get the exact same behavior.
It kind of fights against the account model.
**why was state deprecated?
will do ! thanks
ok thanks!
yes it does, you need to need handle the appropriate error or you add a check for the available supply before allowing the user to mint
Not sure but probably. Only option is to probably read the code tbh.
or does canday machine have built in feature?
im kinda noob so can u be little more explicit? that would help a lot!üòä
Can build this into the candy machine or whatever minting mechanism you use.
Deleted at the end of the tx not ix.
im thinking of using db to stopping this, but if u guys have better solutions let me know!
hey anyone knows how to stop nft minting after certain number like 1000? cuz i saw lot of project failing to mint after announced supply.
I thought if you set the balance of an account to zero, it is deleted in the same instruction, no?
So what‚Äôs interesting is a new build doesn‚Äôt trigger a new program address unless I delete/create a new key pair
hmm i dont think u necessarily need to delete the keypair, you could also change the program address but just change the program id in anchor .toml and in declare_id in the rust program
Haha update on above, I ran `rm -rf /Users/flynn/mysolanaapp/target/deploy/mysolanaapp-keypair.json` and just deleted that key-pair and things seem to work fine now!

Is it recommended to just delete that keypair when we want to deploy to brand new program address?
Running into something pretty weird. I did a `solana-keygen new --force` completely by accident and am not getting errors like:

```
Error: Program's authority Some(33yNvSPK5hEtDdzu6q13NfzMoFkectARZa4FSNhRimC9) does not match authority provided DSPHDqyyqX47wx5USdiTPhNstdFSSbqttSymA46oSPyQ
```

So, looks like my *old* program address is still being used. How can I force a brand new deploy to a new program account :o?
Yup, makes sense :).
the only downside <@!163804384193413120> to making it bigger is rent is higher (rent meaning u have to fund the account with some sol to keep it from getting cleaned up at a later epoch)
yep thats right max is 10mb currently though it may get bigger
Looks like you can allocate all the way to 10MB? Correct me if I am wrong. https://docs.solana.com/developing/programming-model/accounts#creating
if you have Vec<String> or something that you need to decide how large to make that
+ 8 bytes for the discriminator
you should set it to the struct size that you define
Changed to `#[account(init, payer = user, space = 128 + 128)]`.

Now curious -- can I make this like as big as I want? What's a decent # to set here if I'm building something like a basic chat app?
Really appreciate your help.
Yo woah!! That worked!!! SO COOOOOL.
So the `TokenAccount.owner` can be anything, but `TokenAccount.to_account_info.owner` must be `token::ID`
and when you read the AccountInfo off that, there's the actual account `owner` too
seems like the TokenAccount struct itself has an owner
i think i got a little confused
thanks!
> I am still able to authorize transactions from that TokenAccount despite the user not being an owner of the account.
correct, thats how the solana program model works. All token accounts (accounts that have token balance) are owned by the token program, and then have an authority that is the user. So the user has full control over the account. The "owner" in this context being the token program is just how it works so that program is the only one that can modify the data in the account
its possible you ran out of bytes. u only have 32 bytes
I am still able to authorize transactions from that TokenAccount despite the user not being an `owner` of the account.
does that matter if the `authority` of the TokenAccount is set to the user?
When I do a TokenAccount init with `#[account(init, seeds = ..., bump, token::authority = user)]`, the token account is still owned by the token program?
Made a lil public gist if that helps :).

https://gist.github.com/farzaa/7d6269db57044a3b85aba04535709b66
Hmmmm same deal `Error: 164: Failed to serialize the account`.
thanks
owned by the *program, you mean?
yea, by doing init, the program will try to init this account and so it will then be owned by the account
maybe try String::from("farza");
Hi, when you do `#[account(init, seeds = ..., bump]` is it implied that the account is set to be owned by the program?
OoOOo interesting.

This works.

```
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
pub struct CustomStruct {
  pub num: u64,
}

#[account]
pub struct BaseAccount {
  pub count: u64,
  pub data_list: Vec<CustomStruct>,
}
```

Then doing 

```
let cs = CustomStruct {
  num: 0,
};
base_account.data_list.push(cs);
```

But, this breaks (when using strings).

```
pub struct CustomStruct {
  pub num: u64,
  pub name: String,
}
```

Then doing:

```
let cs = CustomStruct {
  num: 0,
  name: "farza".to_string(),
};
base_account.data_list.push(cs);
```
Woah!! Going to to test rn üôÇ
you can store an array of custom structs, as long as the struct is serializable. something like this should work. I think you probably need to derive AnchorSerialize and AnchorDeserialize from the `CustomStruct` like i did below

```rust
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
pub struct CustomStruct {
  pub name: String,
  pub image: String,
}

#[account]
pub struct BaseAccount {
  pub data: String,
  pub data_list: Vec<CustomStruct>,
}
```
Gotcha -- looks like it's going to be deprecated so I'll stay away from it :).

On a similar note, I want to be able to store an array of a custom struct on the `BaseAccount` . Figured out how to store a vector of strings. Curious how I could create an array of custom structs!

```
#[account]
pub struct BaseAccount {
    pub data: String,
    pub data_list: Vec<String>,
}
```
ya - this example in particular is out of date - but yes the "program" itself on solana is stateless, but it can interact with any number of accounts which can store and persist data across transactions
Hey all! I thought Solana was stateless but I see a `#[state]` in this example an am tying to figure out how it works  -- would this store the data in the variable across different transactions? 

https://github.com/project-serum/anchor/blob/master/examples/tutorial/basic-4/programs/basic-4/src/lib.rs
yes that solved it, thank you
Ok, you also need to tell node to look for global packages (kind of surprising). You can do e.g. `NODE_PATH=$(npm root -g) anchor test`, or install the packages locally, not globally
ok, so I did that, and then ```npm install -g``` 'd a few other packages. Then it came to ```Error: Cannot find module '@project-serum/anchor'``` and i tried npm install -g on that, but it still ist complaining
Yeah, you'll need to do something like `npm install -g ts-mocha`
Well, i think I have ts-mocha 8.0... but I have mocha 9.1.3, earlier it's been causing some conflicts
i get nothing
i guess not üôÇ
Do you have `ts-mocha` installed? If you do `which ts-mocha`, what do you get?
when i try to run anchor test I get 
```Failed to run test: ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts: No such file or directory (os error 2)```
assuming you are using anchor - something like (general example) - you just have to pass the existing account in as on of the accounts in the ix
```javascript
    return program.rpc.InstructionName(args, {
      accounts: {
        counter: new web3.PublicKey(existingPublickey),
      }
    });
```
where you can get existing public key from a string like that
nvm i'm an idiot, i forgot I switched to my local validator üôÇ
That should actually work (`Mint` is smart enough to know it should be owned by the spl token program)
How can I use the `Accounts` struct to load an deserialise an account not owned my my program, for example, I want to load a mint account.
```
pub base_asset_mint: Account<'info, Mint>,
```
however this errors out as my program is not the owner of the mint account
Ah -- this makes good sense. But, been tryna hack something together that does this -- and, no dice.

Any examples of something like this?
instead of generating a new keypair, you can just pass in an existing one and the program will be able to modify that existing one (assuming it owns that account) - basically each transaction u have to list all of the accounts that the transaction may read or modify
Double checking! 

Currently following the counter code in the blog post below.

CMD + F `base_account.count += 1;` to see the program.

And, in my web app I do: `baseAccount = Keypair.generate();` 

So -- I assumed that was functioning as expected where every time I refresh the page -- the counter resets (since it's a brand new account). 

Now trying to kinda see, "Okay, how can I store the counter data on-chain such that *anyone* come in, connect wallet, and increment the counter".

https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291
https://project-serum.github.io/anchor/tutorials/tutorial-1.html#clone-the-repo when yo ufollowed the first tutorial did the data you updated disappear when you switched wallets?
you would just store the counter on chain and increment it with an increment action and then fetch the data to display it
Yeah, exactly! üòÑ
you mean you want a single COUNTER for everyone who signs
maybe i misunderstood sorry
oh
but the problem is, someone will just bot it as soon as they see this
so you would have to have your own server that pays transaction fees or something and send an api request to it
you cant because you need a signer to interact with a dapp
I have a "counter" program built w/ anchor deployed to the testnet and also have a basic react app that interacts w/ it üöÄ.

As expected, every time I refresh the page a new keypair is generated for the account and the counter is refreshed back down to 0.

If I wanted to have a "global counter" where anyone could come to my web app, connect wallet, and increment the counter, what would be the path towards doing that?
Makes sense, ty üôÇ
state is deprecated and this should be a pr to remove
Also, noticed here the docs say 

https://project-serum.github.io/anchor/tutorials/tutorial-3.html#next-steps

`Up until now, we've treated programs on Solana as stateless. In the next tutorial we will learn how to add a global state to our program.`

But the next tutorial actually goes over errors.

If anyone has an example of a how to add a global state drop it here :).
Perf -- will do :).
Have you walked through the PaulX tutorial? I would look through that first, (or 2x like I had too), then look at the Anchor/test/escrow folder to see how a client looks.
AHHH I gotcha!

So, when users interact w/ a dapp do they essentially trust creators to efficiently create accounts for them in the program? (since dapp users need to pay rent for their accounts -- yah?)

Ex -- I'm using an escrow dapp, this escrow dapp creates accounts for me, I pay rent on these accounts, I assume the dapp does this efficiently. 

(Mainly just trying to see if I have a big misunderstanding in how it all works out).
There are various types of addresses; one type is a public key, but there are also "program-derived addresses", which *aren't* public keys (may have to do some doc reading here‚Äîhappy to explain further, lots of posts about this in the discord)
Accounts are blobs of storage/lamports and live at addresses (so addresses and accounts are separate concepts in solana).
Would anyone be able to explain Solana accounts vs Ethereum addresses?

Read all the Solana docs on accounts but what's tripping me up is -- is the "account" attached to a users public address where they have one account per public address? 

Trying to create a mental model. Is the mental model of -- "a Solana account is like an ETH address, except it lets you store stuff on it like a file" correct, if so where is it wrong? Ty üôÇ


//////////////////////////////////////////////////////////////////////////////////////////

Passed it in, get the same thing
If you have some time later for a quick example i would appreciate it, i'm struggling here üôè
i git cloned the swap program from project-serum repo                                                                                                                                                                  
and i tried the verify command to verify the program deployed on Solana and my local code matches,                                                                               
 but the command returns no account found, does that mean they dont match? or something else. Thanks
Not sure if this is your problem, but I think you need to pass in the bump as an argument like here: https://github.com/cqfd/anchor-visitors/blob/master/tests/visitors.js#L25
Hi, I'm trying to implement an instruction to initialize a program like the following, but I'm not sure of the correct way to sign the transaction. I'm probably missing something obvious

Instruction
```
#[derive(Accounts)]
#[instruction(bump: u8)]
pub struct Initialize<'info> {
    #[account(
        init,
        seeds = [
            b"TestContract" as &[u8],
        ],
        bump = bump,
        payer = user
    )]
    pub contract: Account<'info, PredictionMarket>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,

    pub underlying_mint: Account<'info, Mint>,
    pub mint_a: Account<'info, Mint>,
    pub mint_b: Account<'info, Mint>,
}
```
RPC Call that fails:
```
const marketAccount = anchor.web3.Keypair.generate();
....
const tx = await program.rpc.initialize({
  accounts: {
    contract: marketAccount.publicKey,
    user: provider.wallet.publicKey,
    systemProgram: anchor.web3.SystemProgram.programId,
    underlyingMint: underlyingMint.publicKey,
    mintA: mintA.publicKey,
    mintB: mintB.publicKey,
  },
  signers: [marketAccount],
});
```

Error when attempting RPC:
```
error:
       Is initialized!:
     Error: failed to send transaction: Transaction simulation failed: Error processing Instruction 0:
 Cross-program invocation with unauthorized signer or writable account
      at Connection.sendEncodedTransaction (node_modules/@solana/web3.js/src/connection.ts:3668:13)
      at processTicksAndRejections (internal/process/task_queues.js:95:5)
      at Connection.sendRawTransaction (node_modules/@solana/web3.js/src/connection.ts:3628:20)
      at sendAndConfirmRawTransaction (node_modules/@solana/web3.js/src/util/send-and-confirm-raw-tran
saction.ts:27:21)
      at Provider.send (node_modules/@project-serum/anchor/src/provider.ts:114:18)
      at Object.rpc [as initialize] (node_modules/@project-serum/anchor/src/program/namespace/rpc.ts:1
9:23)
```
if you can't find that, swing wildly through source code for stuff.  about to hop on call - can give a solid example after.
oh shoot you already mentioned that before, sorry thanks
`from_account.try_account_ref_mut()?.checked_sub_lamports(lamports)?;`
I think I got what you were saying about PDAs, thanks for the explanation. How would you do this in anchor tho, `AccountInfo` doesn't seem to have the `checked_` functions you mention and google gives a whole 3 results üò¨
Very cool, thanks for explaining that üôè
Having the debited accounts' address sign is a requirement of the system program - not a requirement of Solana .  <:mindblown:334058415385083911>
No signer needed - your program owns the Lottery account so it's allowed to debit it, signature or not.
yep, just use `checked_sub_lamports` and `checked_add_lamports` on a mutable reference to the accounts' data.
Thanks for the response! I'm really new to solana so this goes a little bit over my head right now, but I'll dive into the things you said. For reference, I'm just trying to build a simple lamport lottery example for learning, it fails in this claim_prize instruction:
Mm, interesting!
and if there is data allocated, it must be in "allocated but pre assign" state - because there is simply no reason for a system program owned account to have data.
If your program owns the account, it'd hit an error right after that when system program attempted to directly debit an account it doesnt own.
Huh, I wonder why solana has that "must not carry data" restriction
If you're fiddling with lamports on an account with data, I assume that your program "owns" it.  Thus, you can just debit the lamports directly - no need to use the system program. 
`from.try_account_ref_mut()?.checked_sub_lamports(lamports)?;`
<:mindblown:334058415385083911>
see runtime policy as described here: https://docs.solana.com/developing/programming-model/runtime#policy
note, you have to credit an account the same amount, or your operation will fail. One check not described in that runtime checks section is that with regards to lamports, credits - debits == 0
oh thank you!
any suggestions on setups here?
it appears that a PDA with data can receive lamports, but not send it, is that correct? I got ```Transfer: `from` must not carry data',``` when using `invoke_signed`
No it did not make sense, I wanted to check the ownership of a passed account, that might have been unitialized
which line are you talking about?
Else I'll just fallback on AccountInfo, I'm pushing üòÅ
`owner = Pubkey::from_str(metadata::METAPLEX).unwrap() || Pubkey::None`
Or maybe there is a way to represent that condition (ADDR || None) in a anchory way?
yes
Thanks for this morning help, did solve my issue. No I have another issue, is that when I pass a mint that does not have metadata, there is an ownership check that fails for this `Account`, was that why you suggested to use `AccountInfo`?
ser
or deserve it
if you bought a MAC you can afford it
go and rent a server and use remote IDE
so basically, re do everything but on rosetta
solana doesn't support ARM
üò¶ here we go
This was published just a few days ago and does a full walkthrough: https://dev.to/nickgarfield/how-to-install-solana-dev-tools-on-an-m1-mac-kfn
No, kidding, you haven't set up solana correctly (it's tough on an M1). Are you building it from source?
Godspeed
yeah
M1 mac?
```
‚ûú  meme-num solana-test-validator

Ledger location: test-ledger
Log: test-ledger/validator.log
‚†ô Initializing...
[1]    53232 illegal hardware instruction  solana-test-validator```
any advise on: `Unable to start test validator`?
That's basically the anchor way (at the end of the day you need to use invoke/invoke_signed one way or another). You could wrap the calls though, like how anchor wraps the spl token program? https://github.com/project-serum/anchor/blob/master/spl/src/token.rs
Hi Friends. Any idea how I can call programs that are not built with Anchor. I am trying to use Metaplex's metadata program. At the moment, I am using Solana program's invoke and it works perfectly fine. But I am trying to find a way to make it the 'Anchor way'. Any suggestions?
interesting
Yep. Another funny example of the solana thing where you need to pass in *every* account you want to use, including accounts for programs you're going use via a cross-program invocation‚Äîand creating an account requires CPI'ing to ask the system_program to create the account.
The error is a little opaque, it gets raised by the code generated by the `#[derive(Accounts)]` macro
that solved it
why do i need to do that tho?

initing accounts require system_program?
You're doing something (init-ing an account?) that requires that you pass the `system_program` as an account
```error[E0425]: cannot find value `system_program` in this scope
  --> programs/meme-num/src/lib.rs:15:10
   |
15 | #[derive(Accounts)]
   |          ^^^^^^^^ not found in this scope```

why am i getting this issue?
Huh, yeah, looks like you do (I guess because Loader gives you `load_mut`?)
Thanks
Ok I think I was doing something that did not make sense. I was using loader, but I'm as good using Box<Account<'_, Metadata>> ? Now having some issues so maybe I better fall back on AccountInfo and deserialize myself
Humm
not sure if that works when the root isn't a workspace
or link the github folder as a crate
Yep agreed
since this isn't a crate
Thing is I was blowing the stack, seemed like a good idea, but now it does not anymore
just copy pasta the struct and traits
no point forcing it in another abstraction
Seems like a good suggestion, thanks ser
I've rewritten a matching zero copy version, not sure if that's correct, might also be my issue
just the struct they do have for metadata
no Loader, no nothing
you'd be better off loading the data yourself
I don't believe it matches the zero copy
When using `Loader` do I need to be the owner of the account? I suspect I have to but I'm not sure, I'm trying to load the metaplex associated metadata account
see this https://www.notion.so/Debugging-Custom-Anchor-Errors-b8540dd418c44a4e939ab17c56a3fd3b
Hi, who pays the fees when doing a transfer, is it the signer? I am writing a function where a user transfers tokens to a token account owned by a PDA. I have marked the "user_account" as signer and included their token account in the ctx arrays. I am generating a keypair in the js file to act as the "user_account". When I try to get them to sign the transaction I get |``Error: failed to send transaction: Transaction simulation failed: This account may not be used to pay transaction fees``Am I making an error in the account constraints or in the keypair assignment here? Do I have to do more than just mark the account as signer and have them sign on the js side?

Running client.
Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7 
    Program 5cai2qmwd3cdttepNRRmyxF5C8hUewdAYr9ECyu4nmLT invoke [1]
    Program 11111111111111111111111111111111 invoke [2]
    Program 11111111111111111111111111111111 success
    Program log: Custom program error: 0xa7
    Program 5cai2qmwd3cdttepNRRmyxF5C8hUewdAYr9ECyu4nmLT consumed 9003 of 200000 compute units
    Program 5cai2qmwd3cdttepNRRmyxF5C8hUewdAYr9ECyu4nmLT failed: custom program error: 0xa7
Translating error SendTransactionError: failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0xa7
but i get this error
so i did this :
1- cd anchor/examples/tutorial/basic-1
2- anchor build
3- anchor deploy
4- npm install @project-serum/anchor
5- solana airdrop 100
6- ANCHOR_WALLET=/home/ADev/.config/solana/id.json node ./client.js
I read tutorial-1 and test, it's work fine with test command but i can not connect to program ( smart contract ) with my client.js file
what is the right way to get a `TokenAccount` (anchor_spl) from an `AccountInfo`?
got that via solana logs. but got another error, trying to debug what's inside user. getting this `anchor_lang::Signer<'_>` cannot be formatted using `{:?}` because it doesn't implement `Debug`
ahh thanks, that's a toughie
If you want to transfer data across CPI, you need to write data into an account and read that on the caller end.
Unfortunately you can't get the msg log on that end.
at the CPI caller's end
yes
Do you want it inside the smart contract on the caller end?
Sorry for the noob qn haha
How do I get the error message from: `solana_program::program::invoke(&ix, &account_infos);`
Yes. They are in `.anchor/program-logs/`
maybe similar question to jerry haha
hey guys! glad I've found this discord! I am in need of some help. how to I show msg log from rust in anchor test? is it possible?
You have to log a message and parse the log.
Right now I am getting only failed: invalid instruction data from CPI, but that's hard to debug.
Hi, does anyone know how to return error messages from a CPI call?
Hey guys,
I'm trying to deploy a contract that i've edited to devnet to test my proposed changes. I've made my edits, and then have done:
```
$ anchor build
$ anchor deploy --provider.wallet ~/.config/solana/id.json
Deploying workspace: https://api.devnet.solana.com
Upgrade authority: /home/tags/.config/solana/id.json
Deploying program "nft-candy-machine"...
Program path: /home/tags/metaplex/rust/target/deploy/nft_candy_machine.so...
Program Id: GQgW23ZreWERRBamQisC1cXjHfgKd77E1XrE1N6pw5Wn

Deploy success
```
Now i'd assume that i was good to go, but when I update my dapp to use this ProgramID vs the original's, we fail at fetchIdl.

If I run the anchor command, i get this:
```
$ anchor idl fetch GQgW23ZreWERRBamQisC1cXjHfgKd77E1XrE1N6pw5Wn 
Error: Account not found
```
but i can't seem to figure out what i'm missing from deployment for the not found message.


//////////////////////////////////////////////////////////////////////////////////////////

thanks man
The discriminator is always at the start
For now
is 0 to 8 the correct slice, always?
I dont care about the amount right now, just trying to send sol in JS
Or however much that 50000000 number is in sol
Here is my code. I just want to send 1 sol to my wallet in localnet

Are you waiting for the airdrop to confirm? There's a nice code snippet above with `provider.connection.confirmTransaction` in it. Tbh I'm a little fuzzy on when it's necessary to wait confirmations like this though.
*do
Weird... I just airdroped that account some sol... still getting the error. I'll play around and see what I can dio
Does this mean the account I tried to send money has never received money before?
Unhandled Rejection (Error): failed to send transaction: Transaction simulation failed: Attempt to debit an account but found no record of a prior credit.
anchor keys list is better haha
yeah just solana address -k "path to keypair of program" and copy that inside declare id
Now they match. Excellent!
Yep, that was it, I had not read the key in correctly initially
TY!
I believe anchor stores keypairs used to generate the pubkey for the program to be deployed, which are stored under `target/deploy/yourprogram-keypair.json` -- so perhaps you could try to replace that keypair with the one that you used to generate the pubkey stored in the `define_id!`?

also, you can check what keys are loaded using `anchor keys list`
Any assistance is appreciated!
Anchor deploy seems to deploy to the same address each time on the recent versions of anchor, but it 's not the same address as the "define_id!" macro.
Does anyone know the anchor cli params in order to deploy a contract to the address specified by "define_id!" ?
Hi, quick question:

Sorry, I guess this is a general Solana question, but if anyone is curious, this is what I found
<@!501570363566587905>
i am trying to use serum_swap 0.4.0 and this error comes up, what to do

Does anyone know how to transact 1 Sol between wallets completely in the anchor JS
I would expect that to work, yhes.
should I be able to decode instruction data as easily as this `coder.instruction.decode(ix.data)`?
somehow I am getting different `sighash` from `ix.data` and `coder.instruction["sighashLayouts"]`

to verify I am doing this
```
  let sighash = bs58.encode(ix.data.slice(0, 8));
  console.log(sighash);
```
damn that was it. I had updated to 0.17.0 in my `package.json`. Didn't think to upgrade the CLI version as well, but doing that resolved this. Thank you!
Aha, what does `anchor --version` say?
Yes
https://support.solanium.io/support/solutions/articles/69000377685-error-processing-instruction-1-custom-program-error-0x1#:~:text=If%20you%20receive%20the%20error,to%20pay%20for%20transaction%20fees.
Do you have 3 devnet sol in the wallet you are deploying from?
Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
oh wow! good call. Yeah it has `isSigner` set to `false` for `alice`
i have 3 sol
One thing you can double check is the target/idl/faktor.json idl file and make sure it says that `alice` has `isSigner: true` (if it doesn't, then your anchor cli is doing something wrong during the build step)
I've gotten that error before'
Ususally mans you don't have sufficient funds
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
do you have problem with deploy on devnet or i just have problem ?
Your test actually passes on my machine, is that expected?
I think the general question (which I've seen pop up a few times in the Discord) is around what the best practices are for testing programs that require different signers for different transactions.
But I've only ever been able to get the test to pass when the `alice` param in `accounts` is set to `provider.wallet.publicKey`. If I try to sign the transaction from another account (like Alice or Bob), the transaction complains that the signer is unknown:
```
  1) faktor
       Creates a counter:
     Error: unknown signer: 9qX4omJtUxFo3rGWxfPGWCwfe58QNvGKbbTFpYXRZirj
      at Transaction._addSignature (node_modules/@solana/web3.js/lib/index.cjs.js:1106:13)
      at /Users/garfield/Developer/faktor/node_modules/@solana/web3.js/lib/index.cjs.js:1080:12
      at Array.forEach (<anonymous>)
      at Transaction._partialSign (node_modules/@solana/web3.js/lib/index.cjs.js:1077:13)
      at Transaction.partialSign (node_modules/@solana/web3.js/lib/index.cjs.js:1068:10)
      at /Users/garfield/Developer/faktor/node_modules/@project-serum/anchor/dist/cjs/provider.js:82:16
      at Array.forEach (<anonymous>)
      at Provider.send (node_modules/@project-serum/anchor/dist/cjs/provider.js:81:14)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at async Object.rpc [as createCounter] (node_modules/@project-serum/anchor/dist/cjs/program/namespace/rpc.js:11:31)
      at async Context.<anonymous> (tests/faktor.js:28:5)
```
And the test looks like this:
```js
const assert = require("assert");
const anchor = require("@project-serum/anchor");
const solana = require("@solana/web3.js");

const { LAMPORTS_PER_SOL } = solana;

describe("faktor", () => {
  // Setup test environment
  const provider = anchor.Provider.local();
  const walletAlice = anchor.web3.Keypair.generate();
  const walletBob = anchor.web3.Keypair.generate();
  const program = anchor.workspace.Faktor;
  anchor.setProvider(provider);

  // Aidrop SOL to Alice and Bob.
  before(async () => {
    await provider.connection
      .requestAirdrop(walletAlice.publicKey, LAMPORTS_PER_SOL)
      .then((sig) => provider.connection.confirmTransaction(sig, "confirmed"));
    await provider.connection
      .requestAirdrop(walletBob.publicKey, LAMPORTS_PER_SOL)
      .then((sig) => provider.connection.confirmTransaction(sig, "confirmed"));
  });

  it("Creates a counter", async () => {
    const counterKeypair = anchor.web3.Keypair.generate();
    const bnAmount = new anchor.BN(1234);
    await program.rpc.createCounter(bnAmount, {
      accounts: {
        counter: counterKeypair.publicKey,
        alice: walletAlice.publicKey,
        bob: walletBob.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      },
      signers: [counterKeypair, walletAlice],
    });

    // Validation
    const counter = await program.account.counter.fetch(
      counterKeypair.publicKey
    );
    assert.ok(counter.count.toString() == "1234");
    assert.ok(counter.alice.toString() == walletAlice.publicKey);
    assert.ok(counter.bob.toString() == walletBob.publicKey);
  });
});
```
I don't think it's making it that far. The error is getting thrown from `Transaction.partialSign` when adding the signatures. The contract code is setup like this:
```rs
use {
    anchor_lang::prelude::*,
    std::cmp::min,
};

declare_id!("8BHW97BHkSKUHjTxHd6g7eGRfLxQfmXniEMcAskxQTKi");

#[program]
pub mod faktor {
    use super::*;
    pub fn create_counter(ctx: Context<CreateCounter>, initial_count: u64) -> ProgramResult {
        let counter = &mut ctx.accounts.counter;
        counter.count = initial_count;
        counter.alice = *ctx.accounts.alice.key;
        counter.bob = *ctx.accounts.bob.key;
        return Ok(());
    }
}

#[derive(Accounts)]
pub struct CreateCounter<'info> {
    #[account(init, payer = alice, space = 8 + 8 + 32 + 32)]
    pub counter: Account<'info, Counter>,
    #[account(mut)]
    pub alice: Signer<'info>,
    pub bob: AccountInfo<'info>,
    #[account(address = system_program::ID)]
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Counter {
    pub count: u64,
    pub alice: Pubkey,
    pub bob: Pubkey,
}
```
Is it signing the transaction?
Updated to 0.17.0 and using the `Signer<'info>` syntax now. But still running into an issue when the signer isn't recognized if they're not the `provider.wallet` account. 
```
Error: unknown signer: 7U39RyZDpmo4AKa39GUZF1HahqHa9rcsYiZNLiATK5qu
      at Transaction._addSignature (node_modules/@solana/web3.js/lib/index.cjs.js:1106:13)
```
In particular, trying to write tests for a program where different instructions have different intended signers. My tests currently use `anchor.web3.Keypair.generate()` to generate wallets for Alice and Bob roles and then airdrops them some SOL before trying to submit transactions. But these wallets don't seem to be recognized as valid signers for some reason.
Try 0.17.0
ah! `v0.16.0` right now. Will update and try again! Thanks
What version are you on?
when writing tests, I keep running into the `Error: unknown signer:` error when using `Signer<'info>`. After switching over to the `#[account(mut, signer)]` syntax, those issues resolved but then I began running into issues with CPIs: `Cross-program invocation with unauthorized signer or writable account`
There is no difference. The `Signer` type is preferred though. Ideally programs have no usage of `AccountInfo` since it's more error prone.
<@!367907046177112064> I have had that question too. Does someone know?
What is the user of the user of the `Signer` type? Is there any difference between doing this:
```
#[account(mut, signer)]
pub user: AccountInfo<'info>,
```
versus this:
```
#[account(mut)]
pub user: Signer<'info>,
```
Try this:
```
anchor idl fetch cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ --provider.cluster Mainnet
```
Have you initted the IDL?
Error: Account not found
anchor idl fetch cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ
who can get idl with command ? only owner ?
why ?!
Error: Account not found
anchor idl fetch
Got it, many thanks
See the rust client here as an example of how to use those types https://github.com/project-serum/anchor/tree/master/client
Yes the types needed are all generated via the macro.
I'll read both then
If your program owns the account you're decrementing, fwiw, it's easier, no need to CPI, you can just snag some lamports and move them: https://discord.com/channels/889577356681945098/889702325231427584/894620241945055262
ah I should have searched the channel first, thanks man
I do lol, from a few days ago: https://discord.com/channels/889577356681945098/889702325231427584/893186284888129546 This is an example of transfering lamports from an account not owned by the program, so it has to cpi to the system_program to do the transfer.
Does anyone have an example of a contract that does a lamport transfer?
ah okay that clarifies things, thanks!
is there a way for code to be called when the system program transfers SOL into an account? (an obvious way to do it is to poll the balance, but I'm wondering if there is something more efficient I can do)
What is a good way to generate rust binding for IDL file? I know we can trivially read it and build client using JS, but is there anyway to do it in rust? Say we want to build a CLI in rust
You mean necessary for the rcp call to work?
not "helper", necessary steps
Ah, those are a helper feature‚Äîthey're a bunch of extra instructions that will run before your actual rpc instruction (so the overall transaction will do <all the instructions> + <your rpc>)
they seem to be unrelated to the function being called..
what about instructions as in here
thanks!
Signers lets you sign the transaction using the private key of one of the accounts you're passing in.
Accounts are on-chain storage that live at addresses (public keys). When you use accounts from web3.js, you're referencing on-chain storage that your program will need‚Äîan odd thing about solana is that you have to pass in *all* on-chain storage/accounts your progarm needs, from the client (as their addresses), no dynamic lookup of on-chain storage allowed.
where can i find more information about accounts, signer and instructions? (i see them being passed on solana web3js but not sure about their roles)
i see. i tried that. is this working as expected?
Do you mean the test validator? ``solana-test-validator``
how do you run a solana cluster locally?
thanks haha
the timing
const info = await provider.connection.getAccountInfo(first_user.publicKey);
`await provider.connection.getAccountInfo(somePubkey)`
err how do I get accountInfo from a pubkey? I just want to check how many lamports an account has in anchor test
<@!501570363566587905>  <@!124564013970358272>  can you check this ?
<@!847130012879814668>  do you have any suggestion ?
not working, what happen for you ?
Sorry man... I tried
It is still bugging out?
i set it but not working, it's bug
or you can set the env var in a .env file
so ? what is problem ?
yea
i'm run the client.js with this command ANCHOR_WALLET=/home/ADev/.config/solana/id.json node ./client.js
Yup, that's it
I'm checking though
Ok, you need to set an env var to that keypair path... I think its ANCHOR_WALLET
solana config get ? yes it's return default keypair
Does that return a path?
(I think... I'm looking for the exact comand)
Oh, you are running client.js. Haha, sorry. You need to find what your default keypair is by running solana config get keypair
the test command work fine
check this code ! it's not working
This is just a stab... I don't have all your code in front of me... but that is my guess
Ok, what I think I had to do to get it to work is call myAccount in the scope above the first it(). The problem when I ran it was myAccount went out of scope after the first it() then when the second it() tried to get the same myAccount, it wasn't there. I think that's why you are getting that error. I am pretty sure it's just a JS thing
in my client.js ? Yes, not working
Do you also run the second test as in program.rpc.update later in the JS code
i explain more details here

<@!751115771786035273> What does your JS code look like?
<@!134416332509675520> It looks like your error handling PR is working!!!!
why i get this error in Tutorial-1 ? "Error: 167: The given account is not owned by the executing program"
yeah like you said, you have to do both for the lottery account as well as the claimer so everything adds up at the end
Obviously in your case, `checked_sub`
Fantastic, that was it, thanks a lot üôå
That's a coincidence, because the `provider.wallet` is paying for the transaction *and* you're using it as the `payer` for the rent exemption. Two different payments.
Hey all, are there any example programs / projects? not necessarily a tutorial but just some "cool" stuff we can build on the blockchain

e.g. build x in anchor

im just getting into web3 (from a strong web2 background) and looking for small-ish projects to build / practise on
Thanks, that makes sense. So you need to mutate the signer to transfer SOL. However, when I removed the the attribute the tests still work. Is that just a symptom of the testing environment?
Because the account is used to pay for the rent exemption SOL for the account being `init`ialized.
I was going through the Anchor exampls, basic-0, basic-1, etc. I noticed that each example added the `mut` attribute to the signer account. However, none of the examples ever modify that account. Is there any reason that is being done in the examples or is it simply an oversight?
```
        let lamports = the_acct_info.try_borrow_mut_lamports()?;
        **lamports = lamports.checked_add(amount_to_add).unwrap();
```
Got this one üôÇ
documentation for Rust for kicks as well
https://docs.rs/anchor-lang/0.17.0/anchor_lang/
Thank you very much
It's not great, but best we got
https://project-serum.github.io/anchor/ts/index.html
oh okay thanks, btw where can I find the documentation for these commands?
You can then airdrop the second account lamports and it can pay for whatever you want
No, look at the code. It generates a keypair with a public key and private key
This only generates a public key right? Can this account still sign and pay for a transaction?
Do you have any example of transfer sol with program ? i want to transfer 1 sol to program then divide it and send to 2 wallet
<@!96804729597734912>
create a const secondUser (or whatever) = new anchor.web3.Keypair,generate()
Okay, thanks
*yourself
I just went through and you are right. Sorry. I don't know how I know that then, but I do know that's what you should do... test it out yourselv
Excuse me, if I am trying to simulate a second paying user for anchor test, how should I do it? I have used provider.wallet.publickey to sign the first transaction and want to use a different user to sign the second.
You will change it to your program id after you deploy it
i read all tutorials ! but i did not see anything about it, where you see it ?
Not really, just follow the tutorial. It tells you when to change declare_id!(asdfasdfasdfasdfasdhfasdf)
Aha, so we can not remove it ? or change it ?
And, yea. It will be in every anchor program
is there any document about this ?
No, don't worry about it now.
i should remove it ?
this is in Tutorial Examples
but this is in my program ! i have this before deploy !
If you fail to write it down or something
The deploy will let you know what the id is. Also, there is a json file it spits out that also has the id
That is where after you deploy your project, you put its id
what this mean ? declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");


//////////////////////////////////////////////////////////////////////////////////////////

What do your errors look like?
i want to send "all" the NFTs from one wallet to another
no, it was created days ago
anchor idl init -f <target/idl/program.json> <program-id>
before fetch, first must create account and save idl on it
Okay
If you find the answer to your problem, will you post it? I'm curious now
This one is above my paygrade. I haven't done much with the anchor cli... just anchor test, anchor deploy, and stuff like that
$ solana account DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU

Public Key: DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU
Balance: 0.00114144 SOL
Owner: BPFLoaderUpgradeab1e11111111111111111111111
Executable: true
Rent Epoch: 0
$ anchor idl fetch DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU
Error: Account not found
no i try to get idl in terminal
So is your problem that you are trying to access the program in your JS through the idl and you are getting an error?
$ anchor deploy
Deploying workspace: http://127.0.0.1:8899
Upgrade authority: /home/ADev/.config/solana/id.json
Deploying program "basic-0"...
Program path: /home/web-request/program/basic-0/target/deploy/basic_0.so...
Program Id: DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU
deploy on localnet
Is that program one deployed on devnet or is it your custom program?
So you are trying to send an NFT created 1 sec prior to another wallet? is fromWallet a keypair?
why it's not return json ?
anchor idl fetch DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU --provider.cluster localnet
Error: Account not found
Program Id: DxUn1nbYVRkYhr772EUa4Yx46pf1U5Ybg85c5qLq6qRU
this is out put of "anchor deploy" command
Does my code even make sense?
and also not why it's failing quite often at the getOrCreateAssociatedAccountInfo part.
I do not really understand why it creates two transactions
```myMint = new web3.PublicKey(token['mintID'])
var myToken = new splToken.Token(
        connection,
        myMint,
        splToken.TOKEN_PROGRAM_ID,
        fromWallet
      );
      // Create associated token accounts for my token if they don't exist yet
      try {
        var fromTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(
          fromWallet.publicKey
        )
        var toTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(
          toWallet
        )
      }
      catch (e) {
        console.log('timeout(?) while getOrCreateAssociatedAccountInfo. Retry. Error: ' + e)
        break;
      }
      // Add token transfer instructions to transaction
      var transaction = new web3.Transaction()
        .add(
          splToken.Token.createTransferInstruction(
            splToken.TOKEN_PROGRAM_ID,
            fromTokenAccount.address,
            toTokenAccount.address,
            fromWallet.publicKey,
            [],
            1
          )
        );

      try {
        // Sign transaction, broadcast, and confirm
        var signature = await web3.sendAndConfirmTransaction(
          connection,
          transaction,
          [fromWallet]
        );

      }
```
So let me show what i have
Great!
I am working on the JS side of Anchor, specifically with regards to NFTs. Happy to take a stab, but fair warning, I probably don't know what I'm talking about haha
Not sure if i am in the right server here. I am searching help for the TS part of anchor.
What i am trying to do is transferring NFTs from one wallet to another. Should be easy, right?
I have a script that somehow works, but it creates two transactions and fails quite often. Does someone know where I could ask questions on it to better understand what's wrong?
https://github.com/maddyonline/anchor-basic-1-example/blob/5a10364a46a1a35878bac15e46ec5d53bbc35e9d/programs/xbasic-1/src/lib.rs#L3
That didn't help. I made sure the declareId is uniform everywhere. Does this Anchor.toml look correct? This is the deployed program: https://explorer.solana.com/address/2j4NMzDYQPLpS2HKLR7EnzPt5MXBt3fT9PeWTvUAznQp?cluster=devnet
```toml
[programs.localnet]
xbasic_1 = "2j4NMzDYQPLpS2HKLR7EnzPt5MXBt3fT9PeWTvUAznQp"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "/Users/maddy/.config/solana/id.json"

[scripts]
test = "mocha -t 1000000 tests/"
```
ohh this is a useful direction I didn't think about, let me make sure!
I'm guessing a bit, but I think you can get this error if you haven't done the `declare_id!` dance correctly‚Äîyour rust program's `declare_id!` needs to match the id you got when you did your deploy, *and* your Anchor.toml needs to match too.
Hello folks, trying my luck here in this channel for a question I asked yesterday. Does anyone see anything wrong with this code? I get `The given account is not owned by the executing program` error even though this seems to be doing exactly as in Anchor docs tutorial `basic-1`.
```javascript
export default function MainApp() {
    const anchorWallet = useAnchorWallet();
    React.useEffect(() => {
        const doIt = async (anchorWallet: AnchorWallet) => {
            console.log("doing it");
            const provider = new anchor.Provider(
                new Connection('https://api.devnet.solana.com'),
                anchorWallet,
                anchor.Provider.defaultOptions(),
            );
            const programId = new anchor.web3.PublicKey(IDL.metadata.address);
            const program = new anchor.Program(IDL, programId, provider);
            console.log({ program });
            const myAccount = anchor.web3.Keypair.generate();
            await program.rpc.initialize(new anchor.BN(1234), {
                accounts: {
                    myAccount: myAccount.publicKey,
                    user: provider.wallet.publicKey,
                    systemProgram: SystemProgram.programId,
                },
                signers: [myAccount],
            });
        }
        if (anchorWallet) {
            doIt(anchorWallet);
        }
    }, [anchorWallet])
    return <>
        <div>hello</div>
    </>
}
```
https://discord.com/channels/889577356681945098/889577399308656662/895200402260242442
oh woah. ignore me. just realized you can do `#[derive(AnchorSerialize, AnchorDeserialize, Clone)]`  above the enum declaration
Does anyone have any examples of implementing the `anchor_lang::AnchorSerialize` and `anchor_lang::AnchorDeserialize` traits on an enum type? (kinda new to Rust üò¨)
For program invocation do I always need to define a puppet programm like there? https://project-serum.github.io/anchor/tutorials/tutorial-3.html#defining-a-puppet-program
I need to call metaplex candy machine. So i need to duplicate definition of its api in my project too?
I'be used Phantom and Sollet in localhost with `solana-test-validator` running
Any idea about where is that error coming from?
```await program.rpc.create({
        accounts: {
          baseAccount: baseAccount.publicKey,
          user: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId,
        },
        signers: [baseAccount]
      });```
And this is the code
I am getting this error `Translating error Error: Signature verification failed`
then `anchor build -- --features coudronnet`
as many as you want
make your own feature
Is there a way to have different complier flags with anchor builds. One for `testnet` and another for `dev/test/main`?
I know, noticed that too. Kind of annoying
`IdlError: Type not found: {"type":{"defined":"f64"}}`
I noticed that the IDL doesn't support `f64`? Is there a reason for this?
Should have a first release this week or next week
The group is me!
I think there is a group working on that, but I don't know where they're at
Is there an easy way to interact with an anchor program with python directly? Or do I need to use something like zerorpc to forward from python to node that then interacts with anchor? TIA!
<@!326107472098099201> Thank you! That is very helpful. I think I need to understand the network better now
oh there is better info here https://docs.solana.com/developing/clients/jsonrpc-api#configuring-state-commitment
what you choose probably depends on how sure you want to be üòÅ
https://solana-labs.github.io/solana-web3.js/modules.html#Commitment
i think its a solana thing for how confirmed the state is when you query it
I have seen various options on preflightCommitment. Does anyone know what this means and why I would choose one over another
const provider = new anchor.Provider(solConnection, walletWrapper, {
    preflightCommitment: 'recent',
  });
From your wallet to somewhere else

In case anyone has been following my stuff (if it's not helpful, I won't spam chat, just feel like it might be helpful to someone) here is how to send a transaction
Is all you have to run
transaction.recentBlockhash = (
        await connection.getRecentBlockhash()
      ).blockhash;
For anyone following my problems hahaha, the blockhash thing is easy
But that is copied straight from the phantom docs... anyone know what is going on?
const signedTransaction = await window.solana.signTransaction(transaction);
It occurs on this line of code
I am following the phantom docs to sign a transaction and I am getting this error Error: Transaction recentBlockhash required
Gotcha. Thanks!
PDA
Find the program address using seeds
Mm, interesting. I'm pretty fuzzy on this tx commitment level stuff, would like to understand it better if anyone has suggestions/pointers
No problem!
Yeah, it's working, thank you very much. I spent a few days to find an issueüòÉ
What does anchor.web3.publickey.findprogramaddress() do?
cut that then run again. anchor test spins up its own test-validator
Yes, I run `solana-test-validator` in the background. And set config to localhost
Are you running a test validator in the background when you run anchor test?
Example 1 and 2 from tutorial  https://github.com/project-serum/anchor/tree/master/examples/tutorial
Like JS
What is your code?
Weird...
Yes, I tried it with Anchor 0.17 the same error
I went through this with someone yesterday. Are you running Anchor version 0.17?
How to change a program owner? And should I do that in general?  When I run examples from tutorial I get an error 0xa7, which corresponds to `AccountNotProgramOwned: 167` ("The given account is not owned by the executing program")
`solana program show ` says than owner is BPFLoaderUpgradeab1e11111111111111111111111
Haha
still cant understand why that would solve though, my brain is limited haha
seems like you fixed a issue with changing the type of commitment
<@!847130012879814668> found this on js web3 docs

Not sure why that solved my issue, but it did
to     const connection = new anchor.web3.Connection(
      "http://localhost:8899",
      "recent"
    );
For anyone interested in my issue, I solved it by changing     const connection = new anchor.web3.Connection(
      "http://localhost:8899"
    );


//////////////////////////////////////////////////////////////////////////////////////////

running these specific exports fixed it.
If you need to have openssl@1.1 first in your PATH, run:
echo 'export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
I ran brew info openssl as suggested by <@!134416332509675520> which amongst other info spitted out the following info:
For reference in case someone else has the same issue:
All - I finally got to the bottom of it thanks to everyone's help. Thank you so much.
Yep, also did that, but didn't fix the issue for me.
i had to cd into the brew dir at `/usr/local/Homebrew/bin`
Would be happy to make it work on either of these two so I'm having a crack at the workaround for the M1. Hopefully it works, will report back. Thanks a lot for your time.
I actually have both a mac-mini M1 and also a Macbook x86, I run in the exact same issue on both (i.e. exact same error message) when trying to run a solana-test-validator
Installing openssl with brew is weird (check out what `brew info openssl` says). I got around this by manually specifying `OPENSSL_DIR=... whatever_command_im_doing` [edit: but I did install openssl with brew, I just didn't do any symlinking stuff for some reason]
Sorry, he did say Intel... I totally misread that
Morning, are you on an m1? Thought you said intel above
Will give it a shot, thank you
He has posted this in the past. You can try this. Just look up "m1" in the chat. Ppl have talked about the issue in the past
I'm sure he is just busy... https://dev.to/nickgarfield/how-to-install-solana-dev-tools-on-an-m1-mac-kfn
Many thanks <@!847130012879814668> , hope <@!134416332509675520> can help me out. Tried everything, including  manuel symlink
<@!134416332509675520>  I think had issues with this... He probably can solve your problems
Any ideas / fixes?
Seems like lots of mac developers have been struggling with this issue (https://github.com/project-serum/anchor/issues/95)
I did run "brew install openssl" but still get the same error
Getting the infamous: dyld: Library not loaded: /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib
I've been beating my head against a wall trying to run a solana-test-validator in local on a mac (intel chip)
Hi all -
What do you mean
Ok my mistake, looks like there's no need to include signers: ... when wallet is alr configured properly for the program.
What is the best way to create an account with an array, pass it to the program and update it?
During local testing, it works fine because I have the wallet keypair and can call the Anchor method with `program.rpc.initialize({accounts:...},signers: [walletKeypair])`.
I am trying to send a transaction from the React app with `program.rpc.initialize({accounts:...})` where this transaction should be signed by the user's wallet. How do I get that signature?
how can I get `ProgramAccount`'s pubkey?
300 is where custom program entered errors appear by default
Hi! I copied the escrow test example but I can't Anchor to generate the types in `target/types/escrow` any body knows what's missing?
Great. I have hundreds of ATAs right now and don't want to pay the rent fee, so i would need to close them manually (or through a skript that i would need to write)). Right?
yes
If i close an ATA with balance 0 the token still persists on chain and in the new ATA, right?
Context: i am running anchor 0.17.0 trying to CPI into swap code and do a swap
any help would be greatly appreciated
checked anchor error source, but there seems to be no message corresponding for the number
Hi everyone, hows it going

i got custom program error : 0x12c, = 300
https://www.youtube.com/watch?v=7p_8549sinc not sure if this helps!!! Sorry its in video format
are there resources to learn the difference between AssociatedTokenAccount and a "normal" account"?
Ah you are awesome I'll check, thank you
explore `spl-token close`
cli would be the easiest
lol
rust yes
ts yes
cli yes
Crazy. Thank you.
Do you know if there is a way to do it through TS?
This is related with the Nader's article project, the example 1.
most likely not closed, use solflare to close it, only wallet allowing closing an ATA
Asking here because in the solana discord i only get DMed bot responses:
After sending an NFT to another wallet: Do we need to close the token account in the first wallet? Or is it done automatically? It for sure would not make sense to pay rent for an unsused account
Ok, fwiw, I can contrive to reproduce your error locally by deliberately setting up a bogus wallet.
The code you pasted above looks fine to me, so I wonder if something is weird about how you're constructing your provider/wallet.
It is pretty weird. And I don‚Äôt know how to debug that.
Hmm, not sure why that would happen ü§î
spot on, thanks
That probably means you've got the wrong name for your program when you do `const program = anchor.workspace.ProgramName`, so your `program` ends up being undefined (I guess it would be nicer if anchor.workspace.Foo errored if there's no Foo program)
I am still struggling with this. Anyone tried out the Nader's article project successfully?
on `await program.rpc.initializeEscrow`
ok seems like i got past the environment issues, whew, now i'm getting this on the first test -- anything obvious?
`TypeError: Cannot read property 'rpc' of undefined`
haha I was honestly so confused about it!! You're an actual life saver thanks again
Haha awesome (wish I understood why that led to your specific bug though)
thank you so much! ‚ù£Ô∏è
That was it!!!! I tried using npm uninstall -g before which didn't do anything .. but I just nuked it with an rm -rf instead and now it's going
I'm unclear on what exactly that screws up, but it doesn't work on macs (try `npm uninstall -g @project-serum/anchor-cli`)
I think I might have yes
Just curious, did you install the anchor-cli npm package by accident?
also on an m1 mac .. I just followed the installation instructions at https://project-serum.github.io/anchor/getting-started/installation.html .. and followed solana m1 installation instructions from this medium article: https://medium.com/@entergmode/installing-solana-tooling-on-m1-macbook-b49d2e1f29ed
I'm on an M1 mac.
are you all running linux, im on mac
Hmm, how did you install anchor? It doesn't deliberately use any funky shell environment
yeah im running into something similar
I thought you might have been onto it (NODE_PATH was wasn't set properly) but even doing that doesn't fix it. I just tried to see if `node` is even available though, and it isn't ... even putting `node -v` in the test script says `node: command not found` .. my guess is that anchor/rust runs the script in some strange shell environment but I have no idea how to find it
oh perfect, thanks
Also this example is typescript https://github.com/project-serum/anchor/tree/master/tests/escrow
`anchor init --typescript` should work out of the box.
i imagine you guys have ts setup and some standard that may not be posted in the repo
hey dumb question here, normally a backend dev, been hitting my head against this one a bunch:
`SyntaxError: Cannot use import statement outside a module`
when trying to run anchor test, been messing with mocha ts-mocha and a bunch of other variations
if the main point of PDAs is to avoid the vulnerability of someone else creating the same address and having the private key, wouldn't that mean all solana wallets are vulnerable to that brute force attack?  what am I missing?
for e.g. in the contrived case, when a user signs in their wallet for the set of txns which "signAllTransactions" signs for, mutating the Provider.wallet to be the user's keypair etc.
there isn't right?
is there a difference between the provider wallet signing all transactions (where them signing it is implicit) and a user signing all transactions for each rpc call?
Is there something that will not work with this?
provider wallet isn't used in my code. I'm having a "user" account marked as mut and signer, they are generated as a web3 keypair then receive an airdrop. They are in signers in the js file. Inside the rust instruction I do a a transfer system instruction from that user account.
Think I'm being dumb here lol
Wait, so who is the provider wallet vs. who is the signer?
Having them sign for a transfer in the instruction
they can sign the transaction via integration with their wallet on the client right?
How are you able to sign for this alternative payer though? You just know their keypair?
I guess strictly speaking you could construct a tx from scratch and basically do what the provider is doing, but manually (so have the desired payer sign the tx the way the wallet currently does here https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L105)
meant that I was having the signer of a transaction do lamport transfers to the provider wallet inside of the instruction to cover the costs of the sub transactions but I think it should be okay
Yeah, I was hoping there would be a way to mark an account to pay for all instructions in a rpc call from the anchor side when you are marking the accounts but I can work with this
Think I might have to see an example of what you mean about having the signer transfer tx fees to the provider
In your original example of doing a token transfer, there's no lamport movement there‚Äîso the only payer is the tx payer (there's obviously token movement though, so some spl token account has to provide the source tokens + sign the transfer)
I think I'm maybe misunderstanding your question‚ÄîI think the tx itself only ever has one payer (they're paying to submit the tx to solana), but individual instructions that move money (e.g. initializing an account, or just a vanilla lamport transfer) have to separately specify who's providing the funding (e.g. the `payer =` annotation)
e.g. `test = "mocha -t 1000000 tests/"` or whatever you want
it just runs whatever command is in Anchor.toml under [scripts]
Thanks for helping me understand stuff üôÇ
Is there a way to specify to have a certain account pay for all transactions in an instruction? akin to how you can mark payer for rent? Currently my solution for this is to have the signer transfer transactions fees to the provider to circumvent the provider being charged
does `anchor test` only recognize .js files?
You can see where the wallet signing happens in the anchor ts code here, fwiw https://github.com/project-serum/anchor/blob/master/ts/src/provider.ts#L105
The sneaky payer thing was a bit confusing to me, e.g. https://discord.com/channels/889577356681945098/889577356681945101/894808202217148446
Ah, ok yeah, this is a little sneaky‚Äîevery transaction has a payer (who also signed, of course), but it doesn't show up as an explicit account unless you pass it explicitly
Yeah, my program functions(initialize, etc).
Which functions do you mean? Your instruction handlers in rust?
i sometimes change with nvm and forget
what does which `ts-mocha` say? is `NODE_PATH` set properly in your env?
Anyone have a clue how to fix an error saying `ts-mocha: command not found` when running `anchor test`, despite the fact ts-mocha is globally installed???
got it working, thanks again
Actually wait, to follow up, provider.wallet is not loaded in any of my functions, what would be happening in live production? Would it still be my provider account paying?
That was it, thanks!
üëå  thanks
Think you'll need to install the anchor cli from master to get this to work (the type generation stuff hasn't actually been released yet I don't think)
`import { Escrow } from '../target/types/escrow';`
hey guys i copied an example test program over into a new project, any idea how to get the ts types generated/built, or where those live in the main project? not having any luck searching
If I'm understanding your q right, I think it's just the payer for the whole tx the CPI transfer call is inside of (so e.g. in an anchor test, it's provider.wallet‚Äîit's paying for the overall tx, including any cpis it makes)
When I make a PDA do a token transfer from an account it has authority over to a user token account, who pays for the transaction? I thought it would be the program account but their balance did not change
```Error: Deploying program failed: Error processing Instruction 1: custom program error: 0x1
There was a problem deploying: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "" }.
```

The anchor program deploys successfully on testnet but not on devnet..
Getting this error above ^
is there a verbose logging flag for the `deploy` command?
yea this is right, see https://github.com/project-serum/anchor/blob/master/lang/syn/src/idl/mod.rs#L112
but when i run "anchor test --skip-local-validator", the tests get failed !
Did you use this  "anchor test --skip-local-validator" ? as document said, this command deploy rust program in my localnet instead of startup new localnet
Thanks the hint with anchor support Alan
I need to read that rust book ! ><
A vector actually works fine, just did it badly the first time.
I tried with a vector but its an expensive computation
It seems yes... Any work around ?

I just need an efficient way to do a FILO with a fix element size (10)
I'm not super familiar with the idl generation stuff, but my quick sense is that anchor just doesn't support VecDeque's out of the box
Thanks to <@!134416332509675520> I was able to resolve this! So looks like I'll be the one creating the tutorial üôÇ
Mostly connection issues/ timeouts.
But what I am most wondering about is that it created two transactions. One for the account creation and one for the transfer.
Normally those things are combined into one tx
Hum, i'm a bit stuck here. Can someone help me ? 
I have structs that look like this(simplified for clarity) :
```
#[account]
pub struct Stuff {
    pub tests: VecDeque<TestData>
}


#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct TestData {
    pub result: String,
    pub pda: Pubkey,
}
```

The build works fine but when doing anchor test i get : 
```
Error: Type not found: {"name":"tests","type":{"defined":"VecDeque<TestData>"}}

```
Any idea ? :x


(edited forgot to write the entire error message)
<@!867369388608061470> might already have some examples?
Request-for-tutorial (paid opportunity -- that is I will pay if someone creates this tutorial):
1. A Github repo from scratch to deploy ` anchor/examples/tutorial/basic-1` on Solana devnet
2. A react app which allows people to interact with the deployed app using *Phantom* wallet
3. Clear README for all deployment steps

I actually tried to do it but running into some errors that I am not able to debug: (1) https://github.com/maddyonline/anchor-basic-1-example, (2) https://github.com/maddyonline/anchor-react-starter
myb
turns out I was testing against the bin in deploy folder and not the verify folder
ah
rather my verify build ran against the verify sub command doesn't match
well it's working but my build & my verify build don't match ü§î
tried a few things and can't be assed to try anymore üòÜ
well installing from github works great so Im doing that for now
my program has a local depdency and I'm getting this weird import error when I try to `anchor build`
```Failed to obtain package metadata: Error during execution of `cargo metadata`: error: package `/projects/anchortest/src/rust/programs/minter/mdp/rust/token-metadata/program/Cargo.toml` is a member of the wrong workspace
expected: /projects/anchortest/src/rust/Cargo.toml
actual:   /projects/anchortest/src/rust/programs/inter/mdp/rust/Cargo.toml
```
unfortunately I'm too new to rust to know how cargo / anchor / Cargo.toml files really work to fix this myself, any insight?
so basically I'm trying to wrap anchor around an existing rust contract so I can produce verifiable builds
nvm
hey, can someone point me to some ref docs re: this topic?



//////////////////////////////////////////////////////////////////////////////////////////

--This is a for sure beginner question
<@!103986638320861184> Why would you wrap SOL?
Also, is there an anchor example for Wrapped SOL anywhere?
I guess Wrapped SOL would be easier to implement, just to keep everything in SPL-land, however I am not quite sure if there are any drawbacks to this approach.
I'm extending the escrow program to accept SOL-SPL trades (as well as SPL-SPL and SPL-SOL), and **I was wondering if the best practice is to handle Native SOL, or Wrapped SOL?**
No worries, I'll find another way to do what I want to achieve. Thanks for your help!
Ok, think I'm still confused about your use case, can you post a gh repo or something?
It's basically a counter, so the seed is derived from the item numbers. The account that I'm creating holds the data related to the item.
Also, random other question, how are you remembering the seeds of the previous accounts you've initialized? They were based on old versions of other account's data?
well yeah, I guess what I'm trying to do is not scalable , need to find another way to achieve this
I'm the noob here, spent last 3 hours on this
Hmm, ok. Well, at the end of the day if the pda depends on the other account's data, then yeah, maybe that means you'll have to wait for confirmations? No matter what you have to know its address should be in order to initialize it
yeah basically like this
Are you like initializing an account with a seed based on the other account's data, changing other account's data, then initializing another account, etc. in a loop?
Noob question, what does that mean? I think I'm still confused about your situation (or possibly just out of my depth and can't help haha)
I'm doing that and it only allows 1 transaction until 32 confirmations finish üò¶
Hmm, I think I'm confused about your situation‚Äîone way or another you'll need to find the pda's address before you can submit it as an account
`some_account` pubkey depends on `other_account`'s data, if I fetch the data before the tx then other people will need to wait until `other_account`'s data has been updated for new `some_account` pubkey
Rereading your q
Oh, sorry.
Thanks! I'm doing like this but how can I send the tx without knowing the pubkey of the `some_account` in your example?
^ And `ProgramAccount` has been deprecated in favor of just `Account` btw
You mean the seeds depend on some other pda account's data? You can do things like
```.rs
#[derive(Accounts)]
pub struct Something<'info> {
  #[account(init, seeds = [other_account.foo], ...)]
  pub some_account: Account<'info, SomeAccount>
  pub other_account: Account<'info, OtherAccount>
  ...
}
```
How to initialize a `ProgramAccount` when the seeds of the account depend on a PDA's data? If I fetch the PDA's data before sending the transaction and get the `AccountInfo` then it only allows 1 transaction until the PDA's data is updated and all the other transactions that were submitted fails because they are trying to initialize the same account.
it's a special thing for wrapped sol accounts
ah ok
it's something else i've never seen before
<https://github.com/solana-labs/solana-program-library/blob/2b3f71ead5b81f4ea4a2fd3e4fe9583a6e39b6a4/token/program/src/state.rs#L98-L101>
`is_native` must just check that it is indeed an SPL token account
That's what I thought too, but it looks like that's only for "native" tokens (not sure what those are) ü§î
that's my best guess
and destination gets the lamports
it just errors if there's a non 0 balance
Actually wait, I'm confused reading the spl_token source, I see how it transfers any remaining lamports to the destination account, but where does it transfer the remaining token balance? Maybe being dumb ü§î
because it's the Associated Token Program that signs the initialization of the token account
It's also a PDA
ATA is short for associated token account. It's a convention for a set of seeds used to create a token account for a user + mint
CPI Accounts are just an old anchor term for accounts owned by another program. They can be a PDA or not. PDA determines how they were inited and whether they were initialized either by a keypair signer or a program signer
Ah whoops, good call
they are all distinct things
not exactly
A bit confused can somebody suggest an extensive list of all types of accounts? I feel some are the same but called with many names, I have seen account, ATAs, program accounts, PDAs, cpi accounts, token accounts. I am guessing cpi accounts and pdas are same, ATAs and token accounts are the same
who gets the lamports from the closed account
no the `destination` account is where the remaining balance goes to if it is not empty
yeh, i misread and thought this was a nuclear `system program` close account
https://github.com/solana-labs/solana-program-library/blob/master/token/program/src/processor.rs#L631
nvmd
oh, maybe they're in the spl token program
<https://github.com/project-serum/anchor/blob/e763b721c37d7b36fa283d2f973bc8c76ca96abc/spl/src/token.rs#L131-L150>
i'm not seeing any checks lol
^ I was just looking at the spl_token implementation‚Äîjust to make sure I'm understanding right, I think it asserts that you've drained any remaining token balance first
cool, now i have more work to do!
the context body you provide it defines the account, authority, and destination account to sent the remaining balance to
does this return rent?
there's the `close` keyword here
<https://github.com/project-serum/anchor/blob/master/CHANGELOG.md#080---2021-06-10>
ah cool
`anchor_spl::token::close_account`
how do you close token accounts?
is there a way to close program accounts like there is with token accounts?
Alternatively the CFO test has a script example and then you can do anchor test by skipping various things <@367907046177112064>, but yes toml approach is cleaner
here's an example from the swap program, though the anchor keywords might have changed from `test.genesis` to something about local net, i'm not sure
https://github.com/project-serum/swap/blob/master/Anchor.toml
we had a git submodule with the compiled serum program and pointed to it in the anchor toml with the required public key
i've done it before with serum as a preloaded program
spl token program is always available by default
do you have examples of setting this up with the SPL token program? looks like these examples import deps as git submodules and then points Anchor at their generated IDL files?
PDAs can't be inited except via CPI
well actually sorry, you're "forced" to do it with PDAs
you're never really forced to do it, it's just much cleaner imo to init accounts inside a program rather than outside
Hmm when is one forced to init via CPI? When the called program enforces that? Or is there an always an alternative to create beforhand?
Here is an example of how I recently did it https://github.com/microwavedcola1/psyoptions-instruction-decoding/blob/9553706c2247f9e60de20929dd6c617ec1fcccb0/src/index.ts#L86
rather than the normal max size of 10mb
it's especially annoying when it comes to initing accounts via CPI, you can only make them 10kb
solana needs to know what data it needs to load and what memory to access ahead of time so it can plan stuff
Anchor is cool though because it solves a lot of security issues with that
Thanks
No. It's a weird feature of Solana
can I initialize a `ProgramAccount` without listing it in the accounts object in frontend?
maybe that would help
there's `decoder` in the TS library
Trying to use program.account.[typename].fetch() API
Ah, sorry, I was saying that the connection itself might require a provider (can't remember)
But its just a bunch of bytes
That doesn't require a provider haha
Oh, sorry, maybe that needs a provider, can't remember
Can I get that as a deserialized object?
await connection.getAccountInfo(somePublicKey)
Does anyone know if its possible to do an Account Fetch with Anchor JS without a provider?
there's some examples of it being used in the anchor repo, but `anchor.toml` is the file to look for
https://discord.com/channels/889577356681945098/889577399308656662/891862087159128135
Thanks that makes sense!
Say I‚Äôm writing a program that makes a CPI. Is there a standard way to configure the local test environment (somewhere in the Anchor.toml?) to auto-deploy the dependency programs my protocol will need when running ‚Äúanchor test‚Äù?
yeh, what paul.e said, just use the ATA
to my understanding token accounts should always be initialised as associated accounts, which makes the account address derivable with the solana address and mint This also results in only one token account being created per mint and solana address. A lot of dapps already pick the associated address by default and im not sure non-associated accounts can be used with a lot of dapps tbh
How do apps usually handle when there are multiple token accounts from same mint in the same wallet?
You can bump to 1.7.12 - I believe that fixes the deployment issue.
any help would be much appreciated
guys, trying to deploy to mainnet and none of my transactions are getting confirmed and just keep retrying.
My solana version is 1.7.11 and anchor-cli 0.15.0
happy to help! no point in everyone having to reinvent the wheel
Man, exactly what I was looking for! Thanks a lot ton! If I build something useful I'll share a link or snippet here for documentation purposes
so you don't need to send each `getTransaction` call individually
also it's not well documented but it is possible to batch RPC calls
that way you never have to worry about your indexer crashing temporarily
then you get the transaction for each signature, which will return the program logs as part of them
<https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction>
until you go as far back as the node operator stores history
you run get signatures for address, and you iteratively call it in 1,000 signature batches
<https://docs.solana.com/developing/clients/jsonrpc-api#getsignaturesforaddress>
ok here's what you do
we lost all the previous discord chat logs when moving from serum
there's like set of commands, i'm just trying to remember how to do it
no it's possible with RPC calls
I've been thinking of doing it this way, however I can't find an RPC call that fetches programLogs. Is there anything im missing or would I have to find an RPC node operator that offers this as a service?
i haven't thought about this problem for a few months though, <@!705250151291158528> is more actively working on this
so even if your indexer crashes you should still be able to get programLogs
validators will keep like the last 2 weeks worth of history
The idea is to run an indexer for a specific event in my program. I need a way to parse previous events in case my indexer crashes. The way this can be done in eth is to specify a starting block number when initialising the event listener, however this doesnt seem to work in solana. Are you aware of any ways to achieve this?
fs.readFileSync does not work for me on a React app as well
Hi, does anyone know how to read an IDL JSON file to TypeScript IDL type?
when I deploy a program to the mainnet, do I also need to run anchor idl init after? I had to in the devnet
Yeah module name in title case
Oh, I guess it's actually the `#[program]`'s module name? So e.g. `mod basic_1` --> Basic1
Yep, just the JS-y version of your program name
One noob question `const program = anchor.workspace.Mysolanaapp;` where can I find my program name. Is it defined or just Title case of folder inside `programms`
Lol
haha it prints my env correctly
If you change your anchor test command to just, like, "env", does it say anything surprising?
Ah, interesting!
i use nvm so my global node path isn't very standard and i can reproduce it
yea not totally sure why it'd work in some cases
Or, I'm not sure‚Äîit seems like my env is the same
^ is that what happens? I was wondering that too but it seems like it keeps mine
ahh so the anchor-cli uses `spawn` in js so it'll lose all the shell env vars
And the script it uses doesn't really do anything tricky, so I'm confused how people keep losing mocha from their path ü§î
I'm confused because I can actually use the `anchor-cli` package just fine, and I'm on a mac (an M1 even)
I think it might be an npm thing
Also there are so many issues with versions without proper error messages : (
I need to actually read the anchor-cli source I think, this keeps coming up
REALLY QUICK. Thats works fine. Thanks buddy : )
Ok i'll try and get back to you
That message at the top looks like you're using the `@project-serum/anchor-cli`  npm package by mistake (sounds like you're on a mac?). Can you try `npm uninstall -g @project-serum/anchor-cli` real quick?
I have node with `v16.9.1`
Check node version... I was facing similar issue someone suggested to change the node using nvm and it worked... Changed it to node@14.18.0 using nvm and it worked
Yeah mocha installed globally `/usr/local/bin/mocha` and node path was `/usr/local/bin/node`
All out of ideas after that üò¨
Mocha is installed globally? Check NODE_PATH
No. I have used cargo `cargo install --git https://github.com/project-serum/anchor --tag v0.17.0 anchor-cli --locked`
Did you install anchor-cli via npm?
Mocha installed and I have directory for tests also : (
Either no mocha installed or no tests dir in the project directory?
Why my `anchor test`  fails
```
Only x86_64 / Linux distributed in NPM package right now.
Trying globally installed anchor.
BPF SDK: /Users/swaroopmaddu/solana/bin/sdk/bpf
cargo-build-bpf child: rustup toolchain list -v
cargo-build-bpf child: cargo +bpf build --target bpfel-unknown-unknown --release
    Finished release [optimized] target(s) in 0.18s
cargo-build-bpf child: /Users/swaroopmaddu/solana/bin/sdk/bpf/dependencies/bpf-tools/llvm/bin/llvm-readelf --dyn-symbols /Users/swaroopmaddu/blockchain/projects/tasks/target/deploy/tasks.so

To deploy this program:
  $ solana program deploy /Users/swaroopmaddu/blockchain/projects/tasks/target/deploy/tasks.so
The program address will default to this keypair (override with --program-id):
  /Users/swaroopmaddu/blockchain/projects/tasks/target/deploy/tasks-keypair.json
Failed to run test: mocha -t 1000000 tests/: No such file or directory (os error 2)
```
so not like solidity where you can't access contract state externally if there's no explicit or implicit getters
ahhh awesome ok!
If you know the address of the account you're interested in, you can pass it to whatever program you want üôÇ The account data isn't hidden or anything‚Äîany program can read it (*writing* to an account is restricted to the program that owns it though)
sorry i'm a little confused by this -> how would i be able to access the metadata pda storage from the token account?
They are different accounts. So pass in whatever one you want.
so i need to pass in the metadata pda, not the token account correct?
https://github.com/metaplex-foundation/metaplex/tree/master/rust/token-metadata
Yea just pass in the account from the client side.
so like i know the metadata account for some metadata PDA made with metaplex is  `['metadata', metadata_program_id, your_mint_id]`, but am i able to access/read the data in the account storage with another program?
hey all! Are there any examples out there of reading token metadata with an on-chain program?
it worked btw thanks a ton.
oh, is there a library for all the solana junk I can grab
You'll need to separately do `npm install @solana/spl-token`, it's a separate library
I installed this one ```npm install @solana/web3.js```
You'll need to install it separately with npm
I can build and deploy, but anchor test throws ```Error: Cannot find module '@solana/spl-token```, any hints?
ah got it, thanks
there is a cluster in Anchor.toml
hmm how does `anchor deploy` pick the cluster? My `solana config get` reports devnet, but anchor is attempting to deploy to localhost
some of the RPC node operators do offer this kind of service but how they do it is unclear
i haven't heard of any updates that would indicate this is easier to do now
do you mean running the indexer on a validator from the first block of solana onwards?
yeah that seems like a good solution, would open the floodgates for indexer providers for sure.
Im happy to share my findings. Sent a message in the solana discord but I think its drowned in all the chatter. I'll do some digging in the solana docs tomorrow.
Though i expect this  validator plugin to eventually be the canonical way of achieving this https://github.com/solana-labs/solana/pull/20047. 

RPC validator -> Logs -> Postgres

Then the indexer runs

Postgres logs -> Anchor event deserialize -> Postgres events
It would be really valuable for someone to go through the process of building a simple Anchor event indexer with postgres and share some lessons on the process ideally with some type of open source example. Doing this easily would be a huge level up for all of us.
Ok thanks for the quick reply! It does seem pretty fundamental, given you can specify a block number to start at. I will ask in the solana discord and add my answer here for documentation purposes. Keep up the insane work on anchor. Im coming from the eth world and its pretty insane how fast this is all coming together. I would say the solana tooling is ahead at this point and a joy to work with. really impressed
Seems pretty fundamental, but I myself haven't gone through the exercise so it's possible I dont appreciate some subtle complexity involved.
<@!248066053161222144> have you tried this yet? I.e. building an event indexer?
The event listener for anchor doesn't have that, since the onLogs api doesn't ahve that. But you should be able to get transactions starting at a block. I'd ask in the solana discord.
Thats pretty much what im looking for. In eth the event listener had a parameter to specify from which block number onwards event should be parsed, struggling to figure this out in solana. Can you point me to some docs maybe?
Can you replay all transactions? When you crash, just startup and replay at the last transsction who's logs you parsed.
I have a question regarding event catching. Im currently in the situation that I need to write an indexing service to feed my DB with historic program account state. The way events are handled in anchor is super simple, however one thing I cant figure out is how to consume past events in case my indexer crashes. I also checked the solana web3 docs, but I found now way of specifying a specific block/slot to recover the data emitted during downtime. Am I missing something in the docs or is this somewhat of a larger issue?
scammers everywhere huh
cool thanks üôÇ
Probably. I'd try asking in the Solana discord and report your findings. üôÇ
hmmm, I see. are there any instructions for this?
`solana-test-validator` doesn't work on M1. I think you have to compile it from source.
I am using M1 mac
I'm getting an error when running solana-test-validator
`Ledger location: test-ledger
Log: test-ledger/validator.log
‚†ô Initializing...
Illegal instruction: 4`
thanks, i am CPI the swap code which then CPI into serum-dex code, would have to check dex src then,
yeah i figured it out myself, but thanks for the help ‚ù§Ô∏è
i mean the error is described in the program you are using most of the time. https://github.com/project-serum/anchor/blob/master/tests/swap/programs/swap/src/lib.rs#L490 like if u r using this 300 would be the first error
You need to check `bytemuck` crate usage
getting BPF program panic


//////////////////////////////////////////////////////////////////////////////////////////

oh think i found it `anchor_lang::solana_program::system_instruction::transfer`
maybe there's a lower level command i'm just not familiar with
also i see a lot of anchor utilities for transferring tokens but don't see any for transferring sol
oops wrong links, fixed
quick question about the escrow example, to actually initialize, as here:
https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts#L93
you first need to have some transactions that create the token accounts?
https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts#L59
so if this were going through phantom it would be a series of transactions?
Yeah, my bad.
Try building it and then asking questions along the way.
Hi everyone! I want some conceptual help in building a program. I want to store tokens from 2 users in their separate vaults. Then at some point in time wait for an event from frontend which will allow one of the user to be able to claim both those vaults.
I was thinking to make a CPI request to a program which creates checks/vaults for each player and store this event flag in the main program. Can anyone guide me on this?
Or this synthefy code is THA workaround?

In the mean time isnt there any workaround so we can use the transfer function to send decimal amounts?
Will dive into this
Ok pretty cool
<https://github.com/Synthetify/synthetify-protocol/blob/master/programs/exchange/src/decimal.rs>
Synthetify has some code for this.
Floating point is not supported in the IDL types. I'd recommend to use integers, e.g. `u128` to do decimal math.
we cant store decimals in u64 right ?
Is decimal supported in anchor ?
hey guys
It makes sense for anchor to use a lib not supporting decimal point, Its a good choice.
I will use the other bigNumber lib just for the user convenience as to display more human readable numbers
Yep, only using that on the front end ^^
and just track what decimals places you're using somewhere else
you should stick with unsigned ints really
Well, will have to do it another way üòÑ
Thanks Alan
```Note: decimals are not supported in this library.```
It uses this library https://github.com/indutny/bn.js/
Hey everyone üôÇ
I'm using the anchor JS bignumber and trying to keep decimal precision but i can't find how to do so.
Does anyone know on what library is the anchor BN based from ? Is it done from scratch ? üòÆ For it seems to be lacking the method from the "standard" js big number lib ( https://mikemcl.github.io/bignumber.js)
if you wanted to you could look at the source for `getTokenAccount`but it seems more likely there's another issue at play
if you're getting an error from that, you probably have something to debug
getTokenAccount is the way to go
Thanks in advance ‚ù§Ô∏è
In a more general way, what are the documentation of the client side of the spl-token documentation ? üôÇ
When I write a second client and try to regenerate the token account with getTokenAccount I get an error
Hey guys I hope everyone is well. Ok I wrote a client where I basically create a token and then create a TokenAccount (using createTokenAccount) to myself. Now I have the public key of the token account. How do I create the same token account variable from scratch
I think you can find an implementation from ironaddicteddog
I am new to smart contracts and might be getting some things wrong, please correct me if you find flaws in what I state üôÇ
I saw a cashiers check example where the vaults are generated on the frontend using web3.js APIs. Is this a safe practice? Should the vaults be generated inside the program ideally?
Hi guys! Do we have any examples for escrow on anchor, I want to implement similar program like in paulx blog. https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/
Ok that's what I did, must have made a mistake somewhere, will look into it thanks!
yep, you can pass a fresh keypair as additional signers via the   `signers: [yourKeypair]` attribute in the rpc call such as in this example.

https://github.com/project-serum/anchor/blob/master/tests/escrow/tests/escrow.ts#L93-L108
I wanted 2 signers to try special cases in tests
Is it possible to create a Keypair and use it to sign transactions passing it as signer? It seems to make weird stuff, should I always use the provided.wallet.payer instead?
Exactly what I was thinking of. Cewl
Thanks Davo
yes, for now the recommended way is to perform optional account initialization via the `instructions:` attribute in the RPC call , so you would either include it or leave it out. Also handling manual CPI calls is also an option. That said, there is a recent discussion on this very topic:

https://discord.com/channels/889577356681945098/889584618372734977/896143760671518750

https://github.com/project-serum/anchor/issues/852
I want to prevent having to do pre instruction local to create an account for a given program mint, but maybe (I am thinking of this solution as I type, tanks typing!) what I should do instead is have a "init call" to first have to interact with my program, that would offer nice interface to create that associated token account for the mint that the program controls
Seeing how Jet manage their test, and the API of anchor/solana, it seems that it would make more sense to create account where the mint/mintAuthority exists (be it in a program, or locally)
Another question related to associated_token, now that it works, is there a behavior similar to "get else init" is some way?
Gonna backronym it to ce qu'il fallait d√©boguer for discord üòõ
Ce qu'il fallait demontr√© üëç
Oh yes that's what I did previously iirc. Updating
Weird nothing related to that in the .zshrc, only the local solana installation (but that doesn't come with any anchor YET, amarite?)
(I actually just install anchor from my own local checkout of the source, since I want to be able to fiddle with it, but installing from a git tag works too)
I personally just don't use the npm package at all and do a direct cargo install, e.g. cargo install --git https://github.com/project-serum/anchor --tag v0.17.0 anchor-cli --locked
Yep will cleanup
Ah ok cargo is overpowering npm in your $PATH
cargo don't return any anchor with `list`. Instruction unclear <:peepodead:888947959612456980>
I installed NPM version but `which` still returns the cargo one
Does the npm version not work?
Haha you can install it from source if that works? https://project-serum.github.io/anchor/getting-started/installation.html#build-from-source-for-other-operating-systems
Wait I cannot find back how I install cargo <:pepeThink:844646497911046164> 
It's in ~/.cargo/ but cargo don't seem to have an anchor package. And tutorial offer to install using NPM. halp my brain stack is full of rust I cannot drop <a:pepelaugh:834817527900799078>
I rage quited that stash and reverted. here we go again ‚ù§Ô∏è
damn
Thanks a lot ser
Oh yes!! cli is not updated
1.17.0
I think you might get a problem like that if your anchor cli is out of date relative to the anchor library itself (the part that generates code for the associated_token stuff). If the cli is out of date it will see the new syntax used in your program and be like wtf is that
What version of the anchor cli are you using? `anchor --version`
Seems to be the parsing that fails, I'm passing correct Mint and Signer
Having issue trying to use `associated_token` init in anchor <:pepeThink:844646497911046164> 
https://github.com/project-serum/anchor/pull/790#issuecomment-939206306
That worked! Thanks so much
oh! okay i will try that, thanks! I saw the argument in the generated idl as a named parameter (`authority`, so I thought I had to pass that field in as a named parameter as well)
Try changing the call to look more like `rpc.createParticipant(authority.publicKey, { accounts: ... })`
I think the problem is that your rpc function, createParticipant, actually expects an argument (from looking at the rust code). But you're only passing accounts. The anchor rpc stuff has pretty unforgiving behavior here unfortunately, and tries to interpret your accounts object as the first argument (whoops) and then says, hey, you never passed any accounts!
super weird
every time i try to deploy on devnet, it hangs up at this part and simply refuses to continue. deploying on localnet works just fine
Hi, I'm getting an error where the accounts struct I pass into an instruction from js is undefined. Specifically, the error is `Cannot read property 'raffleParticipant' of undefined` from this line of code: https://github.com/shekarramaswamy4/solana-raffle/blob/main/app/participate.js#L33. The corresponding blockchain code is here: https://github.com/shekarramaswamy4/solana-raffle/blob/main/programs/lotto/src/lib.rs. I'm pretty stumped, this code is more or less copy paste from a working example. I tried to do some digging through the anchor internals and it looks like the "accounts" field is undefined (which makes sense), but I'm not sure why that is. Any help would be appreciated, thank you, and please let me know if I can provide any additional context. Thanks!
Hi, 

i am getting error custom program error 0x12d = 301 on the serum_dex program which i have CPI'd into, unfortunately i am not able to find a IDL for the dex nor i am able to successfully generate a idl for the serum_dex (Error cant parse IDL)so i could learn about the error. What should be my route for debugging this. 

Thanks in advance ‚ù§Ô∏è
<https://github.com/project-serum/swap>
Thanks! do you know of an example where it handles wrapping/unwrapping using JS/Rust? So I don't need to pass that overhead to the end user
trying to verify serum-dex and serum-swap programs
How to use anchor verify properly, i am getting Account Not Found and Binary dont match error
just wrap sol
OR NFT or whatever you want to do with the SPL program
Yea, basically the SPL program doesn't support native SOL to spl trades so if you want to do SOL to spl trades, you have to do what Circle does or Tether and "wrap dollars" but in this case you are wrapping SOL to be compatable with your native token
Sure! does it make sense? i think its a bit weird and honestly I have never wrapped SOL so I am not sure if what I am saying is true
Thank you for answering a dumb question. I really appreciate it!
The escrow program is built to handle SPL-SPL trades (e.g. trade 3 SBR -> 5 SRM) -- so if we wanted to allow SOL-SPL trades (e.g. trade 3 SBR -> 0.3SOL) there is a way to wrap the SOL->SPL so then the trade becomes SPL-SPL, or keep it native, but handle those scenarios separately


//////////////////////////////////////////////////////////////////////////////////////////

=======
>>>>>>> 20bea11087240cc616c020a0810cf4b960b99b41
