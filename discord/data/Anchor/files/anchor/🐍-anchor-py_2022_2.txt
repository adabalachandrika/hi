I can send you the complete code in dm if needed but I just need to know how I should use this function alongside the ctx
yeah i can't help without a reproducible example
this is the correct way right?
`tx_instructions = program.transaction['mint_nft'](wallet_bump, ctx=ctx)`
`"payer": walletWrapper.public_key,`
it's one of the accounts so yeah it should?
does your `self.payer` make sense?
mine is still on None
shouldn't it add the signature tho?
https://github.com/kevinheavey/anchorpy/blob/main/src/anchorpy/provider.py
it just calls `tx.sign(self.payer)`
<@!856894333180706876> Hey, sorry for @ - do you know why this `myProgram.provider.wallet.sign_transaction(tx_instructions)` isn't doing anything? as in adding the signature I need
Just raised it, hopefully someone from solana py can take a look at it
https://github.com/michaelhly/solana-py/issues/182
It should in some way append the new signers instead of creating a new one
Or even if you know a quick fix that I can just put in the transactions.py file until it gets fixed publicly would be amazing
Just did, do you know how long it usually takes for these things to get fixed?
But other people will see it there
I‚Äôm afk
Could you raise an issue in the solana-py GitHub?
Look:

`Before Partial Sign  [SigPubkeyPair(pubkey=4droyY5MVemmoajaMpSfapvxdYUzTmHnzRm3JLRiMXjV, signature=None), SigPubkeyPair(pubkey=6xaXdenPUDKDQLfqGKyhUgvoMJmMNeUCB4hdj9YrnznG, signature=None), SigPubkeyPair(pubkey=71e43w8efa2H6T3pQR7Hif8nj5A3ow2bnx6dAzYJBccP, signature=None)]`


`After Partial Sign  [SigPubkeyPair(pubkey=6xaXdenPUDKDQLfqGKyhUgvoMJmMNeUCB4hdj9YrnznG, signature=b'U\x94\x92\xbe\x99w\xd2\x8b\x93\xc76\xd7\xaaWH\xdbL{\xcd\xa3u\x06\x1f\xc6\xd8\x99M\x96g\x1a\xab\xa3\x0b%\x00\x05\xc8d\xefv\xb3g8L\x1b\xa8\x14@\x9c\xe6iB\xb18H\xb4\xbc\xc3\xf1\xbaH,y\x02')]`
cause in ts it's adding the signature without removing the previous ones
Wait but why does the ts version work then?
Yeah I just checked, when using sign_partial it completely removes all the other signatures/signers in the transaction <@!856894333180706876> (sorry for @ but this is important I think)
I think something like this issue is happening in solana py https://github.com/solana-labs/solana/issues/20743
when I comment it out / put it after the add signature I can add with no issue
I tried sign_partial but I think that that's what is giving this issue
Hey, do you know what's the equivalent for this in py? 

`transaction.partialSign(d);`


///////////////////////////////////////////////////////////////////////////////////////////////

thx
ah
if i remember correctly
whats iirc:?
up to 16 iirc
you can have multiple seeds if im understanding your question correctly
having trouble with pda addresses. trying to create a multiple unique account assigned to each user (publickey), but am having trouble getting around the seed limit of 32 bytes, since each publickey fills up the seed completely. anyone have a workaround?
Hm, so the xkill functionality doesn‚Äôt fully work?
If that panic stuff didn‚Äôt happen I could just kill the subprocess and the localnet would go down with it
Which is why I have to go find the process again
Iirc Rust Anchor CLI does something like ‚Äúlock stdin‚Äù and this causes it to panic in a subprocess
Because something weird happens when you run anchor localnet in a Python subprocess
Yeah I had to find the process basically
<@!856894333180706876> how do you get your localnet validator to tear down after running pytest?

i'm trying to "follow your lead."

e.g. using `from anchorpy.pytest_plugin import workspace_fixture` to create my own workspace fixture.

the https://github.com/kevinheavey/anchorpy/blob/adeb5483fb6bad14e6f4393a700b956ed73e73e5/src/anchorpy/pytest_plugin.py#L135 starts up the validator correctly, but is not tearing it down for me.


///////////////////////////////////////////////////////////////////////////////////////////////

I forgot most of the process management stuff after I wrote the pytest plugin, but I had to use os.getpgid followed by os.killpg


///////////////////////////////////////////////////////////////////////////////////////////////

Yeah idk I‚Äôm sorry that happened to you ü§∑‚Äç‚ôÇÔ∏è
well all my functions are written synchronously. Would basically have to rewrite everything for one function üò©
> I would have to rewrite a lot of code
How much is a lot?
and maintaining them
and writing tests
it would involve me writing sync versions of all the async methods in anchorpy
guess that would work, but I would have to rewrite a lot of code. Any way it is possible with threaded?
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
yeah thought it was weird aswell
you can do this with asyncio
want to it run multiple tasks at the same time
yeah I need it to be threaded
no idea why threads would cause that error though ü§î
however if for some reason you really need threads instead of async, let me know
and since anchorpy is an async library, don't use threads
don't mix threading and asyncio


This only happens when the function is threaded
hey <@!856894333180706876> anyway you could help me? I'm trying to fetch idl in a threaded situation. However, it's giving me an error saying the RPC is not an ipv4 address.
Hmm actually I‚Äôm not sure if the above won‚Äôt also break typing, I‚Äôll check
I still think `program.methods["my_method"]` runs into fewer problems because the underlying object is basically a dictionary, BUT after spending time translating Typescript clients into Python clients, the dot access would have saved time
Hmm this could work. It‚Äôs definitely better than dynamically assigning properties because that breaks typing
I think you can do this via something like

```
    def __getattr__(self, name: str) -> Callable:
        def call(*args):
          ...
        return call
```

Which will create a dynamic callable method.
so instead of doing `program.methods['myMethod']` we do `program.methods.myMethod`.
<@!856894333180706876> can we monkey patch the python client methods like we do with javascript?


///////////////////////////////////////////////////////////////////////////////////////////////

When I try to send with program.provider.send(tx_instructions) it returns invalid transaction: index out of bounds
Basically:

This is what happens when I print tx_instructions.signatures
```py
[SigPubkeyPair(pubkey=4wroyY5MVemmoajaMpSfapvxdYUzTmHnzRm3JLRiMXjV, signature=b"\xa4\xad1\x92\x94\xf40\xa3\xefu\xb3\x8a\xe3~>\xb8]\x1a\x08'\xe0\x92/\x8b\xdad\x12\x82\x04\xc9\x0c\xf8\xd2|\xe0\x80\xc9x\xd8\xee\x96\xcb|R\xec\x93K}\x9d\x1b\x9fl1\xba\x1d\xcd\xcfR\x18\x16\xe5\xbcc\x01"), SigPubkeyPair(pubkey=GZ4G7AbJd7CRpSeTs8k6NWfd1HDBdYG3n5bXHdY4b3yK, signature=b'\xf1\x84E\np\x94\x12V\xb58\xb1\x93\xcaR\x01\xc4\x08\xd0\x14i\xed\xdc\xa5\t\xc7\x90\xd0}il\xff\xa9sV\x9d"\xfd\xc4\x84n\x82\x80\xf6u\x92\xf6\xf7>\x98\xac\x1c}-\n6>\xba\x88\xe89\xf2\xfa\xb0\x0b'), SigPubkeyPair(pubkey=71R43w8efa2H6T3pQR7Hif8nj5A3ow2bnx6dAzYJBffP, signature=b"C\xf1\x87\xdbB\x92N\xf7\x17\xfbv\xedm\xe3\x8c[Xx9\xf7m\xde\xc1qgC;\xa9\xcc\x00\xdbe\xfb'\x91>^\xff\xb4\xaak\xaf\x16\xbedtd2g\xb3g;\xa2\xda6\x06\xd1\xb1Ud\x9e\xe3\xce\x08")]```

This is what happens when, inside the `transactions.py` file, I print `self.signatures` (right before submitting the transaction)
```py
[SigPubkeyPair(pubkey=4wroyY5MVemmoajaMpSfapvxdYUzTmHnzRm3JLRiMXjV, signature=None), SigPubkeyPair(pubkey=GZ4G7AbJd7CRpSeTs8k6NWfd1HDBdYG3n5bXHdY4b3yK, signature=None), SigPubkeyPair(pubkey=71R43w8efa2H6T3pQR7Hif8nj5A3ow2bnx6dAzYJBffP, signature=None)]```
I think I managed to get around the big error (aka partial sign cancelling other signatures) by doing this:

```py
tx_instructions.signatures.extend([SigPubkeyPair(pubkey=PublicKey(infos.notary), signature=b"C\xf1\x87\xdbB\x92N\xf7\x17\xfbv\xedm\xe3\x8c[Xx9\xf7m\xde\xc1qgC;\xa9\xcc\x00\xdbe\xfb'\x91>^\xff\xb4\xaak\xaf\x16\xbedtd2g\xb3g;\xa2\xda6\x06\xd1\xb1Ud\x9e\xe3\xce\x08")])```

The issue is that, when I print `tx_instructions.signatures` in the code everything looks code, when I print it in the signatures in the transactions.py file signatures are equal to None. Do you know how I could work around this?
Maybe you can make a minimal reproducible example?
It looks fine and it works in tests
Yes I already checked
so yeah I think it does make sense, could you please check if there's an issue with the module not signing?
But this way it returns the correct key: `program.provider.wallet.payer.public_key`
This way it returns: `AttributeError: 'Provider' object has no attribute 'payer'`
Error
does `program.provider.payer` look how you expect it to look?
Also what does this mean


///////////////////////////////////////////////////////////////////////////////////////////////

ty üëåüèª
you'd just use regular solana-py https://solanacookbook.com/references/basic-transactions.html#sending-sol
On a different note, what would be the easiest way to transfer lamports from one account to another using anchor-py? Thanks in advance
Hi guys, came here to ask about the same stuff you are discussing üòÖ
or something to that effect
i remember seeing some reddit thread where a guy asked how to do sumtypes in python and the top answer was "stfu idiot why would you do that"
yeah part of the problem is there's not much reason to implement them in dynamic languages
sum types are hard to do dynamically ig
in all honesty they're worse in ts lmao
if it makes you feel better, enums also suck in the typescript client
yeah this is what i'll do for now
if you're stuck and need to do something hacky before I fix it you can do `str(my_enum)`
this isn't working in my case either, it's possible something is occurring at runtime
yeah I think I need to fix something here
they're built using the sumtypes library https://pypi.org/project/sumtypes/
they are constructed so that `isinstance(my_variant, MyEnum) is True` and `type(my_variant) == MyEnum.MyVariant`
aghh wait scratch that
~~they are constructed so that `type(my_variant) == MyEnum` rather than `type(my_variant) == MyEnum.MyVariant`~~
~~oh well whether or not `==` and `isinstance` works properly for these enums (I need to check),  the `isinstance` thing you're doing is the wrong way~~
retrieved it from `program.account[...].fetch`, it's a field of the retrieved account
How did you construct `my_enum`?
Yeah there‚Äôs some ungodly stuff that takes place to generate enums dynamically
Pls no tag
or rather, check what variant an instance of an enum is
is there a canonical way of comparing an instance of an enum to another? I've tried `instanceof(my_enum, program.type["MyEnum"].Variant)` but this gives false for some reason, even when the enum is the right variant
yes working perfectly, very stupid of me that I didn't test that. Thank you very much for the quick help üôÇ
so yeah just do this for literal bytes
`b"candy_machine"`
you can just do
since it's a literal string
or
`"candy_machine".encode()`
but doesn't work on a string
not `bytes()` in this case
yeah I thought so
oh wait
`bytes()`
I don't think you have it in python
no need for the @ btw
what would be a an alternative of this function `Buffer.from()`
<@!856894333180706876> sorry to bother you again. I have another question. I'm trying to translate this function from ts to python ```ts
export const getCandyMachineCreator = async (
  candyMachine: anchor.web3.PublicKey,
): Promise<[anchor.web3.PublicKey, number]> => {
  return await anchor.web3.PublicKey.findProgramAddress(
    [Buffer.from('candy_machine'), candyMachine.toBuffer()],
    CANDY_MACHINE_PROGRAM,
  );
};```


///////////////////////////////////////////////////////////////////////////////////////////////

is it this? https://discord.com/channels/889577356681945098/889702325231427584/937530755796598824
getting this error now when I send the transaction: `{'code': -32602, 'message': 'invalid transaction: index out of bounds'}`
I am very close to finishing what I'm trying to do
changed it to AccountMeta object
I was passing in some keys as a dict
Where?
ahh I see where it's going wrong
which is used in the `compile_message` function of transaction.py
I'm just printing `account_metas` list
I changed some code so I can see what's going wrong
function sign_partial()
what generates this output?
oh you mean this is the output of something
everything in the list should be AccountMeta object, but some are getting passed in as a dict as you can see.
is this better?
*minimal* reproducible example please üôè
let me revise my request
```[AccountMeta(pubkey=HDcdQVyvghNaP8v5XoauQnLKCg4p7p16NbKHGXCZrNBD, is_signer=True, is_writable=True), {'pubkey': HDcdQVyvghNaP8v5XoauQnLKCg4p7p16NbKHGXCZrNBD, 'isSigner': True, 'isWritable': True}]```
this is the list of account metas
Can you share a reproducible example?
I have looked into it a bit and it seems like it's using all the keys from the transaction instructions I added. Most of them are `AccountMeta` object which should be the case, but some are saved as a dict which is resulting in this error: `AttributeError: 'dict' object has no attribute 'is_signer'`
but as far as writing smart contracts is concerned, you need to use Rust and Anchor for that
that's what you would compare anchorpy to
there is an Anchor Rust client that few people use
but i feel your question might have an incorrect premise
it's better üòà
Is anchorpy just as good as rust anchor in terms of functionality?
> it's sending
what is?
what am I doing wrong this time...
it's sending my account meta as a dict instead of AccountMeta object. This results in an error on sort.
I need to partially sign it
I see
https://discord.com/channels/428295358100013066/517163444747894795/909051400779083776
i can't remember what you're meant to use instead lol
I think the answer is don't use `setSigners` üòÖ
I can't find it in the docs
What is python's equivalant of setSigners in typescript?
think it worked
thank you so much
example here https://kevinheavey.github.io/anchorpy/testing/
no it should be a `Context` object
should ctx be sent as a dict?
thought the problem was with creatorbump, but it's not.
ahh yeah that's what I meant by other info
it stands for context, it's a special named argument containing certain properties (like `accounts`) https://kevinheavey.github.io/anchorpy/api_reference/#anchorpy.program.context.Context
looking at the contract
context
what is ctx?
if you have ctx to pass it should look like `program.instruction['mint_nft'](creator_bump, ctx=ctx)`
looks like it only expects one arg (not counting the ctx) and you're passing two
what am I doing wrong?
I'm passing in creator bump like this `program.instruction['mint_nft'](creator_bump, 'other info')`
getting this error `Provided incorrect number of args to instruction=mint_nft. Expected ['creator_bump']` on `program.instruction['mint_nft']`


///////////////////////////////////////////////////////////////////////////////////////////////

whoops, my bad!
Doesn‚Äôt flask support async these days? https://flask.palletsprojects.com/en/2.0.x/async-await/
Is there any way to use without asyncio? I wanna use this with a flask app


///////////////////////////////////////////////////////////////////////////////////////////////

can anyone help me with that
eventhouh i  am passing "jsonParsed" as encoding

program_subscribe function always returns base64 encoded data
async def listen_to_transaction_by_marketplace(market):
    data = []
    while True:
        async with connect("wss://api.mainnet-beta.solana.com") as websocket:
            await websocket.program_subscribe(MARKET_PLACE_ADDRESSES[market],  encoding="jsonParsed")
            first_resp = await websocket.recv()
            updated_account_info = await websocket.recv()
            resp = updated_account_info.result.value
            dicti = {'pubkey': str(resp.pubkey), 'lamports': int(resp.account.lamports),
                     'data':resp.account.data, 'owner': resp.account.owner }
            pprint(dicti)
            print('-------------------------------------------------------------------------------------------------------------------------------')
            data.append(resp.account.data)
    return data
this function is for testing
i am willing to listem to recent transactions happening on NFTs market places
i am using solana py to connect Solana rpc websocket
hello everyone


///////////////////////////////////////////////////////////////////////////////////////////////

So it suffices to mimic the Typescript test and not declare any signers. The error I was getting turned out to be unrelated to this
Hi, how do we handle the `signer` argument when we have an instruction that creates a PDA? Is there an example available? I was trying to replicate chapter 3.2.2 of anchor's book https://book.anchor-lang.com/chapter_3/PDAs.html but failed


///////////////////////////////////////////////////////////////////////////////////////////////

Yeah, PDAs can't sign from the client (only their deriving program can sign for them)


///////////////////////////////////////////////////////////////////////////////////////////////

surely there's a simpler solution
what are you trying to do that it's so important you need to use partially signed transactions?


///////////////////////////////////////////////////////////////////////////////////////////////

Ah that makes sense now, thank you!
The command to deploy the IDL is separate from the command to deploy the program itself
Not all programs put their IDL on-chain
I have a question about using ``Program.at()`` and the IDL of a program, I noticed for some programs an IDL is retrieved and parsed but for some it will return this error: 

``anchorpy.error.IdlNotFoundError: IDL not found for program``

Is there a way to find the IDL for a program if that error is returned? or was the program intentionally built that way to not return an IDL?


///////////////////////////////////////////////////////////////////////////////////////////////

i thought i found one but it turned out it had unsupported types inside the tuple üò¢
üî•üî•üî•üî•ü§ù
also there is experimental support for tuple enum variants but i didn't actually find a relevant example of those in the wild
new release! Now you can still load the program when the IDL has unsupported types in it. This is mainly of interest to <@!468160298877059082>


///////////////////////////////////////////////////////////////////////////////////////////////

